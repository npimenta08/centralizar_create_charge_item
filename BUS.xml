<channelGroup version="3.12.0">
  <id>b5895802-c187-45d7-8d06-c52f9f7842f8</id>
  <name>BUS</name>
  <revision>13</revision>
  <lastModified>
    <time>1730398683997</time>
    <timezone>Europe/Lisbon</timezone>
  </lastModified>
  <description>BUS Message Transformer</description>
  <channels>
    <channel version="3.12.0">
      <id>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</id>
      <nextMetaDataId>10</nextMetaDataId>
      <name>BUS_CREATE_MCDT_PRESCRIPTION_OUT</name>
      <description>Descrição:
Este BUS, permite criar regras específicas para integraçao de prescriçoes de MCDTs

Documentação:
https://b-simple.atlassian.net/wiki/x/BYBXEQ

Versão:
2.0.0
	ChangeLog:
	1.1.1 - versão com a construção e comunicação do ChargeItem intracanal.
	2.0.0 - reestruturação do canal para centralizar a lógica de construção do ChargeItem no canal FUNC_CREATE_CHARGE_ITEM

Dependências:
- generateLogMsg()
- Dateutc()

Canais interligados:
- FUNC_CREATE_CHARGE_ITEM

Variáveis de ambiente:
- FhirServer_CUFBUS_Host
- FhirServer_CUFBUS_User
- FhirServer_CUFBUS_Pass</description>
      <revision>81</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Bundle</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var mapping;

try {
    mapping = msg;
    msg = (sourceMap.get(&apos;reprocessed&apos;) == true) ? JSON.parse($(&apos;rawMessage&apos;)) : $(&apos;rawMessage&apos;);
} catch (e) {
    mapping = &apos;&apos;;
}

channelMap.put(&apos;Bundle&apos;, validate(JSON.stringify(mapping), &apos;&apos;, new Array()));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Logger</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var encounter = msg[&apos;visitaIntRefExt&apos;];
//channelMap.put(&apos;visita&apos;, encounter);

var mappingVisita=&apos;&apos;;
try {
    for (var i=0; i &lt; msg[&apos;episodioIdentificadores&apos;].length ; i++) {
    		if (msg[&apos;episodioIdentificadores&apos;][i][&apos;sistemaCodificador&apos;].toString().toLowerCase() == &quot;encounter.id&quot;) {
    			mappingVisita = msg[&apos;episodioIdentificadores&apos;][i][&apos;codigo&apos;].toString();
    			break;
    		}
    }
} catch (e) {
    mappingVisita = &apos;&apos;;
}

if (mappingVisita == &apos;&apos; &amp;&amp; encounter){
	mappingVisita = encounter;
}

channelMap.put(&apos;visita&apos;, validate(mappingVisita, &apos;&apos;, new Array()));

var doenteId = msg[&apos;doente&apos;][&apos;numSequencial&apos;];
channelMap.put(&apos;doenteId&apos;, validate(doenteId, &apos;&apos;, new Array()));

var nomeDoente = msg[&apos;doente&apos;][&apos;nomeDoente&apos;];
channelMap.put(&apos;nomeDoente&apos;, nomeDoente);

var requisicaoId = msg[&apos;requisicao&apos;][&apos;requisicaoId&apos;];
channelMap.put(&apos;requisicaoId&apos;, requisicaoId);

var requisicaoRefExt = msg[&apos;requisicao&apos;][&apos;requisicaoRefExt&apos;];
channelMap.put(&apos;requisicaoRefExt&apos;, requisicaoRefExt);

var hospitalRefExt = msg[&apos;episodio&apos;][&apos;servicoRefExt&apos;];
channelMap.put(&apos;hospitalRefExt&apos;, hospitalRefExt);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Custom Rules - Trigger ChargeItem</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>if (msg[&apos;requisicao&apos;][&apos;anulado&apos;] == true){
	channelMap.put(&apos;evento&apos;, &quot;CancelPrescriptionExternal&quot;);
	channelMap.put(&apos;submissaoSistExterno&apos;, false); //não será para faturar (i.e, enviar CI como execução para o sistema externo)
	
} else {
	var submissaoSistExterno = false;
	
	/* Prioridade Default: urgent = normal */
	var prioridadeRefExt = msg[&apos;requisicao&apos;][&apos;prioridadeRefExt&apos;] != null ? msg[&apos;requisicao&apos;][&apos;prioridadeRefExt&apos;] : &apos;urgent&apos;;
	
	var exames = []; 
	if (prioridadeRefExt.equals(&apos;stat&apos;)){ // Rule: Se a prioridade é via verde (stat) e o serviço executante não é &quot;Patologia Clínica&quot;, então deve ser criada uma mensagem de &quot;ChargeItem&quot;
		
		if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ){
			for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;]); i++) {
	
				if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;faturavel&apos;] != false &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdServicoExecutanteRefExt&apos;] != &quot;12&quot; ){ // Patologia Clínica
					exames.push(msg[&apos;requisicao&apos;][&apos;exames&apos;][i]);
				}
			}
			msg[&apos;requisicao&apos;][&apos;exames&apos;] = exames;
		}
	
		if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length != 0){
			// tem exames de Patologia Clinica, neste caso dispara o ChargeItem
			submissaoSistExterno = true;
		}
	} else {
	
		if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ){
			for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;]); i++) {
				if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;faturavel&apos;] != false &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdServicoExecutanteRefExt&apos;] == &quot;17&quot; ){ // Anatomia Patológica
					exames.push(msg[&apos;requisicao&apos;][&apos;exames&apos;][i]);
				}
			}
			msg[&apos;requisicao&apos;][&apos;exames&apos;] = exames;
	
			if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length != 0){
				// tem exames que nao sao de anatomia patológica, neste caso dispara o ChargeItem
				submissaoSistExterno = true;
			}
			
		}
	}
	channelMap.put(&apos;submissaoSistExterno&apos;, submissaoSistExterno);
	if (submissaoSistExterno) {
		channelMap.put(&apos;evento&apos;, &quot;CreateAndExecutePrescriptionExternal&quot;);
	} else {
		channelMap.put(&apos;evento&apos;, &quot;CreatePrescriptionExternal&quot;);
	}
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">ewogICAgInRpcG8iOiBudWxsLAogICAgImhvc3BpdGFsUmVmRXh0IjogbnVsbCwKICAgICJ2aXNpdGFJbnRSZWZFeHQiOiBudWxsLAogICAgImRvZW50ZSI6IHsKICAgICAgICAibnVtUHJvY2Vzc28iOiBudWxsLAogICAgICAgICJudW1TZXF1ZW5jaWFsIjogbnVsbCwKICAgICAgICAidGlwb0RvZW50ZSI6IG51bGwsCiAgICAgICAgIm5vbWVEb2VudGUiOiBudWxsLAogICAgICAgICJkYXRhTmFzY2ltZW50byI6IG51bGwsCiAgICAgICAgInNleG9SZWZFeHQiOiBudWxsLAogICAgICAgICJjb250YWN0b1RlbGVmb25lIjogbnVsbCwKICAgICAgICAiY29udGFjdG9UZWxlbW92ZWwiOiBudWxsLAogICAgICAgICJjb250YWN0b0VtYWlsIjogbnVsbCwKICAgICAgICAibmFjaW9uYWxpZGFkZVJlZkV4dCI6IG51bGwsCiAgICAgICAgIm1vcmFkYVJ1YSI6IG51bGwsCiAgICAgICAgIm1vcmFkYUNpZGFkZSI6IG51bGwsCiAgICAgICAgIm1vcmFkYUxvY2FsaWRhZGUiOiBudWxsLAogICAgICAgICJtb3JhZGFDb2RpZ29Qb3N0YWwiOiBudWxsCiAgICB9LAogICAgImVwaXNvZGlvIjogewogICAgICAgICJlcGlzb2Rpb1JlZkV4dCI6IG51bGwsCiAgICAgICAgInRpcG9FcGlzb2Rpb1JlZkV4dCI6IG51bGwsCiAgICAgICAgInNlcnZpY29SZWZFeHQiOiBudWxsLAogICAgICAgICJzZXJ2aWNvRGVzY3IiOiBudWxsLAogICAgICAgICJjYW1hUmVmRXh0IjogbnVsbCwKICAgICAgICAiZGF0YSI6IG51bGwKICAgIH0sCiAgICAicmVxdWlzaWNhbyI6IHsKICAgICAgICAiY3JpYXIiOiB0cnVlLAogICAgICAgICJyZXF1aXNpY2FvSWQiOiBudWxsLAogICAgICAgICJyZXF1aXNpY2FvUmVmRXh0IjogbnVsbCwKCQkiaWRlbnRpZmljYWRvclNlcXVlbmNpYWxVbmljbyI6IG51bGwsCiAgICAgICAgImVzdGFkb1JlZkV4dCI6IG51bGwsCiAgICAgICAgImRhdGFDcmlhY2FvIjogbnVsbCwKICAgICAgICAiZGF0YVByZXRlbmRpZGEiOiBudWxsLAogICAgICAgICJhbnVsYWRvIjogZmFsc2UsCiAgICAgICAgInByaW9yaWRhZGVSZWZFeHQiOiBudWxsLAoJCSJpbmZvQ2xpbmljYUdlcmFsIjogbnVsbCwKCQkib2JzUmVxIjogbnVsbCwKICAgICAgICAiZXhhbWVzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWRlbnRpZmljYWRvclNlcXVlbmNpYWxVbmljb0V4YW1lIiA6IG51bGwsCiAgICAgICAgICAgICAgICAiZXhhbWVSZWZFeHQiOiBudWxsLAogICAgICAgICAgICAgICAgImNkRXhhbWVSZWZFeHQiOiBudWxsLAogICAgICAgICAgICAgICAgImNkRXhhbWVEZXNjciI6IG51bGwsCiAgICAgICAgICAgICAgICAiY2RTZXJ2aWNvRXhlY3V0YW50ZUlkIjogbnVsbCwKICAgICAgICAgICAgICAgICJjZFNlcnZpY29FeGVjdXRhbnRlRGVzY3IiOiBudWxsLAogICAgICAgICAgICAgICAgImNkU2Vydmljb0V4ZWN1dGFudGVSZWZFeHQiOiBudWxsLAogICAgICAgICAgICAgICAgImNkRXNwZWNpYWxpZGFkZVJlZkV4dCI6IG51bGwsCiAgICAgICAgICAgICAgICAiY2RFc3BlY2lhbGlkYWRlRGVzY3IiOiBudWxsLAogICAgICAgICAgICAgICAgImV4YW1lRXN0YWRvUmVmRXh0IjogbnVsbCwKICAgICAgICAgICAgICAgICJhbnVsYWRvIjogZmFsc2UsCgkJCQkiZmF0dXJhdmVsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJkYXRhQ3JpYWNhbyI6IG51bGwsCiAgICAgICAgICAgICAgICAidXRDcmlhY2FvSWQiOiBudWxsLAogICAgICAgICAgICAgICAgImRhdGFBbHQiOiBudWxsLAogICAgICAgICAgICAgICAgInV0QWx0SWQiOiBudWxsLAogICAgICAgICAgICAgICAgImRhdGFFeGFtZUVzdGFkbyI6IG51bGwsCgkJCQkicHJpb3JpZGFkZVJlZkV4dCI6IG51bGwsCgkJCQkiZXhhbWVPYnMiOiBudWxsLAogICAgICAgICAgICAgICAgImFuYXRvbWlhUGF0b2xvZ2ljYSI6IG51bGwsCiAgICAgICAgICAgICAgICAiYXV0b3BzaWEiOiBudWxsLAogICAgICAgICAgICAgICAgImNpdG9sb2dpYUdpbmVjb2xvZ2ljYSI6IG51bGwsCiAgICAgICAgICAgICAgICAiY2l0b2xvZ2lhTmFvR2luZWNvbG9naWNhIjogbnVsbCwKICAgICAgICAgICAgICAgICJoaXN0b2xvZ2lhIjogbnVsbCwKICAgICAgICAgICAgICAgICJtZnIiOiBudWxsLAogICAgICAgICAgICAgICAgInJldmlzYW9FeGFtZSIgOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInV0aWxpemFkb3JlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAgICJpZCI6IG51bGwsCiAgICAgICAgICAgICJsb2dpbiI6IG51bGwsCiAgICAgICAgICAgICJub21lIjogbnVsbCwKICAgICAgICAgICAgIm51bU1lY2Fub2dyYWZpY28iOiBudWxsLAogICAgICAgICAgICAibnVtT3JkZW0iOiBudWxsLAogICAgICAgICAgICAibnVtRnVuY2lvbmFyaW8iOiBudWxsLAogICAgICAgICAgICAicGVyZmlsIjogbnVsbCwKICAgICAgICAgICAgImludFJlZkV4dCI6IG51bGwKICAgICAgICB9CiAgICBdLAogICAgImhvc3BpdGFsSWQiOiBudWxsLAogICAgImRvZW50ZUlkIjogbnVsbCwKICAgICJlcGlzb2Rpb0lkIjogbnVsbCwKICAgICJlcGlzb2Rpb0Jsb2NvSWQiOiBudWxsLAogICAgImVwaXNvZGlvVUNJSWQiOiBudWxsLAogICAgImVwaXNvZGlvQ29uc3VsdGFFeHRlcm5hSWQiOiBudWxsLAogICAgInRyYW5zZmVyZW5jaWFJZCI6IG51bGwsCiAgICAic2Vydmljb0lkIjogbnVsbCwKICAgICJ1dGlsaXphZG9yZXNJZHMiOiBudWxsCiAgCn0=</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>8</metaDataId>
          <name>Send BUS</name>
          <properties class="com.mirth.connect.connectors.fhir.shared.FhirDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>true</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>8</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host>${FhirServer_CUFBUS_Host}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>POST</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>true</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username>${FhirServer_CUFBUS_User}</username>
            <password>${FhirServer_CUFBUS_Pass}</password>
            <content>${Bundle}</content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
            <capabilitiesURL></capabilitiesURL>
            <systemInteraction>false</systemInteraction>
            <resource>Bundle</resource>
            <interaction>create</interaction>
            <operationScopeInstance>false</operationScopeInstance>
            <path>${FhirServer_CUFBUS_Host}/Bundle</path>
            <pathVariables/>
            <usingBuilder>false</usingBuilder>
            <modelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
              <usingBuilder>true</usingBuilder>
              <properties class="linked-hash-map">
                <entry>
                  <string>resourceType</string>
                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    <enabled>true</enabled>
                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                      <stringValue>Bundle</stringValue>
                    </properties>
                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                </entry>
                <entry>
                  <string>type</string>
                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    <enabled>false</enabled>
                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                      <stringValue>document</stringValue>
                      <usingEnum>true</usingEnum>
                    </properties>
                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                </entry>
              </properties>
            </modelProperties>
            <fhirVersion>R4</fhirVersion>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Adaptar p/ FUNC_CREATE_CHARGE_ITEM</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// falta submissaoSistExterno
msg[&apos;submissaoSistExterno&apos;] = ( String(channelMap.get(&apos;submissaoSistExterno&apos;)) == &apos;false&apos;); //para ficar boolean</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Get ChargeItems from FUNC_CREATE_CHARGE_ITEM</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ) { // só se adicionam CIs ao CarePlan se existirem exames a explorar

	var Bundle = JSON.parse($(&apos;Bundle&apos;));
	
	var routingResp = router.routeMessageByChannelId(&quot;74dbb502-8da5-45ee-90ed-3ccc48afe44c&quot;, JSON.stringify(msg)); // FUNC_CREATE_CHARGE_ITEM
	if (routingResp != null &amp;&amp; routingResp.getStatus() == Status.valueOf(&quot;SENT&quot;) ) {
		
		// ter em atenção que resource é uma lista (resource:[]) na entrada relativa ao ChargeItem!
		channelMap.put(&apos;BundleResponse&apos;, routingResp.getMessage()); //debugging
		
		BundleResp = JSON.parse( routingResp.getMessage() );
		if (BundleResp[&apos;entry&apos;].length == 2) { //existem CIs para ser adicionados (vem MessageHader + lista de CIs)
			if (typeof Bundle[&apos;entry&apos;][1][&apos;resource&apos;][&apos;contained&apos;] == &apos;undefined&apos;) { // verifica se Careplan.contained já existe; caso não exista, cria vazio para adicionar CIs em baixo
				Bundle[&apos;entry&apos;][1][&apos;resource&apos;][&apos;contained&apos;] = [];
			}
			var chargeItemListIds = [];
			for (var i=0; i&lt; BundleResp[&apos;entry&apos;][1][&apos;resource&apos;].length; i++) { //lista de CIs
				Bundle[&apos;entry&apos;][1][&apos;resource&apos;][&apos;contained&apos;].push(BundleResp[&apos;entry&apos;][1][&apos;resource&apos;][i]); // adicionar CI à prescrição (Bundle.contained)
				chargeItemListIds.push(BundleResp[&apos;entry&apos;][1][&apos;resource&apos;][i][&apos;id&apos;]);
			}
			channelMap.put(&apos;Bundle&apos;, JSON.stringify(Bundle));
			try {
				channelMap.put(&apos;bundleId&apos;, Bundle.id);
				channelMap.put(&apos;chargeItemListIds&apos;, JSON.stringify(chargeItemListIds));
				
			} catch (error) {
				channelMap.put(&apos;erroCustomMetadata&apos;, error.toString());
			}
		}
		
	} else {
		try {
			var erroRouting = routingResp.getError() != &quot;&quot; ? routingResp.getError() : routingResp.getMessage();
			channelMap.put(&apos;erroRouting&apos;, erroRouting);
		} catch (error2) {
			;
		}
	}

}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICAgInRpcG8iOiBudWxsLAogICAgImhvc3BpdGFsUmVmRXh0IjogbnVsbCwKICAgICJ2aXNpdGFJbnRSZWZFeHQiOiBudWxsLAogICAgImRvZW50ZSI6IHsKICAgICAgICAibnVtUHJvY2Vzc28iOiBudWxsLAogICAgICAgICJudW1TZXF1ZW5jaWFsIjogbnVsbCwKICAgICAgICAidGlwb0RvZW50ZSI6IG51bGwsCiAgICAgICAgIm5vbWVEb2VudGUiOiBudWxsLAogICAgICAgICJkYXRhTmFzY2ltZW50byI6IG51bGwsCiAgICAgICAgInNleG9SZWZFeHQiOiBudWxsLAogICAgICAgICJjb250YWN0b1RlbGVmb25lIjogbnVsbCwKICAgICAgICAiY29udGFjdG9UZWxlbW92ZWwiOiBudWxsLAogICAgICAgICJjb250YWN0b0VtYWlsIjogbnVsbCwKICAgICAgICAibmFjaW9uYWxpZGFkZVJlZkV4dCI6IG51bGwsCiAgICAgICAgIm1vcmFkYVJ1YSI6IG51bGwsCiAgICAgICAgIm1vcmFkYUNpZGFkZSI6IG51bGwsCiAgICAgICAgIm1vcmFkYUxvY2FsaWRhZGUiOiBudWxsLAogICAgICAgICJtb3JhZGFDb2RpZ29Qb3N0YWwiOiBudWxsCiAgICB9LAogICAgImVwaXNvZGlvIjogewogICAgICAgICJlcGlzb2Rpb1JlZkV4dCI6IG51bGwsCiAgICAgICAgInRpcG9FcGlzb2Rpb1JlZkV4dCI6IG51bGwsCiAgICAgICAgInNlcnZpY29SZWZFeHQiOiBudWxsLAogICAgICAgICJzZXJ2aWNvRGVzY3IiOiBudWxsLAogICAgICAgICJjYW1hUmVmRXh0IjogbnVsbCwKICAgICAgICAiZGF0YSI6IG51bGwKICAgIH0sCiAgICAicmVxdWlzaWNhbyI6IHsKICAgICAgICAiY3JpYXIiOiB0cnVlLAogICAgICAgICJyZXF1aXNpY2FvSWQiOiBudWxsLAogICAgICAgICJyZXF1aXNpY2FvUmVmRXh0IjogbnVsbCwKCQkiaWRlbnRpZmljYWRvclNlcXVlbmNpYWxVbmljbyI6IG51bGwsCiAgICAgICAgImVzdGFkb1JlZkV4dCI6IG51bGwsCiAgICAgICAgImRhdGFDcmlhY2FvIjogbnVsbCwKICAgICAgICAiZGF0YVByZXRlbmRpZGEiOiBudWxsLAogICAgICAgICJhbnVsYWRvIjogZmFsc2UsCiAgICAgICAgInByaW9yaWRhZGVSZWZFeHQiOiBudWxsLAoJCSJpbmZvQ2xpbmljYUdlcmFsIjogbnVsbCwKCQkib2JzUmVxIjogbnVsbCwKICAgICAgICAiZXhhbWVzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWRlbnRpZmljYWRvclNlcXVlbmNpYWxVbmljb0V4YW1lIiA6IG51bGwsCiAgICAgICAgICAgICAgICAiZXhhbWVSZWZFeHQiOiBudWxsLAogICAgICAgICAgICAgICAgImNkRXhhbWVSZWZFeHQiOiBudWxsLAogICAgICAgICAgICAgICAgImNkRXhhbWVEZXNjciI6IG51bGwsCiAgICAgICAgICAgICAgICAiY2RTZXJ2aWNvRXhlY3V0YW50ZUlkIjogbnVsbCwKICAgICAgICAgICAgICAgICJjZFNlcnZpY29FeGVjdXRhbnRlRGVzY3IiOiBudWxsLAogICAgICAgICAgICAgICAgImNkU2Vydmljb0V4ZWN1dGFudGVSZWZFeHQiOiBudWxsLAogICAgICAgICAgICAgICAgImNkRXNwZWNpYWxpZGFkZVJlZkV4dCI6IG51bGwsCiAgICAgICAgICAgICAgICAiY2RFc3BlY2lhbGlkYWRlRGVzY3IiOiBudWxsLAogICAgICAgICAgICAgICAgImV4YW1lRXN0YWRvUmVmRXh0IjogbnVsbCwKICAgICAgICAgICAgICAgICJhbnVsYWRvIjogZmFsc2UsCgkJCQkiZmF0dXJhdmVsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJkYXRhQ3JpYWNhbyI6IG51bGwsCiAgICAgICAgICAgICAgICAidXRDcmlhY2FvSWQiOiBudWxsLAogICAgICAgICAgICAgICAgImRhdGFBbHQiOiBudWxsLAogICAgICAgICAgICAgICAgInV0QWx0SWQiOiBudWxsLAogICAgICAgICAgICAgICAgImRhdGFFeGFtZUVzdGFkbyI6IG51bGwsCgkJCQkicHJpb3JpZGFkZVJlZkV4dCI6IG51bGwsCgkJCQkiZXhhbWVPYnMiOiBudWxsLAogICAgICAgICAgICAgICAgImFuYXRvbWlhUGF0b2xvZ2ljYSI6IG51bGwsCiAgICAgICAgICAgICAgICAiYXV0b3BzaWEiOiBudWxsLAogICAgICAgICAgICAgICAgImNpdG9sb2dpYUdpbmVjb2xvZ2ljYSI6IG51bGwsCiAgICAgICAgICAgICAgICAiY2l0b2xvZ2lhTmFvR2luZWNvbG9naWNhIjogbnVsbCwKICAgICAgICAgICAgICAgICJoaXN0b2xvZ2lhIjogbnVsbCwKICAgICAgICAgICAgICAgICJtZnIiOiBudWxsLAogICAgICAgICAgICAgICAgInJldmlzYW9FeGFtZSIgOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInV0aWxpemFkb3JlcyI6IFsKICAgICAgICB7CiAgICAgICAgICAgICJpZCI6IG51bGwsCiAgICAgICAgICAgICJsb2dpbiI6IG51bGwsCiAgICAgICAgICAgICJub21lIjogbnVsbCwKICAgICAgICAgICAgIm51bU1lY2Fub2dyYWZpY28iOiBudWxsLAogICAgICAgICAgICAibnVtT3JkZW0iOiBudWxsLAogICAgICAgICAgICAibnVtRnVuY2lvbmFyaW8iOiBudWxsLAogICAgICAgICAgICAicGVyZmlsIjogbnVsbCwKICAgICAgICAgICAgImludFJlZkV4dCI6IG51bGwKICAgICAgICB9CiAgICBdLAogICAgImhvc3BpdGFsSWQiOiBudWxsLAogICAgImRvZW50ZUlkIjogbnVsbCwKICAgICJlcGlzb2Rpb0lkIjogbnVsbCwKICAgICJlcGlzb2Rpb0Jsb2NvSWQiOiBudWxsLAogICAgImVwaXNvZGlvVUNJSWQiOiBudWxsLAogICAgImVwaXNvZGlvQ29uc3VsdGFFeHRlcm5hSWQiOiBudWxsLAogICAgInRyYW5zZmVyZW5jaWFJZCI6IG51bGwsCiAgICAic2Vydmljb0lkIjogbnVsbCwKICAgICJ1dGlsaXphZG9yZXNJZHMiOiBudWxsCiAgCn0=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>FHIR Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>9</metaDataId>
          <name>Send to SEND_CHARGE_ITEM</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>true</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <script>theBundle = JSON.parse($(&apos;BundleResponse&apos;)); // Bundle retornado pelo canal FUNC_CREATE_CHARGE_ITEM

if (typeof (theBundle[&apos;entry&apos;][1] ) != &apos;undefined&apos;){
	for (var i = 0; i &lt; theBundle[&apos;entry&apos;][1][&apos;resource&apos;].length; i++ ){ // lista de ChargeItems criados (ou apenas uma lista com um CI)
		logger.info(&quot;entrei no ciclo&quot;);

		//var chargeItemList = [];
		if (theBundle[&apos;entry&apos;][1][&apos;resource&apos;][i][&apos;resourceType&apos;] == &apos;ChargeItem&apos;){
			var newBundle = JSON.parse(JSON.stringify(theBundle)); // deepcopy do theBundle
			newBundle.id = UUIDGenerator.getUUID();
			newBundle.entry = [];

			// MessageHeader
			var newMsgheader = JSON.parse(JSON.stringify(theBundle[&apos;entry&apos;][0])); // deepcopy do MessageHeader p/ corrigir MessageHeader.focus
			var focusList = [];
			var focusObj = {};
			focusObj.reference = &quot;ChargeItem/&quot; + theBundle[&apos;entry&apos;][1][&apos;resource&apos;][i][&apos;id&apos;];
			focusList.push(focusObj);
			newMsgheader.resource.focus = focusList;
			newBundle.entry.push(newMsgheader);

			// ChargeItem
			var node = {};
			node.resource = theBundle[&apos;entry&apos;][1][&apos;resource&apos;][i]; // ChargeItem atual em analise da lista
			newBundle.entry.push(node);

			//router.routeMessage(&apos;SEND_CHARGE_ITEM&apos;, new RawMessage(JSON.stringify(newBundle), null, {msgId: $(&apos;msgId&apos;)}) );
			logger.info(&quot;vou enviar SEND_CHARGE_ITEM&quot;);
			var result = router.routeMessageByChannelId(&apos;98336369-69c8-4249-abb8-7479f97c4e58&apos;, JSON.stringify(newBundle));
			if (result.getStatus() == Status.valueOf(&quot;ERROR&quot;) ) { // ?? verificar se funciona!!
				var errorMsg = result.getError() != &quot;&quot; ? result.getError() : result.getMessage();
				response = Response(Status.ERROR, &quot;Erro = &quot; + errorMsg);
				return response;
			}
		}
	}	
}
response = Response(Status.SENT, $(&apos;theBundle&apos;));
return response;

</script>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>if (channelMap.get(&apos;BundleResponse&apos;) != null ) {
	return true;
}
return false;</script>
              </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
            </elements>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
logger.info(generateLogMsg(&quot;bus&quot;, message, null, null, null, null, null));
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>false</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>VISITA</name>
            <type>STRING</type>
            <mappingName>visita</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>DOENTEID</name>
            <type>STRING</type>
            <mappingName>doenteId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NOMEDOENTE</name>
            <type>STRING</type>
            <mappingName>nomeDoente</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>REQUISICAOID</name>
            <type>STRING</type>
            <mappingName>requisicaoId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>REQUISICAOREFEXT</name>
            <type>STRING</type>
            <mappingName>requisicaoRefExt</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>HOSPITALREFEXT</name>
            <type>STRING</type>
            <mappingName>hospitalRefExt</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>BUNDLEID</name>
            <type>STRING</type>
            <mappingName>bundleId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CHARGEITEMLISTIDS</name>
            <type>STRING</type>
            <mappingName>chargeItemListIds</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EXECUTADO</name>
            <type>BOOLEAN</type>
            <mappingName>submissaoSistExterno</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTO</name>
            <type>STRING</type>
            <mappingName>evento</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1730904698099</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>60</pruneMetaDataDays>
            <pruneContentDays>60</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>6cc8a9f9-7d96-4990-96a8-0ff41be6b101</id>
            <name>Logger Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089520</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Funções auxiliares para o logging de mensagens dos canais</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>bc286d01-89d0-4a3f-916e-09a25a4e68c7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>68dfb5b9-bb8e-418d-8425-79fe31bd7538</id>
                <name>generateLogMsg</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to build and return a log msg, originating from any channel.
	Documentação função: https://b-simple.atlassian.net/wiki/x/AoACBg
	Documentação Entity e Tags: https://b-simple.atlassian.net/wiki/x/AgB_Bg

	@param theEntity {String} - string that denotes the group of messages the message belongs to, i.e appointment, document, cda, accident, etc.
	@param {Class} message - ImmutableConnectorMessage Class message containing information about all connectors that a
		message passed through
	@param tagsArr {Array} - array of user-defined and relevant tags that should be associated with the message
	@param sourceServer {String} - message&apos;s source app/entity (name of the app or entity responsible for sending the messge to the channel)
	@param destinationServerMap {Map} - Map&lt;int,string&gt; , where the key is the destination&apos;s metadataID and the value is the entity to which such destination&apos;s message was sent to
	@param {Array} sourceMetadataArr - source metadata: metadata associated with the source processing 
	@param {Array} destinationsMetadataArr - destinations metadata: metadata associated with the destinations processing
	@return {Object JSON} message log
*/
function generateLogMsg(theEntity, message, tagsArr, sourceServer, destinationServerMap, sourceMetadataArr, destinationsMetadataMap) {
	if (message == undefined || message == null) {
		logger.info(&quot;sendMsgInfoLogChannel:message --&gt; message argument is mandatory!&quot;);
	} else {
		try {
			var logMsg = new Object();
		
			// messageSummary
			var messageSummaryObj = new Object();
			//messageID
			messageSummaryObj.messageId = message.getConnectorMessages().get(0).getMessageId();
			//messageOriginalID - não funciona ...
			//messageSummaryObj.messageOriginalId = message.getOriginalId();
			//channelID
			messageSummaryObj.channelId = message.getConnectorMessages().get(0).getChannelId();
			//serverID
			messageSummaryObj.serverId = message.getConnectorMessages().get(0).getServerId();
			//channelName
			messageSummaryObj.channelName = message.getConnectorMessages().get(0).getChannelName();
			//lastDeployedDate
			try {
				var controller = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createEngineController();
				var dashboardStatus = controller.getChannelStatus(message.getConnectorMessages().get(0).getChannelId());
				messageSummaryObj.lastDeployedDate = auxCalendarParse(dashboardStatus.getDeployedDate());
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:lastDeployedDate --&gt; &quot; + error.toString());
				messageSummaryObj.lastDeployedDate = null;
			}
			//entity
			messageSummaryObj.entity = theEntity == undefined ? null : theEntity;
			//tags
			messageSummaryObj.tags = (tagsArr == undefined || tagsArr == null) ? new Array() : tagsArr;
			//logDate
			var datestr = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
			var dateUTC = DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
			messageSummaryObj.logDate = dateUTC;
			//status
			var statusObj = new Object();
			statusObj.error = false;
			statusObj.code = null;
			statusObj.message = null;
			try {
				message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName (inclui Source também)
					value = parseInt(value);
					if (value != 0) { // só as destinations é que têm Response relativamente a erros, logo não dá para ir buscar Response de erro na Source (Source =metadataId 0)
						//code - testar no que isto dá! ??
						if (message.getConnectorMessages().get(value).getStatus().toString() == &apos;ERROR&apos;) {
							statusObj.error = true;
							/*
							if (statusObj.code != null) {
								statusObj.code = statusObj.code + &quot;;&quot; + message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							} else {
								statusObj.code = message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							}
							*/
							if (statusObj.message != null) {
								statusObj.message = statusObj.message + &quot;;&quot; + auxGetStatusMessage(value);
							} else {
								statusObj.message = auxGetStatusMessage(value);
							}
						}
					}
				});
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel: messageSummary status --&gt; &quot; + error.toString());
			}
			messageSummaryObj.status = statusObj;
		
			//metaData
			//messageSummaryObj.metaData = (summMetadataArr == undefined || summMetadataArr == null) ? new Array() : summMetadataArr;
			try {
				var listMetadataCol = com.mirth.connect.server.controllers.ChannelController.getInstance().getMetaDataColumns(messageSummaryObj.channelId);
				var metadataColArr = new Array();
				for (var i = 0; i &lt; listMetadataCol.size(); i++) {
					var metaObj = new Object();
					metaObj.name = listMetadataCol.get(i).getName();
					var mappingName = listMetadataCol.get(i).getMappingName();
					metaObj.value = (message.getConnectorMessages().get(0).getChannelMap().get(mappingName) == undefined) ? null : message.getConnectorMessages().get(0).getChannelMap().get(mappingName).toString(); // para ficarem todos como string
					if (metaObj.value != null) {
						metadataColArr.push(metaObj);
					}
				}
				messageSummaryObj.metaData = metadataColArr;
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
				messageSummaryObj.metadata = null;
			}
			
			logMsg.messageSummary = messageSummaryObj;
		
			// ------------------------
			//content
			var contentObj = new Object();
			//content.source
			var sourceObj = new Object();
			//content.source.server
			sourceObj.server = sourceServer == undefined ? null : sourceServer;
			//content.source.status
			sourceObj.status = message.getConnectorMessages().get(0).getStatus().toString();
			//content.source.statusMessage
			sourceObj.statusMessage = auxGetStatusMessage(0);
			//content.source.message
			sourceObj.message = isJSON(message.getConnectorMessages().get(0).getRawData()) ? JSON.parse(message.getConnectorMessages().get(0).getRawData()) : message.getConnectorMessages().get(0).getRawData(); //msg antes de passar pelo preprocessor e antes de ser mudada no Transformer
			//content.source.dataType
			sourceObj.dataType = message.getConnectorMessages().get(0).getRaw().getDataType();
			//content.source.date
			var dateCalendar = message.getConnectorMessages().get(0).getReceivedDate();
			var dateUTC = auxCalendarParse(dateCalendar);
			sourceObj.date = dateUTC;
			//content.source.metadata
			sourceObj.metaData = (sourceMetadataArr == undefined || sourceMetadataArr == null) ? new Array() : sourceMetadataArr;
			//content.source.responseMessage
			if (message.getConnectorMessages().get(0).getResponseData() == null) { // no response
				sourceObj.responseMessage = null;
			} else if (message.getConnectorMessages().get(0).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
				sourceObj.responseMessage = null;
			} else { //houve response 
				sourceObj.responseMessage = isJSON(message.getConnectorMessages().get(0).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(0).getResponseData().getMessage()) : message.getConnectorMessages().get(0).getResponseData().getMessage();
			}
			contentObj.source = sourceObj;
		
			// -------------------------
			//content.destinations
			var destinationsArray = new Array();
			message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName
				value = parseInt(value);
				if (value != 0) { //ignorar Source (metadataId=0)
					//logger.info(&quot;value= &quot; + typeof(value) + &quot; &quot; + value + &quot;;&quot; + &quot;key= &quot; + typeof(key) + &quot; &quot; + key);
					var destinationObj = new Object();
					//content.destinations.server
					if (destinationServerMap != undefined &amp;&amp; destinationServerMap != null) {
						if (destinationServerMap.has(value)) {
							destinationObj.server = destinationServerMap.get(value);
						} else {
							destinationObj.server = null;
						}
					} else {
						destinationObj.server = null;
					}
					//content.destinations.destinationId
					destinationObj.destinationId = value;
					//content.destinations.destinationName
					destinationObj.destinationName = key;
					//content.destinations.status
					destinationObj.status = message.getConnectorMessages().get(value).getStatus().toString();
					//content.destinations.statusMessage
					destinationObj.statusMessage = auxGetStatusMessage(value);
					//content.destinations.message
					try {
						destinationObj.message = isJSON(message.getConnectorMessages().get(value).getEncodedData()) ? JSON.parse(message.getConnectorMessages().get(value).getEncodedData()) : message.getConnectorMessages().get(value).getEncodedData();
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel: destination message --&gt; &quot; + error.toString());
						destinationObj.message = null;
					}
					//logger.info(message.getConnectorMessages().get(value).getMessageContent(ContentType.SENT));
					//content.destinations.dataType
					// destinationObj.dataType = message.getConnectorMessages().get(value).getEncoded().getDataType();
					try {
						var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
						var channel = channelController.getChannelByName(message.getConnectorMessages().get(0).getChannelName().toString());
						var connectors = channel.getDestinationConnectors().toArray();
						// Iterate through the connectors
						for each (var connector in connectors) {
						    // Check if the current connector matches the desired connector name
						    if (connector.getName() == key) {
						    		destinationObj.dataType = connector.getTransformer().getOutboundDataType();
						    		break;
						    }
						}
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
						destinationObj.dataType = null;
					}
					
					//content.destinations.date
					var dateCalendar = message.getConnectorMessages().get(value).getSendDate();
					if (dateCalendar != null) { // destination QUEUED
						var dateUTC = auxCalendarParse(dateCalendar);
						destinationObj.date = dateUTC;
					} else {
						destinationObj.date = null;
					}

					//content.destinations.metaData
					if (destinationsMetadataMap != undefined &amp;&amp; destinationsMetadataMap != null) {
						if (destinationsMetadataMap.has(value)) {
							destinationObj.metaData = destinationsMetadataMap.get(value) == null ? new Array() : destinationsMetadataMap.get(value);
						} else {
							destinationObj.metaData = new Array();
						}
					} else {
						destinationObj.metaData = new Array();
					}
		
					//content.destinations.responseMessage
					if (message.getConnectorMessages().get(value).getResponseData() == null) { // no response
						destinationObj.responseMessage = null;
					} else if (message.getConnectorMessages().get(value).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
						destinationObj.responseMessage = null;
					} else { //houve response
						destinationObj.responseMessage = isJSON(message.getConnectorMessages().get(value).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(value).getResponseData().getMessage()) : message.getConnectorMessages().get(value).getResponseData().getMessage();
					}
					destinationsArray.push(destinationObj);
				}
			});
			contentObj.destinations = destinationsArray;
			
			logMsg.content = contentObj;
			//logger.info(JSON.stringify(logMsg));

			//send it
			return JSON.stringify(logMsg);

			/*
			var respLogChannel = router.routeMessage(&apos;Logs_WHS-OUT&apos;, JSON.stringify(logMsg));
			if (respLogChannel == null || respLogChannel == undefined) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			} else if (respLogChannel.getStatus() == Status.ERROR) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			}
			*/

		} catch (error) {
			logger.info(&quot;sendMsgInfoLogChannel:geral  --&gt; &quot; + error.toString());
		}
	}	
}

function auxCalendarParse(dateCalendar) {
	var theMonth = dateCalendar.get(dateCalendar.MONTH) +1;
	var theMonthStr = theMonth.toString().padStart(2,&apos;0&apos;);
	var datestr = dateCalendar.get(dateCalendar.YEAR).toString() + theMonthStr + dateCalendar.get(dateCalendar.DAY_OF_MONTH).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.HOUR_OF_DAY).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.MINUTE).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.SECOND).toString().padStart(2,&apos;0&apos;);
	return DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
}

function auxGetStatusMessage(connMetadaId) {
	connMessage = message.getConnectorMessages().get(connMetadaId);
	if (connMessage.getStatus().toString() == &quot;ERROR&quot;) {
		if (connMessage.getProcessingError() != &quot;&quot;) {
			return connMessage.getProcessingError();
		} else if (connMessage.getPostProcessorError() != &quot;&quot;) {
			return connMessage.getPostProcessorError();
		} else if (connMessage.getResponseError() != &quot;&quot;) {
			return connMessage.getResponseError();
		}
	}
	return null;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>09ed46d2-0cff-406e-a532-a7a3f76a3e0b</id>
            <name>RabbitMQ Helper Function</name>
            <revision>4</revision>
            <lastModified>
              <time>1730914089529</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Functions defined in order to assist reading and writing into a RabbitMQ queue</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>e1072519-3eb3-465f-8465-c45d5ef958a5</id>
                <name>queueDeclareRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790901</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to make a queue declaration

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {String} inExchangeType - RabbitMQ exchange&apos;s type
	@param {String} inQueueName - RabbitMQ queue&apos;s name
	@param {String} inRoutingKey - exchange&apos;s routing key
	@return no return 
*/
function queueDeclareRMQ(inExchangeName, inExchangeType, inQueueName, inRoutingKey) {
	//if (!inExchangeName || !inExchangeType || !inQueueName) {
		importPackage(com.mirth.basicproducer);
		broker = new BasicConsumer();
		broker.queueDeclare($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inExchangeType, inQueueName, inRoutingKey);
	//}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>17d1585c-595a-495f-bc6d-7f6667b0279c</id>
                <name>readQueueRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789866</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function built for helping to read messages from a RabbitMQ&apos;s exchange

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {Boolean} inAutoAck - boolean for automatic ackowledgment
	@param {Boolean} inCommit - boolean for commiting
	@return {String} return RabbitMQ message&apos;s content
*/
function readQueueRMQ(inExchangeName, inAutoAck, inCommit) {
	//if (!inExchangeName || typeof inAutoAck != &quot;boolean&quot; || typeof inCommit != &quot;boolean&quot;) {
		importPackage(com.mirth.basicproducer);
		
		broker = new BasicConsumer();
		jsonString = broker.getMessage($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inAutoAck, inCommit);
	
		if (jsonString != null){
			mensagem = JSON.parse(jsonString);
			JSON.stringify(mensagem[&apos;message&apos;]);
			return JSON.stringify(mensagem[&apos;message&apos;]);
		}
	//}
	return null;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0689aac9-a462-4b03-ac79-5cfd1824b5e4</id>
                <name>writeQueueRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789047</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function built for helping to write messages to a RabbitMQ&apos;s exchange

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {String} inMessageType - custom message type
	@param {String} inMessagePayload - payload to be sent
	@return {Object} return operation result (w/ statusCode and statusText)
*/
function writeQueueRMQ(inExchangeName, inMessageType, inMessagePayload, inRoutingKey) {
	importPackage(com.mirth.basicproducer);
	// Import internal code template
	var getCurrentDateUTC = globalMap.get(&quot;getCurrentDateUTC&quot;);
	
	result = new Object();

	if (!inExchangeName || !inMessageType || !inMessagePayload) {
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;At least one input parameter is a falsy value.&quot;;
		return result;
	} else if (!isJSON(inMessagePayload)) { // ?? confirmar se é sempre JSON que vai ou se pode ir outra coisa
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;Message payload to be sent is not a string in JSON format.&quot;;
		return result;
	}
	
	try{
			
		envelop = new Object();
		
		envelop.MessageId = UUIDGenerator.getUUID();
		envelop.DestinationAddress = &quot;rabbitmq://&quot; + $(&apos;RabbitMqHost&apos;) + &quot;:&quot; + $(&apos;RabbitMqPort&apos;) + &quot;/&quot; + inExchangeName;
		messageType = [&quot;urn:message:&quot; + inMessageType];
		envelop.MessageType = messageType;
		
		envelop.Message = JSON.parse(inMessagePayload);
		
		envelop.SentTime = getCurrentDateUTC();
		
		host = new Object();
		host.MachineName = $(&apos;localAddress&apos;);
		host.ProcessName = channelName;
		
		envelop.Host = host;
	
		try{
			producer = new BasicProducer();
			if (typeof inRoutingKey == &quot;undefined&quot; || inRoutingKey == null) {
				producer.produce($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, JSON.stringify(envelop));	
			} else {
				producer.produceToRoutingKey($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inRoutingKey, JSON.stringify(envelop));
			}
			result.statusCode = &quot;200&quot;;
			result.statusText = JSON.stringify(envelop);
			return result;
		}catch(e){
			result.statusCode = &quot;400&quot;;
			result.statusText = &quot;Fail to produce to rabbitMQ, message will be reprocessed | &quot; + e;
			return result;
		}
		
	}catch(exception) {
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;Fail to build and communicate message to rabbitMQ (internal error) | &quot; + exception;
		return result;	
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>fe90c913-c365-44d1-b309-7c4dae7d9d9a</id>
            <name>Utils</name>
            <revision>6</revision>
            <lastModified>
              <time>1730893909835</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Utils functions for Mirth Channels</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>9d0737dd-b85f-4e05-bd6e-b83828e87bdf</id>
                <name>addIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792349</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Aidiciona um objeto relativo a um identificador (Ex: {&quot;sistemaCodificador&quot;:&quot;Appointment.id&quot;, &quot;codigo&quot;: 1111} ) a uma lista de identificadores

	@param {String} sistCodificador - nome do sistemaCodificador (ex: &quot;Appointment.id&quot; ou &quot;Encounter.identifier&quot;)
	@param {String} codigo - value relativo ao sistCodificador
	@param {String} listaAdicionar - listagem já existente (ou vazia/null/undefined) de identificadores
	@return {String} return listaIdentificadores
*/
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	var lista;
	try {
		if (listaAdicionar  &amp;&amp; Array.isArray(listaAdicionar)) {
			lista = JSON.parse( JSON.stringify(listaAdicionar));
		} else {
			logger.info(&quot;excecao1&quot;);
			lista= [];
		}
	} catch (err) {
		logger.info(&quot;excecao2&quot; + err.toString());
		lista =  [];
	}
	/*
	if (! Array.isArray(listaAdicionar)) {
		lista = [];
	} else {
		lista = JSON.parse( JSON.stringify(listaAdicionar));
	}
	*/
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			lista.push(obj);
		}
	}
    	return lista;
	
}

/*
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	if (! Array.isArray(listaAdicionar)) {
		listaAdicionar = [];
	}
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			listaAdicionar.push(obj);
		}
	}
    	return listaAdicionar;
	
}
*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83c82ac5-e364-41b2-99cc-6a4ead5eaa37</id>
                <name>callApi</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793110</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Generic code to implement API call

	@param {String} method - http method
	@param {String} url - http url
	@param {String} user - api username
	@param {String} pass - api password
	@return {Object} return api response
*/
function callApi(method, url, user, pass) {
	
	var url = new Packages.java.net.URL(url);
	var connection = url.openConnection();
	connection.setRequestMethod(method);
	
	try {
	  var responseCode = connection.getResponseCode();
	  if (responseCode === Packages.java.net.HttpURLConnection.HTTP_OK) {	//	200
	    var inputStream = connection.getInputStream();
	    var reader = new Packages.java.io.BufferedReader(new Packages.java.io.InputStreamReader(inputStream));
	    var response = &quot;&quot;; // Inicializa a variável response
	
		    while ((line = reader.readLine()) !== null) {
		      response += line;
		    }      
	        reader.close();	      
		   
		   return JSON.parse(response.toString());
	
	    } else {
	        var errorMessage = &quot;Erro na chamada ao Web Service: &quot; +  url + &quot; Código de resposta: &quot; + responseCode;
	        // Trata os casos em que a chamada ao Web Service não foi bem-sucedida        
	        throw new Error(errorMessage);
	    }
	} catch (e) {
	    // Capturar exceção e retornar status e mensagem de erro
	    var errorStatus = connection.getResponseCode();
//	    var errorMessage = e.getMessage();	    
	    throw new Error(errorStatus);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fd200634-44bd-483c-97ab-743c373d4b7a</id>
                <name>checkIfExameEspecial</name>
                <revision>2</revision>
                <lastModified>
                  <time>1730739683915</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo objetivo passa por receber um código identificativo de um exame (ou outro serviço qualquer) e retornar se o mesmo é um exame especial ou não. Para
	tal, a função vai à tabela de catálogo da BD verificar se o código lá existe. Caso haja algum problema de acesso à BD, e de forma opcional, a função tenta aceder
	ao endpoint do sistema externo para fazer a verificação de exame especial.

	@param {String} catalogCode - código de catálogo CUF a ser analisado
	@param {String} externalSysCode - código de catálogo do sistema externo a ser analisado
	@return {Object} return object
*/
function checkIfExameEspecial(catalogCode, externalSysCode) {
	var error = false;
	var errorMsg = null;
	var isExameEspecial = null;
	var resposta = new Object();
	
	// Get a database connection 
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	var selectQuery = &quot;SELECT * FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; WHERE \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; and ativo = true;&quot;;
	try {
		// Execute the SQL query
		result = dbConn.executeCachedQuery(selectQuery);
		if (result.next() ) { // true
			isExameEspecial = true;
		} else { 
			isExameEspecial = false; // false
		}
	} catch (e) {
		error = true;
		logger.info(&quot;e.toString() = &quot; + e.toString());
		errorMsg = e.toString();
	} finally {
	    // Close the database connection
	    dbConn.close();
	}

	//houve erro no acesso à BD, logo tenta aceder ao endpoint do sistema externo para obter essa informação
	if (isExameEspecial == null &amp;&amp; typeof externalSysCode != &apos;undefined&apos;) {
		var httpPostURL = $(&apos;Transactional_CUFBUS_Host&apos;) + &quot;CodeSystem/Service/$lookup&quot;;
		var body = new Object();
		body.resourceType= &quot;Parameters&quot;;
		body.parameter = [{&quot;name&quot;:&quot;code&quot;,&quot;valueCode&quot;:externalSysCode}];
		var authHeader = null
		if ($(&apos;Transactional_CUFBUS_User&apos;) != null &amp;&amp; $(&apos;Transactional_CUFBUS_Pass&apos;) != &apos;&apos;){
			authHeader = apiGenerateBasicAuthHeader($(&apos;Transactional_CUFBUS_User&apos;), $(&apos;Transactional_CUFBUS_Pass&apos;));  
		}
		httpResp = httpPost(httpPostURL,JSON.stringify(body),authHeader);
		
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var parametersRes = JSON.parse(httpResp.responseMessage);
				try {
					if (parametersRes[&apos;resourceType&apos;] == &quot;Parameters&quot;) {
						var checkExameEspecial = null;
						parametersRes[&apos;parameter&apos;].find( function(parameter) {
							if(parameter[&apos;name&apos;] == &quot;property&quot;) {
								parameter[&apos;part&apos;].find( function(part) {
									if (part[&apos;valueCoding&apos;]) {
										if (part[&apos;valueCoding&apos;][&apos;code&apos;] == $(&apos;Catalogo_ServiceCategory_ExameEspecial&apos;)) {
											isExameEspecial = true;
											checkExameEspecial = true;
											return true;
										}
									}
								})
							}
						})
						if (checkExameEspecial == null) { // não encontrou property de exame especial, logo não é exame especial
							isExameEspecial = false;
						}
					} else {
						error = true;
						errorMsg = &quot;A Parameters Resource was expected as a response&quot;;
					}
				} catch (e2) {
					error = true;
					errorMsg = &quot;Error parsing the response from the endpoint &quot; + e2.toString();
				}
			} else {
				error = true;
				errorMsg = &quot;Endpoint response was not JSON&quot;;
			}
		} else {
			error = true;
			errorMsg = httpResp.statusText ? httpResp.statusText : (httpResp.responseMessage ? httpResp.responseMessage : null);;		
		}
	}
	if (isExameEspecial == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg; //string
	} else {
		resposta.statusCode = &quot;200&quot;;
		resposta.responseMessage = isExameEspecial; // boolean
	}
	return resposta;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b53102c9-17cf-431e-b87a-40d08fe73203</id>
                <name>convertDateToTimeStamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793287</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertDateToTimeStamp(date) {

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = &apos;00&apos;;
	var min = &apos;00&apos;;
	var sec = &apos;00&apos;;
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5714586f-45b8-45cb-9af6-fdabfe1bf9b2</id>
                <name>convertTimeStampToDateStr</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787735</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and time &quot;HHmmss&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@param {String} time - time in format &quot;HHmmss&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertTimeStampToDateStr(date, time) {

	if (time.length &lt;= 5){ // left pad
		time = time.padStart(time.length + 1, &apos;0&apos;);
	}

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = time.substring(0, 2);
	var min = time.substring(2, 4);
	var sec = time.substring(4, 6);
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b4455483-c833-4b4e-adb9-c646cad7bcfe</id>
                <name>DateUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791914</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Date to UTC

	@param {String} date - Date string in format &quot;yyyy-MM-ddTHH:mm:ss+SSSS&quot;
	@return {String} return date in UTC &quot;yyyy-MM-ddTHH:mm:ss+Z&quot;
*/
function DateUtc(date, dateFormat) {

     var formatter_hl7 = new java.text.SimpleDateFormat(dateFormat != null ? dateFormat : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss+SSSS&quot;);
     formatter_hl7.setTimeZone(java.util.TimeZone.getTimeZone($(&apos;serverTimeZone&apos;)));
     var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
     formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	return formatter_utc.format(formatter_hl7.parse(date));			
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4fbdd7b8-7dd0-4ba3-ba13-0a8990b4513b</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788357</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8cb44e20-4b8a-48e6-93ae-aa905dbf2445</id>
                <name>generate_HLv2_messageId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788478</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função criadora de id de mensagem HL7 v2 (MSH.10.1) único v5

	@return {String} id unico
*/
function generate_HLv2_messageId(tipo_mensagem) {

	var timestamp = new Date().getTime().toString();
	var timestamp_length = timestamp.length;

	//random remaining characters
	remainder = 20-3-timestamp_length;
	
	// Generate a random number between 0... and 9...
	var randomNumber = Math.floor(Math.random() * Math.pow(10,remainder));
	// Convert the number to a string and pad it with leading zeros if needed
	var formattedNumber = randomNumber.toString().padStart(remainder, &apos;0&apos;);
	
	return timestamp + &quot;-&quot; + tipo_mensagem[0] +&quot;-&quot; + formattedNumber;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b4aa14b-ee5a-464f-b1c8-0917d2ea815c</id>
                <name>getArrayUniqueValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792417</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns unique values from an array

	@param {array} array - array
	@return {array} return unique values from array
*/
function getArrayUniqueValues(array) {
	var uniqueArray = [];
	for (var i = 0; i &lt; array.length; i++) {
	    if (uniqueArray.indexOf(array[i]) === -1) {
	        uniqueArray.push(array[i]);
	    }
	}

	return uniqueArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bd7561e-2fb9-41d1-a8e3-fbeabaf8099a</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793452</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4814b63d-13ac-4097-86e2-22ca3c24eda4</id>
                <name>getFirstName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns first name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getFirstName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[0];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a594fff0-deb4-4d2a-a11e-f39582b42120</id>
                <name>getIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791988</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Extrai da listagem de identificadores o &quot;codigo&quot; associado a um pretendido &quot;sistCodificador&quot;

	@param {String} listaIds - listagem de identificadores onde procurar
	@param {String} sistCodificador - sistemaCodificador a ser procurado na listagem de identificadores
	@return {String} return codigo (ou null, caso não exista)
*/
function getIdentificador(listaIds, sistCodificador) {
	var codigo = null;	
	try{  		
	    	listaIds.find(function(elemento) {
	    		if (elemento.sistemaCodificador){
	    			try { // para o caso de algum dos identificadores estar mal definido não impedir que se extraia a informação pretendida
		        		if (elemento.sistemaCodificador.toLowerCase() == sistCodificador.toLowerCase()){
		          		codigo= elemento.codigo;
		          		return true;
		        		}
	    			} catch (err) {
		        		;
		        	}
	      	}
	    });
    	} catch (ex1){
    		codigo = null;
    	}
	return codigo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f9529854-80ad-450b-ad8a-54a1b63ba9d1</id>
                <name>getLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791292</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns last name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getLastName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[(names.length -1) ];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6ff6cc61-fa90-455a-b9b4-26f12a870f91</id>
                <name>getLocationExameEspecial</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792555</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dada informação sobre o hospital, o código de catálogo de exame especial e a especialidade, retornar qual a localização no pretendido hospital predestinada para
	a ocorrência de exames especiais dessa mesma especialidade

	@param {String} hospitalINTRefExt - INTRefExt do hospital (CMFL, HTEJO, ...)
	@param {String} catalogCode - código de catálogo do exame especial (10058, 20056, ...)
	@param {String} especialidade - especialidade associada ao exame especial (Cardiologia, Oftalmologia, ...)
	@return {String} return {&quot;servico&quot;: &quot;...&quot;, &quot;area&quot;: &quot;...&quot;, &quot;sala&quot;: &quot;...&quot; &quot;cama&quot;: &quot;...&quot;}
*/
function getLocationExameEspecial(hospitalINTRefExt, catalogCode, especialidade) {
	var error = false;
	var errorMsg = null;
	var resposta = new Object();

	var cama = null;
	var sala = null;
	var area = null;
	var servico = null;
	
	if ( !hospitalINTRefExt || !catalogCode || !especialidade ) {
		error = true;
		errorMsg = &quot;Um dos parametros da função é invalido&quot;;
	} else {
	
		var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	
		/* var selectQuery = &quot;SELECT cama, sala, area FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE servico = &apos;&quot; + AAAAAAAAA + &quot;&apos; AND especialidade = &apos;&quot;+ especialidade + &quot;&apos; AND id =&quot;
						+ &quot;(SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where intRefExt = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) LIMIT 1) LIMIT 1;&quot;; */
	
		var selectIdLocalizacaoSQL = &quot;SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) ;&quot;;
	
		var listIdLocalizacao= [];
		try {
			// Execute the SQL query
			result = dbConn.executeCachedQuery(selectIdLocalizacaoSQL); // return javax.sql.rowset.CachedRowSet
			while (result.next()) {
				listIdLocalizacao.push(result.getString(&quot;idLocalizacao&quot;));
			}
		} catch (e) {
			error = true;
			logger.info(&quot;e.toString() = &quot; + e.toString());
			errorMsg = e.toString();
		} finally {
		    // Close the database connection
		    dbConn.close();
		}
		logger.info(&quot;lsita ids localizacao = &quot; +JSON.stringify(listIdLocalizacao));
		

		if (listIdLocalizacao.length == 0){ // não existem idLocalizacao configurados para o exame
			error = true;
			errorMsg = &quot;Não existem idLocalizacao para o código de catálogo &quot; + catalogCode + &quot; e hospital &quot; + hospitalINTRefExt;
		} else {
			var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
			if (listIdLocalizacao.length == 1) { //só existe 1 idLocalizacao, logo não interessa a especialidade porque a localizacao do exame especial é sempre no mesmo local
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id = &apos;&quot; + listIdLocalizacao[0] + &quot;&apos;;&quot;;
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}			
			} else { // existe mais do que uma localização, logo vai diferenceiar por especialidade
				ids = &quot;(&quot;;
				for (var i=0; i&lt; listIdLocalizacao.length; i++) {
				    ids += &quot;&apos;&quot; + listIdLocalizacao[i].toString() + &quot;&apos;,&quot;;
				}
				ids = ids.slice(0,-1) + &quot;)&quot;;
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id in &quot; + ids + &quot; and especialidade = &apos;&quot;+especialidade+ &quot;&apos;;&quot;;
				logger.info(selectInfosSQL);
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}	
			}
		}
	}


	if (error == true  ) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro interno getLocationExameEspecial()&quot;;
	} else if ( cama == null &amp;&amp; sala == null &amp;&amp; area == null  &amp;&amp; servico == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro na query à LocalizacaoExamesEspeciais&quot;;
	}else {
		resposta.statusCode = &quot;200&quot;;
		var respObj = new Object();
		respObj.cama = cama;
		respObj.area = area;
		respObj.sala = sala;
		respObj.servico = servico;
		resposta.responseMessage = respObj;
	}
	return resposta;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>903737fd-9a14-45ea-b3cf-2af18ba88142</id>
                <name>getNumMecanograficoById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791627</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getNumMecanograficoById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.numMecanografico;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6bdd892d-3953-4f68-af96-44ff89434b13</id>
                <name>getPerfilUtilizadorById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789557</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getPerfilUtilizadorById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.perfil;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee58620f-c785-44f2-a4f7-26a8808c4e16</id>
                <name>getPerformerAndDatesRequisicaoMcdts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788016</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Object} accoesList - ...
	@param {Object} dataCriacaoRequisicao - ...
	@param {Object} utilizadoresList - ...
	@return {Object} return description

	(//R = obrigatório)
	--&gt; Formato esperado acoesList: [
          {
            &quot;utilizadorId&quot; : 12284, //R
            &quot;funcao&quot; : 1, //R
            &quot;data&quot; : &quot;2024-05-08T14:41:51.089035Z&quot; //R
          },
          {
            &quot;utilizadorId&quot; : 12284,
            &quot;funcao&quot; : 3,
            &quot;data&quot; : &quot;2024-05-08T14:27:58.349313Z&quot;
          }
        ]

     --&gt; Formato esperado utilizadoresList: [
	    {
	      &quot;id&quot; : 12284,
	      &quot;login&quot; : &quot;MDPIRES&quot;,
	      &quot;nome&quot; : &quot;Marcos Pires&quot;,
	      &quot;numMecanografico&quot; : &quot;263812278&quot;,
	      &quot;numOrdem&quot; : &quot;123&quot;,
	      &quot;numFuncionario&quot; : null,
	      &quot;perfil&quot; : 1,
	      &quot;intRefExt&quot; : null
	    }
	  ]
	
*/
function getPerformerAndDatesRequisicaoMcdts(accoesList,dataCriacaoRequisicao, utilizadoresList) {

	logger.info(&quot;accoesList - &quot; +JSON.stringify(accoesList));
	logger.info(&quot;dataCriacaoRequisicao - &quot; + JSON.stringify(dataCriacaoRequisicao));
	logger.info(&quot;utilizadoresList - &quot; + JSON.stringify(accoesList));
	returnObj = new Object();
	
	var Performer = Lists.list();
	var occurenceDateTime = null;
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(accoesList); j++ ){
	
	      try {
			if (accoesList[j][&apos;funcao&apos;] == 1 /* Relato */){
				dataRelato = accoesList[j][&apos;data&apos;];
			} else if (accoesList[j][&apos;funcao&apos;] == 2 /* Validacao */){
				dataValidacao = accoesList[j][&apos;data&apos;];
			} else {
				occurenceDateTime = dataCriacaoRequisicao;
			}
	       } catch (error) {
	       	logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro nas datas - &quot; + error.toString()); 
	     }
	
		try {
			  Performer.add({
			    function: {
			        coding: [{
			          system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			          code: newStringOrUndefined( accoesList[j][&apos;funcao&apos;] == 3 /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;])) : mapFuncao(accoesList[j][&apos;funcao&apos;]) )
			        }]
			      },
			    actor: {
			      reference: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) ) : null),
			      identifier: {
			        use: newStringOrUndefined(&apos;official&apos;),
			        type: {
			          coding: [{
			            system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
			            code: newStringOrUndefined(&apos;4&apos;)
			          }],
			          text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
			        },
			        value: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) : null)
			      }
			    }
		  });
		} catch (error2) {
			logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro no performer - &quot; + error2.toString()); 
		}
	}

	returnObj.performer = Performer;
	returnObj.occurenceDateTime = occurenceDateTime;
	returnObj.dataValidacao = dataValidacao;
	returnObj.dataRelato = dataRelato;

	return returnObj;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8615c472-c47a-48aa-a6e7-45e487c4463f</id>
                <name>getRabbitMqHosts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791032</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Void}
	@return {HostsDto} return hosts
*/
function getRabbitMqHosts() {
	// Set RabbitMQ Hosts
	importPackage(com.mirth.rabbitmq.client.dto);
	hosts = [];
	addr = new HostsDto(); // Main Host
	addr.setHost($(&apos;RabbitMqHost&apos;));
	addr.setPort(parseInt($(&apos;RabbitMqPort&apos;)));
	hosts.push(addr);

	return hosts;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f331cea8-c75e-40d4-83d9-a6779b688c81</id>
                <name>isJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790116</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a string is a valid JSON

	@param {String} string to validate if is JSON
	@return {Boolean} return boolean
*/
function isJSON(str) {
  try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27f41d50-5bd7-46da-9ad9-203181a92ba9</id>
                <name>isNumeric</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789613</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a value (string or number) is numeric

	@param {String} value to validate if is numeric
	@return {Boolean} return boolean
*/
function isNumeric(num) {
  if (typeof num == &quot;string&quot;) { 
    return !isNaN(num) &amp;&amp;
           !isNaN(parseFloat(num));
  } else if (typeof num == &quot;number&quot;) {
  	return true;
  } else {
  	return false;
  }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5c27a913-629d-4605-9e85-716a84e11410</id>
                <name>MappFrequencies</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to create multiple VAR Segments according Initial Date and CD_PrescricaoFrequencias

	@param {String} freqUni - CD_PrescricaoFrequencias description code
	@param {String} dateInit - Date HL7 string: start prescription date
	@param {String} DateEnd - Date HL7 string: end prescription date
	@return {String} return VAR Segment
*/
function MappFrequencies(freqUni, dateStart, DateEnd) {

	startDate = &quot;20230227115700&quot;;
	hora = startDate.substring(10, 8);
	freqfactor = 8;
	freqUnit = &apos;Dias&apos;;
	
	if (freqUnit == &apos;Hora&apos;){ // x em x horas
	    // calc hours segments
	    if (startDate.length &gt; 0 &amp;&amp; freqfactor &gt; 1){
	        console.log(&quot;running ...&quot;);
	        for (i = 0; i &lt; (24 / freqfactor) ; i++){
	            if ( (parseInt(hora) + (freqfactor * i) - 24) &gt;= 0  ){
	                hora = parseInt(hora) + (freqfactor * i) - 24;
	                break;
	            }
	        }
	        
	        if ((24 / freqfactor) &gt;= 1){
	            for(i = 0; i &lt; (24 / freqfactor); i++){
	                console.log( (parseInt(hora) + (freqfactor * i)).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	            }
	        }else {
	            console.log( parseInt(hora).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	        }   
	    }
	} else if (freqUnit == &apos;Dias&apos;){ // x em x dias
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Dias da Semanas&apos; || freqUnit == &apos;Por Dia&apos; || freqUnit == &apos;Refeições&apos; || freqUnit == &apos;Dia/Hora&apos;){ // têm de ser criados a cada dia
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Única&apos;){ // Hora fixa^5
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;SOS&apos;){
	    console.log( null )
	}else if (freqUnit == &apos;Turno Fixo&apos;) {
	    // tenho de pedir ao bruno para ter alguma informação relacionada com os turnos
	}else if (freqUnit == &apos;Contínuo&apos; || freqUnit == &apos;Sem horário&apos;){ // Sem hor\XE1\rio^0
	    console.log( null )
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e5cc4c3f-7233-42b0-8162-b3bec0ab5c94</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792857</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fdd919fc-4700-4a8f-aafe-cc2f4653f100</id>
                <name>Unescape HL7 Characters</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790479</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function hexMappingPreProcessor(result) {
	var hexMapping = [
			[/\\x21\\/gi, &quot;!&quot;], [/\\x22\\/gi, &apos;&quot;&apos;], [/\\x23\\/gi, &quot;#&quot;], [/\\x24\\/gi, &quot;$&quot;], [/\\x25\\/gi, &quot;%&quot;], [/\\x26\\/gi, &quot;&amp;&quot;], [/\\x27\\/gi, &quot;&apos;&quot;], [/\\x28\\/gi, &quot;(&quot;], [/\\x29\\/gi, &quot;)&quot;],
			[/\\x2a\\/gi, &quot;*&quot;], [/\\x2b\\/gi, &quot;+&quot;], [/\\x2c\\/gi, &quot;,&quot;], [/\\x2d\\/gi, &quot;-&quot;], [/\\x2e\\/gi, &quot;.&quot;], [/\\x2f\\/gi, &quot;/&quot;], [/\\x30\\/gi, &quot;0&quot;], [/\\x31\\/gi, &quot;1&quot;], [/\\x32\\/gi, &quot;2&quot;],
			[/\\x33\\/gi, &quot;3&quot;], [/\\x34\\/gi, &quot;4&quot;], [/\\x35\\/gi, &quot;5&quot;], [/\\x36\\/gi, &quot;6&quot;], [/\\x37\\/gi, &quot;7&quot;], [/\\x38\\/gi, &quot;8&quot;], [/\\x39\\/gi, &quot;9&quot;], [/\\x3a\\/gi, &quot;:&quot;], [/\\x3b\\/gi, &quot;;&quot;],
			[/\\x3c\\/gi, &quot;&lt;&quot;], [/\\x3d\\/gi, &quot;=&quot;], [/\\x3e\\/gi, &quot;&gt;&quot;], [/\\x3f\\/gi, &quot;?&quot;], [/\\x40\\/gi, &quot;@&quot;], [/\\x41\\/gi, &quot;A&quot;], [/\\x42\\/gi, &quot;B&quot;], [/\\x43\\/gi, &quot;C&quot;], [/\\x44\\/gi, &quot;D&quot;],
			[/\\x45\\/gi, &quot;E&quot;], [/\\x46\\/gi, &quot;F&quot;], [/\\x47\\/gi, &quot;G&quot;], [/\\x48\\/gi, &quot;H&quot;], [/\\x49\\/gi, &quot;I&quot;], [/\\x4a\\/gi, &quot;J&quot;], [/\\x4b\\/gi, &quot;K&quot;], [/\\x4c\\/gi, &quot;L&quot;], [/\\x4d\\/gi, &quot;M&quot;],
			[/\\x4e\\/gi, &quot;N&quot;], [/\\x4f\\/gi, &quot;O&quot;], [/\\x50\\/gi, &quot;P&quot;], [/\\x51\\/gi, &quot;Q&quot;], [/\\x52\\/gi, &quot;R&quot;], [/\\x53\\/gi, &quot;S&quot;], [/\\x54\\/gi, &quot;T&quot;], [/\\x55\\/gi, &quot;U&quot;], [/\\x56\\/gi, &quot;V&quot;],
			[/\\x57\\/gi, &quot;W&quot;], [/\\x58\\/gi, &quot;X&quot;], [/\\x59\\/gi, &quot;Y&quot;], [/\\x5a\\/gi, &quot;Z&quot;], [/\\x5b\\/gi, &quot;[&quot;], [/\\x5c\\/gi, &quot;\\&quot;], [/\\x5d\\/gi, &quot;]&quot;], [/\\x5e\\/gi, &quot;^&quot;], [/\\x5f\\/gi, &quot;_&quot;],
			[/\\x60\\/gi, &quot;`&quot;], [/\\x61\\/gi, &quot;a&quot;], [/\\x62\\/gi, &quot;b&quot;], [/\\x63\\/gi, &quot;c&quot;], [/\\x64\\/gi, &quot;d&quot;], [/\\x65\\/gi, &quot;e&quot;], [/\\x66\\/gi, &quot;f&quot;], [/\\x67\\/gi, &quot;g&quot;], [/\\x68\\/gi, &quot;h&quot;],
			[/\\x69\\/gi, &quot;i&quot;], [/\\x6a\\/gi, &quot;j&quot;], [/\\x6b\\/gi, &quot;k&quot;], [/\\x6c\\/gi, &quot;l&quot;], [/\\x6d\\/gi, &quot;m&quot;], [/\\x6e\\/gi, &quot;n&quot;], [/\\x6f\\/gi, &quot;o&quot;], [/\\x70\\/gi, &quot;p&quot;], [/\\x71\\/gi, &quot;q&quot;],
			[/\\x72\\/gi, &quot;r&quot;], [/\\x73\\/gi, &quot;s&quot;], [/\\x74\\/gi, &quot;t&quot;], [/\\x75\\/gi, &quot;u&quot;], [/\\x76\\/gi, &quot;v&quot;], [/\\x77\\/gi, &quot;w&quot;], [/\\x78\\/gi, &quot;x&quot;], [/\\x79\\/gi, &quot;y&quot;], [/\\x7a\\/gi, &quot;z&quot;],
			[/\\x7b\\/gi, &quot;{&quot;], [/\\x7c\\/gi, &quot;|&quot;], [/\\x7d\\/gi, &quot;}&quot;], [/\\x7e\\/gi, &quot;~&quot;], [/\\xa1\\/gi, &quot;¡&quot;], [/\\xa2\\/gi, &quot;¢&quot;], [/\\xa3\\/gi, &quot;£&quot;], [/\\xa4\\/gi, &quot;¤&quot;], [/\\xa5\\/gi, &quot;¥&quot;],
			[/\\xa6\\/gi, &quot;¦&quot;], [/\\xa7\\/gi, &quot;§&quot;], [/\\xa8\\/gi, &quot;¨&quot;], [/\\xa9\\/gi, &quot;©&quot;], [/\\xaa\\/gi, &quot;ª&quot;], [/\\xab\\/gi, &quot;«&quot;], [/\\xac\\/gi, &quot;¬&quot;], [/\\xa0\\/gi, &quot; &quot;], [/\\xae\\/gi, &quot;®&quot;],
			[/\\xaf\\/gi, &quot;¯&quot;], [/\\xad\\/gi, &quot; &quot;], [/\\xb0\\/gi, &quot;°&quot;], [/\\xb1\\/gi, &quot;±&quot;], [/\\xb2\\/gi, &quot;²&quot;], [/\\xb3\\/gi, &quot;³&quot;], [/\\xb4\\/gi, &quot;´&quot;], [/\\xb5\\/gi, &quot;µ&quot;], [/\\xb6\\/gi, &quot;¶&quot;],
			[/\\xb7\\/gi, &quot;·&quot;], [/\\xb8\\/gi, &quot;¸&quot;], [/\\xb9\\/gi, &quot;¹&quot;], [/\\xba\\/gi, &quot;º&quot;], [/\\xbb\\/gi, &quot;»&quot;], [/\\xbc\\/gi, &quot;¼&quot;], [/\\xbd\\/gi, &quot;½&quot;], [/\\xbe\\/gi, &quot;¾&quot;], [/\\xbf\\/gi, &quot;¿&quot;],
			[/\\xc0\\/gi, &quot;À&quot;], [/\\xc1\\/gi, &quot;Á&quot;], [/\\xc2\\/gi, &quot;Â&quot;], [/\\xc3\\/gi, &quot;Ã&quot;], [/\\xc4\\/gi, &quot;Ä&quot;], [/\\xc5\\/gi, &quot;Å&quot;], [/\\xc6\\/gi, &quot;Æ&quot;], [/\\xc7\\/gi, &quot;Ç&quot;], [/\\xc8\\/gi, &quot;È&quot;],
			[/\\xc9\\/gi, &quot;É&quot;], [/\\xca\\/gi, &quot;Ê&quot;], [/\\xcb\\/gi, &quot;Ë&quot;], [/\\xcc\\/gi, &quot;Ì&quot;], [/\\xcd\\/gi, &quot;Í&quot;], [/\\xce\\/gi, &quot;Î&quot;], [/\\xcf\\/gi, &quot;Ï&quot;], [/\\xd0\\/gi, &quot;Ð&quot;], [/\\xd1\\/gi, &quot;Ñ&quot;],
			[/\\xd2\\/gi, &quot;Ò&quot;], [/\\xd3\\/gi, &quot;Ó&quot;], [/\\xd4\\/gi, &quot;Ô&quot;], [/\\xd5\\/gi, &quot;Õ&quot;], [/\\xd6\\/gi, &quot;Ö&quot;], [/\\xd7\\/gi, &quot;×&quot;], [/\\xd8\\/gi, &quot;Ø&quot;], [/\\xd9\\/gi, &quot;Ù&quot;], [/\\xda\\/gi, &quot;Ú&quot;],
			[/\\xdb\\/gi, &quot;Û&quot;], [/\\xdc\\/gi, &quot;Ü&quot;], [/\\xdd\\/gi, &quot;Ý&quot;], [/\\xde\\/gi, &quot;Þ&quot;], [/\\xdf\\/gi, &quot;ß&quot;], [/\\xe0\\/gi, &quot;à&quot;], [/\\xe1\\/gi, &quot;á&quot;], [/\\xe2\\/gi, &quot;â&quot;], [/\\xe3\\/gi, &quot;ã&quot;],
			[/\\xe4\\/gi, &quot;ä&quot;], [/\\xe5\\/gi, &quot;å&quot;], [/\\xe6\\/gi, &quot;æ&quot;], [/\\xe7\\/gi, &quot;ç&quot;], [/\\xe8\\/gi, &quot;è&quot;], [/\\xe9\\/gi, &quot;é&quot;], [/\\xea\\/gi, &quot;ê&quot;], [/\\xeb\\/gi, &quot;ë&quot;], [/\\xec\\/gi, &quot;ì&quot;],
			[/\\xed\\/gi, &quot;í&quot;], [/\\xee\\/gi, &quot;î&quot;], [/\\xef\\/gi, &quot;ï&quot;], [/\\xf0\\/gi, &quot;ð&quot;], [/\\xf1\\/gi, &quot;ñ&quot;], [/\\xf2\\/gi, &quot;ò&quot;], [/\\xf3\\/gi, &quot;ó&quot;], [/\\xf4\\/gi, &quot;ô&quot;], [/\\xf5\\/gi, &quot;õ&quot;],
			[/\\xf6\\/gi, &quot;ö&quot;], [/\\xf7\\/gi, &quot;÷&quot;], [/\\xf8\\/gi, &quot;ø&quot;], [/\\xf9\\/gi, &quot;ù&quot;], [/\\xfa\\/gi, &quot;ú&quot;], [/\\xfb\\/gi, &quot;û&quot;], [/\\xfc\\/gi, &quot;ü&quot;], [/\\xfd\\/gi, &quot;ý&quot;], [/\\xfe\\/gi, &quot;þ&quot;],
			[/\\xff\\/gi, &quot;ÿ&quot;], [/\\x91\\/gi, &quot;‘&quot;], [/\\x92\\/gi, &quot;’&quot;], [/\\x80\\/gi, &quot;€&quot;], [/\\x83\\/gi, &quot;ƒ&quot;], [/\\x85\\/gi, &quot;…&quot;], [/\\x86\\/gi, &quot;†&quot;], [/\\x87\\/gi, &quot;‡&quot;], [/\\x88\\/gi, &quot;ˆ&quot;],
			[/\\x89\\/gi, &quot;‰&quot;], [/\\x8a\\/gi, &quot;Š&quot;], [/\\x8b\\/gi, &quot;‹&quot;], [/\\x8c\\/gi, &quot;Œ&quot;], [/\\x8e\\/gi, &quot;Ž&quot;], [/\\x93\\/gi, &quot;“&quot;], [/\\x94\\/gi, &quot;”&quot;], [/\\x95\\/gi, &quot;•&quot;], [/\\x96\\/gi, &quot;–&quot;],
			[/\\x97\\/gi, &quot;—&quot;], [/\\x98\\/gi, &quot;˜&quot;], [/\\x99\\/gi, &quot;™&quot;], [/\\x9a\\/gi, &quot;š&quot;], [/\\x9b\\/gi, &quot;›&quot;], [/\\x9c\\/gi, &quot;œ&quot;], [/\\x9e\\/gi, &quot;ž&quot;], [/\\x9f\\/gi, &quot;Ÿ&quot;], [/\\x2079\\/gi, &quot;⁹&quot;],
			[/Ã¡/g, &quot;á&quot;], [/Ã³/g, &quot;ó&quot;], [/Âµ/g, &quot;µ&quot;], [/Ã£/g, &quot;ã&quot;], [/Ã§/g, &quot;ç&quot;], [/Ã©/g, &quot;é&quot;], [/Ãº/g, &quot;ú&quot;], [/Â³/g, &quot;³&quot;], [/\\.br\\/gi, &quot; &quot;], [/  +/g, &apos; &apos;], [/Âº/g, &quot;º&quot;], [/Ã&#x81;/g, &quot;Á&quot;],
			[/Ã¢/g, &quot;â&quot;], [/Ãµ/g, &quot;õ&quot;], [/Ã&#x87;Ã&#x83;/g, &quot;ÇÃ&quot;], [/Ã&#x8d;/g, &apos;Í&apos;], [/Ã&#x87;Ã&#x95;/g, &apos;ÇÕ&apos;], [/Ã&#x93;/g, &quot;Ó&quot;]
			];
	
	for(var i = 0; i &lt; hexMapping.length; i++){
		result = result.replace(hexMapping[i][0], hexMapping[i][1]);
	}

	var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
	for(var i = 0; i &lt; replaceList.length; i++){
		do{
			result = result.replace(replaceList[i][0], replaceList[i][1]);
		}while(result.indexOf(replaceList[i][0]) &gt; -1);
	}
	
	return result;
}



function encodeIsoLatin(result) {
	var hexMapping = [
			/* [&quot;\\x21\\&quot;, &quot;!&quot;], [&quot;\\x3f\\&quot;, &quot;?&quot;], [&quot;\\x2c\\&quot;, &quot;,&quot;], [&quot;\\x3a\\&quot;, &quot;:&quot;], [&quot;\\x2e\\&quot;, &quot;.&quot;], [&quot;\\xa0\\&quot;, &quot; &quot;], [&quot;\\xad\\&quot;, &quot; &quot;], [&quot;\\x2d\\&quot;, &quot;-&quot;], [&quot;\\x5b\\&quot;, &quot;[&quot;], [&quot;\\x5d\\&quot;, &quot;]&quot;], [&quot;\\x5c\\&quot;, &quot;\\&quot;]*/ 
			[&quot;\\x22\\&quot;, /&quot;/g], [&quot;\\x23\\&quot;, /#/g], [&quot;\\x24\\&quot;, /\$/g], [&quot;\\x25\\&quot;, /%/g], [&quot;\\x26\\&quot;, /&amp;/g], [&quot;\\x27\\&quot;, /&apos;/g],
			[&quot;\\x2a\\&quot;, /\*/g], [&quot;\\x2b\\&quot;, /\+/g], [&quot;\\x2f\\&quot;, /\//g], [&quot;\\x3b\\&quot;, /;/g],
			[&quot;\\x3c\\&quot;, /&lt;/g], [&quot;\\x3d\\&quot;, /=/g], [&quot;\\x3e\\&quot;, /&gt;/g], [&quot;\\x40\\&quot;, /@/g], 
			[&quot;\\x5e\\&quot;, /\^/g], [&quot;\\x5f\\&quot;, /_/g], [&quot;\\x60\\&quot;, /`/g], [&quot;\\x7b\\&quot;, /{/g], [&quot;\\x7c\\&quot;, /\|/g], [&quot;\\x7d\\&quot;, /}/g], 
			[&quot;\\x7e\\&quot;, /~/g], [&quot;\\xa1\\&quot;, /¡/g], [&quot;\\xa2\\&quot;, /¢/g], [&quot;\\xa3\\&quot;, /£/g], [&quot;\\xa4\\&quot;, /¤/g], [&quot;\\xa5\\&quot;, /¥/g],
			[&quot;\\xa6\\&quot;, /¦/g], [&quot;\\xa7\\&quot;, /§/g], [&quot;\\xa8\\&quot;, /¨/g], [&quot;\\xa9\\&quot;, /©/g], [&quot;\\xaa\\&quot;, /ª/g], [&quot;\\xab\\&quot;, /«/g], [&quot;\\xac\\&quot;, /¬/g], [&quot;\\xae\\&quot;, /®/g],
			[&quot;\\xaf\\&quot;, /¯/g], [&quot;\\xb0\\&quot;, /°/g], [&quot;\\xb1\\&quot;, /±/g], [&quot;\\xb2\\&quot;, /²/g], [&quot;\\xb3\\&quot;, /³/g], [&quot;\\xb4\\&quot;, /´/g], [&quot;\\xb5\\&quot;, /µ/g], [&quot;\\xb6\\&quot;, /¶/g],
			[&quot;\\xb7\\&quot;, /·/g], [&quot;\\xb8\\&quot;, /¸/g], [&quot;\\xb9\\&quot;, /¹/g], [&quot;\\xba\\&quot;, /º/g], [&quot;\\xbb\\&quot;, /»/g], [&quot;\\xbc\\&quot;, /¼/g], [&quot;\\xbd\\&quot;, /½/g], [&quot;\\xbe\\&quot;, /¾/g], [&quot;\\xbf\\&quot;, /¿/],
			[&quot;\\xc0\\&quot;, /À/g], [&quot;\\xc1\\&quot;, /Á/g], [&quot;\\xc2\\&quot;, /Â/g], [&quot;\\xc3\\&quot;, /Ã/g], [&quot;\\xc4\\&quot;, /Ä/g], [&quot;\\xc5\\&quot;, /Å/g], [&quot;\\xc6\\&quot;, /Æ/g], [&quot;\\xc7\\&quot;, /Ç/g], [&quot;\\xc8\\&quot;, /È/g],
			[&quot;\\xc9\\&quot;, /É/g], [&quot;\\xca\\&quot;, /Ê/g], [&quot;\\xcb\\&quot;, /Ë/g], [&quot;\\xcc\\&quot;, /Ì/g], [&quot;\\xcd\\&quot;, /Í/g], [&quot;\\xce\\&quot;, /Î/g], [&quot;\\xcf\\&quot;, /Ï/g], [&quot;\\xd0\\&quot;, /Ð/g], [&quot;\\xd1\\&quot;, /Ñ/g],
			[&quot;\\xd2\\&quot;, /Ò/g], [&quot;\\xd3\\&quot;, /Ó/g], [&quot;\\xd4\\&quot;, /Ô/g], [&quot;\\xd5\\&quot;, /Õ/g], [&quot;\\xd6\\&quot;, /Ö/g], [&quot;\\xd7\\&quot;, /×/g], [&quot;\\xd8\\&quot;, /Ø/g], [&quot;\\xd9\\&quot;, /Ù/g], [&quot;\\xda\\&quot;, /Ú/g],
			[&quot;\\xdb\\&quot;, /Û/g], [&quot;\\xdc\\&quot;, /Ü/g], [&quot;\\xdd\\&quot;, /Ý/g], [&quot;\\xde\\&quot;, /Þ/g], [&quot;\\xdf\\&quot;, /ß/g], [&quot;\\xe0\\&quot;, /à/g], [&quot;\\xe1\\&quot;, /á/g], [&quot;\\xe2\\&quot;, /â/g], [&quot;\\xe3\\&quot;, /ã/g],
			[&quot;\\xe4\\&quot;, /ä/g], [&quot;\\xe5\\&quot;, /å/g], [&quot;\\xe6\\&quot;, /æ/g], [&quot;\\xe7\\&quot;, /ç/g], [&quot;\\xe8\\&quot;, /è/g], [&quot;\\xe9\\&quot;, /é/g], [&quot;\\xea\\&quot;, /ê/g], [&quot;\\xeb\\&quot;, /ë/g], [&quot;\\xec\\&quot;, /ì/g],
			[&quot;\\xed\\&quot;, /í/g], [&quot;\\xee\\&quot;, /î/g], [&quot;\\xef\\&quot;, /ï/g], [&quot;\\xf0\\&quot;, /ð/g], [&quot;\\xf1\\&quot;, /ñ/g], [&quot;\\xf2\\&quot;, /ò/g], [&quot;\\xf3\\&quot;, /ó/g], [&quot;\\xf4\\&quot;, /ô/g], [&quot;\\xf5\\&quot;, /õ/g],
			[&quot;\\xf6\\&quot;, /ö/g], [&quot;\\xf7\\&quot;, /÷/g], [&quot;\\xf8\\&quot;, /ø/g], [&quot;\\xf9\\&quot;, /ù/g], [&quot;\\xfa\\&quot;, /ú/g], [&quot;\\xfb\\&quot;, /û/g], [&quot;\\xfc\\&quot;, /ü/g], [&quot;\\xfd\\&quot;, /ý/g], [&quot;\\xfe\\&quot;, /þ/g],
			[&quot;\\xff\\&quot;, /ÿ/g], [&quot;\\x91\\&quot;, /‘/g], [&quot;\\x92\\&quot;, /’/g], [&quot;\\x80\\&quot;, /€/g], [&quot;\\x83\\&quot;, /ƒ/g], [&quot;\\x85\\&quot;, /…/g], [&quot;\\x86\\&quot;, /†/g], [&quot;\\x87\\&quot;, /‡/g], [&quot;\\x88\\&quot;, /ˆ/g],
			[&quot;\\x89\\&quot;, /‰/g], [&quot;\\x8a\\&quot;, /Š/g], [&quot;\\x8b\\&quot;, /‹/g], [&quot;\\x8c\\&quot;, /Œ/g], [&quot;\\x8e\\&quot;, /Ž/g], [&quot;\\x93\\&quot;, /“/g], [&quot;\\x94\\&quot;, /”/g], [&quot;\\x95\\&quot;, /•/g], [&quot;\\x96\\&quot;, /–/g],
			[&quot;\\x97\\&quot;, /—/g], [&quot;\\x98\\&quot;, /˜/g], [&quot;\\x99\\&quot;, /™/g], [&quot;\\x9a\\&quot;, /š/g], [&quot;\\x9b\\&quot;, /›/g], [&quot;\\x9c\\&quot;, /œ/g], [&quot;\\x9e\\&quot;, /ž/g], [&quot;\\x9f\\&quot;, /Ÿ/g], [&quot;\\x2079\\&quot;, /⁹/g],
			[&quot;\\x0a\\&quot;, /\n/g], [&quot;\\x0d\\&quot;, /\r/g]
			];
	
	if (result != null){
		for(var i = 0; i &lt; hexMapping.length; i++){
			result = result.replace(hexMapping[i][1], hexMapping[i][0]);
		}		

		var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
		for(var i = 0; i &lt; replaceList.length; i++){
			do{
				result = result.replace(replaceList[i][1], replaceList[i][0]);
			}while(result.indexOf(replaceList[i][0]) &gt; -1);
		}
	}
	
	return result;
}


function hexMappingReservatedChars(result) {
	var pattern = [[/\\T\\/g, &quot;&amp;&quot; ], [/\\R\\/g, &apos;~&apos;], [/\\E\\/g, &apos;\\&apos;], [/\\F\\/g, &apos;|&apos;], [/\\S\\/g, &apos;^&apos;]];
	
	for(var i = 0; i &lt; pattern.length; i++){
		result = result.replace(pattern[i][0], pattern[i][1]);
	}
	
	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fde5f48b-6860-49be-a9ab-dfb0e4ba3b97</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790008</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>65926965-2044-4d3d-8801-8446e793f27e</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>ORR_GENERATE_IN</name>
      <description>Descrição:
Funcionalidade cujo objetivo passa por receber do canal ORM_SURGICAL_DISCHARGE_OUT o retorno devolvido pelo sistema externo após envio da alta de cirurgia para uma determinada API desse sistema externo. Na response desse mesmo canal canal, é &quot;routeado&quot; para o presente canal a mensagem ORM de alta de cirurgia e também o retorno (variáveis &quot;statusCode&quot; e &quot;errDiagnosis&quot; do sourceMap) devolvido aquando do request à API do sistema externo.


Documentação:
&lt;Link do Confluence para os requisitos/documentação&gt;

Versão:
0.0.1

Dependências:
- generate_HLv2_messageId()
- generateLogMsg()
- DateUtc()

Canais interligados:
- ORM_SURGICAL_DISCHARGE_OUT

Variáveis de ambiente:
- Integrador_HL7v2_Ip
- Integrador_HL7v2_Port</description>
      <revision>3</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>Auto-generate (Before processing)</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>ORM -&gt; ORR Transformation</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>/* Canal anterior:
router...(..., RawMessage( $(&apos;msgOriginal&apos;), null, {&quot;statusCode&quot;: statusCode, &quot;errDiagnosis&quot; : errDiagnosis} ) ); // channel: ORR_GENERATE_IN
*/

var ORMmsgId = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;];
tmp = msg;

tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = &quot;IMTHOM-BSIMPLE&quot;; // ?? confirmar com Sal
tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] = &quot;PATIENTCARE&quot;;
tmp[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmmss&quot;);
tmp[&apos;MSH&apos;][&apos;MSH.9&apos;] = &quot;ORR^O02&quot;;
tmp[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;] = generate_HLv2_messageId(&quot;ORR&quot;);

createSegmentAfter(&apos;MSA&apos;, tmp[&apos;MSH&apos;]);
tmp[&apos;MSA&apos;][&apos;MSA.1&apos;][&apos;MSA.1.1&apos;] = $(&apos;statusCode&apos;) == 200 ? &quot;AA&quot; : &quot;AE&quot;;
tmp[&apos;MSA&apos;][&apos;MSA.2&apos;][&apos;MSA.2.1&apos;] = ORMmsgId;
tmp[&apos;MSA&apos;][&apos;MSA.3&apos;][&apos;MSA.3.1&apos;] = $(&apos;statusCode&apos;) != 200 ? $(&apos;errDiagnosis&apos;) : &quot;&quot;;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>servicoIntRefExt</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <variable>servicoIntRefExt</variable>
              <mapping>msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>numSequencial</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <variable>numSequencial</variable>
              <mapping>msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>numEpisodHosp</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <variable>numEpisodHosp</variable>
              <mapping>msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString()</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
          </elements>
          <inboundTemplate encoding="base64">TVNIfF5+XCZ8QlVDSUNhcmV8Q0hMfFNPTkhPfENITHwyMDI0MDgyMDAwMTM1NHx8T1JNXk8wMXwxNzI0MTEyODM0MjQxNDYtTy00ODU4MnxQfDIuNHx8fHxBTHx8ODg1OS8xfApQSUR8fHwzMDY1NzFeXl5DSExeTlN8fENBU1RSTyBTQU5UT15FTUlMSUEgREEgQ09OQ0VJQ0FPXl5eXl5MfHwxOTYzMDkyOTAwMDAwMHxGfHx8fHx8fHx8fDE2MjI5OV5eXkNITApQVjF8MXxJTlR8MV4xMDA5XjEwMDleU0FMQSBVQ1BBfHwyNDAxNDUwN3x8fHx8MTF8fHx8fHx8fHwyNDAxMzMzN3x8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwyNDAxMzU2MQpERzF8MXx8TTE3MTFeQXJ0cm9zZSBwcmltXFhFMVxyaWEgdW5pbCwgam9lbGhvIERJUl5JQ0QxMHx8MjAyNDA4MTkxNjMwMDB8Rnx8fHx8fHx8fDF8fEQKT1JDfFNDfHwzODI2MHx8Q018fHx8MjAyNDA4MTkxNjMwMDB8NTkxM15JbmVzIEZpbGlwYSBNb3JvdWNvIEhlbnJpcXVlc3x8NTc0MDZeRWxpc2EgTWFyZ2FyaWRhIE1hcnRpbmhvIEZlcnJlaXJhfHx8MjAyNDA4MTkyMjQ4MDB8Ck9CUnwxfHwzODI2MHwwU1JDMEo5Xk1DPkFydGljSU5GPlN1YnN0aXR1aVxYRTdcXFhFM1xvPkFydGljIGpvZWxobyBESVI+QWJlcnRhPlN1YnN0IHNpbnQ+Q2ltZW50YWRhXklDRDEwfFB8fDIwMjQwNzI0MTE1OTQ5fHx8fHx8fHx8fHx8fHx8fHx8fHwxfHx8fHwyODMyNCZSb2RyaWd1ZXMmTnVubyYmUCZNRURJQ08mQ0lSVVJHSUFPfDE4NjEmQmF0aXN0YSZNYXJpYSBUZXJlc2EgUm9zYWRvJiZBJlRFQ05JQ08mQVVYSUxJQVJ+MjkwNDgmTUFHQUxIQUVTJjY4IEFOVE9OSU8mJkEmTUVESUNPJkNJUlVSR0lBT34zMjQwJlNhbnRpYWdvJkRpbmlzJiZBJkVORkVSTUVJUk8mQU5FU1RFU0lTVEF+NDI0MSZPbGl2ZWlyYSZKb2FvJiZBJkVORkVSTUVJUk8mSU5TVFJVTUVOVElTVEF+NDQ3MiZNYXJxdWVzJlZhbmVzc2EgU29maWEgTG9wZXMmJkEmRU5GRVJNRUlSTyZDSVJDVUxBTlRFfjY1ODQ4JkdvbWVzJkxlb25vciBBbmljZXRvJiZBJk1FRElDTyZBTkVTVEVTSVNUQXx8fApaSFN8fDIwMjQwODE5MTc1OTAwfDIwMjQwODIwMDAxMzAwfDIwMjQwODE5MTgwMDAwfHwyMDI0MDgxOTE4NTEwMHwyMDI0MDgxOTE5NTkwMHwyMDI0MDgxOTE4NTcwMHx8MjAyNDA4MTkxOTAwMDB8MjAyNDA4MTkxOTUwMDB8MjAyNDA4MTkyMDE0MDB8fE58fHxTfDF8fE58fE58fEl8U2VtIG1vdGl2byByZWdpc3RhZG98fDIwMjQwODE5MTg1NTAwfDIwMjQwODE5MTk1NTAwfApOVEV8MXx8QUxUQXxeVElQT19NRU5TQUdFTQ==</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>HL7V2</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>false</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>false</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>1</metaDataId>
          <name>Send ORR (integrador)</name>
          <properties class="com.mirth.connect.connectors.tcp.TcpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>true</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
              <pluginPointName>MLLP</pluginPointName>
              <startOfMessageBytes>0B</startOfMessageBytes>
              <endOfMessageBytes>1C0D</endOfMessageBytes>
              <useMLLPv2>false</useMLLPv2>
              <ackBytes>06</ackBytes>
              <nackBytes>15</nackBytes>
              <maxRetries>2</maxRetries>
            </transmissionModeProperties>
            <serverMode>false</serverMode>
            <remoteAddress>${Integrador_HL7v2_Ip}</remoteAddress>
            <remotePort>${Integrador_HL7v2_Port}</remotePort>
            <overrideLocalBinding>false</overrideLocalBinding>
            <localAddress>0.0.0.0</localAddress>
            <localPort>0</localPort>
            <sendTimeout>5000</sendTimeout>
            <bufferSize>65536</bufferSize>
            <maxConnections>10</maxConnections>
            <keepConnectionOpen>false</keepConnectionOpen>
            <checkRemoteHost>false</checkRemoteHost>
            <responseTimeout>5000</responseTimeout>
            <ignoreResponse>false</ignoreResponse>
            <queueOnResponseTimeout>true</queueOnResponseTimeout>
            <dataTypeBinary>false</dataTypeBinary>
            <charsetEncoding>ISO-8859-1</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>TCP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
logger.info(generateLogMsg(&quot;surgical-discharge&quot;, message, null, null, null, null, null));
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>false</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>STATUS_ALTA_API</name>
            <type>STRING</type>
            <mappingName>statusCode</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ERRDIAGNOSIS</name>
            <type>STRING</type>
            <mappingName>errDiagnosis</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SERVICOINTREFEXT</name>
            <type>STRING</type>
            <mappingName>servicoIntRefExt</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NUMSEQUENCIAL</name>
            <type>STRING</type>
            <mappingName>numSequencial</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NUMEPISODHOSP</name>
            <type>STRING</type>
            <mappingName>numEpisodHosp</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1729615929752</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>60</pruneMetaDataDays>
            <pruneContentDays>60</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>6cc8a9f9-7d96-4990-96a8-0ff41be6b101</id>
            <name>Logger Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089520</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Funções auxiliares para o logging de mensagens dos canais</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>bc286d01-89d0-4a3f-916e-09a25a4e68c7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>68dfb5b9-bb8e-418d-8425-79fe31bd7538</id>
                <name>generateLogMsg</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to build and return a log msg, originating from any channel.
	Documentação função: https://b-simple.atlassian.net/wiki/x/AoACBg
	Documentação Entity e Tags: https://b-simple.atlassian.net/wiki/x/AgB_Bg

	@param theEntity {String} - string that denotes the group of messages the message belongs to, i.e appointment, document, cda, accident, etc.
	@param {Class} message - ImmutableConnectorMessage Class message containing information about all connectors that a
		message passed through
	@param tagsArr {Array} - array of user-defined and relevant tags that should be associated with the message
	@param sourceServer {String} - message&apos;s source app/entity (name of the app or entity responsible for sending the messge to the channel)
	@param destinationServerMap {Map} - Map&lt;int,string&gt; , where the key is the destination&apos;s metadataID and the value is the entity to which such destination&apos;s message was sent to
	@param {Array} sourceMetadataArr - source metadata: metadata associated with the source processing 
	@param {Array} destinationsMetadataArr - destinations metadata: metadata associated with the destinations processing
	@return {Object JSON} message log
*/
function generateLogMsg(theEntity, message, tagsArr, sourceServer, destinationServerMap, sourceMetadataArr, destinationsMetadataMap) {
	if (message == undefined || message == null) {
		logger.info(&quot;sendMsgInfoLogChannel:message --&gt; message argument is mandatory!&quot;);
	} else {
		try {
			var logMsg = new Object();
		
			// messageSummary
			var messageSummaryObj = new Object();
			//messageID
			messageSummaryObj.messageId = message.getConnectorMessages().get(0).getMessageId();
			//messageOriginalID - não funciona ...
			//messageSummaryObj.messageOriginalId = message.getOriginalId();
			//channelID
			messageSummaryObj.channelId = message.getConnectorMessages().get(0).getChannelId();
			//serverID
			messageSummaryObj.serverId = message.getConnectorMessages().get(0).getServerId();
			//channelName
			messageSummaryObj.channelName = message.getConnectorMessages().get(0).getChannelName();
			//lastDeployedDate
			try {
				var controller = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createEngineController();
				var dashboardStatus = controller.getChannelStatus(message.getConnectorMessages().get(0).getChannelId());
				messageSummaryObj.lastDeployedDate = auxCalendarParse(dashboardStatus.getDeployedDate());
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:lastDeployedDate --&gt; &quot; + error.toString());
				messageSummaryObj.lastDeployedDate = null;
			}
			//entity
			messageSummaryObj.entity = theEntity == undefined ? null : theEntity;
			//tags
			messageSummaryObj.tags = (tagsArr == undefined || tagsArr == null) ? new Array() : tagsArr;
			//logDate
			var datestr = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
			var dateUTC = DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
			messageSummaryObj.logDate = dateUTC;
			//status
			var statusObj = new Object();
			statusObj.error = false;
			statusObj.code = null;
			statusObj.message = null;
			try {
				message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName (inclui Source também)
					value = parseInt(value);
					if (value != 0) { // só as destinations é que têm Response relativamente a erros, logo não dá para ir buscar Response de erro na Source (Source =metadataId 0)
						//code - testar no que isto dá! ??
						if (message.getConnectorMessages().get(value).getStatus().toString() == &apos;ERROR&apos;) {
							statusObj.error = true;
							/*
							if (statusObj.code != null) {
								statusObj.code = statusObj.code + &quot;;&quot; + message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							} else {
								statusObj.code = message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							}
							*/
							if (statusObj.message != null) {
								statusObj.message = statusObj.message + &quot;;&quot; + auxGetStatusMessage(value);
							} else {
								statusObj.message = auxGetStatusMessage(value);
							}
						}
					}
				});
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel: messageSummary status --&gt; &quot; + error.toString());
			}
			messageSummaryObj.status = statusObj;
		
			//metaData
			//messageSummaryObj.metaData = (summMetadataArr == undefined || summMetadataArr == null) ? new Array() : summMetadataArr;
			try {
				var listMetadataCol = com.mirth.connect.server.controllers.ChannelController.getInstance().getMetaDataColumns(messageSummaryObj.channelId);
				var metadataColArr = new Array();
				for (var i = 0; i &lt; listMetadataCol.size(); i++) {
					var metaObj = new Object();
					metaObj.name = listMetadataCol.get(i).getName();
					var mappingName = listMetadataCol.get(i).getMappingName();
					metaObj.value = (message.getConnectorMessages().get(0).getChannelMap().get(mappingName) == undefined) ? null : message.getConnectorMessages().get(0).getChannelMap().get(mappingName).toString(); // para ficarem todos como string
					if (metaObj.value != null) {
						metadataColArr.push(metaObj);
					}
				}
				messageSummaryObj.metaData = metadataColArr;
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
				messageSummaryObj.metadata = null;
			}
			
			logMsg.messageSummary = messageSummaryObj;
		
			// ------------------------
			//content
			var contentObj = new Object();
			//content.source
			var sourceObj = new Object();
			//content.source.server
			sourceObj.server = sourceServer == undefined ? null : sourceServer;
			//content.source.status
			sourceObj.status = message.getConnectorMessages().get(0).getStatus().toString();
			//content.source.statusMessage
			sourceObj.statusMessage = auxGetStatusMessage(0);
			//content.source.message
			sourceObj.message = isJSON(message.getConnectorMessages().get(0).getRawData()) ? JSON.parse(message.getConnectorMessages().get(0).getRawData()) : message.getConnectorMessages().get(0).getRawData(); //msg antes de passar pelo preprocessor e antes de ser mudada no Transformer
			//content.source.dataType
			sourceObj.dataType = message.getConnectorMessages().get(0).getRaw().getDataType();
			//content.source.date
			var dateCalendar = message.getConnectorMessages().get(0).getReceivedDate();
			var dateUTC = auxCalendarParse(dateCalendar);
			sourceObj.date = dateUTC;
			//content.source.metadata
			sourceObj.metaData = (sourceMetadataArr == undefined || sourceMetadataArr == null) ? new Array() : sourceMetadataArr;
			//content.source.responseMessage
			if (message.getConnectorMessages().get(0).getResponseData() == null) { // no response
				sourceObj.responseMessage = null;
			} else if (message.getConnectorMessages().get(0).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
				sourceObj.responseMessage = null;
			} else { //houve response 
				sourceObj.responseMessage = isJSON(message.getConnectorMessages().get(0).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(0).getResponseData().getMessage()) : message.getConnectorMessages().get(0).getResponseData().getMessage();
			}
			contentObj.source = sourceObj;
		
			// -------------------------
			//content.destinations
			var destinationsArray = new Array();
			message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName
				value = parseInt(value);
				if (value != 0) { //ignorar Source (metadataId=0)
					//logger.info(&quot;value= &quot; + typeof(value) + &quot; &quot; + value + &quot;;&quot; + &quot;key= &quot; + typeof(key) + &quot; &quot; + key);
					var destinationObj = new Object();
					//content.destinations.server
					if (destinationServerMap != undefined &amp;&amp; destinationServerMap != null) {
						if (destinationServerMap.has(value)) {
							destinationObj.server = destinationServerMap.get(value);
						} else {
							destinationObj.server = null;
						}
					} else {
						destinationObj.server = null;
					}
					//content.destinations.destinationId
					destinationObj.destinationId = value;
					//content.destinations.destinationName
					destinationObj.destinationName = key;
					//content.destinations.status
					destinationObj.status = message.getConnectorMessages().get(value).getStatus().toString();
					//content.destinations.statusMessage
					destinationObj.statusMessage = auxGetStatusMessage(value);
					//content.destinations.message
					try {
						destinationObj.message = isJSON(message.getConnectorMessages().get(value).getEncodedData()) ? JSON.parse(message.getConnectorMessages().get(value).getEncodedData()) : message.getConnectorMessages().get(value).getEncodedData();
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel: destination message --&gt; &quot; + error.toString());
						destinationObj.message = null;
					}
					//logger.info(message.getConnectorMessages().get(value).getMessageContent(ContentType.SENT));
					//content.destinations.dataType
					// destinationObj.dataType = message.getConnectorMessages().get(value).getEncoded().getDataType();
					try {
						var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
						var channel = channelController.getChannelByName(message.getConnectorMessages().get(0).getChannelName().toString());
						var connectors = channel.getDestinationConnectors().toArray();
						// Iterate through the connectors
						for each (var connector in connectors) {
						    // Check if the current connector matches the desired connector name
						    if (connector.getName() == key) {
						    		destinationObj.dataType = connector.getTransformer().getOutboundDataType();
						    		break;
						    }
						}
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
						destinationObj.dataType = null;
					}
					
					//content.destinations.date
					var dateCalendar = message.getConnectorMessages().get(value).getSendDate();
					if (dateCalendar != null) { // destination QUEUED
						var dateUTC = auxCalendarParse(dateCalendar);
						destinationObj.date = dateUTC;
					} else {
						destinationObj.date = null;
					}

					//content.destinations.metaData
					if (destinationsMetadataMap != undefined &amp;&amp; destinationsMetadataMap != null) {
						if (destinationsMetadataMap.has(value)) {
							destinationObj.metaData = destinationsMetadataMap.get(value) == null ? new Array() : destinationsMetadataMap.get(value);
						} else {
							destinationObj.metaData = new Array();
						}
					} else {
						destinationObj.metaData = new Array();
					}
		
					//content.destinations.responseMessage
					if (message.getConnectorMessages().get(value).getResponseData() == null) { // no response
						destinationObj.responseMessage = null;
					} else if (message.getConnectorMessages().get(value).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
						destinationObj.responseMessage = null;
					} else { //houve response
						destinationObj.responseMessage = isJSON(message.getConnectorMessages().get(value).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(value).getResponseData().getMessage()) : message.getConnectorMessages().get(value).getResponseData().getMessage();
					}
					destinationsArray.push(destinationObj);
				}
			});
			contentObj.destinations = destinationsArray;
			
			logMsg.content = contentObj;
			//logger.info(JSON.stringify(logMsg));

			//send it
			return JSON.stringify(logMsg);

			/*
			var respLogChannel = router.routeMessage(&apos;Logs_WHS-OUT&apos;, JSON.stringify(logMsg));
			if (respLogChannel == null || respLogChannel == undefined) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			} else if (respLogChannel.getStatus() == Status.ERROR) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			}
			*/

		} catch (error) {
			logger.info(&quot;sendMsgInfoLogChannel:geral  --&gt; &quot; + error.toString());
		}
	}	
}

function auxCalendarParse(dateCalendar) {
	var theMonth = dateCalendar.get(dateCalendar.MONTH) +1;
	var theMonthStr = theMonth.toString().padStart(2,&apos;0&apos;);
	var datestr = dateCalendar.get(dateCalendar.YEAR).toString() + theMonthStr + dateCalendar.get(dateCalendar.DAY_OF_MONTH).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.HOUR_OF_DAY).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.MINUTE).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.SECOND).toString().padStart(2,&apos;0&apos;);
	return DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
}

function auxGetStatusMessage(connMetadaId) {
	connMessage = message.getConnectorMessages().get(connMetadaId);
	if (connMessage.getStatus().toString() == &quot;ERROR&quot;) {
		if (connMessage.getProcessingError() != &quot;&quot;) {
			return connMessage.getProcessingError();
		} else if (connMessage.getPostProcessorError() != &quot;&quot;) {
			return connMessage.getPostProcessorError();
		} else if (connMessage.getResponseError() != &quot;&quot;) {
			return connMessage.getResponseError();
		}
	}
	return null;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>fe90c913-c365-44d1-b309-7c4dae7d9d9a</id>
            <name>Utils</name>
            <revision>6</revision>
            <lastModified>
              <time>1730893909835</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Utils functions for Mirth Channels</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>9d0737dd-b85f-4e05-bd6e-b83828e87bdf</id>
                <name>addIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792349</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Aidiciona um objeto relativo a um identificador (Ex: {&quot;sistemaCodificador&quot;:&quot;Appointment.id&quot;, &quot;codigo&quot;: 1111} ) a uma lista de identificadores

	@param {String} sistCodificador - nome do sistemaCodificador (ex: &quot;Appointment.id&quot; ou &quot;Encounter.identifier&quot;)
	@param {String} codigo - value relativo ao sistCodificador
	@param {String} listaAdicionar - listagem já existente (ou vazia/null/undefined) de identificadores
	@return {String} return listaIdentificadores
*/
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	var lista;
	try {
		if (listaAdicionar  &amp;&amp; Array.isArray(listaAdicionar)) {
			lista = JSON.parse( JSON.stringify(listaAdicionar));
		} else {
			logger.info(&quot;excecao1&quot;);
			lista= [];
		}
	} catch (err) {
		logger.info(&quot;excecao2&quot; + err.toString());
		lista =  [];
	}
	/*
	if (! Array.isArray(listaAdicionar)) {
		lista = [];
	} else {
		lista = JSON.parse( JSON.stringify(listaAdicionar));
	}
	*/
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			lista.push(obj);
		}
	}
    	return lista;
	
}

/*
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	if (! Array.isArray(listaAdicionar)) {
		listaAdicionar = [];
	}
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			listaAdicionar.push(obj);
		}
	}
    	return listaAdicionar;
	
}
*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83c82ac5-e364-41b2-99cc-6a4ead5eaa37</id>
                <name>callApi</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793110</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Generic code to implement API call

	@param {String} method - http method
	@param {String} url - http url
	@param {String} user - api username
	@param {String} pass - api password
	@return {Object} return api response
*/
function callApi(method, url, user, pass) {
	
	var url = new Packages.java.net.URL(url);
	var connection = url.openConnection();
	connection.setRequestMethod(method);
	
	try {
	  var responseCode = connection.getResponseCode();
	  if (responseCode === Packages.java.net.HttpURLConnection.HTTP_OK) {	//	200
	    var inputStream = connection.getInputStream();
	    var reader = new Packages.java.io.BufferedReader(new Packages.java.io.InputStreamReader(inputStream));
	    var response = &quot;&quot;; // Inicializa a variável response
	
		    while ((line = reader.readLine()) !== null) {
		      response += line;
		    }      
	        reader.close();	      
		   
		   return JSON.parse(response.toString());
	
	    } else {
	        var errorMessage = &quot;Erro na chamada ao Web Service: &quot; +  url + &quot; Código de resposta: &quot; + responseCode;
	        // Trata os casos em que a chamada ao Web Service não foi bem-sucedida        
	        throw new Error(errorMessage);
	    }
	} catch (e) {
	    // Capturar exceção e retornar status e mensagem de erro
	    var errorStatus = connection.getResponseCode();
//	    var errorMessage = e.getMessage();	    
	    throw new Error(errorStatus);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fd200634-44bd-483c-97ab-743c373d4b7a</id>
                <name>checkIfExameEspecial</name>
                <revision>2</revision>
                <lastModified>
                  <time>1730739683915</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo objetivo passa por receber um código identificativo de um exame (ou outro serviço qualquer) e retornar se o mesmo é um exame especial ou não. Para
	tal, a função vai à tabela de catálogo da BD verificar se o código lá existe. Caso haja algum problema de acesso à BD, e de forma opcional, a função tenta aceder
	ao endpoint do sistema externo para fazer a verificação de exame especial.

	@param {String} catalogCode - código de catálogo CUF a ser analisado
	@param {String} externalSysCode - código de catálogo do sistema externo a ser analisado
	@return {Object} return object
*/
function checkIfExameEspecial(catalogCode, externalSysCode) {
	var error = false;
	var errorMsg = null;
	var isExameEspecial = null;
	var resposta = new Object();
	
	// Get a database connection 
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	var selectQuery = &quot;SELECT * FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; WHERE \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; and ativo = true;&quot;;
	try {
		// Execute the SQL query
		result = dbConn.executeCachedQuery(selectQuery);
		if (result.next() ) { // true
			isExameEspecial = true;
		} else { 
			isExameEspecial = false; // false
		}
	} catch (e) {
		error = true;
		logger.info(&quot;e.toString() = &quot; + e.toString());
		errorMsg = e.toString();
	} finally {
	    // Close the database connection
	    dbConn.close();
	}

	//houve erro no acesso à BD, logo tenta aceder ao endpoint do sistema externo para obter essa informação
	if (isExameEspecial == null &amp;&amp; typeof externalSysCode != &apos;undefined&apos;) {
		var httpPostURL = $(&apos;Transactional_CUFBUS_Host&apos;) + &quot;CodeSystem/Service/$lookup&quot;;
		var body = new Object();
		body.resourceType= &quot;Parameters&quot;;
		body.parameter = [{&quot;name&quot;:&quot;code&quot;,&quot;valueCode&quot;:externalSysCode}];
		var authHeader = null
		if ($(&apos;Transactional_CUFBUS_User&apos;) != null &amp;&amp; $(&apos;Transactional_CUFBUS_Pass&apos;) != &apos;&apos;){
			authHeader = apiGenerateBasicAuthHeader($(&apos;Transactional_CUFBUS_User&apos;), $(&apos;Transactional_CUFBUS_Pass&apos;));  
		}
		httpResp = httpPost(httpPostURL,JSON.stringify(body),authHeader);
		
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var parametersRes = JSON.parse(httpResp.responseMessage);
				try {
					if (parametersRes[&apos;resourceType&apos;] == &quot;Parameters&quot;) {
						var checkExameEspecial = null;
						parametersRes[&apos;parameter&apos;].find( function(parameter) {
							if(parameter[&apos;name&apos;] == &quot;property&quot;) {
								parameter[&apos;part&apos;].find( function(part) {
									if (part[&apos;valueCoding&apos;]) {
										if (part[&apos;valueCoding&apos;][&apos;code&apos;] == $(&apos;Catalogo_ServiceCategory_ExameEspecial&apos;)) {
											isExameEspecial = true;
											checkExameEspecial = true;
											return true;
										}
									}
								})
							}
						})
						if (checkExameEspecial == null) { // não encontrou property de exame especial, logo não é exame especial
							isExameEspecial = false;
						}
					} else {
						error = true;
						errorMsg = &quot;A Parameters Resource was expected as a response&quot;;
					}
				} catch (e2) {
					error = true;
					errorMsg = &quot;Error parsing the response from the endpoint &quot; + e2.toString();
				}
			} else {
				error = true;
				errorMsg = &quot;Endpoint response was not JSON&quot;;
			}
		} else {
			error = true;
			errorMsg = httpResp.statusText ? httpResp.statusText : (httpResp.responseMessage ? httpResp.responseMessage : null);;		
		}
	}
	if (isExameEspecial == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg; //string
	} else {
		resposta.statusCode = &quot;200&quot;;
		resposta.responseMessage = isExameEspecial; // boolean
	}
	return resposta;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b53102c9-17cf-431e-b87a-40d08fe73203</id>
                <name>convertDateToTimeStamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793287</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertDateToTimeStamp(date) {

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = &apos;00&apos;;
	var min = &apos;00&apos;;
	var sec = &apos;00&apos;;
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5714586f-45b8-45cb-9af6-fdabfe1bf9b2</id>
                <name>convertTimeStampToDateStr</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787735</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and time &quot;HHmmss&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@param {String} time - time in format &quot;HHmmss&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertTimeStampToDateStr(date, time) {

	if (time.length &lt;= 5){ // left pad
		time = time.padStart(time.length + 1, &apos;0&apos;);
	}

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = time.substring(0, 2);
	var min = time.substring(2, 4);
	var sec = time.substring(4, 6);
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b4455483-c833-4b4e-adb9-c646cad7bcfe</id>
                <name>DateUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791914</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Date to UTC

	@param {String} date - Date string in format &quot;yyyy-MM-ddTHH:mm:ss+SSSS&quot;
	@return {String} return date in UTC &quot;yyyy-MM-ddTHH:mm:ss+Z&quot;
*/
function DateUtc(date, dateFormat) {

     var formatter_hl7 = new java.text.SimpleDateFormat(dateFormat != null ? dateFormat : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss+SSSS&quot;);
     formatter_hl7.setTimeZone(java.util.TimeZone.getTimeZone($(&apos;serverTimeZone&apos;)));
     var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
     formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	return formatter_utc.format(formatter_hl7.parse(date));			
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4fbdd7b8-7dd0-4ba3-ba13-0a8990b4513b</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788357</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8cb44e20-4b8a-48e6-93ae-aa905dbf2445</id>
                <name>generate_HLv2_messageId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788478</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função criadora de id de mensagem HL7 v2 (MSH.10.1) único v5

	@return {String} id unico
*/
function generate_HLv2_messageId(tipo_mensagem) {

	var timestamp = new Date().getTime().toString();
	var timestamp_length = timestamp.length;

	//random remaining characters
	remainder = 20-3-timestamp_length;
	
	// Generate a random number between 0... and 9...
	var randomNumber = Math.floor(Math.random() * Math.pow(10,remainder));
	// Convert the number to a string and pad it with leading zeros if needed
	var formattedNumber = randomNumber.toString().padStart(remainder, &apos;0&apos;);
	
	return timestamp + &quot;-&quot; + tipo_mensagem[0] +&quot;-&quot; + formattedNumber;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b4aa14b-ee5a-464f-b1c8-0917d2ea815c</id>
                <name>getArrayUniqueValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792417</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns unique values from an array

	@param {array} array - array
	@return {array} return unique values from array
*/
function getArrayUniqueValues(array) {
	var uniqueArray = [];
	for (var i = 0; i &lt; array.length; i++) {
	    if (uniqueArray.indexOf(array[i]) === -1) {
	        uniqueArray.push(array[i]);
	    }
	}

	return uniqueArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bd7561e-2fb9-41d1-a8e3-fbeabaf8099a</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793452</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4814b63d-13ac-4097-86e2-22ca3c24eda4</id>
                <name>getFirstName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns first name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getFirstName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[0];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a594fff0-deb4-4d2a-a11e-f39582b42120</id>
                <name>getIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791988</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Extrai da listagem de identificadores o &quot;codigo&quot; associado a um pretendido &quot;sistCodificador&quot;

	@param {String} listaIds - listagem de identificadores onde procurar
	@param {String} sistCodificador - sistemaCodificador a ser procurado na listagem de identificadores
	@return {String} return codigo (ou null, caso não exista)
*/
function getIdentificador(listaIds, sistCodificador) {
	var codigo = null;	
	try{  		
	    	listaIds.find(function(elemento) {
	    		if (elemento.sistemaCodificador){
	    			try { // para o caso de algum dos identificadores estar mal definido não impedir que se extraia a informação pretendida
		        		if (elemento.sistemaCodificador.toLowerCase() == sistCodificador.toLowerCase()){
		          		codigo= elemento.codigo;
		          		return true;
		        		}
	    			} catch (err) {
		        		;
		        	}
	      	}
	    });
    	} catch (ex1){
    		codigo = null;
    	}
	return codigo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f9529854-80ad-450b-ad8a-54a1b63ba9d1</id>
                <name>getLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791292</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns last name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getLastName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[(names.length -1) ];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6ff6cc61-fa90-455a-b9b4-26f12a870f91</id>
                <name>getLocationExameEspecial</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792555</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dada informação sobre o hospital, o código de catálogo de exame especial e a especialidade, retornar qual a localização no pretendido hospital predestinada para
	a ocorrência de exames especiais dessa mesma especialidade

	@param {String} hospitalINTRefExt - INTRefExt do hospital (CMFL, HTEJO, ...)
	@param {String} catalogCode - código de catálogo do exame especial (10058, 20056, ...)
	@param {String} especialidade - especialidade associada ao exame especial (Cardiologia, Oftalmologia, ...)
	@return {String} return {&quot;servico&quot;: &quot;...&quot;, &quot;area&quot;: &quot;...&quot;, &quot;sala&quot;: &quot;...&quot; &quot;cama&quot;: &quot;...&quot;}
*/
function getLocationExameEspecial(hospitalINTRefExt, catalogCode, especialidade) {
	var error = false;
	var errorMsg = null;
	var resposta = new Object();

	var cama = null;
	var sala = null;
	var area = null;
	var servico = null;
	
	if ( !hospitalINTRefExt || !catalogCode || !especialidade ) {
		error = true;
		errorMsg = &quot;Um dos parametros da função é invalido&quot;;
	} else {
	
		var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	
		/* var selectQuery = &quot;SELECT cama, sala, area FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE servico = &apos;&quot; + AAAAAAAAA + &quot;&apos; AND especialidade = &apos;&quot;+ especialidade + &quot;&apos; AND id =&quot;
						+ &quot;(SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where intRefExt = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) LIMIT 1) LIMIT 1;&quot;; */
	
		var selectIdLocalizacaoSQL = &quot;SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) ;&quot;;
	
		var listIdLocalizacao= [];
		try {
			// Execute the SQL query
			result = dbConn.executeCachedQuery(selectIdLocalizacaoSQL); // return javax.sql.rowset.CachedRowSet
			while (result.next()) {
				listIdLocalizacao.push(result.getString(&quot;idLocalizacao&quot;));
			}
		} catch (e) {
			error = true;
			logger.info(&quot;e.toString() = &quot; + e.toString());
			errorMsg = e.toString();
		} finally {
		    // Close the database connection
		    dbConn.close();
		}
		logger.info(&quot;lsita ids localizacao = &quot; +JSON.stringify(listIdLocalizacao));
		

		if (listIdLocalizacao.length == 0){ // não existem idLocalizacao configurados para o exame
			error = true;
			errorMsg = &quot;Não existem idLocalizacao para o código de catálogo &quot; + catalogCode + &quot; e hospital &quot; + hospitalINTRefExt;
		} else {
			var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
			if (listIdLocalizacao.length == 1) { //só existe 1 idLocalizacao, logo não interessa a especialidade porque a localizacao do exame especial é sempre no mesmo local
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id = &apos;&quot; + listIdLocalizacao[0] + &quot;&apos;;&quot;;
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}			
			} else { // existe mais do que uma localização, logo vai diferenceiar por especialidade
				ids = &quot;(&quot;;
				for (var i=0; i&lt; listIdLocalizacao.length; i++) {
				    ids += &quot;&apos;&quot; + listIdLocalizacao[i].toString() + &quot;&apos;,&quot;;
				}
				ids = ids.slice(0,-1) + &quot;)&quot;;
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id in &quot; + ids + &quot; and especialidade = &apos;&quot;+especialidade+ &quot;&apos;;&quot;;
				logger.info(selectInfosSQL);
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}	
			}
		}
	}


	if (error == true  ) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro interno getLocationExameEspecial()&quot;;
	} else if ( cama == null &amp;&amp; sala == null &amp;&amp; area == null  &amp;&amp; servico == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro na query à LocalizacaoExamesEspeciais&quot;;
	}else {
		resposta.statusCode = &quot;200&quot;;
		var respObj = new Object();
		respObj.cama = cama;
		respObj.area = area;
		respObj.sala = sala;
		respObj.servico = servico;
		resposta.responseMessage = respObj;
	}
	return resposta;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>903737fd-9a14-45ea-b3cf-2af18ba88142</id>
                <name>getNumMecanograficoById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791627</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getNumMecanograficoById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.numMecanografico;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6bdd892d-3953-4f68-af96-44ff89434b13</id>
                <name>getPerfilUtilizadorById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789557</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getPerfilUtilizadorById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.perfil;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee58620f-c785-44f2-a4f7-26a8808c4e16</id>
                <name>getPerformerAndDatesRequisicaoMcdts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788016</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Object} accoesList - ...
	@param {Object} dataCriacaoRequisicao - ...
	@param {Object} utilizadoresList - ...
	@return {Object} return description

	(//R = obrigatório)
	--&gt; Formato esperado acoesList: [
          {
            &quot;utilizadorId&quot; : 12284, //R
            &quot;funcao&quot; : 1, //R
            &quot;data&quot; : &quot;2024-05-08T14:41:51.089035Z&quot; //R
          },
          {
            &quot;utilizadorId&quot; : 12284,
            &quot;funcao&quot; : 3,
            &quot;data&quot; : &quot;2024-05-08T14:27:58.349313Z&quot;
          }
        ]

     --&gt; Formato esperado utilizadoresList: [
	    {
	      &quot;id&quot; : 12284,
	      &quot;login&quot; : &quot;MDPIRES&quot;,
	      &quot;nome&quot; : &quot;Marcos Pires&quot;,
	      &quot;numMecanografico&quot; : &quot;263812278&quot;,
	      &quot;numOrdem&quot; : &quot;123&quot;,
	      &quot;numFuncionario&quot; : null,
	      &quot;perfil&quot; : 1,
	      &quot;intRefExt&quot; : null
	    }
	  ]
	
*/
function getPerformerAndDatesRequisicaoMcdts(accoesList,dataCriacaoRequisicao, utilizadoresList) {

	logger.info(&quot;accoesList - &quot; +JSON.stringify(accoesList));
	logger.info(&quot;dataCriacaoRequisicao - &quot; + JSON.stringify(dataCriacaoRequisicao));
	logger.info(&quot;utilizadoresList - &quot; + JSON.stringify(accoesList));
	returnObj = new Object();
	
	var Performer = Lists.list();
	var occurenceDateTime = null;
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(accoesList); j++ ){
	
	      try {
			if (accoesList[j][&apos;funcao&apos;] == 1 /* Relato */){
				dataRelato = accoesList[j][&apos;data&apos;];
			} else if (accoesList[j][&apos;funcao&apos;] == 2 /* Validacao */){
				dataValidacao = accoesList[j][&apos;data&apos;];
			} else {
				occurenceDateTime = dataCriacaoRequisicao;
			}
	       } catch (error) {
	       	logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro nas datas - &quot; + error.toString()); 
	     }
	
		try {
			  Performer.add({
			    function: {
			        coding: [{
			          system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			          code: newStringOrUndefined( accoesList[j][&apos;funcao&apos;] == 3 /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;])) : mapFuncao(accoesList[j][&apos;funcao&apos;]) )
			        }]
			      },
			    actor: {
			      reference: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) ) : null),
			      identifier: {
			        use: newStringOrUndefined(&apos;official&apos;),
			        type: {
			          coding: [{
			            system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
			            code: newStringOrUndefined(&apos;4&apos;)
			          }],
			          text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
			        },
			        value: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) : null)
			      }
			    }
		  });
		} catch (error2) {
			logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro no performer - &quot; + error2.toString()); 
		}
	}

	returnObj.performer = Performer;
	returnObj.occurenceDateTime = occurenceDateTime;
	returnObj.dataValidacao = dataValidacao;
	returnObj.dataRelato = dataRelato;

	return returnObj;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8615c472-c47a-48aa-a6e7-45e487c4463f</id>
                <name>getRabbitMqHosts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791032</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Void}
	@return {HostsDto} return hosts
*/
function getRabbitMqHosts() {
	// Set RabbitMQ Hosts
	importPackage(com.mirth.rabbitmq.client.dto);
	hosts = [];
	addr = new HostsDto(); // Main Host
	addr.setHost($(&apos;RabbitMqHost&apos;));
	addr.setPort(parseInt($(&apos;RabbitMqPort&apos;)));
	hosts.push(addr);

	return hosts;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f331cea8-c75e-40d4-83d9-a6779b688c81</id>
                <name>isJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790116</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a string is a valid JSON

	@param {String} string to validate if is JSON
	@return {Boolean} return boolean
*/
function isJSON(str) {
  try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27f41d50-5bd7-46da-9ad9-203181a92ba9</id>
                <name>isNumeric</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789613</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a value (string or number) is numeric

	@param {String} value to validate if is numeric
	@return {Boolean} return boolean
*/
function isNumeric(num) {
  if (typeof num == &quot;string&quot;) { 
    return !isNaN(num) &amp;&amp;
           !isNaN(parseFloat(num));
  } else if (typeof num == &quot;number&quot;) {
  	return true;
  } else {
  	return false;
  }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5c27a913-629d-4605-9e85-716a84e11410</id>
                <name>MappFrequencies</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to create multiple VAR Segments according Initial Date and CD_PrescricaoFrequencias

	@param {String} freqUni - CD_PrescricaoFrequencias description code
	@param {String} dateInit - Date HL7 string: start prescription date
	@param {String} DateEnd - Date HL7 string: end prescription date
	@return {String} return VAR Segment
*/
function MappFrequencies(freqUni, dateStart, DateEnd) {

	startDate = &quot;20230227115700&quot;;
	hora = startDate.substring(10, 8);
	freqfactor = 8;
	freqUnit = &apos;Dias&apos;;
	
	if (freqUnit == &apos;Hora&apos;){ // x em x horas
	    // calc hours segments
	    if (startDate.length &gt; 0 &amp;&amp; freqfactor &gt; 1){
	        console.log(&quot;running ...&quot;);
	        for (i = 0; i &lt; (24 / freqfactor) ; i++){
	            if ( (parseInt(hora) + (freqfactor * i) - 24) &gt;= 0  ){
	                hora = parseInt(hora) + (freqfactor * i) - 24;
	                break;
	            }
	        }
	        
	        if ((24 / freqfactor) &gt;= 1){
	            for(i = 0; i &lt; (24 / freqfactor); i++){
	                console.log( (parseInt(hora) + (freqfactor * i)).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	            }
	        }else {
	            console.log( parseInt(hora).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	        }   
	    }
	} else if (freqUnit == &apos;Dias&apos;){ // x em x dias
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Dias da Semanas&apos; || freqUnit == &apos;Por Dia&apos; || freqUnit == &apos;Refeições&apos; || freqUnit == &apos;Dia/Hora&apos;){ // têm de ser criados a cada dia
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Única&apos;){ // Hora fixa^5
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;SOS&apos;){
	    console.log( null )
	}else if (freqUnit == &apos;Turno Fixo&apos;) {
	    // tenho de pedir ao bruno para ter alguma informação relacionada com os turnos
	}else if (freqUnit == &apos;Contínuo&apos; || freqUnit == &apos;Sem horário&apos;){ // Sem hor\XE1\rio^0
	    console.log( null )
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e5cc4c3f-7233-42b0-8162-b3bec0ab5c94</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792857</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fdd919fc-4700-4a8f-aafe-cc2f4653f100</id>
                <name>Unescape HL7 Characters</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790479</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function hexMappingPreProcessor(result) {
	var hexMapping = [
			[/\\x21\\/gi, &quot;!&quot;], [/\\x22\\/gi, &apos;&quot;&apos;], [/\\x23\\/gi, &quot;#&quot;], [/\\x24\\/gi, &quot;$&quot;], [/\\x25\\/gi, &quot;%&quot;], [/\\x26\\/gi, &quot;&amp;&quot;], [/\\x27\\/gi, &quot;&apos;&quot;], [/\\x28\\/gi, &quot;(&quot;], [/\\x29\\/gi, &quot;)&quot;],
			[/\\x2a\\/gi, &quot;*&quot;], [/\\x2b\\/gi, &quot;+&quot;], [/\\x2c\\/gi, &quot;,&quot;], [/\\x2d\\/gi, &quot;-&quot;], [/\\x2e\\/gi, &quot;.&quot;], [/\\x2f\\/gi, &quot;/&quot;], [/\\x30\\/gi, &quot;0&quot;], [/\\x31\\/gi, &quot;1&quot;], [/\\x32\\/gi, &quot;2&quot;],
			[/\\x33\\/gi, &quot;3&quot;], [/\\x34\\/gi, &quot;4&quot;], [/\\x35\\/gi, &quot;5&quot;], [/\\x36\\/gi, &quot;6&quot;], [/\\x37\\/gi, &quot;7&quot;], [/\\x38\\/gi, &quot;8&quot;], [/\\x39\\/gi, &quot;9&quot;], [/\\x3a\\/gi, &quot;:&quot;], [/\\x3b\\/gi, &quot;;&quot;],
			[/\\x3c\\/gi, &quot;&lt;&quot;], [/\\x3d\\/gi, &quot;=&quot;], [/\\x3e\\/gi, &quot;&gt;&quot;], [/\\x3f\\/gi, &quot;?&quot;], [/\\x40\\/gi, &quot;@&quot;], [/\\x41\\/gi, &quot;A&quot;], [/\\x42\\/gi, &quot;B&quot;], [/\\x43\\/gi, &quot;C&quot;], [/\\x44\\/gi, &quot;D&quot;],
			[/\\x45\\/gi, &quot;E&quot;], [/\\x46\\/gi, &quot;F&quot;], [/\\x47\\/gi, &quot;G&quot;], [/\\x48\\/gi, &quot;H&quot;], [/\\x49\\/gi, &quot;I&quot;], [/\\x4a\\/gi, &quot;J&quot;], [/\\x4b\\/gi, &quot;K&quot;], [/\\x4c\\/gi, &quot;L&quot;], [/\\x4d\\/gi, &quot;M&quot;],
			[/\\x4e\\/gi, &quot;N&quot;], [/\\x4f\\/gi, &quot;O&quot;], [/\\x50\\/gi, &quot;P&quot;], [/\\x51\\/gi, &quot;Q&quot;], [/\\x52\\/gi, &quot;R&quot;], [/\\x53\\/gi, &quot;S&quot;], [/\\x54\\/gi, &quot;T&quot;], [/\\x55\\/gi, &quot;U&quot;], [/\\x56\\/gi, &quot;V&quot;],
			[/\\x57\\/gi, &quot;W&quot;], [/\\x58\\/gi, &quot;X&quot;], [/\\x59\\/gi, &quot;Y&quot;], [/\\x5a\\/gi, &quot;Z&quot;], [/\\x5b\\/gi, &quot;[&quot;], [/\\x5c\\/gi, &quot;\\&quot;], [/\\x5d\\/gi, &quot;]&quot;], [/\\x5e\\/gi, &quot;^&quot;], [/\\x5f\\/gi, &quot;_&quot;],
			[/\\x60\\/gi, &quot;`&quot;], [/\\x61\\/gi, &quot;a&quot;], [/\\x62\\/gi, &quot;b&quot;], [/\\x63\\/gi, &quot;c&quot;], [/\\x64\\/gi, &quot;d&quot;], [/\\x65\\/gi, &quot;e&quot;], [/\\x66\\/gi, &quot;f&quot;], [/\\x67\\/gi, &quot;g&quot;], [/\\x68\\/gi, &quot;h&quot;],
			[/\\x69\\/gi, &quot;i&quot;], [/\\x6a\\/gi, &quot;j&quot;], [/\\x6b\\/gi, &quot;k&quot;], [/\\x6c\\/gi, &quot;l&quot;], [/\\x6d\\/gi, &quot;m&quot;], [/\\x6e\\/gi, &quot;n&quot;], [/\\x6f\\/gi, &quot;o&quot;], [/\\x70\\/gi, &quot;p&quot;], [/\\x71\\/gi, &quot;q&quot;],
			[/\\x72\\/gi, &quot;r&quot;], [/\\x73\\/gi, &quot;s&quot;], [/\\x74\\/gi, &quot;t&quot;], [/\\x75\\/gi, &quot;u&quot;], [/\\x76\\/gi, &quot;v&quot;], [/\\x77\\/gi, &quot;w&quot;], [/\\x78\\/gi, &quot;x&quot;], [/\\x79\\/gi, &quot;y&quot;], [/\\x7a\\/gi, &quot;z&quot;],
			[/\\x7b\\/gi, &quot;{&quot;], [/\\x7c\\/gi, &quot;|&quot;], [/\\x7d\\/gi, &quot;}&quot;], [/\\x7e\\/gi, &quot;~&quot;], [/\\xa1\\/gi, &quot;¡&quot;], [/\\xa2\\/gi, &quot;¢&quot;], [/\\xa3\\/gi, &quot;£&quot;], [/\\xa4\\/gi, &quot;¤&quot;], [/\\xa5\\/gi, &quot;¥&quot;],
			[/\\xa6\\/gi, &quot;¦&quot;], [/\\xa7\\/gi, &quot;§&quot;], [/\\xa8\\/gi, &quot;¨&quot;], [/\\xa9\\/gi, &quot;©&quot;], [/\\xaa\\/gi, &quot;ª&quot;], [/\\xab\\/gi, &quot;«&quot;], [/\\xac\\/gi, &quot;¬&quot;], [/\\xa0\\/gi, &quot; &quot;], [/\\xae\\/gi, &quot;®&quot;],
			[/\\xaf\\/gi, &quot;¯&quot;], [/\\xad\\/gi, &quot; &quot;], [/\\xb0\\/gi, &quot;°&quot;], [/\\xb1\\/gi, &quot;±&quot;], [/\\xb2\\/gi, &quot;²&quot;], [/\\xb3\\/gi, &quot;³&quot;], [/\\xb4\\/gi, &quot;´&quot;], [/\\xb5\\/gi, &quot;µ&quot;], [/\\xb6\\/gi, &quot;¶&quot;],
			[/\\xb7\\/gi, &quot;·&quot;], [/\\xb8\\/gi, &quot;¸&quot;], [/\\xb9\\/gi, &quot;¹&quot;], [/\\xba\\/gi, &quot;º&quot;], [/\\xbb\\/gi, &quot;»&quot;], [/\\xbc\\/gi, &quot;¼&quot;], [/\\xbd\\/gi, &quot;½&quot;], [/\\xbe\\/gi, &quot;¾&quot;], [/\\xbf\\/gi, &quot;¿&quot;],
			[/\\xc0\\/gi, &quot;À&quot;], [/\\xc1\\/gi, &quot;Á&quot;], [/\\xc2\\/gi, &quot;Â&quot;], [/\\xc3\\/gi, &quot;Ã&quot;], [/\\xc4\\/gi, &quot;Ä&quot;], [/\\xc5\\/gi, &quot;Å&quot;], [/\\xc6\\/gi, &quot;Æ&quot;], [/\\xc7\\/gi, &quot;Ç&quot;], [/\\xc8\\/gi, &quot;È&quot;],
			[/\\xc9\\/gi, &quot;É&quot;], [/\\xca\\/gi, &quot;Ê&quot;], [/\\xcb\\/gi, &quot;Ë&quot;], [/\\xcc\\/gi, &quot;Ì&quot;], [/\\xcd\\/gi, &quot;Í&quot;], [/\\xce\\/gi, &quot;Î&quot;], [/\\xcf\\/gi, &quot;Ï&quot;], [/\\xd0\\/gi, &quot;Ð&quot;], [/\\xd1\\/gi, &quot;Ñ&quot;],
			[/\\xd2\\/gi, &quot;Ò&quot;], [/\\xd3\\/gi, &quot;Ó&quot;], [/\\xd4\\/gi, &quot;Ô&quot;], [/\\xd5\\/gi, &quot;Õ&quot;], [/\\xd6\\/gi, &quot;Ö&quot;], [/\\xd7\\/gi, &quot;×&quot;], [/\\xd8\\/gi, &quot;Ø&quot;], [/\\xd9\\/gi, &quot;Ù&quot;], [/\\xda\\/gi, &quot;Ú&quot;],
			[/\\xdb\\/gi, &quot;Û&quot;], [/\\xdc\\/gi, &quot;Ü&quot;], [/\\xdd\\/gi, &quot;Ý&quot;], [/\\xde\\/gi, &quot;Þ&quot;], [/\\xdf\\/gi, &quot;ß&quot;], [/\\xe0\\/gi, &quot;à&quot;], [/\\xe1\\/gi, &quot;á&quot;], [/\\xe2\\/gi, &quot;â&quot;], [/\\xe3\\/gi, &quot;ã&quot;],
			[/\\xe4\\/gi, &quot;ä&quot;], [/\\xe5\\/gi, &quot;å&quot;], [/\\xe6\\/gi, &quot;æ&quot;], [/\\xe7\\/gi, &quot;ç&quot;], [/\\xe8\\/gi, &quot;è&quot;], [/\\xe9\\/gi, &quot;é&quot;], [/\\xea\\/gi, &quot;ê&quot;], [/\\xeb\\/gi, &quot;ë&quot;], [/\\xec\\/gi, &quot;ì&quot;],
			[/\\xed\\/gi, &quot;í&quot;], [/\\xee\\/gi, &quot;î&quot;], [/\\xef\\/gi, &quot;ï&quot;], [/\\xf0\\/gi, &quot;ð&quot;], [/\\xf1\\/gi, &quot;ñ&quot;], [/\\xf2\\/gi, &quot;ò&quot;], [/\\xf3\\/gi, &quot;ó&quot;], [/\\xf4\\/gi, &quot;ô&quot;], [/\\xf5\\/gi, &quot;õ&quot;],
			[/\\xf6\\/gi, &quot;ö&quot;], [/\\xf7\\/gi, &quot;÷&quot;], [/\\xf8\\/gi, &quot;ø&quot;], [/\\xf9\\/gi, &quot;ù&quot;], [/\\xfa\\/gi, &quot;ú&quot;], [/\\xfb\\/gi, &quot;û&quot;], [/\\xfc\\/gi, &quot;ü&quot;], [/\\xfd\\/gi, &quot;ý&quot;], [/\\xfe\\/gi, &quot;þ&quot;],
			[/\\xff\\/gi, &quot;ÿ&quot;], [/\\x91\\/gi, &quot;‘&quot;], [/\\x92\\/gi, &quot;’&quot;], [/\\x80\\/gi, &quot;€&quot;], [/\\x83\\/gi, &quot;ƒ&quot;], [/\\x85\\/gi, &quot;…&quot;], [/\\x86\\/gi, &quot;†&quot;], [/\\x87\\/gi, &quot;‡&quot;], [/\\x88\\/gi, &quot;ˆ&quot;],
			[/\\x89\\/gi, &quot;‰&quot;], [/\\x8a\\/gi, &quot;Š&quot;], [/\\x8b\\/gi, &quot;‹&quot;], [/\\x8c\\/gi, &quot;Œ&quot;], [/\\x8e\\/gi, &quot;Ž&quot;], [/\\x93\\/gi, &quot;“&quot;], [/\\x94\\/gi, &quot;”&quot;], [/\\x95\\/gi, &quot;•&quot;], [/\\x96\\/gi, &quot;–&quot;],
			[/\\x97\\/gi, &quot;—&quot;], [/\\x98\\/gi, &quot;˜&quot;], [/\\x99\\/gi, &quot;™&quot;], [/\\x9a\\/gi, &quot;š&quot;], [/\\x9b\\/gi, &quot;›&quot;], [/\\x9c\\/gi, &quot;œ&quot;], [/\\x9e\\/gi, &quot;ž&quot;], [/\\x9f\\/gi, &quot;Ÿ&quot;], [/\\x2079\\/gi, &quot;⁹&quot;],
			[/Ã¡/g, &quot;á&quot;], [/Ã³/g, &quot;ó&quot;], [/Âµ/g, &quot;µ&quot;], [/Ã£/g, &quot;ã&quot;], [/Ã§/g, &quot;ç&quot;], [/Ã©/g, &quot;é&quot;], [/Ãº/g, &quot;ú&quot;], [/Â³/g, &quot;³&quot;], [/\\.br\\/gi, &quot; &quot;], [/  +/g, &apos; &apos;], [/Âº/g, &quot;º&quot;], [/Ã&#x81;/g, &quot;Á&quot;],
			[/Ã¢/g, &quot;â&quot;], [/Ãµ/g, &quot;õ&quot;], [/Ã&#x87;Ã&#x83;/g, &quot;ÇÃ&quot;], [/Ã&#x8d;/g, &apos;Í&apos;], [/Ã&#x87;Ã&#x95;/g, &apos;ÇÕ&apos;], [/Ã&#x93;/g, &quot;Ó&quot;]
			];
	
	for(var i = 0; i &lt; hexMapping.length; i++){
		result = result.replace(hexMapping[i][0], hexMapping[i][1]);
	}

	var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
	for(var i = 0; i &lt; replaceList.length; i++){
		do{
			result = result.replace(replaceList[i][0], replaceList[i][1]);
		}while(result.indexOf(replaceList[i][0]) &gt; -1);
	}
	
	return result;
}



function encodeIsoLatin(result) {
	var hexMapping = [
			/* [&quot;\\x21\\&quot;, &quot;!&quot;], [&quot;\\x3f\\&quot;, &quot;?&quot;], [&quot;\\x2c\\&quot;, &quot;,&quot;], [&quot;\\x3a\\&quot;, &quot;:&quot;], [&quot;\\x2e\\&quot;, &quot;.&quot;], [&quot;\\xa0\\&quot;, &quot; &quot;], [&quot;\\xad\\&quot;, &quot; &quot;], [&quot;\\x2d\\&quot;, &quot;-&quot;], [&quot;\\x5b\\&quot;, &quot;[&quot;], [&quot;\\x5d\\&quot;, &quot;]&quot;], [&quot;\\x5c\\&quot;, &quot;\\&quot;]*/ 
			[&quot;\\x22\\&quot;, /&quot;/g], [&quot;\\x23\\&quot;, /#/g], [&quot;\\x24\\&quot;, /\$/g], [&quot;\\x25\\&quot;, /%/g], [&quot;\\x26\\&quot;, /&amp;/g], [&quot;\\x27\\&quot;, /&apos;/g],
			[&quot;\\x2a\\&quot;, /\*/g], [&quot;\\x2b\\&quot;, /\+/g], [&quot;\\x2f\\&quot;, /\//g], [&quot;\\x3b\\&quot;, /;/g],
			[&quot;\\x3c\\&quot;, /&lt;/g], [&quot;\\x3d\\&quot;, /=/g], [&quot;\\x3e\\&quot;, /&gt;/g], [&quot;\\x40\\&quot;, /@/g], 
			[&quot;\\x5e\\&quot;, /\^/g], [&quot;\\x5f\\&quot;, /_/g], [&quot;\\x60\\&quot;, /`/g], [&quot;\\x7b\\&quot;, /{/g], [&quot;\\x7c\\&quot;, /\|/g], [&quot;\\x7d\\&quot;, /}/g], 
			[&quot;\\x7e\\&quot;, /~/g], [&quot;\\xa1\\&quot;, /¡/g], [&quot;\\xa2\\&quot;, /¢/g], [&quot;\\xa3\\&quot;, /£/g], [&quot;\\xa4\\&quot;, /¤/g], [&quot;\\xa5\\&quot;, /¥/g],
			[&quot;\\xa6\\&quot;, /¦/g], [&quot;\\xa7\\&quot;, /§/g], [&quot;\\xa8\\&quot;, /¨/g], [&quot;\\xa9\\&quot;, /©/g], [&quot;\\xaa\\&quot;, /ª/g], [&quot;\\xab\\&quot;, /«/g], [&quot;\\xac\\&quot;, /¬/g], [&quot;\\xae\\&quot;, /®/g],
			[&quot;\\xaf\\&quot;, /¯/g], [&quot;\\xb0\\&quot;, /°/g], [&quot;\\xb1\\&quot;, /±/g], [&quot;\\xb2\\&quot;, /²/g], [&quot;\\xb3\\&quot;, /³/g], [&quot;\\xb4\\&quot;, /´/g], [&quot;\\xb5\\&quot;, /µ/g], [&quot;\\xb6\\&quot;, /¶/g],
			[&quot;\\xb7\\&quot;, /·/g], [&quot;\\xb8\\&quot;, /¸/g], [&quot;\\xb9\\&quot;, /¹/g], [&quot;\\xba\\&quot;, /º/g], [&quot;\\xbb\\&quot;, /»/g], [&quot;\\xbc\\&quot;, /¼/g], [&quot;\\xbd\\&quot;, /½/g], [&quot;\\xbe\\&quot;, /¾/g], [&quot;\\xbf\\&quot;, /¿/],
			[&quot;\\xc0\\&quot;, /À/g], [&quot;\\xc1\\&quot;, /Á/g], [&quot;\\xc2\\&quot;, /Â/g], [&quot;\\xc3\\&quot;, /Ã/g], [&quot;\\xc4\\&quot;, /Ä/g], [&quot;\\xc5\\&quot;, /Å/g], [&quot;\\xc6\\&quot;, /Æ/g], [&quot;\\xc7\\&quot;, /Ç/g], [&quot;\\xc8\\&quot;, /È/g],
			[&quot;\\xc9\\&quot;, /É/g], [&quot;\\xca\\&quot;, /Ê/g], [&quot;\\xcb\\&quot;, /Ë/g], [&quot;\\xcc\\&quot;, /Ì/g], [&quot;\\xcd\\&quot;, /Í/g], [&quot;\\xce\\&quot;, /Î/g], [&quot;\\xcf\\&quot;, /Ï/g], [&quot;\\xd0\\&quot;, /Ð/g], [&quot;\\xd1\\&quot;, /Ñ/g],
			[&quot;\\xd2\\&quot;, /Ò/g], [&quot;\\xd3\\&quot;, /Ó/g], [&quot;\\xd4\\&quot;, /Ô/g], [&quot;\\xd5\\&quot;, /Õ/g], [&quot;\\xd6\\&quot;, /Ö/g], [&quot;\\xd7\\&quot;, /×/g], [&quot;\\xd8\\&quot;, /Ø/g], [&quot;\\xd9\\&quot;, /Ù/g], [&quot;\\xda\\&quot;, /Ú/g],
			[&quot;\\xdb\\&quot;, /Û/g], [&quot;\\xdc\\&quot;, /Ü/g], [&quot;\\xdd\\&quot;, /Ý/g], [&quot;\\xde\\&quot;, /Þ/g], [&quot;\\xdf\\&quot;, /ß/g], [&quot;\\xe0\\&quot;, /à/g], [&quot;\\xe1\\&quot;, /á/g], [&quot;\\xe2\\&quot;, /â/g], [&quot;\\xe3\\&quot;, /ã/g],
			[&quot;\\xe4\\&quot;, /ä/g], [&quot;\\xe5\\&quot;, /å/g], [&quot;\\xe6\\&quot;, /æ/g], [&quot;\\xe7\\&quot;, /ç/g], [&quot;\\xe8\\&quot;, /è/g], [&quot;\\xe9\\&quot;, /é/g], [&quot;\\xea\\&quot;, /ê/g], [&quot;\\xeb\\&quot;, /ë/g], [&quot;\\xec\\&quot;, /ì/g],
			[&quot;\\xed\\&quot;, /í/g], [&quot;\\xee\\&quot;, /î/g], [&quot;\\xef\\&quot;, /ï/g], [&quot;\\xf0\\&quot;, /ð/g], [&quot;\\xf1\\&quot;, /ñ/g], [&quot;\\xf2\\&quot;, /ò/g], [&quot;\\xf3\\&quot;, /ó/g], [&quot;\\xf4\\&quot;, /ô/g], [&quot;\\xf5\\&quot;, /õ/g],
			[&quot;\\xf6\\&quot;, /ö/g], [&quot;\\xf7\\&quot;, /÷/g], [&quot;\\xf8\\&quot;, /ø/g], [&quot;\\xf9\\&quot;, /ù/g], [&quot;\\xfa\\&quot;, /ú/g], [&quot;\\xfb\\&quot;, /û/g], [&quot;\\xfc\\&quot;, /ü/g], [&quot;\\xfd\\&quot;, /ý/g], [&quot;\\xfe\\&quot;, /þ/g],
			[&quot;\\xff\\&quot;, /ÿ/g], [&quot;\\x91\\&quot;, /‘/g], [&quot;\\x92\\&quot;, /’/g], [&quot;\\x80\\&quot;, /€/g], [&quot;\\x83\\&quot;, /ƒ/g], [&quot;\\x85\\&quot;, /…/g], [&quot;\\x86\\&quot;, /†/g], [&quot;\\x87\\&quot;, /‡/g], [&quot;\\x88\\&quot;, /ˆ/g],
			[&quot;\\x89\\&quot;, /‰/g], [&quot;\\x8a\\&quot;, /Š/g], [&quot;\\x8b\\&quot;, /‹/g], [&quot;\\x8c\\&quot;, /Œ/g], [&quot;\\x8e\\&quot;, /Ž/g], [&quot;\\x93\\&quot;, /“/g], [&quot;\\x94\\&quot;, /”/g], [&quot;\\x95\\&quot;, /•/g], [&quot;\\x96\\&quot;, /–/g],
			[&quot;\\x97\\&quot;, /—/g], [&quot;\\x98\\&quot;, /˜/g], [&quot;\\x99\\&quot;, /™/g], [&quot;\\x9a\\&quot;, /š/g], [&quot;\\x9b\\&quot;, /›/g], [&quot;\\x9c\\&quot;, /œ/g], [&quot;\\x9e\\&quot;, /ž/g], [&quot;\\x9f\\&quot;, /Ÿ/g], [&quot;\\x2079\\&quot;, /⁹/g],
			[&quot;\\x0a\\&quot;, /\n/g], [&quot;\\x0d\\&quot;, /\r/g]
			];
	
	if (result != null){
		for(var i = 0; i &lt; hexMapping.length; i++){
			result = result.replace(hexMapping[i][1], hexMapping[i][0]);
		}		

		var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
		for(var i = 0; i &lt; replaceList.length; i++){
			do{
				result = result.replace(replaceList[i][1], replaceList[i][0]);
			}while(result.indexOf(replaceList[i][0]) &gt; -1);
		}
	}
	
	return result;
}


function hexMappingReservatedChars(result) {
	var pattern = [[/\\T\\/g, &quot;&amp;&quot; ], [/\\R\\/g, &apos;~&apos;], [/\\E\\/g, &apos;\\&apos;], [/\\F\\/g, &apos;|&apos;], [/\\S\\/g, &apos;^&apos;]];
	
	for(var i = 0; i &lt; pattern.length; i++){
		result = result.replace(pattern[i][0], pattern[i][1]);
	}
	
	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fde5f48b-6860-49be-a9ab-dfb0e4ba3b97</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790008</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>43dbafee-1284-4c70-a98f-4125fc58703d</id>
      <nextMetaDataId>9</nextMetaDataId>
      <name>HL7v2_FACADE_IN</name>
      <description>Descrição:&#xd;
Canal responsável por receber as mensagens HL7 v2 provenientes do integrador legacy de PatientCare e reencaminhá-las, consoante o seu tipo, para os sistemas de interesse adequados.&#xd;
&#xd;
Documentação:&#xd;
&lt;Link do Confluence para os requisitos/documentação&gt;&#xd;
&#xd;
Versão:&#xd;
0.0.1&#xd;
&#xd;
Dependências:&#xd;
&lt;Listagem de todas as dependências, por exemplo custom-libs (JARs), extensions (fhir extension) e code templates&gt;&#xd;
&#xd;
Canais interligados:&#xd;
&lt;Listagem de canais&gt;&#xd;
&#xd;
Variáveis de ambiente:&#xd;
-</description>
      <revision>2</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.tcp.TcpReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <listenerConnectorProperties version="3.12.0">
            <host>0.0.0.0</host>
            <port>7690</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>ACK Response</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>true</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
            <pluginPointName>MLLP</pluginPointName>
            <startOfMessageBytes>0B</startOfMessageBytes>
            <endOfMessageBytes>1C0D</endOfMessageBytes>
            <useMLLPv2>false</useMLLPv2>
            <ackBytes>06</ackBytes>
            <nackBytes>15</nackBytes>
            <maxRetries>2</maxRetries>
          </transmissionModeProperties>
          <serverMode>true</serverMode>
          <remoteAddress></remoteAddress>
          <remotePort></remotePort>
          <overrideLocalBinding>false</overrideLocalBinding>
          <reconnectInterval>5000</reconnectInterval>
          <receiveTimeout>0</receiveTimeout>
          <bufferSize>65536</bufferSize>
          <maxConnections>10</maxConnections>
          <keepConnectionOpen>true</keepConnectionOpen>
          <dataTypeBinary>false</dataTypeBinary>
          <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
          <respondOnNewConnection>0</respondOnNewConnection>
          <responseAddress></responseAddress>
          <responsePort></responsePort>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>filter destinations</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var activeDestinations = [];

if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;RAS&quot;) {
	activeDestinations.push(&quot;Send RAS&quot;);
} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;RDE&quot;) {
	activeDestinations.push(&quot;Send RDE&quot;);
} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;ORM&quot;) {
	activeDestinations.push(&quot;Send ORM_SURGICAL_DISCHARGE_OUT&quot;);
} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;ADT&quot;) {
	if ( msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;A34&quot; || (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;A40&quot;) ) {
		activeDestinations.push(&quot;Send ADT^A34/ADT^A40&quot;);
	} else if (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString() == &quot;A03&quot;) {
		activeDestinations.push(&quot;Send UCI_DISCHARGE_OUT&quot;);
	}
}

destinationSet.removeAllExcept(activeDestinations);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">TVNIfF5+XCZ8QlVDSUNhcmV8Q0hMfFNPTkhPfENITHwyMDI0MDgyMDAwMTM1NHx8T1JNXk8wMXwxNzI0MTEyODM0MjQxNDYtTy00ODU4MnxQfDIuNHx8fHxBTHx8ODg1OS8xfApQSUR8fHwzMDY1NzFeXl5DSExeTlN8fENBU1RSTyBTQU5UT15FTUlMSUEgREEgQ09OQ0VJQ0FPXl5eXl5MfHwxOTYzMDkyOTAwMDAwMHxGfHx8fHx8fHx8fDE2MjI5OV5eXkNITApQVjF8MXxJTlR8MV4xMDA5XjEwMDleU0FMQSBVQ1BBfHwyNDAxNDUwN3x8fHx8MTF8fHx8fHx8fHwyNDAxMzMzN3x8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwyNDAxMzU2MQpERzF8MXx8TTE3MTFeQXJ0cm9zZSBwcmltXFhFMVxyaWEgdW5pbCwgam9lbGhvIERJUl5JQ0QxMHx8MjAyNDA4MTkxNjMwMDB8Rnx8fHx8fHx8fDF8fEQKT1JDfFNDfHwzODI2MHx8Q018fHx8MjAyNDA4MTkxNjMwMDB8NTkxM15JbmVzIEZpbGlwYSBNb3JvdWNvIEhlbnJpcXVlc3x8NTc0MDZeRWxpc2EgTWFyZ2FyaWRhIE1hcnRpbmhvIEZlcnJlaXJhfHx8MjAyNDA4MTkyMjQ4MDB8Ck9CUnwxfHwzODI2MHwwU1JDMEo5Xk1DPkFydGljSU5GPlN1YnN0aXR1aVxYRTdcXFhFM1xvPkFydGljIGpvZWxobyBESVI+QWJlcnRhPlN1YnN0IHNpbnQ+Q2ltZW50YWRhXklDRDEwfFB8fDIwMjQwNzI0MTE1OTQ5fHx8fHx8fHx8fHx8fHx8fHx8fHwxfHx8fHwyODMyNCZSb2RyaWd1ZXMmTnVubyYmUCZNRURJQ08mQ0lSVVJHSUFPfDE4NjEmQmF0aXN0YSZNYXJpYSBUZXJlc2EgUm9zYWRvJiZBJlRFQ05JQ08mQVVYSUxJQVJ+MjkwNDgmTUFHQUxIQUVTJjY4IEFOVE9OSU8mJkEmTUVESUNPJkNJUlVSR0lBT34zMjQwJlNhbnRpYWdvJkRpbmlzJiZBJkVORkVSTUVJUk8mQU5FU1RFU0lTVEF+NDI0MSZPbGl2ZWlyYSZKb2FvJiZBJkVORkVSTUVJUk8mSU5TVFJVTUVOVElTVEF+NDQ3MiZNYXJxdWVzJlZhbmVzc2EgU29maWEgTG9wZXMmJkEmRU5GRVJNRUlSTyZDSVJDVUxBTlRFfjY1ODQ4JkdvbWVzJkxlb25vciBBbmljZXRvJiZBJk1FRElDTyZBTkVTVEVTSVNUQXx8fApaSFN8fDIwMjQwODE5MTc1OTAwfDIwMjQwODIwMDAxMzAwfDIwMjQwODE5MTgwMDAwfHwyMDI0MDgxOTE4NTEwMHwyMDI0MDgxOTE5NTkwMHwyMDI0MDgxOTE4NTcwMHx8MjAyNDA4MTkxOTAwMDB8MjAyNDA4MTkxOTUwMDB8MjAyNDA4MTkyMDE0MDB8fE58fHxTfDF8fE58fE58fEl8U2VtIG1vdGl2byByZWdpc3RhZG98fDIwMjQwODE5MTg1NTAwfDIwMjQwODE5MTk1NTAwfApOVEV8MXx8QUxUQXxeVElQT19NRU5TQUdFTQ==</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>HL7V2</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>false</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>false</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
              <name>Accept message if &quot;msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()&quot; equals &quot;ORM&quot; or &quot;RAS&quot; or &quot;RDE&quot; or &quot;ADT&quot;</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <field>msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString()</field>
              <condition>EQUALS</condition>
              <values>
                <string>&quot;ORM&quot;</string>
                <string>&quot;RAS&quot;</string>
                <string>&quot;RDE&quot;</string>
                <string>&quot;ADT&quot;</string>
              </values>
            </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
          </elements>
        </filter>
        <transportName>TCP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>4</metaDataId>
          <name>Send ADT^A34/ADT^A40</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>44158a93-87bc-439e-8847-435216504b85</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>7</metaDataId>
          <name>Send UCI_DISCHARGE_OUT</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>3202c7fc-9e15-438e-bcc5-2b93d8894106</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>8</metaDataId>
          <name>Send ORM_SURGICAL_DISCHARGE_OUT</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data

// Send back ACK
if (connectorMessage.getStatus() == &apos;RECEIVED&apos;){
	var ack = ACKGenerator.generateAckResponse(connectorMessage.getRawData(), &quot;AA&quot;, connectorMessage.getStatus());
	responseMap.put(&apos;ACK Response&apos;,  ack);
} else if (connectorMessage.getStatus() == &apos;FILTERED&apos;){
	var ack = ACKGenerator.generateAckResponse(connectorMessage.getRawData(), &quot;AR&quot;, connectorMessage.getStatus());
	responseMap.put(&apos;ACK Response&apos;,  ack);
} else {
	var ack = ACKGenerator.generateAckResponse(connectorMessage.getRawData(), &quot;AE&quot;, connectorMessage.getStatus());
	responseMap.put(&apos;ACK Response&apos;,  ack);
}

return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
logger.info(generateLogMsg(&quot;hl7v2-facade&quot;, message, null, null, null, null, null));
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>false</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns/>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1729761088607</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>60</pruneMetaDataDays>
            <pruneContentDays>60</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>6cc8a9f9-7d96-4990-96a8-0ff41be6b101</id>
            <name>Logger Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089520</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Funções auxiliares para o logging de mensagens dos canais</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>bc286d01-89d0-4a3f-916e-09a25a4e68c7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>68dfb5b9-bb8e-418d-8425-79fe31bd7538</id>
                <name>generateLogMsg</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to build and return a log msg, originating from any channel.
	Documentação função: https://b-simple.atlassian.net/wiki/x/AoACBg
	Documentação Entity e Tags: https://b-simple.atlassian.net/wiki/x/AgB_Bg

	@param theEntity {String} - string that denotes the group of messages the message belongs to, i.e appointment, document, cda, accident, etc.
	@param {Class} message - ImmutableConnectorMessage Class message containing information about all connectors that a
		message passed through
	@param tagsArr {Array} - array of user-defined and relevant tags that should be associated with the message
	@param sourceServer {String} - message&apos;s source app/entity (name of the app or entity responsible for sending the messge to the channel)
	@param destinationServerMap {Map} - Map&lt;int,string&gt; , where the key is the destination&apos;s metadataID and the value is the entity to which such destination&apos;s message was sent to
	@param {Array} sourceMetadataArr - source metadata: metadata associated with the source processing 
	@param {Array} destinationsMetadataArr - destinations metadata: metadata associated with the destinations processing
	@return {Object JSON} message log
*/
function generateLogMsg(theEntity, message, tagsArr, sourceServer, destinationServerMap, sourceMetadataArr, destinationsMetadataMap) {
	if (message == undefined || message == null) {
		logger.info(&quot;sendMsgInfoLogChannel:message --&gt; message argument is mandatory!&quot;);
	} else {
		try {
			var logMsg = new Object();
		
			// messageSummary
			var messageSummaryObj = new Object();
			//messageID
			messageSummaryObj.messageId = message.getConnectorMessages().get(0).getMessageId();
			//messageOriginalID - não funciona ...
			//messageSummaryObj.messageOriginalId = message.getOriginalId();
			//channelID
			messageSummaryObj.channelId = message.getConnectorMessages().get(0).getChannelId();
			//serverID
			messageSummaryObj.serverId = message.getConnectorMessages().get(0).getServerId();
			//channelName
			messageSummaryObj.channelName = message.getConnectorMessages().get(0).getChannelName();
			//lastDeployedDate
			try {
				var controller = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createEngineController();
				var dashboardStatus = controller.getChannelStatus(message.getConnectorMessages().get(0).getChannelId());
				messageSummaryObj.lastDeployedDate = auxCalendarParse(dashboardStatus.getDeployedDate());
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:lastDeployedDate --&gt; &quot; + error.toString());
				messageSummaryObj.lastDeployedDate = null;
			}
			//entity
			messageSummaryObj.entity = theEntity == undefined ? null : theEntity;
			//tags
			messageSummaryObj.tags = (tagsArr == undefined || tagsArr == null) ? new Array() : tagsArr;
			//logDate
			var datestr = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
			var dateUTC = DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
			messageSummaryObj.logDate = dateUTC;
			//status
			var statusObj = new Object();
			statusObj.error = false;
			statusObj.code = null;
			statusObj.message = null;
			try {
				message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName (inclui Source também)
					value = parseInt(value);
					if (value != 0) { // só as destinations é que têm Response relativamente a erros, logo não dá para ir buscar Response de erro na Source (Source =metadataId 0)
						//code - testar no que isto dá! ??
						if (message.getConnectorMessages().get(value).getStatus().toString() == &apos;ERROR&apos;) {
							statusObj.error = true;
							/*
							if (statusObj.code != null) {
								statusObj.code = statusObj.code + &quot;;&quot; + message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							} else {
								statusObj.code = message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							}
							*/
							if (statusObj.message != null) {
								statusObj.message = statusObj.message + &quot;;&quot; + auxGetStatusMessage(value);
							} else {
								statusObj.message = auxGetStatusMessage(value);
							}
						}
					}
				});
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel: messageSummary status --&gt; &quot; + error.toString());
			}
			messageSummaryObj.status = statusObj;
		
			//metaData
			//messageSummaryObj.metaData = (summMetadataArr == undefined || summMetadataArr == null) ? new Array() : summMetadataArr;
			try {
				var listMetadataCol = com.mirth.connect.server.controllers.ChannelController.getInstance().getMetaDataColumns(messageSummaryObj.channelId);
				var metadataColArr = new Array();
				for (var i = 0; i &lt; listMetadataCol.size(); i++) {
					var metaObj = new Object();
					metaObj.name = listMetadataCol.get(i).getName();
					var mappingName = listMetadataCol.get(i).getMappingName();
					metaObj.value = (message.getConnectorMessages().get(0).getChannelMap().get(mappingName) == undefined) ? null : message.getConnectorMessages().get(0).getChannelMap().get(mappingName).toString(); // para ficarem todos como string
					if (metaObj.value != null) {
						metadataColArr.push(metaObj);
					}
				}
				messageSummaryObj.metaData = metadataColArr;
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
				messageSummaryObj.metadata = null;
			}
			
			logMsg.messageSummary = messageSummaryObj;
		
			// ------------------------
			//content
			var contentObj = new Object();
			//content.source
			var sourceObj = new Object();
			//content.source.server
			sourceObj.server = sourceServer == undefined ? null : sourceServer;
			//content.source.status
			sourceObj.status = message.getConnectorMessages().get(0).getStatus().toString();
			//content.source.statusMessage
			sourceObj.statusMessage = auxGetStatusMessage(0);
			//content.source.message
			sourceObj.message = isJSON(message.getConnectorMessages().get(0).getRawData()) ? JSON.parse(message.getConnectorMessages().get(0).getRawData()) : message.getConnectorMessages().get(0).getRawData(); //msg antes de passar pelo preprocessor e antes de ser mudada no Transformer
			//content.source.dataType
			sourceObj.dataType = message.getConnectorMessages().get(0).getRaw().getDataType();
			//content.source.date
			var dateCalendar = message.getConnectorMessages().get(0).getReceivedDate();
			var dateUTC = auxCalendarParse(dateCalendar);
			sourceObj.date = dateUTC;
			//content.source.metadata
			sourceObj.metaData = (sourceMetadataArr == undefined || sourceMetadataArr == null) ? new Array() : sourceMetadataArr;
			//content.source.responseMessage
			if (message.getConnectorMessages().get(0).getResponseData() == null) { // no response
				sourceObj.responseMessage = null;
			} else if (message.getConnectorMessages().get(0).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
				sourceObj.responseMessage = null;
			} else { //houve response 
				sourceObj.responseMessage = isJSON(message.getConnectorMessages().get(0).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(0).getResponseData().getMessage()) : message.getConnectorMessages().get(0).getResponseData().getMessage();
			}
			contentObj.source = sourceObj;
		
			// -------------------------
			//content.destinations
			var destinationsArray = new Array();
			message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName
				value = parseInt(value);
				if (value != 0) { //ignorar Source (metadataId=0)
					//logger.info(&quot;value= &quot; + typeof(value) + &quot; &quot; + value + &quot;;&quot; + &quot;key= &quot; + typeof(key) + &quot; &quot; + key);
					var destinationObj = new Object();
					//content.destinations.server
					if (destinationServerMap != undefined &amp;&amp; destinationServerMap != null) {
						if (destinationServerMap.has(value)) {
							destinationObj.server = destinationServerMap.get(value);
						} else {
							destinationObj.server = null;
						}
					} else {
						destinationObj.server = null;
					}
					//content.destinations.destinationId
					destinationObj.destinationId = value;
					//content.destinations.destinationName
					destinationObj.destinationName = key;
					//content.destinations.status
					destinationObj.status = message.getConnectorMessages().get(value).getStatus().toString();
					//content.destinations.statusMessage
					destinationObj.statusMessage = auxGetStatusMessage(value);
					//content.destinations.message
					try {
						destinationObj.message = isJSON(message.getConnectorMessages().get(value).getEncodedData()) ? JSON.parse(message.getConnectorMessages().get(value).getEncodedData()) : message.getConnectorMessages().get(value).getEncodedData();
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel: destination message --&gt; &quot; + error.toString());
						destinationObj.message = null;
					}
					//logger.info(message.getConnectorMessages().get(value).getMessageContent(ContentType.SENT));
					//content.destinations.dataType
					// destinationObj.dataType = message.getConnectorMessages().get(value).getEncoded().getDataType();
					try {
						var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
						var channel = channelController.getChannelByName(message.getConnectorMessages().get(0).getChannelName().toString());
						var connectors = channel.getDestinationConnectors().toArray();
						// Iterate through the connectors
						for each (var connector in connectors) {
						    // Check if the current connector matches the desired connector name
						    if (connector.getName() == key) {
						    		destinationObj.dataType = connector.getTransformer().getOutboundDataType();
						    		break;
						    }
						}
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
						destinationObj.dataType = null;
					}
					
					//content.destinations.date
					var dateCalendar = message.getConnectorMessages().get(value).getSendDate();
					if (dateCalendar != null) { // destination QUEUED
						var dateUTC = auxCalendarParse(dateCalendar);
						destinationObj.date = dateUTC;
					} else {
						destinationObj.date = null;
					}

					//content.destinations.metaData
					if (destinationsMetadataMap != undefined &amp;&amp; destinationsMetadataMap != null) {
						if (destinationsMetadataMap.has(value)) {
							destinationObj.metaData = destinationsMetadataMap.get(value) == null ? new Array() : destinationsMetadataMap.get(value);
						} else {
							destinationObj.metaData = new Array();
						}
					} else {
						destinationObj.metaData = new Array();
					}
		
					//content.destinations.responseMessage
					if (message.getConnectorMessages().get(value).getResponseData() == null) { // no response
						destinationObj.responseMessage = null;
					} else if (message.getConnectorMessages().get(value).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
						destinationObj.responseMessage = null;
					} else { //houve response
						destinationObj.responseMessage = isJSON(message.getConnectorMessages().get(value).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(value).getResponseData().getMessage()) : message.getConnectorMessages().get(value).getResponseData().getMessage();
					}
					destinationsArray.push(destinationObj);
				}
			});
			contentObj.destinations = destinationsArray;
			
			logMsg.content = contentObj;
			//logger.info(JSON.stringify(logMsg));

			//send it
			return JSON.stringify(logMsg);

			/*
			var respLogChannel = router.routeMessage(&apos;Logs_WHS-OUT&apos;, JSON.stringify(logMsg));
			if (respLogChannel == null || respLogChannel == undefined) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			} else if (respLogChannel.getStatus() == Status.ERROR) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			}
			*/

		} catch (error) {
			logger.info(&quot;sendMsgInfoLogChannel:geral  --&gt; &quot; + error.toString());
		}
	}	
}

function auxCalendarParse(dateCalendar) {
	var theMonth = dateCalendar.get(dateCalendar.MONTH) +1;
	var theMonthStr = theMonth.toString().padStart(2,&apos;0&apos;);
	var datestr = dateCalendar.get(dateCalendar.YEAR).toString() + theMonthStr + dateCalendar.get(dateCalendar.DAY_OF_MONTH).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.HOUR_OF_DAY).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.MINUTE).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.SECOND).toString().padStart(2,&apos;0&apos;);
	return DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
}

function auxGetStatusMessage(connMetadaId) {
	connMessage = message.getConnectorMessages().get(connMetadaId);
	if (connMessage.getStatus().toString() == &quot;ERROR&quot;) {
		if (connMessage.getProcessingError() != &quot;&quot;) {
			return connMessage.getProcessingError();
		} else if (connMessage.getPostProcessorError() != &quot;&quot;) {
			return connMessage.getPostProcessorError();
		} else if (connMessage.getResponseError() != &quot;&quot;) {
			return connMessage.getResponseError();
		}
	}
	return null;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>fe90c913-c365-44d1-b309-7c4dae7d9d9a</id>
            <name>Utils</name>
            <revision>6</revision>
            <lastModified>
              <time>1730893909835</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Utils functions for Mirth Channels</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>9d0737dd-b85f-4e05-bd6e-b83828e87bdf</id>
                <name>addIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792349</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Aidiciona um objeto relativo a um identificador (Ex: {&quot;sistemaCodificador&quot;:&quot;Appointment.id&quot;, &quot;codigo&quot;: 1111} ) a uma lista de identificadores

	@param {String} sistCodificador - nome do sistemaCodificador (ex: &quot;Appointment.id&quot; ou &quot;Encounter.identifier&quot;)
	@param {String} codigo - value relativo ao sistCodificador
	@param {String} listaAdicionar - listagem já existente (ou vazia/null/undefined) de identificadores
	@return {String} return listaIdentificadores
*/
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	var lista;
	try {
		if (listaAdicionar  &amp;&amp; Array.isArray(listaAdicionar)) {
			lista = JSON.parse( JSON.stringify(listaAdicionar));
		} else {
			logger.info(&quot;excecao1&quot;);
			lista= [];
		}
	} catch (err) {
		logger.info(&quot;excecao2&quot; + err.toString());
		lista =  [];
	}
	/*
	if (! Array.isArray(listaAdicionar)) {
		lista = [];
	} else {
		lista = JSON.parse( JSON.stringify(listaAdicionar));
	}
	*/
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			lista.push(obj);
		}
	}
    	return lista;
	
}

/*
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	if (! Array.isArray(listaAdicionar)) {
		listaAdicionar = [];
	}
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			listaAdicionar.push(obj);
		}
	}
    	return listaAdicionar;
	
}
*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83c82ac5-e364-41b2-99cc-6a4ead5eaa37</id>
                <name>callApi</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793110</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Generic code to implement API call

	@param {String} method - http method
	@param {String} url - http url
	@param {String} user - api username
	@param {String} pass - api password
	@return {Object} return api response
*/
function callApi(method, url, user, pass) {
	
	var url = new Packages.java.net.URL(url);
	var connection = url.openConnection();
	connection.setRequestMethod(method);
	
	try {
	  var responseCode = connection.getResponseCode();
	  if (responseCode === Packages.java.net.HttpURLConnection.HTTP_OK) {	//	200
	    var inputStream = connection.getInputStream();
	    var reader = new Packages.java.io.BufferedReader(new Packages.java.io.InputStreamReader(inputStream));
	    var response = &quot;&quot;; // Inicializa a variável response
	
		    while ((line = reader.readLine()) !== null) {
		      response += line;
		    }      
	        reader.close();	      
		   
		   return JSON.parse(response.toString());
	
	    } else {
	        var errorMessage = &quot;Erro na chamada ao Web Service: &quot; +  url + &quot; Código de resposta: &quot; + responseCode;
	        // Trata os casos em que a chamada ao Web Service não foi bem-sucedida        
	        throw new Error(errorMessage);
	    }
	} catch (e) {
	    // Capturar exceção e retornar status e mensagem de erro
	    var errorStatus = connection.getResponseCode();
//	    var errorMessage = e.getMessage();	    
	    throw new Error(errorStatus);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fd200634-44bd-483c-97ab-743c373d4b7a</id>
                <name>checkIfExameEspecial</name>
                <revision>2</revision>
                <lastModified>
                  <time>1730739683915</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo objetivo passa por receber um código identificativo de um exame (ou outro serviço qualquer) e retornar se o mesmo é um exame especial ou não. Para
	tal, a função vai à tabela de catálogo da BD verificar se o código lá existe. Caso haja algum problema de acesso à BD, e de forma opcional, a função tenta aceder
	ao endpoint do sistema externo para fazer a verificação de exame especial.

	@param {String} catalogCode - código de catálogo CUF a ser analisado
	@param {String} externalSysCode - código de catálogo do sistema externo a ser analisado
	@return {Object} return object
*/
function checkIfExameEspecial(catalogCode, externalSysCode) {
	var error = false;
	var errorMsg = null;
	var isExameEspecial = null;
	var resposta = new Object();
	
	// Get a database connection 
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	var selectQuery = &quot;SELECT * FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; WHERE \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; and ativo = true;&quot;;
	try {
		// Execute the SQL query
		result = dbConn.executeCachedQuery(selectQuery);
		if (result.next() ) { // true
			isExameEspecial = true;
		} else { 
			isExameEspecial = false; // false
		}
	} catch (e) {
		error = true;
		logger.info(&quot;e.toString() = &quot; + e.toString());
		errorMsg = e.toString();
	} finally {
	    // Close the database connection
	    dbConn.close();
	}

	//houve erro no acesso à BD, logo tenta aceder ao endpoint do sistema externo para obter essa informação
	if (isExameEspecial == null &amp;&amp; typeof externalSysCode != &apos;undefined&apos;) {
		var httpPostURL = $(&apos;Transactional_CUFBUS_Host&apos;) + &quot;CodeSystem/Service/$lookup&quot;;
		var body = new Object();
		body.resourceType= &quot;Parameters&quot;;
		body.parameter = [{&quot;name&quot;:&quot;code&quot;,&quot;valueCode&quot;:externalSysCode}];
		var authHeader = null
		if ($(&apos;Transactional_CUFBUS_User&apos;) != null &amp;&amp; $(&apos;Transactional_CUFBUS_Pass&apos;) != &apos;&apos;){
			authHeader = apiGenerateBasicAuthHeader($(&apos;Transactional_CUFBUS_User&apos;), $(&apos;Transactional_CUFBUS_Pass&apos;));  
		}
		httpResp = httpPost(httpPostURL,JSON.stringify(body),authHeader);
		
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var parametersRes = JSON.parse(httpResp.responseMessage);
				try {
					if (parametersRes[&apos;resourceType&apos;] == &quot;Parameters&quot;) {
						var checkExameEspecial = null;
						parametersRes[&apos;parameter&apos;].find( function(parameter) {
							if(parameter[&apos;name&apos;] == &quot;property&quot;) {
								parameter[&apos;part&apos;].find( function(part) {
									if (part[&apos;valueCoding&apos;]) {
										if (part[&apos;valueCoding&apos;][&apos;code&apos;] == $(&apos;Catalogo_ServiceCategory_ExameEspecial&apos;)) {
											isExameEspecial = true;
											checkExameEspecial = true;
											return true;
										}
									}
								})
							}
						})
						if (checkExameEspecial == null) { // não encontrou property de exame especial, logo não é exame especial
							isExameEspecial = false;
						}
					} else {
						error = true;
						errorMsg = &quot;A Parameters Resource was expected as a response&quot;;
					}
				} catch (e2) {
					error = true;
					errorMsg = &quot;Error parsing the response from the endpoint &quot; + e2.toString();
				}
			} else {
				error = true;
				errorMsg = &quot;Endpoint response was not JSON&quot;;
			}
		} else {
			error = true;
			errorMsg = httpResp.statusText ? httpResp.statusText : (httpResp.responseMessage ? httpResp.responseMessage : null);;		
		}
	}
	if (isExameEspecial == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg; //string
	} else {
		resposta.statusCode = &quot;200&quot;;
		resposta.responseMessage = isExameEspecial; // boolean
	}
	return resposta;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b53102c9-17cf-431e-b87a-40d08fe73203</id>
                <name>convertDateToTimeStamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793287</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertDateToTimeStamp(date) {

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = &apos;00&apos;;
	var min = &apos;00&apos;;
	var sec = &apos;00&apos;;
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5714586f-45b8-45cb-9af6-fdabfe1bf9b2</id>
                <name>convertTimeStampToDateStr</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787735</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and time &quot;HHmmss&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@param {String} time - time in format &quot;HHmmss&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertTimeStampToDateStr(date, time) {

	if (time.length &lt;= 5){ // left pad
		time = time.padStart(time.length + 1, &apos;0&apos;);
	}

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = time.substring(0, 2);
	var min = time.substring(2, 4);
	var sec = time.substring(4, 6);
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b4455483-c833-4b4e-adb9-c646cad7bcfe</id>
                <name>DateUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791914</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Date to UTC

	@param {String} date - Date string in format &quot;yyyy-MM-ddTHH:mm:ss+SSSS&quot;
	@return {String} return date in UTC &quot;yyyy-MM-ddTHH:mm:ss+Z&quot;
*/
function DateUtc(date, dateFormat) {

     var formatter_hl7 = new java.text.SimpleDateFormat(dateFormat != null ? dateFormat : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss+SSSS&quot;);
     formatter_hl7.setTimeZone(java.util.TimeZone.getTimeZone($(&apos;serverTimeZone&apos;)));
     var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
     formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	return formatter_utc.format(formatter_hl7.parse(date));			
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4fbdd7b8-7dd0-4ba3-ba13-0a8990b4513b</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788357</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8cb44e20-4b8a-48e6-93ae-aa905dbf2445</id>
                <name>generate_HLv2_messageId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788478</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função criadora de id de mensagem HL7 v2 (MSH.10.1) único v5

	@return {String} id unico
*/
function generate_HLv2_messageId(tipo_mensagem) {

	var timestamp = new Date().getTime().toString();
	var timestamp_length = timestamp.length;

	//random remaining characters
	remainder = 20-3-timestamp_length;
	
	// Generate a random number between 0... and 9...
	var randomNumber = Math.floor(Math.random() * Math.pow(10,remainder));
	// Convert the number to a string and pad it with leading zeros if needed
	var formattedNumber = randomNumber.toString().padStart(remainder, &apos;0&apos;);
	
	return timestamp + &quot;-&quot; + tipo_mensagem[0] +&quot;-&quot; + formattedNumber;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b4aa14b-ee5a-464f-b1c8-0917d2ea815c</id>
                <name>getArrayUniqueValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792417</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns unique values from an array

	@param {array} array - array
	@return {array} return unique values from array
*/
function getArrayUniqueValues(array) {
	var uniqueArray = [];
	for (var i = 0; i &lt; array.length; i++) {
	    if (uniqueArray.indexOf(array[i]) === -1) {
	        uniqueArray.push(array[i]);
	    }
	}

	return uniqueArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bd7561e-2fb9-41d1-a8e3-fbeabaf8099a</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793452</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4814b63d-13ac-4097-86e2-22ca3c24eda4</id>
                <name>getFirstName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns first name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getFirstName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[0];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a594fff0-deb4-4d2a-a11e-f39582b42120</id>
                <name>getIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791988</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Extrai da listagem de identificadores o &quot;codigo&quot; associado a um pretendido &quot;sistCodificador&quot;

	@param {String} listaIds - listagem de identificadores onde procurar
	@param {String} sistCodificador - sistemaCodificador a ser procurado na listagem de identificadores
	@return {String} return codigo (ou null, caso não exista)
*/
function getIdentificador(listaIds, sistCodificador) {
	var codigo = null;	
	try{  		
	    	listaIds.find(function(elemento) {
	    		if (elemento.sistemaCodificador){
	    			try { // para o caso de algum dos identificadores estar mal definido não impedir que se extraia a informação pretendida
		        		if (elemento.sistemaCodificador.toLowerCase() == sistCodificador.toLowerCase()){
		          		codigo= elemento.codigo;
		          		return true;
		        		}
	    			} catch (err) {
		        		;
		        	}
	      	}
	    });
    	} catch (ex1){
    		codigo = null;
    	}
	return codigo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f9529854-80ad-450b-ad8a-54a1b63ba9d1</id>
                <name>getLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791292</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns last name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getLastName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[(names.length -1) ];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6ff6cc61-fa90-455a-b9b4-26f12a870f91</id>
                <name>getLocationExameEspecial</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792555</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dada informação sobre o hospital, o código de catálogo de exame especial e a especialidade, retornar qual a localização no pretendido hospital predestinada para
	a ocorrência de exames especiais dessa mesma especialidade

	@param {String} hospitalINTRefExt - INTRefExt do hospital (CMFL, HTEJO, ...)
	@param {String} catalogCode - código de catálogo do exame especial (10058, 20056, ...)
	@param {String} especialidade - especialidade associada ao exame especial (Cardiologia, Oftalmologia, ...)
	@return {String} return {&quot;servico&quot;: &quot;...&quot;, &quot;area&quot;: &quot;...&quot;, &quot;sala&quot;: &quot;...&quot; &quot;cama&quot;: &quot;...&quot;}
*/
function getLocationExameEspecial(hospitalINTRefExt, catalogCode, especialidade) {
	var error = false;
	var errorMsg = null;
	var resposta = new Object();

	var cama = null;
	var sala = null;
	var area = null;
	var servico = null;
	
	if ( !hospitalINTRefExt || !catalogCode || !especialidade ) {
		error = true;
		errorMsg = &quot;Um dos parametros da função é invalido&quot;;
	} else {
	
		var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	
		/* var selectQuery = &quot;SELECT cama, sala, area FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE servico = &apos;&quot; + AAAAAAAAA + &quot;&apos; AND especialidade = &apos;&quot;+ especialidade + &quot;&apos; AND id =&quot;
						+ &quot;(SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where intRefExt = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) LIMIT 1) LIMIT 1;&quot;; */
	
		var selectIdLocalizacaoSQL = &quot;SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) ;&quot;;
	
		var listIdLocalizacao= [];
		try {
			// Execute the SQL query
			result = dbConn.executeCachedQuery(selectIdLocalizacaoSQL); // return javax.sql.rowset.CachedRowSet
			while (result.next()) {
				listIdLocalizacao.push(result.getString(&quot;idLocalizacao&quot;));
			}
		} catch (e) {
			error = true;
			logger.info(&quot;e.toString() = &quot; + e.toString());
			errorMsg = e.toString();
		} finally {
		    // Close the database connection
		    dbConn.close();
		}
		logger.info(&quot;lsita ids localizacao = &quot; +JSON.stringify(listIdLocalizacao));
		

		if (listIdLocalizacao.length == 0){ // não existem idLocalizacao configurados para o exame
			error = true;
			errorMsg = &quot;Não existem idLocalizacao para o código de catálogo &quot; + catalogCode + &quot; e hospital &quot; + hospitalINTRefExt;
		} else {
			var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
			if (listIdLocalizacao.length == 1) { //só existe 1 idLocalizacao, logo não interessa a especialidade porque a localizacao do exame especial é sempre no mesmo local
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id = &apos;&quot; + listIdLocalizacao[0] + &quot;&apos;;&quot;;
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}			
			} else { // existe mais do que uma localização, logo vai diferenceiar por especialidade
				ids = &quot;(&quot;;
				for (var i=0; i&lt; listIdLocalizacao.length; i++) {
				    ids += &quot;&apos;&quot; + listIdLocalizacao[i].toString() + &quot;&apos;,&quot;;
				}
				ids = ids.slice(0,-1) + &quot;)&quot;;
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id in &quot; + ids + &quot; and especialidade = &apos;&quot;+especialidade+ &quot;&apos;;&quot;;
				logger.info(selectInfosSQL);
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}	
			}
		}
	}


	if (error == true  ) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro interno getLocationExameEspecial()&quot;;
	} else if ( cama == null &amp;&amp; sala == null &amp;&amp; area == null  &amp;&amp; servico == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro na query à LocalizacaoExamesEspeciais&quot;;
	}else {
		resposta.statusCode = &quot;200&quot;;
		var respObj = new Object();
		respObj.cama = cama;
		respObj.area = area;
		respObj.sala = sala;
		respObj.servico = servico;
		resposta.responseMessage = respObj;
	}
	return resposta;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>903737fd-9a14-45ea-b3cf-2af18ba88142</id>
                <name>getNumMecanograficoById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791627</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getNumMecanograficoById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.numMecanografico;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6bdd892d-3953-4f68-af96-44ff89434b13</id>
                <name>getPerfilUtilizadorById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789557</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getPerfilUtilizadorById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.perfil;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee58620f-c785-44f2-a4f7-26a8808c4e16</id>
                <name>getPerformerAndDatesRequisicaoMcdts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788016</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Object} accoesList - ...
	@param {Object} dataCriacaoRequisicao - ...
	@param {Object} utilizadoresList - ...
	@return {Object} return description

	(//R = obrigatório)
	--&gt; Formato esperado acoesList: [
          {
            &quot;utilizadorId&quot; : 12284, //R
            &quot;funcao&quot; : 1, //R
            &quot;data&quot; : &quot;2024-05-08T14:41:51.089035Z&quot; //R
          },
          {
            &quot;utilizadorId&quot; : 12284,
            &quot;funcao&quot; : 3,
            &quot;data&quot; : &quot;2024-05-08T14:27:58.349313Z&quot;
          }
        ]

     --&gt; Formato esperado utilizadoresList: [
	    {
	      &quot;id&quot; : 12284,
	      &quot;login&quot; : &quot;MDPIRES&quot;,
	      &quot;nome&quot; : &quot;Marcos Pires&quot;,
	      &quot;numMecanografico&quot; : &quot;263812278&quot;,
	      &quot;numOrdem&quot; : &quot;123&quot;,
	      &quot;numFuncionario&quot; : null,
	      &quot;perfil&quot; : 1,
	      &quot;intRefExt&quot; : null
	    }
	  ]
	
*/
function getPerformerAndDatesRequisicaoMcdts(accoesList,dataCriacaoRequisicao, utilizadoresList) {

	logger.info(&quot;accoesList - &quot; +JSON.stringify(accoesList));
	logger.info(&quot;dataCriacaoRequisicao - &quot; + JSON.stringify(dataCriacaoRequisicao));
	logger.info(&quot;utilizadoresList - &quot; + JSON.stringify(accoesList));
	returnObj = new Object();
	
	var Performer = Lists.list();
	var occurenceDateTime = null;
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(accoesList); j++ ){
	
	      try {
			if (accoesList[j][&apos;funcao&apos;] == 1 /* Relato */){
				dataRelato = accoesList[j][&apos;data&apos;];
			} else if (accoesList[j][&apos;funcao&apos;] == 2 /* Validacao */){
				dataValidacao = accoesList[j][&apos;data&apos;];
			} else {
				occurenceDateTime = dataCriacaoRequisicao;
			}
	       } catch (error) {
	       	logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro nas datas - &quot; + error.toString()); 
	     }
	
		try {
			  Performer.add({
			    function: {
			        coding: [{
			          system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			          code: newStringOrUndefined( accoesList[j][&apos;funcao&apos;] == 3 /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;])) : mapFuncao(accoesList[j][&apos;funcao&apos;]) )
			        }]
			      },
			    actor: {
			      reference: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) ) : null),
			      identifier: {
			        use: newStringOrUndefined(&apos;official&apos;),
			        type: {
			          coding: [{
			            system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
			            code: newStringOrUndefined(&apos;4&apos;)
			          }],
			          text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
			        },
			        value: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) : null)
			      }
			    }
		  });
		} catch (error2) {
			logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro no performer - &quot; + error2.toString()); 
		}
	}

	returnObj.performer = Performer;
	returnObj.occurenceDateTime = occurenceDateTime;
	returnObj.dataValidacao = dataValidacao;
	returnObj.dataRelato = dataRelato;

	return returnObj;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8615c472-c47a-48aa-a6e7-45e487c4463f</id>
                <name>getRabbitMqHosts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791032</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Void}
	@return {HostsDto} return hosts
*/
function getRabbitMqHosts() {
	// Set RabbitMQ Hosts
	importPackage(com.mirth.rabbitmq.client.dto);
	hosts = [];
	addr = new HostsDto(); // Main Host
	addr.setHost($(&apos;RabbitMqHost&apos;));
	addr.setPort(parseInt($(&apos;RabbitMqPort&apos;)));
	hosts.push(addr);

	return hosts;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f331cea8-c75e-40d4-83d9-a6779b688c81</id>
                <name>isJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790116</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a string is a valid JSON

	@param {String} string to validate if is JSON
	@return {Boolean} return boolean
*/
function isJSON(str) {
  try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27f41d50-5bd7-46da-9ad9-203181a92ba9</id>
                <name>isNumeric</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789613</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a value (string or number) is numeric

	@param {String} value to validate if is numeric
	@return {Boolean} return boolean
*/
function isNumeric(num) {
  if (typeof num == &quot;string&quot;) { 
    return !isNaN(num) &amp;&amp;
           !isNaN(parseFloat(num));
  } else if (typeof num == &quot;number&quot;) {
  	return true;
  } else {
  	return false;
  }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5c27a913-629d-4605-9e85-716a84e11410</id>
                <name>MappFrequencies</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to create multiple VAR Segments according Initial Date and CD_PrescricaoFrequencias

	@param {String} freqUni - CD_PrescricaoFrequencias description code
	@param {String} dateInit - Date HL7 string: start prescription date
	@param {String} DateEnd - Date HL7 string: end prescription date
	@return {String} return VAR Segment
*/
function MappFrequencies(freqUni, dateStart, DateEnd) {

	startDate = &quot;20230227115700&quot;;
	hora = startDate.substring(10, 8);
	freqfactor = 8;
	freqUnit = &apos;Dias&apos;;
	
	if (freqUnit == &apos;Hora&apos;){ // x em x horas
	    // calc hours segments
	    if (startDate.length &gt; 0 &amp;&amp; freqfactor &gt; 1){
	        console.log(&quot;running ...&quot;);
	        for (i = 0; i &lt; (24 / freqfactor) ; i++){
	            if ( (parseInt(hora) + (freqfactor * i) - 24) &gt;= 0  ){
	                hora = parseInt(hora) + (freqfactor * i) - 24;
	                break;
	            }
	        }
	        
	        if ((24 / freqfactor) &gt;= 1){
	            for(i = 0; i &lt; (24 / freqfactor); i++){
	                console.log( (parseInt(hora) + (freqfactor * i)).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	            }
	        }else {
	            console.log( parseInt(hora).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	        }   
	    }
	} else if (freqUnit == &apos;Dias&apos;){ // x em x dias
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Dias da Semanas&apos; || freqUnit == &apos;Por Dia&apos; || freqUnit == &apos;Refeições&apos; || freqUnit == &apos;Dia/Hora&apos;){ // têm de ser criados a cada dia
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Única&apos;){ // Hora fixa^5
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;SOS&apos;){
	    console.log( null )
	}else if (freqUnit == &apos;Turno Fixo&apos;) {
	    // tenho de pedir ao bruno para ter alguma informação relacionada com os turnos
	}else if (freqUnit == &apos;Contínuo&apos; || freqUnit == &apos;Sem horário&apos;){ // Sem hor\XE1\rio^0
	    console.log( null )
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e5cc4c3f-7233-42b0-8162-b3bec0ab5c94</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792857</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fdd919fc-4700-4a8f-aafe-cc2f4653f100</id>
                <name>Unescape HL7 Characters</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790479</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function hexMappingPreProcessor(result) {
	var hexMapping = [
			[/\\x21\\/gi, &quot;!&quot;], [/\\x22\\/gi, &apos;&quot;&apos;], [/\\x23\\/gi, &quot;#&quot;], [/\\x24\\/gi, &quot;$&quot;], [/\\x25\\/gi, &quot;%&quot;], [/\\x26\\/gi, &quot;&amp;&quot;], [/\\x27\\/gi, &quot;&apos;&quot;], [/\\x28\\/gi, &quot;(&quot;], [/\\x29\\/gi, &quot;)&quot;],
			[/\\x2a\\/gi, &quot;*&quot;], [/\\x2b\\/gi, &quot;+&quot;], [/\\x2c\\/gi, &quot;,&quot;], [/\\x2d\\/gi, &quot;-&quot;], [/\\x2e\\/gi, &quot;.&quot;], [/\\x2f\\/gi, &quot;/&quot;], [/\\x30\\/gi, &quot;0&quot;], [/\\x31\\/gi, &quot;1&quot;], [/\\x32\\/gi, &quot;2&quot;],
			[/\\x33\\/gi, &quot;3&quot;], [/\\x34\\/gi, &quot;4&quot;], [/\\x35\\/gi, &quot;5&quot;], [/\\x36\\/gi, &quot;6&quot;], [/\\x37\\/gi, &quot;7&quot;], [/\\x38\\/gi, &quot;8&quot;], [/\\x39\\/gi, &quot;9&quot;], [/\\x3a\\/gi, &quot;:&quot;], [/\\x3b\\/gi, &quot;;&quot;],
			[/\\x3c\\/gi, &quot;&lt;&quot;], [/\\x3d\\/gi, &quot;=&quot;], [/\\x3e\\/gi, &quot;&gt;&quot;], [/\\x3f\\/gi, &quot;?&quot;], [/\\x40\\/gi, &quot;@&quot;], [/\\x41\\/gi, &quot;A&quot;], [/\\x42\\/gi, &quot;B&quot;], [/\\x43\\/gi, &quot;C&quot;], [/\\x44\\/gi, &quot;D&quot;],
			[/\\x45\\/gi, &quot;E&quot;], [/\\x46\\/gi, &quot;F&quot;], [/\\x47\\/gi, &quot;G&quot;], [/\\x48\\/gi, &quot;H&quot;], [/\\x49\\/gi, &quot;I&quot;], [/\\x4a\\/gi, &quot;J&quot;], [/\\x4b\\/gi, &quot;K&quot;], [/\\x4c\\/gi, &quot;L&quot;], [/\\x4d\\/gi, &quot;M&quot;],
			[/\\x4e\\/gi, &quot;N&quot;], [/\\x4f\\/gi, &quot;O&quot;], [/\\x50\\/gi, &quot;P&quot;], [/\\x51\\/gi, &quot;Q&quot;], [/\\x52\\/gi, &quot;R&quot;], [/\\x53\\/gi, &quot;S&quot;], [/\\x54\\/gi, &quot;T&quot;], [/\\x55\\/gi, &quot;U&quot;], [/\\x56\\/gi, &quot;V&quot;],
			[/\\x57\\/gi, &quot;W&quot;], [/\\x58\\/gi, &quot;X&quot;], [/\\x59\\/gi, &quot;Y&quot;], [/\\x5a\\/gi, &quot;Z&quot;], [/\\x5b\\/gi, &quot;[&quot;], [/\\x5c\\/gi, &quot;\\&quot;], [/\\x5d\\/gi, &quot;]&quot;], [/\\x5e\\/gi, &quot;^&quot;], [/\\x5f\\/gi, &quot;_&quot;],
			[/\\x60\\/gi, &quot;`&quot;], [/\\x61\\/gi, &quot;a&quot;], [/\\x62\\/gi, &quot;b&quot;], [/\\x63\\/gi, &quot;c&quot;], [/\\x64\\/gi, &quot;d&quot;], [/\\x65\\/gi, &quot;e&quot;], [/\\x66\\/gi, &quot;f&quot;], [/\\x67\\/gi, &quot;g&quot;], [/\\x68\\/gi, &quot;h&quot;],
			[/\\x69\\/gi, &quot;i&quot;], [/\\x6a\\/gi, &quot;j&quot;], [/\\x6b\\/gi, &quot;k&quot;], [/\\x6c\\/gi, &quot;l&quot;], [/\\x6d\\/gi, &quot;m&quot;], [/\\x6e\\/gi, &quot;n&quot;], [/\\x6f\\/gi, &quot;o&quot;], [/\\x70\\/gi, &quot;p&quot;], [/\\x71\\/gi, &quot;q&quot;],
			[/\\x72\\/gi, &quot;r&quot;], [/\\x73\\/gi, &quot;s&quot;], [/\\x74\\/gi, &quot;t&quot;], [/\\x75\\/gi, &quot;u&quot;], [/\\x76\\/gi, &quot;v&quot;], [/\\x77\\/gi, &quot;w&quot;], [/\\x78\\/gi, &quot;x&quot;], [/\\x79\\/gi, &quot;y&quot;], [/\\x7a\\/gi, &quot;z&quot;],
			[/\\x7b\\/gi, &quot;{&quot;], [/\\x7c\\/gi, &quot;|&quot;], [/\\x7d\\/gi, &quot;}&quot;], [/\\x7e\\/gi, &quot;~&quot;], [/\\xa1\\/gi, &quot;¡&quot;], [/\\xa2\\/gi, &quot;¢&quot;], [/\\xa3\\/gi, &quot;£&quot;], [/\\xa4\\/gi, &quot;¤&quot;], [/\\xa5\\/gi, &quot;¥&quot;],
			[/\\xa6\\/gi, &quot;¦&quot;], [/\\xa7\\/gi, &quot;§&quot;], [/\\xa8\\/gi, &quot;¨&quot;], [/\\xa9\\/gi, &quot;©&quot;], [/\\xaa\\/gi, &quot;ª&quot;], [/\\xab\\/gi, &quot;«&quot;], [/\\xac\\/gi, &quot;¬&quot;], [/\\xa0\\/gi, &quot; &quot;], [/\\xae\\/gi, &quot;®&quot;],
			[/\\xaf\\/gi, &quot;¯&quot;], [/\\xad\\/gi, &quot; &quot;], [/\\xb0\\/gi, &quot;°&quot;], [/\\xb1\\/gi, &quot;±&quot;], [/\\xb2\\/gi, &quot;²&quot;], [/\\xb3\\/gi, &quot;³&quot;], [/\\xb4\\/gi, &quot;´&quot;], [/\\xb5\\/gi, &quot;µ&quot;], [/\\xb6\\/gi, &quot;¶&quot;],
			[/\\xb7\\/gi, &quot;·&quot;], [/\\xb8\\/gi, &quot;¸&quot;], [/\\xb9\\/gi, &quot;¹&quot;], [/\\xba\\/gi, &quot;º&quot;], [/\\xbb\\/gi, &quot;»&quot;], [/\\xbc\\/gi, &quot;¼&quot;], [/\\xbd\\/gi, &quot;½&quot;], [/\\xbe\\/gi, &quot;¾&quot;], [/\\xbf\\/gi, &quot;¿&quot;],
			[/\\xc0\\/gi, &quot;À&quot;], [/\\xc1\\/gi, &quot;Á&quot;], [/\\xc2\\/gi, &quot;Â&quot;], [/\\xc3\\/gi, &quot;Ã&quot;], [/\\xc4\\/gi, &quot;Ä&quot;], [/\\xc5\\/gi, &quot;Å&quot;], [/\\xc6\\/gi, &quot;Æ&quot;], [/\\xc7\\/gi, &quot;Ç&quot;], [/\\xc8\\/gi, &quot;È&quot;],
			[/\\xc9\\/gi, &quot;É&quot;], [/\\xca\\/gi, &quot;Ê&quot;], [/\\xcb\\/gi, &quot;Ë&quot;], [/\\xcc\\/gi, &quot;Ì&quot;], [/\\xcd\\/gi, &quot;Í&quot;], [/\\xce\\/gi, &quot;Î&quot;], [/\\xcf\\/gi, &quot;Ï&quot;], [/\\xd0\\/gi, &quot;Ð&quot;], [/\\xd1\\/gi, &quot;Ñ&quot;],
			[/\\xd2\\/gi, &quot;Ò&quot;], [/\\xd3\\/gi, &quot;Ó&quot;], [/\\xd4\\/gi, &quot;Ô&quot;], [/\\xd5\\/gi, &quot;Õ&quot;], [/\\xd6\\/gi, &quot;Ö&quot;], [/\\xd7\\/gi, &quot;×&quot;], [/\\xd8\\/gi, &quot;Ø&quot;], [/\\xd9\\/gi, &quot;Ù&quot;], [/\\xda\\/gi, &quot;Ú&quot;],
			[/\\xdb\\/gi, &quot;Û&quot;], [/\\xdc\\/gi, &quot;Ü&quot;], [/\\xdd\\/gi, &quot;Ý&quot;], [/\\xde\\/gi, &quot;Þ&quot;], [/\\xdf\\/gi, &quot;ß&quot;], [/\\xe0\\/gi, &quot;à&quot;], [/\\xe1\\/gi, &quot;á&quot;], [/\\xe2\\/gi, &quot;â&quot;], [/\\xe3\\/gi, &quot;ã&quot;],
			[/\\xe4\\/gi, &quot;ä&quot;], [/\\xe5\\/gi, &quot;å&quot;], [/\\xe6\\/gi, &quot;æ&quot;], [/\\xe7\\/gi, &quot;ç&quot;], [/\\xe8\\/gi, &quot;è&quot;], [/\\xe9\\/gi, &quot;é&quot;], [/\\xea\\/gi, &quot;ê&quot;], [/\\xeb\\/gi, &quot;ë&quot;], [/\\xec\\/gi, &quot;ì&quot;],
			[/\\xed\\/gi, &quot;í&quot;], [/\\xee\\/gi, &quot;î&quot;], [/\\xef\\/gi, &quot;ï&quot;], [/\\xf0\\/gi, &quot;ð&quot;], [/\\xf1\\/gi, &quot;ñ&quot;], [/\\xf2\\/gi, &quot;ò&quot;], [/\\xf3\\/gi, &quot;ó&quot;], [/\\xf4\\/gi, &quot;ô&quot;], [/\\xf5\\/gi, &quot;õ&quot;],
			[/\\xf6\\/gi, &quot;ö&quot;], [/\\xf7\\/gi, &quot;÷&quot;], [/\\xf8\\/gi, &quot;ø&quot;], [/\\xf9\\/gi, &quot;ù&quot;], [/\\xfa\\/gi, &quot;ú&quot;], [/\\xfb\\/gi, &quot;û&quot;], [/\\xfc\\/gi, &quot;ü&quot;], [/\\xfd\\/gi, &quot;ý&quot;], [/\\xfe\\/gi, &quot;þ&quot;],
			[/\\xff\\/gi, &quot;ÿ&quot;], [/\\x91\\/gi, &quot;‘&quot;], [/\\x92\\/gi, &quot;’&quot;], [/\\x80\\/gi, &quot;€&quot;], [/\\x83\\/gi, &quot;ƒ&quot;], [/\\x85\\/gi, &quot;…&quot;], [/\\x86\\/gi, &quot;†&quot;], [/\\x87\\/gi, &quot;‡&quot;], [/\\x88\\/gi, &quot;ˆ&quot;],
			[/\\x89\\/gi, &quot;‰&quot;], [/\\x8a\\/gi, &quot;Š&quot;], [/\\x8b\\/gi, &quot;‹&quot;], [/\\x8c\\/gi, &quot;Œ&quot;], [/\\x8e\\/gi, &quot;Ž&quot;], [/\\x93\\/gi, &quot;“&quot;], [/\\x94\\/gi, &quot;”&quot;], [/\\x95\\/gi, &quot;•&quot;], [/\\x96\\/gi, &quot;–&quot;],
			[/\\x97\\/gi, &quot;—&quot;], [/\\x98\\/gi, &quot;˜&quot;], [/\\x99\\/gi, &quot;™&quot;], [/\\x9a\\/gi, &quot;š&quot;], [/\\x9b\\/gi, &quot;›&quot;], [/\\x9c\\/gi, &quot;œ&quot;], [/\\x9e\\/gi, &quot;ž&quot;], [/\\x9f\\/gi, &quot;Ÿ&quot;], [/\\x2079\\/gi, &quot;⁹&quot;],
			[/Ã¡/g, &quot;á&quot;], [/Ã³/g, &quot;ó&quot;], [/Âµ/g, &quot;µ&quot;], [/Ã£/g, &quot;ã&quot;], [/Ã§/g, &quot;ç&quot;], [/Ã©/g, &quot;é&quot;], [/Ãº/g, &quot;ú&quot;], [/Â³/g, &quot;³&quot;], [/\\.br\\/gi, &quot; &quot;], [/  +/g, &apos; &apos;], [/Âº/g, &quot;º&quot;], [/Ã&#x81;/g, &quot;Á&quot;],
			[/Ã¢/g, &quot;â&quot;], [/Ãµ/g, &quot;õ&quot;], [/Ã&#x87;Ã&#x83;/g, &quot;ÇÃ&quot;], [/Ã&#x8d;/g, &apos;Í&apos;], [/Ã&#x87;Ã&#x95;/g, &apos;ÇÕ&apos;], [/Ã&#x93;/g, &quot;Ó&quot;]
			];
	
	for(var i = 0; i &lt; hexMapping.length; i++){
		result = result.replace(hexMapping[i][0], hexMapping[i][1]);
	}

	var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
	for(var i = 0; i &lt; replaceList.length; i++){
		do{
			result = result.replace(replaceList[i][0], replaceList[i][1]);
		}while(result.indexOf(replaceList[i][0]) &gt; -1);
	}
	
	return result;
}



function encodeIsoLatin(result) {
	var hexMapping = [
			/* [&quot;\\x21\\&quot;, &quot;!&quot;], [&quot;\\x3f\\&quot;, &quot;?&quot;], [&quot;\\x2c\\&quot;, &quot;,&quot;], [&quot;\\x3a\\&quot;, &quot;:&quot;], [&quot;\\x2e\\&quot;, &quot;.&quot;], [&quot;\\xa0\\&quot;, &quot; &quot;], [&quot;\\xad\\&quot;, &quot; &quot;], [&quot;\\x2d\\&quot;, &quot;-&quot;], [&quot;\\x5b\\&quot;, &quot;[&quot;], [&quot;\\x5d\\&quot;, &quot;]&quot;], [&quot;\\x5c\\&quot;, &quot;\\&quot;]*/ 
			[&quot;\\x22\\&quot;, /&quot;/g], [&quot;\\x23\\&quot;, /#/g], [&quot;\\x24\\&quot;, /\$/g], [&quot;\\x25\\&quot;, /%/g], [&quot;\\x26\\&quot;, /&amp;/g], [&quot;\\x27\\&quot;, /&apos;/g],
			[&quot;\\x2a\\&quot;, /\*/g], [&quot;\\x2b\\&quot;, /\+/g], [&quot;\\x2f\\&quot;, /\//g], [&quot;\\x3b\\&quot;, /;/g],
			[&quot;\\x3c\\&quot;, /&lt;/g], [&quot;\\x3d\\&quot;, /=/g], [&quot;\\x3e\\&quot;, /&gt;/g], [&quot;\\x40\\&quot;, /@/g], 
			[&quot;\\x5e\\&quot;, /\^/g], [&quot;\\x5f\\&quot;, /_/g], [&quot;\\x60\\&quot;, /`/g], [&quot;\\x7b\\&quot;, /{/g], [&quot;\\x7c\\&quot;, /\|/g], [&quot;\\x7d\\&quot;, /}/g], 
			[&quot;\\x7e\\&quot;, /~/g], [&quot;\\xa1\\&quot;, /¡/g], [&quot;\\xa2\\&quot;, /¢/g], [&quot;\\xa3\\&quot;, /£/g], [&quot;\\xa4\\&quot;, /¤/g], [&quot;\\xa5\\&quot;, /¥/g],
			[&quot;\\xa6\\&quot;, /¦/g], [&quot;\\xa7\\&quot;, /§/g], [&quot;\\xa8\\&quot;, /¨/g], [&quot;\\xa9\\&quot;, /©/g], [&quot;\\xaa\\&quot;, /ª/g], [&quot;\\xab\\&quot;, /«/g], [&quot;\\xac\\&quot;, /¬/g], [&quot;\\xae\\&quot;, /®/g],
			[&quot;\\xaf\\&quot;, /¯/g], [&quot;\\xb0\\&quot;, /°/g], [&quot;\\xb1\\&quot;, /±/g], [&quot;\\xb2\\&quot;, /²/g], [&quot;\\xb3\\&quot;, /³/g], [&quot;\\xb4\\&quot;, /´/g], [&quot;\\xb5\\&quot;, /µ/g], [&quot;\\xb6\\&quot;, /¶/g],
			[&quot;\\xb7\\&quot;, /·/g], [&quot;\\xb8\\&quot;, /¸/g], [&quot;\\xb9\\&quot;, /¹/g], [&quot;\\xba\\&quot;, /º/g], [&quot;\\xbb\\&quot;, /»/g], [&quot;\\xbc\\&quot;, /¼/g], [&quot;\\xbd\\&quot;, /½/g], [&quot;\\xbe\\&quot;, /¾/g], [&quot;\\xbf\\&quot;, /¿/],
			[&quot;\\xc0\\&quot;, /À/g], [&quot;\\xc1\\&quot;, /Á/g], [&quot;\\xc2\\&quot;, /Â/g], [&quot;\\xc3\\&quot;, /Ã/g], [&quot;\\xc4\\&quot;, /Ä/g], [&quot;\\xc5\\&quot;, /Å/g], [&quot;\\xc6\\&quot;, /Æ/g], [&quot;\\xc7\\&quot;, /Ç/g], [&quot;\\xc8\\&quot;, /È/g],
			[&quot;\\xc9\\&quot;, /É/g], [&quot;\\xca\\&quot;, /Ê/g], [&quot;\\xcb\\&quot;, /Ë/g], [&quot;\\xcc\\&quot;, /Ì/g], [&quot;\\xcd\\&quot;, /Í/g], [&quot;\\xce\\&quot;, /Î/g], [&quot;\\xcf\\&quot;, /Ï/g], [&quot;\\xd0\\&quot;, /Ð/g], [&quot;\\xd1\\&quot;, /Ñ/g],
			[&quot;\\xd2\\&quot;, /Ò/g], [&quot;\\xd3\\&quot;, /Ó/g], [&quot;\\xd4\\&quot;, /Ô/g], [&quot;\\xd5\\&quot;, /Õ/g], [&quot;\\xd6\\&quot;, /Ö/g], [&quot;\\xd7\\&quot;, /×/g], [&quot;\\xd8\\&quot;, /Ø/g], [&quot;\\xd9\\&quot;, /Ù/g], [&quot;\\xda\\&quot;, /Ú/g],
			[&quot;\\xdb\\&quot;, /Û/g], [&quot;\\xdc\\&quot;, /Ü/g], [&quot;\\xdd\\&quot;, /Ý/g], [&quot;\\xde\\&quot;, /Þ/g], [&quot;\\xdf\\&quot;, /ß/g], [&quot;\\xe0\\&quot;, /à/g], [&quot;\\xe1\\&quot;, /á/g], [&quot;\\xe2\\&quot;, /â/g], [&quot;\\xe3\\&quot;, /ã/g],
			[&quot;\\xe4\\&quot;, /ä/g], [&quot;\\xe5\\&quot;, /å/g], [&quot;\\xe6\\&quot;, /æ/g], [&quot;\\xe7\\&quot;, /ç/g], [&quot;\\xe8\\&quot;, /è/g], [&quot;\\xe9\\&quot;, /é/g], [&quot;\\xea\\&quot;, /ê/g], [&quot;\\xeb\\&quot;, /ë/g], [&quot;\\xec\\&quot;, /ì/g],
			[&quot;\\xed\\&quot;, /í/g], [&quot;\\xee\\&quot;, /î/g], [&quot;\\xef\\&quot;, /ï/g], [&quot;\\xf0\\&quot;, /ð/g], [&quot;\\xf1\\&quot;, /ñ/g], [&quot;\\xf2\\&quot;, /ò/g], [&quot;\\xf3\\&quot;, /ó/g], [&quot;\\xf4\\&quot;, /ô/g], [&quot;\\xf5\\&quot;, /õ/g],
			[&quot;\\xf6\\&quot;, /ö/g], [&quot;\\xf7\\&quot;, /÷/g], [&quot;\\xf8\\&quot;, /ø/g], [&quot;\\xf9\\&quot;, /ù/g], [&quot;\\xfa\\&quot;, /ú/g], [&quot;\\xfb\\&quot;, /û/g], [&quot;\\xfc\\&quot;, /ü/g], [&quot;\\xfd\\&quot;, /ý/g], [&quot;\\xfe\\&quot;, /þ/g],
			[&quot;\\xff\\&quot;, /ÿ/g], [&quot;\\x91\\&quot;, /‘/g], [&quot;\\x92\\&quot;, /’/g], [&quot;\\x80\\&quot;, /€/g], [&quot;\\x83\\&quot;, /ƒ/g], [&quot;\\x85\\&quot;, /…/g], [&quot;\\x86\\&quot;, /†/g], [&quot;\\x87\\&quot;, /‡/g], [&quot;\\x88\\&quot;, /ˆ/g],
			[&quot;\\x89\\&quot;, /‰/g], [&quot;\\x8a\\&quot;, /Š/g], [&quot;\\x8b\\&quot;, /‹/g], [&quot;\\x8c\\&quot;, /Œ/g], [&quot;\\x8e\\&quot;, /Ž/g], [&quot;\\x93\\&quot;, /“/g], [&quot;\\x94\\&quot;, /”/g], [&quot;\\x95\\&quot;, /•/g], [&quot;\\x96\\&quot;, /–/g],
			[&quot;\\x97\\&quot;, /—/g], [&quot;\\x98\\&quot;, /˜/g], [&quot;\\x99\\&quot;, /™/g], [&quot;\\x9a\\&quot;, /š/g], [&quot;\\x9b\\&quot;, /›/g], [&quot;\\x9c\\&quot;, /œ/g], [&quot;\\x9e\\&quot;, /ž/g], [&quot;\\x9f\\&quot;, /Ÿ/g], [&quot;\\x2079\\&quot;, /⁹/g],
			[&quot;\\x0a\\&quot;, /\n/g], [&quot;\\x0d\\&quot;, /\r/g]
			];
	
	if (result != null){
		for(var i = 0; i &lt; hexMapping.length; i++){
			result = result.replace(hexMapping[i][1], hexMapping[i][0]);
		}		

		var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
		for(var i = 0; i &lt; replaceList.length; i++){
			do{
				result = result.replace(replaceList[i][1], replaceList[i][0]);
			}while(result.indexOf(replaceList[i][0]) &gt; -1);
		}
	}
	
	return result;
}


function hexMappingReservatedChars(result) {
	var pattern = [[/\\T\\/g, &quot;&amp;&quot; ], [/\\R\\/g, &apos;~&apos;], [/\\E\\/g, &apos;\\&apos;], [/\\F\\/g, &apos;|&apos;], [/\\S\\/g, &apos;^&apos;]];
	
	for(var i = 0; i &lt; pattern.length; i++){
		result = result.replace(pattern[i][0], pattern[i][1]);
	}
	
	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fde5f48b-6860-49be-a9ab-dfb0e4ba3b97</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790008</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>2348d5d5-6890-4d01-a7e1-669ce57a634a</id>
      <nextMetaDataId>21</nextMetaDataId>
      <name>FHIR_FACADE_IN</name>
      <description>Descrição:&#xd;
&#xd;
Documentação:&#xd;
&#xd;
Versão:&#xd;
1.0.3&#xd;
&#xd;
Dependências:&#xd;
- checkIfExameEspecial()&#xd;
- createOperationOutcome()&#xd;
&#xd;
Canais interligados:&#xd;
&#xd;
&#xd;
Variáveis de ambiente:&#xd;
- RabbitMqHost&#xd;
- RabbitMqPort&#xd;
- RabbitMqUsername&#xd;
- RabbitMqPassword&#xd;
- RabbitMqVirtualHost&#xd;
- Catalogo_ServiceCategory_ExameEspecial&#xd;
&#xd;
ChangeLog:&#xd;
&#xd;
1.0.0 - Primeiro versionamento&#xd;
&#xd;
1.0.1 - Alteração em circuito de checkin para incluir FaturacaoRefExt&#xd;
&#xd;
1.0.2 - Alteração da FACADE FHIR para filtrar e redirecionar as mensagens de Appointment e Check-in da urgência para o canal dedicado&#xd;
&#xd;
1.0.3 - 1) validação checkIfExameEspecial no caso de ser Appointment c/, 2) enviar para o canal de processamento de Appointments uma tag (boolean) de identificação de exame especial como variável de channelMap, 3) mensagens de urgencia fluem para o canal de appointments</description>
      <revision>34</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.fhir.shared.FhirReceiverProperties" version="3.12.0">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.12.0">
  <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="3.12.0">
            <host>0.0.0.0</host>
            <port>8097</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>response</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <contextPath>fhir/r4</contextPath>
          <timeout>30000</timeout>
          <conformanceTemplate></conformanceTemplate>
          <conformanceURL></conformanceURL>
          <conformanceName></conformanceName>
          <supportsXML>false</supportsXML>
          <supportsJSON>true</supportsJSON>
          <systemInteractions>
            <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_TRANSACTION</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_SYSTEM</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_SYSTEM</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
          </systemInteractions>
          <resourceProperties>
            <disabledInteractions>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SUBSCRIPTION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>COMPARTMENT_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SPECIMEN_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICATION_KNOWLEDGE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>COMPOSITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT_AUTHORIZATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ENCOUNTER</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>IMMUNIZATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>BUNDLE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICATION_ADMINISTRATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PAYMENT_NOTICE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT_MANUFACTURED</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CONDITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>COMMUNICATION_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>INSURANCE_PLAN</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>EFFECT_EVIDENCE_SYNTHESIS</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>IMMUNIZATION_EVALUATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT_CONTRAINDICATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>BODY_STRUCTURE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT_PACKAGED</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>EVENT_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>COVERAGE_ELIGIBILITY_RESPONSE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>RISK_ASSESSMENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>BINARY</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>BIOLOGICALLY_DERIVED_PRODUCT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>TERMINOLOGY_CAPABILITIES</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>TEST_SCRIPT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>LIBRARY</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>COVERAGE_ELIGIBILITY_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>GOAL</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CARE_PLAN</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CLAIM</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CAPABILITY_STATEMENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SUBSTANCE_POLYMER</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>EXPLANATION_OF_BENEFIT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CHARGE_ITEM</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>COMMUNICATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ORGANIZATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>TASK</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ENROLLMENT_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>DEVICE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>VISION_PRESCRIPTION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PROVENANCE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SUBSTANCE_SPECIFICATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>DEVICE_USE_STATEMENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>FAMILY_MEMBER_HISTORY</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SLOT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>GROUP</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>EVIDENCE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT_INTERACTION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>RESEARCH_STUDY</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>COVERAGE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ENDPOINT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CONTRACT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>IMMUNIZATION_RECOMMENDATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MESSAGE_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICATION_STATEMENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>DOCUMENT_MANIFEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SUPPLY_DELIVERY</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>RESEARCH_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>DEVICE_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>APPOINTMENT_RESPONSE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>LINKAGE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>AUDIT_EVENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>OPERATION_OUTCOME</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEASURE_REPORT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>DIAGNOSTIC_REPORT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>FLAG</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SEARCH_PARAMETER</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SUBSTANCE_PROTEIN</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>VERIFICATION_RESULT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PAYMENT_RECONCILIATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>OBSERVATION_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PARAMETERS</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ALLERGY_INTOLERANCE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CONCEPT_MAP</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT_INDICATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SUBSTANCE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SERVICE_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>EPISODE_OF_CARE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>STRUCTURE_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MESSAGE_HEADER</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>OPERATION_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ADVERSE_EVENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>APPOINTMENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>QUESTIONNAIRE_RESPONSE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CATALOG_ENTRY</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SUBSTANCE_SOURCE_MATERIAL</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>RESEARCH_ELEMENT_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SCHEDULE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SUPPLY_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>NUTRITION_ORDER</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PLAN_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICATION_DISPENSE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICATION_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>EXAMPLE_SCENARIO</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>NAMING_SYSTEM</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PRACTITIONER_ROLE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>REQUEST_GROUP</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>DOCUMENT_REFERENCE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>BASIC</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>RISK_EVIDENCE_SYNTHESIS</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CLAIM_RESPONSE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>HEALTHCARE_SERVICE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MOLECULAR_SEQUENCE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT_INGREDIENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>GRAPH_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>IMPLEMENTATION_GUIDE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>STRUCTURE_MAP</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ORGANIZATION_AFFILIATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>INVOICE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ENROLLMENT_RESPONSE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PRACTITIONER</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CARE_TEAM</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CHARGE_ITEM_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>LIST</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>DETECTED_ISSUE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>VALUE_SET</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PERSON</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CODE_SYSTEM</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>DEVICE_METRIC</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>RESEARCH_SUBJECT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CLINICAL_IMPRESSION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDIA</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>LOCATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SUBSTANCE_REFERENCE_INFORMATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>OBSERVATION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ACCOUNT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>TEST_REPORT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>IMAGING_STUDY</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>DEVICE_REQUEST</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>QUESTIONNAIRE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>SPECIMEN</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEASURE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>RELATED_PERSON</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>MEDICINAL_PRODUCT_PHARMACEUTICAL</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>GUIDANCE_RESPONSE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>ACTIVITY_DEFINITION</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>EVIDENCE_VARIABLE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PROCEDURE</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>CONSENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
              <entry>
                <com.mirth.connect.connectors.fhir.shared.FhirResource>PATIENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
                <set>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_PATCH</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                  <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
                </set>
              </entry>
            </disabledInteractions>
          </resourceProperties>
          <fhirVersion>R4</fhirVersion>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Set Default Response</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &quot;Internal Server Error&quot;, $(&apos;serverFhirVersion&apos;), 500, null, false);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Check Appointment or Enounter Type</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var isUrgencyType = false;
var isHospitalizationType = false;

if (msg[&apos;entry&apos;].length &gt; 0) {
	for (var i = 0; i &lt; msg[&apos;entry&apos;].length; i++){
		if (msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] == &apos;Appointment&apos;){
			// Check is urgent appointment type by serviceCategory
			msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;serviceCategory&apos;].find(function(serviceCategories){
				return serviceCategories.coding.find(function(coding){
					if (coding.code == $(&apos;urgencyServiceCategory&apos;)){
						isUrgencyType = true;
						return isUrgencyType;
					} else if (coding.code == $(&apos;hospitalizationMED_ServiceCategory&apos;) || coding.code == $(&apos;hospitalizationCIR_ServiceCategory&apos;)){
						isHospitalizationType = true;
						return isHospitalizationType;
					} 
				})
			});
		}

		if (msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] == &apos;Encounter&apos;){
			msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;extension&apos;].find(function(extensions){
				if (extensions.url.includes(&apos;Encounter.OperationalHealthUnit&apos;) &amp;&amp; typeof(extensions.valueCoding) != &apos;undefined&apos;){
					if (extensions.valueCoding.code == $(&apos;urgencyEncounterOperationHealthUnit&apos;)){
						isUrgencyType = true;
						return isUrgencyType;
					} else if (extensions.valueCoding.code == $(&apos;hospitalizationMED_EncounterOperationHealthUnit&apos;) || extensions.valueCoding.code == $(&apos;hospitalizationCIR_EncounterOperationHealthUnit&apos;)){
						isHospitalizationType = true;
						return isHospitalizationType;
					}
				}
			});
		}
	}	
}

channelMap.put(&apos;isUrgencyType&apos;, isUrgencyType);
channelMap.put(&apos;isHospitalizationType&apos;, isHospitalizationType);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Set Destinations</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>var activeDestinations = []

var entryEventList = $(&apos;entryEventList&apos;);

entryEventList.forEach( function (entryEvent){

	if ($(&apos;evento&apos;) == &apos;CirurgicalProposalCreated&apos; ) {
		activeDestinations.push(&quot;CirurgicalProposalProcessing&quot;);
		
	} else if(Boolean($(&apos;isUrgencyType&apos;) == true)){
		event = String(entryEvent);
		switch (String(event)){
			case &quot;AppointmentCreated&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;AppointmentCancelled&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;AppointmentEdited&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;AppointmentMoved&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;VisitCheckInEnded&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;VisitCheckInCancelled&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;VisitChangeCurrentFacility&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			default:
		    		break;
		}
		
	} else if(Boolean($(&apos;isHospitalizationType&apos;) == true)){
		event = String(entryEvent);
		switch (String(event)){
			case &quot;AppointmentCreated&quot; :
				if(!activeDestinations.includes(&quot;HospitalizationProcesing&quot;)){
					activeDestinations.push(&quot;HospitalizationProcesing&quot;);
				}			
				break;
			case &quot;AppointmentCancelled&quot; :
				if(!activeDestinations.includes(&quot;HospitalizationProcesing&quot;)){
					activeDestinations.push(&quot;HospitalizationProcesing&quot;);
				}			
				break;
			case &quot;AppointmentEdited&quot; :
				if(!activeDestinations.includes(&quot;HospitalizationProcesing&quot;)){
					activeDestinations.push(&quot;HospitalizationProcesing&quot;);
				}			
				break;
			case &quot;AppointmentMoved&quot; :
				if(!activeDestinations.includes(&quot;HospitalizationProcesing&quot;)){
					activeDestinations.push(&quot;HospitalizationProcesing&quot;);
				}			
				break;
			case &quot;VisitCheckInEnded&quot; :
				if(!activeDestinations.includes(&quot;HospitalizationProcesing&quot;)){
					activeDestinations.push(&quot;HospitalizationProcesing&quot;);
				}			
				break;
			case &quot;VisitCheckInCancelled&quot; :
				if(!activeDestinations.includes(&quot;HospitalizationProcesing&quot;)){
					activeDestinations.push(&quot;HospitalizationProcesing&quot;);
				}			
				break;
			case &quot;VisitChangeCurrentFacility&quot; :
				if(!activeDestinations.includes(&quot;HospitalizationProcesing&quot;)){
					activeDestinations.push(&quot;HospitalizationProcesing&quot;);
				}			
				break;
			default:
		    		break;
		}
		
	} else {
		event = String(entryEvent);
		switch (String(event)){

			case &quot;AppointmentCreated&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;AppointmentCancelled&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;AppointmentEdited&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;AppointmentMoved&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;VisitCheckInEnded&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;VisitCheckInCancelled&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;VisitCompleted&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;VisitUndoCompleted&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;VisitChangeCurrentFacility&quot; :
				if(!activeDestinations.includes(&quot;AppointmentsProcessingJS&quot;)){
					activeDestinations.push(&quot;AppointmentsProcessingJS&quot;);
				}			
				break;
			case &quot;CreatePrescriptionExternal&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;RequisitionLineCreated&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;RequisitionLineCancelled&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;RequisitionLineUpdated&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;PrescriptionExternalCreated&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;PrescriptionExternalUpdated&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;PrescriptionExternalCancelled&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;DeliverCreated&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;DeliverCancelled&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;DeliverChanged&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;ExternalDeliverStateChanged&quot; :
				if(!activeDestinations.includes(&quot;McdtProcessing&quot;)){
					activeDestinations.push(&quot;McdtProcessing&quot;);
				}			
				break;
			case &quot;clinical-document&quot; :
				if(!activeDestinations.includes(&quot;ClinicalDocumentProcessing&quot;)){
					activeDestinations.push(&quot;ClinicalDocumentProcessing&quot;);
				}			
				break;
			default:
		    		break;		
		}	
	}
	
})

destinationSet.removeAllExcept(activeDestinations);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">ewogICJyZXNvdXJjZVR5cGUiIDogIkJ1bmRsZSIsCiAgImlkIiA6ICIzZmU0ODg5Yi02OTBlLTQ1Y2YtYjQ1Mi1kZGFjZDJhNTdmNjgiLAogICJ0eXBlIiA6ICJtZXNzYWdlIiwKICAidGltZXN0YW1wIiA6ICIyMDIzLTA1LTExVDE2OjMwOjQ5Ljc4Mzk0NTErMDE6MDAiLAogICJlbnRyeSIgOiBbIAoJewogICAgICAiZnVsbFVybCIgOiAiaHR0cHM6Ly90aG9tLWZoaXIuYXBpcy5zYXQuam1zbGFiLnB0L2ZoaXIvRW5jb3VudGVyL2M5OGY1OWQ2LTQwNDAtZWYxMS04ZWQxLTAwNTA1NjlmMDAwMSIsCiAgICAgICJyZXNvdXJjZSIgOiB7CiAgICAgICAgInJlc291cmNlVHlwZSIgOiAiRW5jb3VudGVyIiwKICAgICAgICAiaWQiIDogImM5OGY1OWQ2LTQwNDAtZWYxMS04ZWQxLTAwNTA1NjlmMDAwMSIsCiAgICAgICAgImV4dGVuc2lvbiIgOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ1cmwiIDogImh0dHBzOi8vdGhvbS1maGlyLmFwaXMuc2F0Lmptc2xhYi5wdC9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vRW5jb3VudGVyLkZ1bmN0aW9uYWxIZWFsdGhVbml0IiwKICAgICAgICAgICAgInZhbHVlQ29kaW5nIiA6IHsKICAgICAgICAgICAgICAic3lzdGVtIiA6ICJodHRwczovL3Rob20tZmhpci5hcGlzLnNhdC5qbXNsYWIucHQvZmhpci9Db2RlU3lzdGVtL0Z1bmN0aW9uYWxIZWFsdGhVbml0IiwKICAgICAgICAgICAgICAiY29kZSIgOiAiNTA3ZGNiMDItYWY5Yy1lZDExLThlY2YtMDA1MDU2OWZkZjIwIiwKICAgICAgICAgICAgICAiZGlzcGxheSIgOiAiQXRlbmRpbWVudG8gUGVybWFuZW50ZSBBZHVsdG9zIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidXJsIiA6ICJodHRwczovL3Rob20tZmhpci5hcGlzLnNhdC5qbXNsYWIucHQvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0VuY291bnRlci5Sb290RnVuY3Rpb25hbEhlYWx0aFVuaXQiLAogICAgICAgICAgICAidmFsdWVDb2RpbmciIDogewogICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vdGhvbS1maGlyLmFwaXMuc2F0Lmptc2xhYi5wdC9maGlyL0NvZGVTeXN0ZW0vUm9vdEZ1bmN0aW9uYWxIZWFsdGhVbml0IiwKICAgICAgICAgICAgICAiY29kZSIgOiAiNzIxZTNiMGMtYWIxNC1lZDExLTgxMTYtMDA1MDU2YTM3MGZiIiwKICAgICAgICAgICAgICAiZGlzcGxheSIgOiAiQXRlbmRpbWVudG8gUGVybWFuZW50ZSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInVybCIgOiAiaHR0cHM6Ly90aG9tLWZoaXIuYXBpcy5zYXQuam1zbGFiLnB0L2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9FbmNvdW50ZXIuT3BlcmF0aW9uYWxIZWFsdGhVbml0IiwKICAgICAgICAgICAgInZhbHVlQ29kaW5nIiA6IHsKICAgICAgICAgICAgICAic3lzdGVtIiA6ICJodHRwczovL3Rob20tZmhpci5hcGlzLnNhdC5qbXNsYWIucHQvZmhpci9Db2RlU3lzdGVtL09wZXJhdGlvbmFsSGVhbHRoVW5pdCIsCiAgICAgICAgICAgICAgImNvZGUiIDogIjg5NTA3YTU5LWUyODgtZTYxMS04MGQxLTAwNTA1NmEzNzBmYiIsCiAgICAgICAgICAgICAgImRpc3BsYXkiIDogIlVyZ8OqbmNpYSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInVybCIgOiAiaHR0cHM6Ly90aG9tLWZoaXIuYXBpcy5zYXQuam1zbGFiLnB0L2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9FbmNvdW50ZXIuSGVhbHRoU3lzdGVtIiwKICAgICAgICAgICAgInZhbHVlUmVmZXJlbmNlIiA6IHsKICAgICAgICAgICAgICAicmVmZXJlbmNlIiA6ICJPcmdhbml6YXRpb24vSFMuNDU2NzA5MWQtMDljNC1lZDExLThlYjktMDA1MDU2OWY0MTc2IiwKICAgICAgICAgICAgICAiZGlzcGxheSIgOiAiQURTRSBJLlAuIFRFU1RFUyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInVybCIgOiAiaHR0cHM6Ly90aG9tLWZoaXIuYXBpcy5zYXQuam1zbGFiLnB0L2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9FbmNvdW50ZXIuU2VydmljZSIsCiAgICAgICAgICAgICJ2YWx1ZUNvZGluZyIgOiB7CiAgICAgICAgICAgICAgInN5c3RlbSIgOiAiaHR0cHM6Ly90aG9tLWZoaXIuYXBpcy5zYXQuam1zbGFiLnB0L2ZoaXIvQ29kZVN5c3RlbS9TZXJ2aWNlIiwKICAgICAgICAgICAgICAiY29kZSIgOiAiYjZlOTU1M2UtOWIzZi1lZjExLThlZDEtMDA1MDU2OWYwMDAxIiwKICAgICAgICAgICAgICAiZGlzcGxheSIgOiAiVXJnw6puY2lhIEdlcmFsIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAidXJsIiA6ICJodHRwczovL3Rob20tZmhpci5hcGlzLnNhdC5qbXNsYWIucHQvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL0VuY291bnRlci5Db3ZlcmFnZSIsCiAgICAgICAgICAgICJ2YWx1ZVJlZmVyZW5jZSIgOiB7CiAgICAgICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ292ZXJhZ2UvN2YyNmY5M2ZmMjE0ZWUxMThlY2QwMDUwNTY5ZjAwMDE0NTY3MDkxZDA5YzRlZDExOGViOTAwNTA1NjlmNDE3NiIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImlkZW50aWZpZXIiIDogWwogICAgICAgICAgewogICAgICAgICAgICAidXNlIiA6ICJvZmZpY2lhbCIsCiAgICAgICAgICAgICJ2YWx1ZSIgOiAiVi5FUjAwMDAwMDAyMSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJzdGF0dXMiIDogImFycml2ZWQiLAogICAgICAgICJjbGFzcyIgOiB7CiAgICAgICAgICAic3lzdGVtIiA6ICJodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL3YzLUFjdENvZCIsCiAgICAgICAgICAiY29kZSIgOiAiRU1FUiIsCiAgICAgICAgICAiZGlzcGxheSIgOiAiZW1lcmdlbmN5IgogICAgICAgIH0sCiAgICAgICAgInN1YmplY3QiIDogewogICAgICAgICAgInJlZmVyZW5jZSIgOiAiUGF0aWVudC83ZjI2ZjkzZi1mMjE0LWVlMTEtOGVjZC0wMDUwNTY5ZjAwMDEiLAogICAgICAgICAgImlkZW50aWZpZXIiIDogewogICAgICAgICAgICAidXNlIiA6ICJvZmZpY2lhbCIsCiAgICAgICAgICAgICJ0eXBlIiA6IHsKICAgICAgICAgICAgICAiY29kaW5nIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInN5c3RlbSIgOiAiaHR0cHM6Ly90aG9tLWZoaXIuYXBpcy5zYXQuam1zbGFiLnB0L2ZoaXIvQ29kZVN5c3RlbS9QYXRpZW50Q29kZSIsCiAgICAgICAgICAgICAgICAgICJjb2RlIiA6ICJQYXRpZW50Q29kZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0ZXh0IiA6ICJUSE9NIFBhdGllbnQgQ29kZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZhbHVlIiA6ICIyNjAiCiAgICAgICAgICB9LAogICAgICAgICAgImRpc3BsYXkiIDogIkpvw6NvIE1vcmFpcyIKICAgICAgICB9LAogICAgICAgICJlcGlzb2RlT2ZDYXJlIiA6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInJlZmVyZW5jZSIgOiAiRXBpc29kZU9mQ2FyZS9FLjA1ODU1OWQ2LTQwNDAtZWYxMS04ZWJlLTAwNTA1NjlmNDE3NiIsCiAgICAgICAgICAgICJkaXNwbGF5IiA6ICJFLjAwMDAwODgyOSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJhcHBvaW50bWVudCIgOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJyZWZlcmVuY2UiIDogIkFwcG9pbnRtZW50L2Q2NTk4ZmNhLTQwNDAtMTFlZi04ZWQxLTAwNTA1NjlmMDAwMSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwZXJpb2QiIDogewogICAgICAgICAgInN0YXJ0IiA6ICIyMDI0LTA3LTEyVDEyOjIwOjAwKzAxOjAwIiwKICAgICAgICAgICJlbmQiIDogIjIwMjQtMDctMTJUMTM6MDA6MDArMDE6MDAiCiAgICAgICAgfSwKICAgICAgICAibG9jYXRpb24iIDogWwogICAgICAgICAgewogICAgICAgICAgICAibG9jYXRpb24iIDogewogICAgICAgICAgICAgICJyZWZlcmVuY2UiIDogIkxvY2F0aW9uL0YuZjg1ZDIxNjYtMGNiOS1lZDExLThlY2QtMDA1MDU2OWYwMDAxIiwKICAgICAgICAgICAgICAiaWRlbnRpZmllciIgOiB7CiAgICAgICAgICAgICAgICAidXNlIiA6ICJvZmZpY2lhbCIsCiAgICAgICAgICAgICAgICAic3lzdGVtIiA6ICJodHRwczovL2N1Zi5wdC9maGlyL0NvZGVTeXN0ZW0vRmFjaWxpdHkiLAogICAgICAgICAgICAgICAgInZhbHVlIiA6ICJDTUZMIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImRpc3BsYXkiIDogIkNsw61uaWNhIENVRiBNaXJhZmxvcmVzIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicGh5c2ljYWxUeXBlIiA6IHsKICAgICAgICAgICAgICAiY29kaW5nIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInN5c3RlbSIgOiAiaHR0cHM6Ly90aG9tLWZoaXIuYXBpcy5zYXQuam1zbGFiLnB0L2ZoaXIvQ29kZVN5c3RlbS9Mb2NhdGlvblBoeXNpY2FsVHlwZSIsCiAgICAgICAgICAgICAgICAgICJjb2RlIiA6ICIxIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRleHQiIDogIkJ1aWxkaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibG9jYXRpb24iIDogewogICAgICAgICAgICAgICJyZWZlcmVuY2UiIDogIkxvY2F0aW9uL0hDLjE2OWNjNmJjLWE5YjItZWQxMS04ZWI5LTAwNTA1NjlmNDE3NiIsCiAgICAgICAgICAgICAgImlkZW50aWZpZXIiIDogewogICAgICAgICAgICAgICAgInVzZSIgOiAib2ZmaWNpYWwiLAogICAgICAgICAgICAgICAgInN5c3RlbSIgOiAiaHR0cHM6Ly9jdWYucHQvZmhpci9Db2RlU3lzdGVtL0hlYWx0aENlbnRlciIsCiAgICAgICAgICAgICAgICAidmFsdWUiIDogIkNNRkwiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiZGlzcGxheSIgOiAiQ2zDrW5pY2EgQ1VGIE1pcmFmbG9yZXMiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwaHlzaWNhbFR5cGUiIDogewogICAgICAgICAgICAgICJjb2RpbmciIDogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAic3lzdGVtIiA6ICJodHRwczovL3Rob20tZmhpci5hcGlzLnNhdC5qbXNsYWIucHQvZmhpci9Db2RlU3lzdGVtL0xvY2F0aW9uUGh5c2ljYWxUeXBlIiwKICAgICAgICAgICAgICAgICAgImNvZGUiIDogIkhDIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRleHQiIDogIkhlYWx0aENlbnRlciIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfQogICBdCn0=</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>FHIR</inboundDataType>
          <outboundDataType>FHIR</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
              <serializationType>JSON</serializationType>
              <fhirVersion>R4</fhirVersion>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
              <serializationType>JSON</serializationType>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
              <serializationType>JSON</serializationType>
              <fhirVersion>R4</fhirVersion>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
              <serializationType>JSON</serializationType>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
              <name>Accept Message if resourceType equals &quot;Bundle&quot;</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>if (msg[&apos;resourceType&apos;] == &quot;Bundle&quot;) {
    return true;
}
response = createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &quot;The FHIR object is not properly defined&quot;, $(&apos;serverFhirVersion&apos;), 400, null, false);
responseMap.put(&apos;response&apos;, response);
return false;</script>
            </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
            <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
              <name>Validate Destination</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <operator>AND</operator>
              <script>var errorMessage = &quot;&quot;;
var isDestinationSet = false;

if (msg[&apos;entry&apos;].length &gt; 0) {
	for (var i = 0; i &lt; msg[&apos;entry&apos;].length; i++){
		if (typeof msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] !== &apos;undefined&apos;){
			if (msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] == &apos;MessageHeader&apos;){

				msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;destination&apos;].forEach(function(segmentName) {
					  if (segmentName[&apos;name&apos;].toLowerCase() === &apos;patientcare&apos; ){
					  	isDestinationSet = true;				  	
					  }	  				
				});
				
			}
		}
	}
}

if (isDestinationSet == true) {
	return true;	
} else {
	errorMessage = &quot;Destination não está definido como PatientCare&quot;;
	var response = createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &quot;Destination não está definido como &apos;PatientCare&apos;&quot;, $(&apos;serverFhirVersion&apos;), 400, null, false);
	responseMap.put(&apos;response&apos;, response)
}
channelMap.put(&apos;errorMessage&apos;, errorMessage);
return false;</script>
            </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
            <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
              <name>Validate FHIR Events</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <operator>AND</operator>
              <script>var errorMessageFhirEvents = &quot;&quot;;
var entryEventList = [];

// List of Accepted Events
var fhirEventsList = [&quot;AppointmentCreated&quot;, &quot;AppointmentCancelled&quot;, &quot;AppointmentEdited&quot;, &quot;AppointmentMoved&quot;, &quot;VisitCheckInEnded&quot;, &quot;VisitCheckInCancelled&quot;, &quot;VisitCompleted&quot;, &quot;VisitUndoCompleted&quot;, &quot;CreatePrescriptionExternal&quot;, &quot;RequisitionLineCreated&quot;, &quot;RequisitionLineCancelled&quot;, &quot;RequisitionLineUpdated&quot;, &quot;PrescriptionExternalCreated&quot;, &quot;PrescriptionExternalUpdated&quot;, &quot;PrescriptionExternalCancelled&quot;, &quot;VisitChangeCurrentFacility&quot;, &quot;DeliverCreated&quot;, &quot;DeliverCancelled&quot;, &quot;DeliverChanged&quot;, &quot;ExternalDeliverStateChanged&quot;, &quot;clinical-document&quot;, &quot;CirurgicalProposalCreated&quot;];

var isValid = false;
if (msg[&apos;entry&apos;].length &gt; 0) {
	for (var i = 0; i &lt; msg[&apos;entry&apos;].length; i++){
		if (typeof msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] !== &apos;undefined&apos;){
			if (msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] == &apos;MessageHeader&apos;){

				if ( fhirEventsList.includes(msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;eventCoding&apos;][&apos;code&apos;]) ){
					isValid = true;
					entryEventList.push(msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;eventCoding&apos;][&apos;code&apos;])
					channelMap.put(&apos;evento&apos;, msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;eventCoding&apos;][&apos;code&apos;]);
				}
				
			}
		}
	}
}

if (isValid == true) {
	channelMap.put(&apos;entryEventList&apos;, entryEventList);
	return true;	
} else {
	errorMessageFhirEvents = &quot;FHIR Event não é válido&quot;;
	var response = createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &quot;FHIR Event não é tratado&quot;, $(&apos;serverFhirVersion&apos;), 400, null, false);
}
channelMap.put(&apos;errorMessageFhirEvents&apos;, errorMessageFhirEvents);
return false;</script>
            </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
          </elements>
        </filter>
        <transportName>FHIR Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>18</metaDataId>
          <name>AppointmentsProcessingJS</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>true</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>true</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>var destinationChannelId = &quot;15e9f810-1097-4fd9-a278-2907fd1278d1&quot;; // APPOINTMENT_FUNC_PROCESS_IN

if ($(&apos;errorExameEspecial&apos;) == true) {
	createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &quot;Não foi possível verificar se existe exame especial listado&quot;, $(&apos;serverFhirVersion&apos;), 500, null, false);
	resposta = Response(Status.ERROR, &quot;Não foi possível verificar se existe exame especial listado&quot;);
	return resposta;
} else {
	var bundleStr =  JSON.stringify(JSON.parse(connectorMessage.getEncodedData()));
	result = router.routeMessageByChannelId(destinationChannelId, new RawMessage(bundleStr,null,{&quot;isExameEspecial&quot;:$(&apos;isExameEspecial&apos;), &quot;isUrgencyType&quot;: $(&apos;isUrgencyType&apos;)}) );
	if (result.getStatus() == Status.valueOf(&quot;SENT&quot;) ) {
		resposta = Response(Status.SENT, result.getMessage());
		responseMap.put(&apos;response&apos;, FhirUtil.jsonToXML(JSON.stringify(JSON.parse(result.getMessage()), $(&apos;serverFhirVersion&apos;))) );
		//responseMap.put(&apos;response&apos;, JSON.parse(result.getMessage()));
		return resposta;
	} else {
		// response = Internal Server Error (definido na Source)
		resposta = Response(Status.QUEUED, bundleStr, &quot;Error trying to connect to APPOINTMENT_FUNC_PROCESS_IN. Retrying&quot;);
		return resposta;
	}
}
</script>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>isExameEspecial</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var isExameEspecial = false;
var error = false;

for (var i=0; i&lt;msg[&apos;entry&apos;].length; i++) {
	if (msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] == &quot;ServiceRequest&quot;) { // exames podem ter prescrição interna (vem com ServiceRequest+CarePlan) ou presricao externa (vem só com Appointment)

		msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;code&apos;][&apos;coding&apos;].find(function(coding){
			if (coding[&apos;system&apos;].includes(&quot;Service&quot;) &amp;&amp; !coding[&apos;system&apos;].includes(&quot;thom&quot;)) {
				serviceId = coding[&apos;code&apos;];
			} else {
				serviceExtId = coding[&apos;code&apos;];
			}
		});

		result = checkIfExameEspecial(serviceId, serviceExtId);
		if (result.statusCode == &quot;500&quot;) {
			error = true;
		} else {
			isExameEspecial = result.responseMessage; // true or false
		}
		
		
	}else if (msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] == &quot;Appointment&quot;){

		//só se aplica a ambulatório
		msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;serviceCategory&apos;].find( function(serviceCat) {
			serviceCat[&apos;coding&apos;].find( function(coding) {
				if (coding[&apos;code&apos;] == $(&apos;ambulatoryServiceCategory&apos;) ) { // Ambulatório
					
					
					var serviceId = null;
					var serviceExtId = null;
					msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;serviceType&apos;][0][&apos;coding&apos;].find( function(coding) {
						if (coding[&apos;system&apos;].includes(&quot;Service&quot;) &amp;&amp; !coding[&apos;system&apos;].includes(&quot;thom&quot;)) {
							serviceId = coding[&apos;code&apos;];
						} else {
							serviceExtId = coding[&apos;code&apos;];
						}
					})
					
					result = checkIfExameEspecial(serviceId, serviceExtId);
					
					if (result.statusCode == &quot;500&quot;) {
						error = true;
					} else {
						isExameEspecial = result.responseMessage; // true or false
					}							
				}
			})
		})
		
	}
}

if (error) {
	channelMap.put(&apos;errorExameEspecial&apos;, error);
} else {
	channelMap.put(&apos;isExameEspecial&apos;, isExameEspecial);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICJyZXNvdXJjZVR5cGUiIDogIkJ1bmRsZSIsCiAgImlkIiA6ICIzZmU0ODg5Yi02OTBlLTQ1Y2YtYjQ1Mi1kZGFjZDJhNTdmNjgiLAogICJ0eXBlIiA6ICJtZXNzYWdlIiwKICAidGltZXN0YW1wIiA6ICIyMDIzLTA1LTExVDE2OjMwOjQ5Ljc4Mzk0NTErMDE6MDAiLAogICJlbnRyeSIgOiBbIAogICBdCn0=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <sequenceNumber>0</sequenceNumber>
                <enabled>false</enabled>
                <script>responseMap.put(&apos;response&apos;, FhirUtil.jsonToXML(JSON.stringify(msg), $(&apos;serverFhirVersion&apos;)));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>16</metaDataId>
          <name>McdtProcessing</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>65e15490-f00e-481d-9154-a1c96a20ea7c</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Return Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>responseMap.put(&apos;response&apos;, FhirUtil.jsonToXML(JSON.stringify(msg), $(&apos;serverFhirVersion&apos;)));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>15</metaDataId>
          <name>ClinicalDocumentProcessing</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>8c4173fa-9afe-433f-9198-edfb0915cc4e</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>return Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>responseMap.put(&apos;response&apos;, FhirUtil.jsonToXML(JSON.stringify(msg), $(&apos;serverFhirVersion&apos;)));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>19</metaDataId>
          <name>HospitalizationProcesing</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>907c7b06-589b-4058-9e9f-b14f2b505b17</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>return Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>responseMap.put(&apos;response&apos;, FhirUtil.jsonToXML(JSON.stringify(msg), $(&apos;serverFhirVersion&apos;)));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>20</metaDataId>
          <name>CirurgicalProposalProcessing</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>ac03ae37-1f08-43aa-9415-4e2765ab383f</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>return Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>responseMap.put(&apos;response&apos;, FhirUtil.jsonToXML(JSON.stringify(msg), $(&apos;serverFhirVersion&apos;)));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

if (message.getConnectorMessages().get(0).getStatus() == ERROR) {
	var response = createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &quot;The FHIR object is not properly defined&quot;, $(&apos;serverFhirVersion&apos;), 500, null, false);
	//responseMap.put(&apos;response&apos;, response);
}

logger.info(generateLogMsg(&quot;bus&quot;, message, null, null, null, null, null));
</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Get a database connection
var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/postgres&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));

// Define the SQL query to create the table

var createDatabaseSQL = &quot;CREATE DATABASE int_mirth_transaction;&quot;;

try {
    // Execute the SQL query
    dbConn.executeUpdate(createDatabaseSQL);
    logger.info(&quot;DATABASE created successfully.&quot;);
} catch (e) {
	if (e.message.includes(&apos;already exists&apos;)){
		logger.error(&quot;DATABASE already exists&quot;);	
	}else {
		logger.error(&quot;Error creating DATABASE: &quot; + e);	
	}
    
} finally {
    // Close the database connection
    dbConn.close();
}


// Get a database connection
var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));

// Define the SQL query to create the table

var createTableSQL = &quot;CREATE TABLE IF NOT EXISTS service_request_external_ids (&quot;
                   + &quot;service_request_id character varying(255) PRIMARY KEY,&quot;
                   + &quot;hl7_placer character varying(255)&quot;
                   + &quot;);&quot;;

// Define the SQL query to create an index on service_request_id column
var createIndexQuery = &quot;CREATE INDEX IF NOT EXISTS idx_service_request_id ON service_request_external_ids (service_request_id, hl7_placer);&quot;;

// encounter_external_ids - Define the SQL query to create the table

var createTableSQLEncounterIds = &quot;CREATE TABLE IF NOT EXISTS encounter_external_ids (&quot;
                   + &quot;encounter_id character varying(255) PRIMARY KEY,&quot;
                   + &quot;encounter_identifier_value character varying(255)&quot;
                   + &quot;);&quot;;

// encounter_external_ids Define the SQL query to create an index on service_request_id column
var createIndexQueryEncounterIds = &quot;CREATE INDEX IF NOT EXISTS idx_encounter_identifier_value ON encounter_external_ids (encounter_identifier_value);&quot;;


try {
    // Execute the SQL query
    dbConn.executeUpdate(createTableSQL);
    dbConn.executeUpdate(createIndexQuery);
    logger.info(&quot;Table created successfully.&quot;);
    dbConn.executeUpdate(createTableSQLEncounterIds);
    dbConn.executeUpdate(createIndexQueryEncounterIds);
    logger.info(&quot;Table encounter_external_ids created successfully.&quot;);
} catch (e) {
	if (e.message.includes(&apos;already exists&apos;)){
		logger.error(&quot;Table already exists&quot;);	
	}else {
		logger.error(&quot;Error creating Table: &quot; + e);	
	}
    
} finally {
    // Close the database connection
    dbConn.close();
}


return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>AGENDAMENTOREFEXT</name>
            <type>STRING</type>
            <mappingName>agendamentoRefExt</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NUMSEQUENCIAL</name>
            <type>STRING</type>
            <mappingName>numSequencial</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NOMEDOENTE</name>
            <type>STRING</type>
            <mappingName>nomeDoente</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SERVICO</name>
            <type>STRING</type>
            <mappingName>servico</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SALA</name>
            <type>STRING</type>
            <mappingName>sala</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SENHA</name>
            <type>STRING</type>
            <mappingName>senha</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTO</name>
            <type>STRING</type>
            <mappingName>evento</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NUMMECANOGRAFICO</name>
            <type>STRING</type>
            <mappingName>numMecanografico</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1730907085617</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>60</pruneMetaDataDays>
            <pruneContentDays>60</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>552e2c11-37bf-43a3-baa2-1754b361168d</id>
            <name>API Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089515</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>API functions library with utility functions for generic functions that will be invoked along the various channels, e.g. consumption of basic PatientCare services, logging of logs, etc
</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>b6d68590-ac13-4d9f-a89c-6808f98fd974</string>
              <string>7ec636a5-c259-415e-9da9-564aa4bf0672</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>070cf4a3-def7-4c23-b200-e7337ab0f153</string>
              <string>2980f7b0-4597-4f7a-a1de-4dfcd19b0540</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>4f2e8bd8-d8ce-4829-9109-17b568f1162b</string>
              <string>7fe76b86-ac84-4140-afef-92dd9ec13ae9</string>
              <string>261b007b-b999-4ecd-8998-837c62a32c27</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>18320ce6-5da5-4671-a4bc-9705e45ccdbb</string>
              <string>5e5544cd-b85e-4932-a96f-5cad28e705b8</string>
              <string>d9d6b5f5-edd1-4e0c-8ba5-c6f2a3365a5c</string>
              <string>aa608b20-43f8-49ea-8789-2a6aa784900a</string>
              <string>939c8b83-1d56-4bf4-b289-113c1b14e1b3</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>ed32950f-b0c1-47ee-931f-de451ed6a172</string>
              <string>a3530d49-3114-40a0-90cb-ce4914aca839</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>15567a1f-541e-45e3-94cb-e843e059152b</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>545149dd-520a-4a1d-80c4-54052e6d380a</string>
              <string>362a4cf9-cb04-463b-82c5-cbbd1889ee9c</string>
              <string>ec6680ee-83f9-482c-b034-8614c6bce636</string>
              <string>a08e87c0-e56e-4f95-8f12-3b7c69eded8d</string>
              <string>7ac3f48d-16c4-4449-80d5-a8103a9ac5f8</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>3ce8e5be-dae2-4413-9c4f-15bac6049cb7</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>373e79bd-82f0-466b-9c1b-042e6e095b36</string>
              <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>e574181a-e3e1-49b6-9d71-78d846d0daae</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>34349ce2-b1e2-4bfc-992c-1f6e3cc281d9</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
              <string>99d0bf51-bb19-4bbd-adbd-4b606148e9a4</string>
              <string>0e98b91f-3169-4733-902f-118afa2d5ebc</string>
              <string>936a0f91-1bad-49d1-852a-a895c15146ae</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>77280229-7400-4c9c-b2f6-ac099d60871f</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>a1e1cf09-3c02-489d-80f4-6305b0df80ec</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>ebb78470-f376-47b6-9455-4cf2be31e2ef</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>44168b10-92fd-45f4-acef-61c9c29b8ec4</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c8bfd286-e39f-4ab4-8bc3-d5d9c95b900a</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>a5afc88e-7d8f-4743-8e9c-5389edf3e35c</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>41c81aeb-b462-4891-a0ea-673c6017218c</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>5611c4d6-0a58-4ed6-bfe2-efa1f2294f07</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>1d6b1caf-4821-4230-8745-54b5cecf2ba3</string>
              <string>89b1df84-4519-48a9-ae1f-3ae158692b3d</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>fc11ccb5-476e-485e-a5db-6ac8d460eb41</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>4cbef2bc-962d-4bdb-8d13-e7145d88621c</string>
              <string>a0b77f2b-f4b0-4ed7-9b27-fe970a0634b4</string>
              <string>c2cd049b-a261-47b5-9190-b55229521a62</string>
              <string>04596ec4-bf23-44d8-92c9-14a08643d97e</string>
              <string>615a7abb-c95b-41c1-a21e-99c9b8b05fb1</string>
              <string>5d0603d7-9d9a-409b-adf8-940a46be63a1</string>
              <string>048f2703-af21-4569-bf3b-955d189e4340</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>fab3c156-aea1-4068-800b-04a1a30b814c</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>86025761-218b-4205-99db-f5e1f4273da9</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>43882c7e-dcbb-44ec-b9e6-705cc6a4f6a9</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>38ba78b7-d9d0-4347-ac8d-0f2064c49a27</string>
              <string>ef70a082-0f5c-46b7-ae20-8ac4e5261c57</string>
              <string>d2250d91-f3ef-4154-ba78-c0bf6955b1b7</string>
              <string>607f13a0-8dc9-41e4-8e1d-623a145c8c6b</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>089d31ff-a9bb-4822-8818-e197344dca47</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>41e8684c-2279-4940-b3f9-9f1914e9cc68</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>137331af-f61f-4ec1-8296-39febdafc1d2</string>
              <string>1a8c9dcb-1052-49af-9960-c65db16e81e7</string>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>99a0314f-8ddf-4396-b39d-f54934ddfee9</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>67f8e921-4aa1-4b3f-9c36-3d55209b2099</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>400af9f5-05ef-403c-82aa-67899d791953</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>b36a2576-ce3e-4530-8bf8-375124d3eb8d</string>
              <string>e879c60d-1ea5-454c-a729-6d2184f82e24</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>276a26a4-2cfe-47ab-9f7c-ed1c3517e687</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>b7e144f5-2ed1-43c9-b29e-b21b118d0469</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>aefa6e5b-bad3-4dbf-af8a-3222f0393d1e</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>15cb318d-2648-4764-b972-2ab63d540c04</id>
                <name>apiGenerateBasicAuthHeader</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791559</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
 Generates an HTTP Basic Authentication header using the provided username and password.
 The credentials are encoded in Base64 and formatted appropriately for inclusion in HTTP request headers.
 This function is useful for creating headers for HTTP requests that require Basic Authentication.
 
 @param {String} user - The username to be included in the HTTP Basic Auth header.
 @param {String} pass - The password to be included in the HTTP Basic Auth header.
 @return {String} The HTTP Basic Authentication header, encoded in Base64 format.
**/
function apiGenerateBasicAuthHeader(user, pass) {
    var Base64 = Packages.java.util.Base64;
    var credentials = user + &quot;:&quot; + pass;
    var encodedCredentials = Base64.getEncoder().encodeToString(new java.lang.String(credentials).getBytes());
    var authHeader = &quot;Basic &quot; + encodedCredentials;
    return authHeader;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c32dc269-7c82-4fba-9d39-32a29b00ee01</id>
                <name>httpGet</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788760</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
  Envia um pedido HTTP GET para o URL especificado com autenticação Básica opcional.
  
  @param {String} url - O URL para o qual o pedido GET deve ser feito.
  @param {String|null} authHeader - Cabeçalho opcional de Autenticação Básica no formato Base64.
  @return {Object} Um objeto contendo o código de estado HTTP e o conteúdo da resposta.
                   - statusCode (Number): O código de estado HTTP.
                   - response (String): O conteúdo da resposta ou uma mensagem de erro.
  
  @example
  // Enviar um pedido GET sem autenticação
  var result = httpGet(&apos;https://example.com/api/resource&apos;, null);
  console.log(result.statusCode); // Código de estado HTTP
  console.log(result.response); // Conteúdo da resposta ou mensagem de erro
  
  @example
  // Enviar um pedido GET com Autenticação Básica
  var authHeader = generateBasicAuthHeader(&apos;username&apos;, &apos;password&apos;);
  var result = httpGet(&apos;https://example.com/api/resource&apos;, authHeader);
  console.log(result.statusCode); // Código de estado HTTP
  console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 **/
function httpGet(url, authHeader) {
    var result = {};

    var responseCode =  null;
    try {
        var URL = Packages.java.net.URL;
        var HttpURLConnection = Packages.java.net.HttpURLConnection;
        var BufferedReader = Packages.java.io.BufferedReader;
        var InputStreamReader = Packages.java.io.InputStreamReader;
        var StringBuilder = Packages.java.lang.StringBuilder;

        var urlObj = new URL(url);
        var httpConnection = urlObj.openConnection();
        httpConnection.setRequestMethod(&quot;GET&quot;);
        httpConnection.setConnectTimeout(10000);
        httpConnection.setReadTimeout(10000);

        if (authHeader) {
            httpConnection.setRequestProperty(&quot;Authorization&quot;, authHeader);
        }

        responseCode = httpConnection.getResponseCode().toString();
        var responseMessage = new StringBuilder();
        var inputStream = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
        var inputLine;
        while ((inputLine = inputStream.readLine()) != null) {
            responseMessage.append(inputLine);
        }
        inputStream.close();

        result.statusCode = responseCode;
        result.responseMessage = responseMessage.toString();
    } catch (e) {
        result.statusCode = responseCode != null ? responseCode : &quot;500&quot;; // 500 = Internal Server Error
        result.statusText = e.toString(); // antes: &quot;Internal Server Error: &quot; + e.toString()
        result.responseMessage = null;
    } /*finally {
    		if (httpConnection) httpConnection.disconnect();
    }*/

    return result;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>39bee33f-7fa8-475b-a294-eccc1ce715af</id>
                <name>httpPost</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
 Envia um pedido HTTP POST para o URL especificado com autenticação Básica opcional.
 
 @param {String} url - O URL para o qual o pedido POST deve ser feito.
 @param {String} data - Os dados a serem enviados no corpo do pedido (como uma string JSON).
 @param {String|null} authHeader - Cabeçalho opcional de Autenticação Básica no formato Base64.
 @return {Object} Um objeto contendo o código de estado HTTP e o conteúdo da resposta.
                  - statusCode (Number): O código de estado HTTP.
                  - response (String): O conteúdo da resposta ou uma mensagem de erro.
 
 @example
 // Enviar um pedido POST sem autenticação
 var result = httpPost(&apos;https://example.com/api/resource&apos;, &apos;{&quot;key&quot;: &quot;value&quot;}&apos;, null);
 console.log(result.statusCode); // Código de estado HTTP
 console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 
 @example
 // Enviar um pedido POST com Autenticação Básica
 var authHeader = generateBasicAuthHeader(&apos;username&apos;, &apos;password&apos;);
 var result = httpPost(&apos;https://example.com/api/resource&apos;, &apos;{&quot;key&quot;: &quot;value&quot;}&apos;, authHeader);
 console.log(result.statusCode); // Código de estado HTTP
 console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 **/
 function httpPost(url, data, authHeader) {
    var result = {};
    var outpuStream = null;
    var inputStream = null;
    
    try {
        var URL = Packages.java.net.URL;
        var HttpURLConnection = Packages.java.net.HttpURLConnection;
        var DataOutputStream = Packages.java.io.DataOutputStream;
        var BufferedReader = Packages.java.io.BufferedReader;
        var InputStreamReader = Packages.java.io.InputStreamReader;
        var StringBuilder = Packages.java.lang.StringBuilder;

        var urlObj = new URL(url);
        var httpConnection = urlObj.openConnection();
        httpConnection.setRequestMethod(&quot;POST&quot;);
        httpConnection.setDoOutput(true);
        httpConnection.setConnectTimeout(10000);
        httpConnection.setReadTimeout(10000);
        httpConnection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);      

        if (authHeader) {
            httpConnection.setRequestProperty(&quot;Authorization&quot;, authHeader);
        }
        
        try{
        	httpConnection.setRequestProperty(&quot;Content-Length&quot;, String(data.length));
        }catch (ex3) {
		httpConnection.setRequestProperty(&quot;Content-Length&quot;, String(data.length()));
        }

        try {
            outpuStream = new DataOutputStream(httpConnection.getOutputStream());
            outpuStream.writeBytes(data);
        } catch (ex3) {
            result.statusCode = &quot;503&quot;; // Service Unavailable
		  result.statusText = &quot;URL Indisponivel&quot;
            result.responseMessage = null;
            return result;
        } finally {
            if (outpuStream) {
                outpuStream.close();
            }
        }

        var responseCode = -1;
        try {
            responseCode = httpConnection.getResponseCode().toString();
        } catch (ex4) {
            result.statusCode = &quot;500&quot;; // Internal Server Error
            result.responseMessage = &quot;Error getting response code: &quot; + ex4.toString();
            return result;
        }

        var responseMessage = new StringBuilder();
	   var inputStream;

        try {

            inputStream = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));

		} catch (e) {
			inputStream = new BufferedReader(new InputStreamReader(httpConnection.getErrorStream()));
        }

            var inputLine;
            while ((inputLine = inputStream.readLine()) != null) {
                responseMessage.append(inputLine);
            }
            inputStream.close();

            result.statusCode = responseCode;
            result.responseMessage = responseMessage.toString();
        
    } catch (e) {
        // Handle exceptions for other parts of the request
        result.statusCode = &quot;500&quot;; // Internal Server Error
	   result.statusText = &quot;Internal Server Error: &quot; + e.toString();
        result.responseMessage = null;
    }

    return result;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c25c1fd-1f2b-40b7-9841-a884796e0414</id>
                <name>Web Service Rest API Consumption - genericApiCall</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793537</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to call a generic rest API, we can invoke the endpoint, method (GET, POST, PUT, etc), payload and authentication .
	This implementation includes Basic Auth, if the endpoint is not protected by Basic Auth the username and password fields must be set to nul

	@param {String} method - HTTP Method (GET, POST, PUT, PATCH, DELETE)
	@param {String} endpoint - API endpoint (eg: http://localhost:8008/api/v1/patient)
	@param {String} username - API Basic Auth username if necessary, otherwise set to null
	@param {String} password - API Basic Auth password if necessary, otherwise set to null
	@param {Object} payload - Request Payload or set to null if not necessary
	@return {Object} this function returns the operation code and the API requst response body
*/
function genericApiCall(method, endpoint, username, password, payload) {
	// Setting variables
	var ws = null;
	var result =  null;
	
	// Import JAVA custom code
	try{
		ws = new Packages.com.bsimple.mirth.services.RestClient();		
	}catch(err){
		logger.info(&quot;Unable to load RestClient.jar from custom-lib folder&quot;);
		return null;
	}

	// Try to consume API
	try   {
		result = ws.callService(method, endpoint, username, password, payload);
		return result;
	}  catch(err) {
		logger.info(&quot;Internbal error consuming API&quot;);
		var ret = {};
		ret.statusCode = &quot;500&quot;;
		ret.statusCodeValue = &quot;Internal error consuming API - make sure the endpoint is correctly setted&quot;;
		ret.body = null;
		return ret;
	}
	
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>f15f2324-5af5-4bb8-ad87-5c528494dfb6</id>
            <name>DateUtils</name>
            <revision>9</revision>
            <lastModified>
              <time>1730914089537</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Date Utilities for formating Dates and convert formats, Date Processing</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>3d1c4a14-5d9d-40ee-8c72-931459c94b75</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>4de0b993-bf9e-49e0-b224-3eef7e76e2b3</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>c6cdb85d-527a-45c4-bca5-1e110167cc50</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788437</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0ff87898-9f14-46b4-bc5d-f4091165b164</id>
                <name>getCurrentDateUTC</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788191</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is to get current system date in UTC+0 format - &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSS&apos;Z&apos;&quot;
	
	@return {String} return formmatted system date in UTC format
*/
function getCurrentDateUTC() {
	// Import Java classes
	var SimpleDateFormat = java.text.SimpleDateFormat;
	var Date = java.util.Date;
	var TimeZone = java.util.TimeZone;
	
	var dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSS&apos;Z&apos;&quot;);
	// Set the timezone to UTC
	dateFormat.setTimeZone(TimeZone.getTimeZone(&quot;UTC&quot;));
	// Get the current date
	var currentDate = new Date();
	// Format the date in UTC
	var formattedDate = dateFormat.format(currentDate);

	return formattedDate;
}

globalMap.put(&quot;getCurrentDateUTC&quot;, getCurrentDateUTC);</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3bb1d234-3e4f-4832-8a59-01e5388865fb</id>
                <name>LocalTimeToUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788319</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function LocalDateTimeToUtc(localDateTime, timezone) {

	var DateTimeFormatter = Packages.java.time.format.DateTimeFormatter;
	var LocalDateTime = Packages.java.time.LocalDateTime;
	var ZoneOffset = Packages.java.time.ZoneOffset;

	var cleanDateTime = localDateTime.replace(/[^\d]/g, &apos;&apos;).padEnd(14, &apos;0&apos;);

	var zone;
	if(timezone == undefined){
		zone = java.time.ZoneId.systemDefault();
	}else{
		zone = java.time.ZoneId.of(timezone);
	}
	
	var pattern = &quot;yyyyMMddHHmmss&quot;;
	
	var formatter = DateTimeFormatter.ofPattern(pattern);
	var localDateTime = LocalDateTime.parse(cleanDateTime, formatter);
	

	return localDateTime.atZone(zone).toOffsetDateTime().toInstant().toString();

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c64a2526-183c-4378-b708-c0c880f8e987</id>
                <name>OffsetDateTimeToUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790057</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function OffsetTimeToUtc(offsetDateTimeStr) {
	
	var offsetDateTime = java.time.OffsetDateTime.parse(offsetDateTimeStr);

     return offsetDateTime.toInstant().toString();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bdf25c4-c7a4-4248-bc1e-7148ebccc58b</id>
                <name>subtractDatesUTC</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790375</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to perceive the number of miliseconds/seconds/minutes/hours/days between two given (string) dates in UTC format.

	@param {String} startStr - start date in UTC format
	@param {String} endStr - end date in UTC format
	@param {String} unit - time unit used. Options: milliseconds&apos;, &apos;seconds&apos;, &apos;minutes&apos;, &apos;hours&apos;, &apos;days&apos;
	@return {String} return description
*/
function subtractDatesUTC(startStr, endStr, unit) {
    // Parse the input dates as Date objects
    const start = new Date(startStr);
    const end = new Date(endStr);

    // Get the difference in milliseconds
    const diffMilliseconds = end.getTime() - start.getTime();

    // Convert the difference to the requested unit
    var diff = null;
    switch(unit) {
        case &apos;milliseconds&apos;:
            diff = diffMilliseconds;
            break;
        case &apos;seconds&apos;:
            diff = diffMilliseconds / 1000;
            break;
        case &apos;minutes&apos;:
            diff = diffMilliseconds / (1000 * 60);
            break;
        case &apos;hours&apos;:
            diff = diffMilliseconds / (1000 * 60 * 60);
            break;
        case &apos;days&apos;:
            diff = diffMilliseconds / (1000 * 60 * 60 * 24);
            break;
        default:
            throw new Error(&apos;Invalid unit. Please use &quot;milliseconds&quot;, &quot;seconds&quot;, &quot;minutes&quot;, &quot;hours&quot;, or &quot;days&quot;.&apos;);
    }

    return diff;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2f1419d7-0352-47e8-af40-159b623aa777</id>
                <name>UtcDateTimeAdd</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788151</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to add/subtract set intervals. This is not meant to change local times between timezones!

	@param {String} UtcDateTime - UtcDateString in ISO Format &apos;YYYY-MM-DDThh:mm:ssZ&apos; (millis optional)
	@param {String} interval - interval to add (ss - seconds, mm - minutes, hh - hours, DD - days, MM - months, YY - years )
	@param {int} value - value to add (negative values will subtract from date)
	@return {String} newUTCDate
*/
function UtcDateTimeAdd(utcDateTime, interval, value) {

	var ChronoUnit = Packages.java.time.temporal.ChronoUnit;

	var inst = java.time.Instant.parse(utcDateTime);
	
	switch(interval){
		case &apos;ss&apos;:
			return inst.plusSeconds(value).toString();
			break;
		case &apos;mm&apos;:
			return inst.plus(value, ChronoUnit.MINUTES).toString();
			break;
		case &apos;hh&apos;:
			return inst.plus(value, ChronoUnit.HOURS).toString();
			break;
		case &apos;DD&apos;:
			return inst.plus(value, ChronoUnit.DAYS).toString();
			break;
		case &apos;MM&apos;:
			return inst.plus(value, ChronoUnit.MONTHS).toString();
			break;
		case &apos;YY&apos;:
			return inst.plus(value, ChronoUnit.YEARS).toString();
			break;
		default:
			return &apos;&apos; 
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bd844bee-5372-484b-a9f4-fe2f98b6bd3a</id>
                <name>utcToLocalDateCdaString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793366</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function utcToLocalDateCdaString(date) {
	
	var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
	formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	var formatter_final = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
	formatter_final.setTimeZone(java.util.TimeZone.getTimeZone(&quot;Europe/Lisbon&quot;));

	var dataFormat = date.replace(/\.\d+/, &apos;&apos;);
	var dataUTC = formatter_utc.parse(dataFormat);
	var dataLocal = formatter_final.format(dataUTC);
	
    	return dataLocal;
    
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5617deeb-09e0-4d29-a1cc-e63ac6fafb0b</id>
                <name>UtcToLocalDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790566</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function UtcToLocalDateTime(utcDate, withOffset, targetTimezone) {

	var DateTimeFormatter = Packages.java.time.format.DateTimeFormatter;
    	
    	var inst = java.time.Instant.parse(utcDate);
    	var zone;
	
	if(withOffset == undefined){
		withOffset = false;	
	}

	if(targetTimezone == undefined){

		zone = java.time.ZoneId.systemDefault();	
	}else{
		zone = java.time.ZoneId.of(targetTimezone);
	}

	var offsetDateTime = inst.atZone(zone).toOffsetDateTime();
   
    	if (withOffset) {

		return offsetDateTime.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);    		
    	}else{

    		return offsetDateTime.toLocalDateTime().toString();
    	}
    	
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>1f350e29-158e-4645-8809-9e60d1a47854</id>
            <name>FHIR DB Operations</name>
            <revision>6</revision>
            <lastModified>
              <time>1730914089544</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Functions used by the FHIR Listener channel to communicate with the database.
PostgreSQL and SQL Server are supported. If you want to support other database
servers, feel free to add your own database-specific operations and queries.</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>13e82aac-df07-463e-b8ca-8f4b98243618</id>
                <name>FHIR DB - Execute Cached Query</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791164</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a prepared query on the FHIR database and returns a CachedRowSet.

	@param {String} expression - The prepared statement to be executed.
	@param {Array} parameters - The parameters for the prepared statement.
	@param {DatabaseConnection} dbConn - Optionally provide a specific connection object.
	@return {CachedRowSet} The result of the query, as a CachedRowSet.
*/
function executeCachedQuery(expression, parameters, dbConn) {
	return executeOperation(&apos;executeCachedQuery&apos;, expression, parameters, dbConn);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9ec9d96c-4ea4-4f1c-8520-b73782f36aed</id>
                <name>FHIR DB - Execute Cached Query and Get Keys</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790636</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes an INSERT/UPDATE statement on the database and returns a CachedRowSet containing any
	generated keys.

	@param {String} expression - The prepared statement to be executed.
	@param {Array} parameters - The parameters for the prepared statement.
	@param {DatabaseConnection} dbConn - Optionally provide a specific connection object.
	@return {CachedRowSet} A CachedRowSet containing any generated keys.
*/
function executeUpdateAndGetGeneratedKeys(expression, parameters, dbConn) {
	return executeOperation(&apos;executeUpdateAndGetGeneratedKeys&apos;, expression, parameters, dbConn);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8960e710-4870-49ea-b952-63d2b74b7bbc</id>
                <name>FHIR DB - Execute Update</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788227</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a prepared INSERT/UPDATE statement on the database and returns the row count.

	@param {String} expression - The prepared statement to be executed.
	@param {Array} parameters - The parameters for the prepared statement.
	@param {DatabaseConnection} dbConn - Optionally provide a specific connection object.
	@return {int} A count of the number of updated rows.
*/
function executeUpdate(expression, parameters, dbConn) {
	return executeOperation(&apos;executeUpdate&apos;, expression, parameters, dbConn);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>23d0fa52-0d56-4e9a-82a5-56a6a3d55e43</id>
                <name>FHIR DB - Get Connection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792276</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Retrieves the FHIR database connection from the global channel map, creating a new one if necessary.

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.
*/
function getFHIRDBConnection(recreate) {
	var dbConn = $gc(&apos;dbConn&apos;);

	if (!dbConn || recreate) {
		if (dbConn) {
			try {
				dbConn.close();
			} catch (e) {}
		}
		dbConn = createFHIRDBConnection();
		$gc(&apos;dbConn&apos;, dbConn);
	}

	return dbConn;
}

function createFHIRDBConnection() {
	return DatabaseConnectionFactory.createDatabaseConnection($(&apos;fhirDBDriver&apos;), $(&apos;fhirDBUrl&apos;), $(&apos;fhirDBUsername&apos;), $(&apos;fhirDBPassword&apos;));
}

function executeOperation(operation, expression, parameters, dbConn) {
	var createDbConn = typeof dbConn == &apos;undefined&apos;;
	if (createDbConn) {
		dbConn = getFHIRDBConnection();
	}
	var attempts = 0;
	var maxAttempts = NumberUtils.toInt($(&apos;fhirDBMaxRetries&apos;) + &apos;&apos;, 0) + 1;

	while (attempts &lt; maxAttempts) {
		attempts++;

		try {
			if (parameters) {
				for (var i in parameters) {
					var param = parameters[i];
					if (param instanceof Number) {
						parameters[i] = new java.lang.Integer(param);
					} else if (param instanceof java.util.Date) {
						parameters[i] = convertDateParameter(param);
					}
				}
				
				return dbConn[operation](expression, java.util.Arrays.asList(parameters));
			} else {
				return dbConn[operation](expression);
			}
		} catch (e) {
			logger.info(&apos;Error executing statement, checking if valid...&apos;);
			var throwException = false;

			try {
				dbConn.executeCachedQuery(&apos;SELECT 1&apos;);
			} catch (e2) {
				if (createDbConn) {
					logger.info(&apos;Connection invalid, recreating...&apos;);
	
					try {
						dbConn = getFHIRDBConnection(true);
					} catch (e3) {
						throwException = true;
					}
				} else {
					throwException = true;
				}
			}

			if (attempts &gt;= maxAttempts) {
				throwException = true;
			}

			if (throwException) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	}
}

function convertDateParameter(date) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		return new java.sql.Timestamp(date.getTime());
	} else if (dbType == &apos;sqlserver&apos;) {
		return convertDate(date, &apos;yyyy-MM-dd HH:mm:ss.SSSZZ&apos;);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>269ac003-07f8-4914-9572-b2433afa116a</id>
                <name>Get ResultSet Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788910</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Retrives the java.util.Date value for a particular column from a ResultSet. Handles cases where the
	object returned from the ResultSet is a string.

	@param {ResultSet} resultSet - The ResultSet object to retrieve from.
	@param {String} columnName - The name or alias of the column to retrieve.
	@return {Date} The java.util.Date value.
*/
function getResultSetDate(resultSet, columnName) {
	var obj = resultSet.getObject(columnName);
	if (obj != null) {
		if (obj instanceof java.lang.String) {
			obj = getDate(obj);
		}
	}
	return obj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>278733a7-de15-4324-bfa0-2034ae868afd</id>
                <name>Get ResultSet String</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789457</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Retrives the string value for a particular column from a ResultSet. Handles instances of
	java.sql.Clob and java.sql.Blob as well (with the JVM default charset).

	@param {ResultSet} resultSet - The ResultSet object to retrieve from.
	@param {String} columnName - The name or alias of the column to retrieve.
	@return {String} The string value.
*/
function getResultSetString(resultSet, columnName) {
	var obj = resultSet.getObject(columnName);
	if (obj != null) {
		if (obj instanceof java.sql.Clob) {
			obj = org.apache.commons.io.IOUtils.toString(obj.getCharacterStream());
		} else if (obj instanceof java.sql.Blob) {
			obj = org.apache.commons.io.IOUtils.toString(obj.getBinaryStream());
		} else {
			obj = java.lang.String.valueOf(obj);
		}
	}
	return obj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>571b10e6-97f3-49ff-ba1a-7201927d98bc</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788580</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ad9e7b8d-4615-43c3-8b2f-cd511684e9d7</id>
                <name>getHl7PlacerByServiceRequestId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793195</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the HL7 Placer Id by ServiceRequest resource Id.

	@param {String} serviceRequest - serviceRequest resource Id
	@return {String} return hl7 Placer
*/
function getHl7PlacerByServiceRequestId(serviceRequest){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT hl7_placer FROM service_request_external_ids WHERE service_request_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, serviceRequest);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var hl7PlacerValue = rs.getString(&quot;hl7_placer&quot;);
	        res = hl7PlacerValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + serviceRequest);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a9c468bc-d553-4875-80a5-353c4f6c299f</id>
                <name>getServiceRequestByHl7PlacerId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789912</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the ServiceRequest resource Id by HL7 Placer Id.

	@param {String} hl7Placer - hl7Placer Id
	@return {String} return serviceRequest resource Id
*/
function getServiceRequestByHl7PlacerId(hl7Placer){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT service_request_id FROM service_request_external_ids WHERE hl7_placer = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, hl7Placer);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var serviceRequest = rs.getString(&quot;service_request_id&quot;);
	        res = serviceRequest;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + hl7Placer);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>62e254fc-a206-41b2-bf9f-e9c55cb49ef1</id>
                <name>History Utility Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787940</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	These functions are used with the history interaction.
*/
function getFhirHistoryBaseQuery() {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;SELECT name, id, version, data::TEXT, mimetype, deleted, request_method, request_url FROM resource&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;SELECT name, id, version, CAST(data AS NVARCHAR(MAX)) AS data, mimetype, deleted, request_method, request_url FROM resource&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getFhirHistorySinceWherePart() {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;last_modified &gt;= ?::TIMESTAMP WITH TIME ZONE&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;last_modified &gt;= CAST(? AS DATETIME)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a67e8be3-11a3-4403-aaa7-ea495a98af23</id>
                <name>Insert Deleted Resource</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790163</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Inserts a deleted entry for a resource and returns its DB sequence ID.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@param {Number} versionId - The version ID of the resource.
	@param {Date} lastUpdated - The last updated time of the resource.
	@param {String} method - The HTTP method used to create the resource.
	@param {String} url - The HTTP URL used to create the resource.
	@return {Number} The database sequence ID for the inserted resource.
*/
function insertFhirDeletedResource(type, id, versionId, lastUpdated, method, url) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		var params = [type, id, versionId, lastUpdated, $(&apos;method&apos;), $(&apos;url&apos;)];
		var result = executeUpdateAndGetGeneratedKeys(&quot;INSERT INTO resource (name, id, version, last_modified, deleted, request_method, request_url) VALUES (?, ?, ?, ?, TRUE, ?, ?)&quot;, params);
		result.next();
		return result.getInt(1);
	} else if (dbType == &apos;sqlserver&apos;) {
		var dbConn = createFHIRDBConnection();
		
		try {
			dbConn.setAutoCommit(false);
			
			var idResult = executeCachedQuery(&apos;SELECT id FROM resource_sequence WITH (UPDLOCK)&apos;, [], dbConn);
			idResult.next();
			var sequenceId = idResult.getInt(1);
			executeUpdate(&apos;UPDATE resource_sequence SET ID = ID + 1&apos;, [], dbConn);
			dbConn.commit();

			var params = [sequenceId, type, id, versionId, lastUpdated, $(&apos;method&apos;), $(&apos;url&apos;)];
			executeUpdate(&quot;INSERT INTO resource (sequence_id, name, id, version, last_modified, deleted, request_method, request_url) VALUES (?, ?, ?, ?, ?, 1, ?, ?)&quot;, params, dbConn);
			dbConn.commit();
			
			return sequenceId;
		} catch (e) {
			try { dbConn.rollback() } catch (e2) {}
			throw e;
		} finally {
			try { dbConn.close() } catch (e) {}
		}
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>407c077f-579a-47af-bb78-1829cdd789c3</id>
                <name>Insert Resource</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788541</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Inserts a new resource and returns its DB sequence ID.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@param {Number} versionId - The version ID of the resource.
	@param {Date} lastUpdated - The last updated time of the resource.
	@param {String} data - The resource data.
	@param {String} contentType - The MIME type of the resource data.
	@param {String} method - The HTTP method used to create the resource.
	@param {String} url - The HTTP URL used to create the resource.
	@return {Number} The database sequence ID for the inserted resource.
*/
function insertFhirResource(type, id, versionId, lastUpdated, data, contentType, method, url) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		var params = [type, id, versionId, lastUpdated, data, contentType, method, url];
		var result = executeUpdateAndGetGeneratedKeys(&quot;INSERT INTO resource (name, id, version, last_modified, data, mimetype, request_method, request_url) VALUES (?, ?, ?, ?, ?::XML, ?, ?, ?)&quot;, params);
		result.next();
		return result.getInt(1);
	} else if (dbType == &apos;sqlserver&apos;) {
		var dbConn = createFHIRDBConnection();
		
		try {
			dbConn.setAutoCommit(false);
			
			var idResult = executeCachedQuery(&apos;SELECT id FROM resource_sequence WITH (UPDLOCK)&apos;, [], dbConn);
			idResult.next();
			var sequenceId = idResult.getInt(1);
			executeUpdate(&apos;UPDATE resource_sequence SET ID = ID + 1&apos;, [], dbConn);
			dbConn.commit();

			var params = [sequenceId, type, id, versionId, lastUpdated, data, contentType, method, url];
			executeUpdate(&quot;INSERT INTO resource (sequence_id, name, id, version, last_modified, data, mimetype, request_method, request_url) VALUES (?, ?, ?, ?, ?, CAST(? AS XML), ?, ?, ?)&quot;, params, dbConn);
			dbConn.commit();
			
			return sequenceId;
		} catch (e) {
			try { dbConn.rollback() } catch (e2) {}
			throw e;
		} finally {
			try { dbConn.close() } catch (e) {}
		}
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f5c11e82-475f-4a53-a370-273a6027eba0</id>
                <name>Search Utility Methods</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789262</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	These functions are used with the search interaction.
*/
function getFhirSearchBaseQuery(usingLimit) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;SELECT name, id, version, data::TEXT, mimetype, request_method, request_url FROM resource r1 WHERE version = (SELECT MAX(version) FROM resource r2 WHERE r2.name = r1.name AND r2.id = r1.id) AND (deleted IS NULL OR deleted = FALSE)&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		var query = &quot;SELECT name, id, version, CAST(data AS NVARCHAR(MAX)) AS data, mimetype, request_method, request_url&quot;;
		if (usingLimit) {
			query += &quot;, ROW_NUMBER() OVER (&quot; + getOrderClause() + &quot;) AS ROWNUM&quot;;
		}
		return query + &quot; FROM resource r1 WHERE version = (SELECT MAX(version) FROM resource r2 WHERE r2.name = r1.name AND r2.id = r1.id) AND (deleted IS NULL OR deleted = 0)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getFhirSearchContentWherePart() {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;data::TEXT ILIKE ?&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;UPPER(CAST(data AS NVARCHAR(MAX))) LIKE UPPER(?)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getFhirSearchLastUpdatedWherePart(lastUpdatedOperator) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;last_modified &quot; + convertFhirParameterOperator(lastUpdatedOperator) + &quot; ?::TIMESTAMP WITH TIME ZONE&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;last_modified &quot; + convertFhirParameterOperator(lastUpdatedOperator) + &quot; CAST(? AS DATETIMEOFFSET)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function convertFhirParameterOperator(operator) {
	switch ((operator + &apos;&apos;).toLowerCase()) {
		case &apos;eq&apos;: return &apos;=&apos;;
		case &apos;ne&apos;: return &apos;!=&apos;;
		case &apos;gt&apos;: return &apos;&gt;&apos;;
		case &apos;lt&apos;: return &apos;&lt;&apos;;
		case &apos;ge&apos;: return &apos;&gt;=&apos;;
		case &apos;le&apos;: return &apos;&lt;=&apos;;
		case &apos;sa&apos;: return &apos;&gt;&apos;;
		case &apos;eb&apos;: return &apos;&lt;&apos;;
		case &apos;ap&apos;: return &apos;=&apos;;
		default: return &apos;=&apos;;
	}
}

function convertXPathNodeSingleton(node) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return node;
	} else if (dbType == &apos;sqlserver&apos;) {
		return node.split(&apos;/&apos;).join(&apos;[1]/&apos;);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function xpathLowerCase(value) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;translate(&quot; + value + &quot;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;, &apos;abcdefghijklmnopqrstuvwxyz&apos;)&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;fn:lower-case(&quot; + value + &quot;)&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getFhirSearchXPathWherePart() {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return &quot;XPATH_EXISTS(?, data)&quot;;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;data.exist(?) = 1&quot;;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function addXPath(xpath, whereParts, params) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		whereParts.push(getFhirSearchXPathWherePart());
		params.push(xpath);
	} else if (dbType == &apos;sqlserver&apos;) {
		whereParts.push(getFhirSearchXPathWherePart().replace(&apos;?&apos;, &quot;&apos;&quot; + xpath.replace(/&apos;/g, &quot;&apos;&apos;&quot;) + &quot;&apos;&quot;));
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function addOrder(query, usingLimit) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return query + &quot; &quot; + getOrderClause();
	} else if (dbType == &apos;sqlserver&apos;) {
		if (usingLimit) {
			return query;
		} else {
			return query + &quot; &quot; + getOrderClause();
		}
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}

function getOrderClause() {
	return &quot;ORDER BY name ASC, id ASC, version DESC&quot;;
}

function addLimit(query, limit) {
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return query + &quot; LIMIT &quot; + limit;
	} else if (dbType == &apos;sqlserver&apos;) {
		return &quot;SELECT A.* FROM (&quot; + query + &quot;) AS A WHERE A.ROWNUM &lt;= &quot; + limit;
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>785079c4-fc60-4e5c-a4ec-645cb3741560</id>
                <name>Select Resource Instance</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791777</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a ResultSet for a specific resource instance.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@return {ResultSet} The ResultSet.
*/
function getResource(type, id) {
	var params = [type, id];
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		return executeCachedQuery(&quot;SELECT version, data::TEXT, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC LIMIT 1&quot;, params);
	} else if (dbType == &apos;sqlserver&apos;) {
		return executeCachedQuery(&quot;SELECT TOP 1 version, CAST(data AS NVARCHAR(MAX)) AS data, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC&quot;, params);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9411a28b-5f0d-4bc3-8acf-d892b5beb7db</id>
                <name>Select Resource Instance by Version</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789820</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a ResultSet for a specific resource instance at a specific version.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@param {Number} versionId - The version ID of the resource.
	@return {ResultSet} The ResultSet.
*/
function getResourceVersion(type, id, versionId) {
	var params = [type, id, parseInt(versionId, 10)];
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);

	if (dbType == &apos;postgres&apos;) {
		return executeCachedQuery(&quot;SELECT data::TEXT, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? AND version = ?&quot;, params);
	} else if (dbType == &apos;sqlserver&apos;) {
		return executeCachedQuery(&quot;SELECT CAST(data AS NVARCHAR(MAX)) AS data, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? AND version = ?&quot;, params);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>afe40f10-efc5-4014-833a-e96be7a422d1</id>
                <name>Select Version</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792774</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the version ID for a given resource, or 0 if it doesn&apos;t exist.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@return {Number} The version ID, or 0 if the resource doesn&apos;t exist.
*/
function getFhirVersion(type, id) {
	var params = [type, id];
	var result;

	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		result = executeCachedQuery(&quot;SELECT version FROM resource WHERE name = ? AND id = ? ORDER BY version DESC LIMIT 1&quot;, params);
	} else if (dbType == &apos;sqlserver&apos;) {
		result = executeCachedQuery(&quot;SELECT TOP 1 version FROM resource WHERE name = ? AND id = ? ORDER BY version DESC&quot;, params);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
	
	if (result.next()) {
		return result.getInt(1);
	}
	return 0;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2c822c38-30aa-4447-8e9e-9ea07e597c9d</id>
                <name>Select Version and Deleted ResultSet</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787891</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns a ResultSet with the version and deleted flag for a given resource.

	@param {String} type - The FHIR resource type.
	@param {String} id - The logical ID of the resource.
	@return {ResultSet} The ResultSet.
*/
function getFhirVersionAndDeleted(type, id) {
	var params = [type, id];
	var dbType = $cfg(&apos;fhirDBDatabaseType&apos;);
	if (dbType == &apos;postgres&apos;) {
		return executeCachedQuery(&quot;SELECT version, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC LIMIT 1&quot;, params);
	} else if (dbType == &apos;sqlserver&apos;) {
		return executeCachedQuery(&quot;SELECT TOP 1 version, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC&quot;, params);
	} else {
		throw &apos;Unsupported DB type: &apos; + dbType;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2742f816-7d84-4366-a386-9dc8653cd9fd</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789103</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f4e7d874-0070-471b-a663-ce20c786d286</id>
                <name>setHl7PlacerByServiceRequestId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788952</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the HL7 Placer Id by ServiceRequest resource Id (returns true: inserted; false: not inserted)

	@param {String} serviceRequest - serviceRequest resource Id
	@param {String} HL7 Placer Id
	@return {Boolean} return true if inserts or false if not
*/
function setHl7PlacerByServiceRequestId(serviceRequest, hl7Placer){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;INSERT INTO service_request_external_ids (service_request_id, hl7_placer) VALUES (?,?) ON CONFLICT (service_request_id) DO NOTHING&quot;;
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, serviceRequest);
		pstmt.setString(2, hl7Placer);
		
		// Execute the query and retrieve the result
		var rowsInserted = pstmt.executeUpdate();
	
		if (rowsInserted &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2f9fc7ee-216b-4d44-bb98-70730a93ef33</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792208</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee4bdd0c-7c7f-472f-9000-fedbac639c59</id>
                <name>updateHl7PlacerByServiceRequestId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788863</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Update the HL7 Placer Id for a specific ServiceRequest resource Id (returns true: updated; false: not updated)

	@param {String} serviceRequest - serviceRequest resource Id
	@param {String} HL7 Placer Id
	@return {Boolean} return true if inserts or false if not
*/
function updateHl7PlacerByServiceRequestId(serviceRequest, hl7Placer){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE service_request_external_ids set hl7_placer = ? where service_request_id = ?;&quot;;
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, hl7Placer);
		pstmt.setString(2, serviceRequest);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>9025896a-65d0-458c-92ac-335fe985a232</id>
            <name>FHIR Helper Functions</name>
            <revision>8</revision>
            <lastModified>
              <time>1730893909853</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>General functions to help convert HL7 v2.x to FHIR resources.

These are used by the example HL7 to FHIR transformer, as well as
the &quot;HL7 v2.x to FHIR Creation Functions&quot; code template library.</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>936a0f91-1bad-49d1-852a-a895c15146ae</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>dc492b90-a61b-480b-90e1-7ba5aa490e8f</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>c3f12023-bc9f-4a80-a20a-91fddab47eda</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>c2052272-225a-43dc-bfa3-ffb8a9cdcb3d</string>
              <string>3fe6d772-4b87-435b-ab48-1a3cd74b6a18</string>
              <string>5a151c27-fc2a-4eea-ad38-68a34b8d491f</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>eabe6ed9-1f63-44c1-bd79-c22f3c8be0c4</string>
              <string>420051ed-ab84-4669-b6a6-245a7a67ce6e</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>6874134c-7e5f-496b-b8bf-f40689f2953f</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>897cc395-62c1-4ca0-be39-dc6b306e2e2f</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>40ceac90-6c0f-4841-bffc-c0ba0613985f</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>b311cb70-5b89-42e7-b3dc-479aaaeeebc9</string>
              <string>d1569963-df1f-4c3e-9c40-84bfb7ce3a8f</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>f08e1002-8784-4af2-9ac1-0f29fa50af6d</string>
              <string>a66e2585-1a81-435d-a745-d2882741026a</string>
              <string>7a38ba2c-d218-4b86-aa64-4d95b6a04516</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>3c7ae171-31fd-4162-955b-9540a5550348</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>dba002da-8747-4d96-a007-4626c848e439</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>6dd7219d-ef93-4391-a2bf-9b2dc2618c8b</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>79796989-bae1-4def-8f83-1fa2e90c266f</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>edf81a0b-0a37-4785-abd2-12cf972fab9d</string>
              <string>4206762e-7f8b-406b-b93f-0aa22164599c</string>
              <string>be018579-43e0-4056-a998-56ebcb4e09c6</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>b8a8e6ef-5fd2-42f9-af8e-29634cdfcdeb</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>3d1c4a14-5d9d-40ee-8c72-931459c94b75</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>9ab99f86-c58f-4c4a-b7ee-c8ed222a738c</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>f12fe723-2d00-4436-9e18-176f610b806e</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>befe8338-2d19-4a93-8fe3-716cdfd6b129</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>5f44062e-05f9-41db-9495-f75947e99502</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>74bd0262-9559-44ea-8a3f-356ae2f02717</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>ae7cd886-fda0-4d22-90a1-c29903e6e434</string>
              <string>4de0b993-bf9e-49e0-b224-3eef7e76e2b3</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>efd3e811-ca0d-451d-b637-a34e2b774450</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3f4f15ad-56de-4755-aede-64962cf04c67</id>
                <name>checkEncounterPriority</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792938</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to validate if the encounter priority string is according to standard value set

	@param {String} status - encounter priority
	@return {boolean} return boolean true if valid status
*/
function checkEncounterPriority(priority) {
	var arrPriority = [&apos;A&apos;, &apos;CR&apos;, &apos;CS&apos;, &apos;CSP&apos;, &apos;CSR&apos;, &apos;EL&apos;, &apos;EM&apos;, &apos;P&apos;, &apos;PRN&apos;, &apos;R&apos;, &apos;RR&apos;, &apos;S&apos;, &apos;T&apos;, &apos;UD&apos;, &apos;UR&apos;];
	return arrPriority.includes(priority.toUpperCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ed003eb4-3c4d-4336-a2ea-16efe0ce0c39</id>
                <name>checkEncounterRegime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789719</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to validate if the encounter Regime string is according to standard value set

	@param {String} status - encounter regime
	@return {boolean} return boolean true if valid regime
*/
function checkEncounterRegime(regime) {
	var arrRegime = [&apos;AMB&apos;, &apos;EMER&apos;, &apos;FLD&apos;, &apos;HH&apos;, &apos;IMP&apos;, &apos;ACUTE&apos;, &apos;NONAC&apos;, &apos;OBSENC&apos;, &apos;PRENC&apos;, &apos;SS&apos;, &apos;VR&apos;];
	return arrRegime.includes(regime.toUpperCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>891a7cdf-98d5-4575-a8d1-e519aecd3e11</id>
                <name>checkEncounterStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789175</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to validate if the encounter status string is according to standard value set


	@param {String} status - encounter status
	@return {boolean} return boolean true if valid status
*/
function checkEncounterStatus(status) {
	var arrStatus = [&apos;on-call&apos;, &apos;planned&apos;, &apos;arrived&apos;, &apos;triaged&apos;, &apos;in-progress&apos;, &apos;onleave&apos;, &apos;finished&apos;, &apos;cancelled&apos;, &apos;entered-in-error&apos;, &apos;unknown&apos;];
	return arrStatus.includes(status.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2cc062f8-aac9-48e1-947e-0567d4497e07</id>
                <name>Cleanup FHIR Patient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791102</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Removes name / telecom / address entries with no actual value.

	@param {Object} patient - The JavaScript Object representing the FHIR Patient.
	@return {Object} The same Object passed in, cleaned up.
*/
function cleanupFhirPatient(patient) {
	// Remove names with no value
	cleanupFhirNames(patient, &apos;name&apos;);
	
	// Remove telecom entries with no value
	cleanupFhirTelecoms(patient, &apos;telecom&apos;);

	// Remove address entries with no value
	cleanupFhirAddresses(patient, &apos;address&apos;);

	if (patient.contact) {
		for each (contact in patient.contact) {
			if (!isFhirNameValid(contact.name)) {
				delete contact.name;
			}
			
			cleanupFhirTelecoms(contact, &apos;telecom&apos;);

			if (!isFhirAddressValid(contact.address)) {
				delete contact.address;
			}
		}
	}

	return patient;
}

function cleanupFhirNames(parent, property) {
	cleanupArray(parent, property, isFhirNameValid);
}

function isFhirNameValid(name) {
	return name &amp;&amp; (!isValueEmpty(name.text) || !isValueEmpty(name.family) || !isValueEmpty(name.given) || !isValueEmpty(name.prefix) || !isValueEmpty(name.suffix));
}

function cleanupFhirTelecoms(parent, property) {
	cleanupArray(parent, property, function(telecom) {
		return !isValueEmpty(telecom.value);
	});
}

function cleanupFhirAddresses(parent, property) {
	cleanupArray(parent, property, isFhirAddressValid);
}

function isFhirAddressValid(address) {
	return address &amp;&amp; (!isValueEmpty(address.text) || !isValueEmpty(address.line) || !isValueEmpty(address.city) || !isValueEmpty(address.state) || !isValueEmpty(address.postalCode) || !isValueEmpty(address.country));
}

function cleanupArray(parent, property, handleFunction) {
	var arr = parent[property];

	if (arr) {
		var length = arr.length;
		for (var i = length - 1; i &gt;= 0; i--) {
			if (!handleFunction(arr[i])) {
				delete arr[i];
				length--;
			}
		}
		arr.length = length;

		// Handle Java arrays
		if (arr.length != length) {
			parent[property] = org.apache.commons.lang3.ArrayUtils.subarray(arr, 0, length);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2e62489a-423d-4471-a919-ed3f71827199</id>
                <name>Combine Arrays</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789406</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Combines two arrays into one. Works with both Java and JavaScript arrays.

	@param {Array} array1 - The first array.
	@param {Array} array2 - The second array.
	@return {Array} The combined array.
*/
function combineArrays(array1, array2) {
	var isJavaArray1 = Object.prototype.toString.call(array1) == &apos;[object JavaArray]&apos;;
	var isJavaArray2 = Object.prototype.toString.call(array2) == &apos;[object JavaArray]&apos;;

	if (isJavaArray1 &amp;&amp; isJavaArray2) {
		return org.apache.commons.lang3.ArrayUtils.addAll(array1, array2);
	} else if (isJavaArray1) {
		for (var i = array1.length - 1; i &gt;= 0; i--) {
			array2.unshift(array1[i]);
		}
		return array2;
	} else {
		for each (value in array2) {
			array1.push(value);
		}
		return array1;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6faf1e4b-d159-4d34-a07a-2fe0a3bde4cf</id>
                <name>Consolidate Empty Properties</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793027</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Removes empty strings, objects and arrays from a JavaScript object.

	@param {Object/Array} obj - The object or array to consolidate.
	@return {Object/Array} The consolidates object or array.
*/
function consolidate(obj) {
	if (typeof obj != &apos;undefined&apos; &amp;&amp; obj != null) {
		var protoToString = Object.prototype.toString.call(obj);
		
		if (obj instanceof Array || protoToString == &apos;[object Array]&apos; || protoToString == &apos;[object JavaArray]&apos;) {
			var length = obj.length;
			
			for (var i = obj.length - 1; i &gt;= 0; i--) {
				if (!doConsolidate(obj, i)) {
					length--;
				}
			}
			obj.length = length;

			// Handle Java Arrays
			if (length != obj.length) {
				obj = org.apache.commons.lang3.ArrayUtils.subarray(obj, 0, length);
			}
		} else if (protoToString == &apos;[object Object]&apos;) {
			for (var property in obj) {
				doConsolidate(obj, property);
			}
		}
	}
	return obj;
}

function doConsolidate(obj, property) {
	var value = obj[property] = consolidate(obj[property]);
	var empty = isValueEmpty(value);
	if (empty) {
		delete obj[property];
	}
	return !empty;
}

function isValueEmpty(value) {
	var protoToString = Object.prototype.toString.call(value);

	if (typeof value == &apos;undefined&apos; || value == null) {
		return true;
	} else if (value instanceof Array || protoToString == &apos;[object Array]&apos; || protoToString == &apos;[object JavaArray]&apos;) {
		if (value.length &gt; 0) {
			for each (element in value) {
				if (!isValueEmpty(element)) {
					return false;
				}
			}
		}
		return true;
	} else if (typeof value == &apos;string&apos; || protoToString == &apos;[object String]&apos;) {
		return value.length == 0;
	} else if (value instanceof java.lang.String) {
		return org.apache.commons.lang3.StringUtils.isEmpty(value);
	} else if (protoToString == &apos;[object Object]&apos;) {
		for (var property in value) {
			if (!isValueEmpty(value[property])) {
				return false;
			}
		}
		return true;
	}

	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b7bffbe4-9da5-40a8-8a35-7e3ad5a9bebf</id>
                <name>Convert Address Use</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789310</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x address type code to the corresponding FHIR address use.

	@param {String} code - The HL7 address type (Table 0190)
	@return {String} The FHIR address use code
*/
function convertAddressUse(code) {
	var fhirCode;
	
	switch ((code + &apos;&apos;).toUpperCase()) {
		case &apos;H&apos;:
		case &apos;L&apos;:
		case &apos;M&apos;:
		case &apos;P&apos;:
		case &apos;SH&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.HOME;
			break;
		case &apos;B&apos;:
		case &apos;O&apos;:
		case &apos;BI&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.WORK;
			break;
		case &apos;C&apos;:
		case &apos;V&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.TEMP;
			break;
		default:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.OLD;
	}

	return fhirCode.toCode();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>687a3eef-3155-47c8-bb12-de158d0055ac</id>
                <name>Convert Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790836</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x formatted date into the correct format for FHIR date.
	
	HL7 format expected: yyyyMMdd
	FHIR format: yyyy-MM-dd

	@param {String} date - The HL7 v2.x date string
	@return {String} The converted FHIR date string
*/
function convertToFhirDate(date) {
	return convertToFhirTimestamp(date, &quot;yyyy-MM-dd&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f338c38c-477a-4dca-8714-2e96c382716e</id>
                <name>Convert Gender</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789961</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x gender code to the corresponding FHIR code.

	@param {String} code - The HL7 gender code (Table 0001)
	@return {String} The FHIR administrative gender code
*/
function convertToFhirGender(code) {
	var fhirCode;
	
	switch ((code + &apos;&apos;).toUpperCase()) {
		case &apos;F&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.FEMALE;
			break;
		case &apos;M&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.MALE;
			break;
		case &apos;O&apos;:
		case &apos;A&apos;:
		case &apos;N&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.OTHER;
			break;
		case &apos;U&apos;:
		default:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.UNKNOWN;
	}

	return fhirCode.toCode();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0061fef8-39be-48c1-b81e-60719c97c149</id>
                <name>Convert Timestamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792059</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x formatted timestamp into the correct format for FHIR dateTime.
	
	HL7 format expected: yyyyMMddHHmmssZZ
	FHIR format: yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ

	@param {String} date - The HL7 v2.x timestamp string
	@return {String} The converted FHIR timestamp string
*/
function convertToFhirTimestamp(date) {
	if (!date) {
		return &apos;&apos;;
	}

	var patterns = [
		&quot;yyyyMMddHHmmss.SSSZZ&quot;,
		&quot;yyyyMMddHHmmss.SSSZ&quot;,
		&quot;yyyyMMddHHmmss.SSS&quot;,
		&quot;yyyyMMddHHmmssZZ&quot;,
		&quot;yyyyMMddHHmmssZ&quot;,
		&quot;yyyyMMddHHmmss&quot;,
		&quot;yyyyMMddHHmm&quot;,
		&quot;yyyyMMddHH&quot;,
		&quot;yyyyMMdd&quot;
	];

	var instant;
	for each (pattern in patterns) {
		try {
			instant = org.joda.time.format.DateTimeFormat.forPattern(pattern).parseMillis(new String(date));
			break;
		} catch(e) {}
	}

	if (instant) {
		var outpattern = arguments.length &gt;= 2 ? arguments[1] : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ&quot;;
		try {
			return org.joda.time.format.DateTimeFormat.forPattern(outpattern).print(instant);
		} catch (e) {}
	}
	
	return date;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>760658e4-f24f-4a57-bbb9-9ae847f6daf8</id>
                <name>Convert Yes/No Indicator</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787847</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x yes/no indicator code to a boolean value. If the code is null or an empty string,
	false will be returned.

	@param {String} code - The HL7 yes/no indicator (Table 0136)
	@return {Boolean} True/false
*/
function convertYesNoIndicator(code) {
	return code == &apos;Y&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>96c9798e-4e23-4374-a7ad-aafd88b8d17e</id>
                <name>convertToFhirCodeSystem</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789218</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert PatientCare code system for FHIR format system URL, ie: ICD10 to http://hl7.org/fhir/sid/icd-10

	@param {String} patientCareCodeSystem 
	@return {String} return fhir url
*/
function convertToFhirCodeSystem(patientCareCodeSystem) {

	var fhirCodeSystem = null;
	switch (patientCareCodeSystem) {
	  case &apos;ICD9&apos;:
	    fhirCodeSystem = &quot;http://hl7.org/fhir/sid/icd-9-cm&quot;
	    break;
	  case &apos;ICD10&apos;:
	    fhirCodeSystem = &quot;http://hl7.org/fhir/sid/icd-10&quot;
	    break;
	  case &apos;SNOMED&apos;:	   
	    fhirCodeSystem = &quot;http://snomed.info/sct&quot;
	    break;
	  case &apos;LOINC&apos;:	   
	    fhirCodeSystem = &quot;http://loinc.org&quot;
	    break;
	  case &apos;ACSS&apos;:
	  	fhirCodeSystem = &quot;https://www.acss.min-saude.pt&quot;
	  	break;
	  case &apos;ADSE&apos;:
	  	fhirCodeSystem = &quot;https://www.adse.pt&quot;
	  	break;  
	case &apos;TOM&apos;:
	  	fhirCodeSystem = &quot;https://cuf.pt/fhir/CodeSystem/Service&quot;
	  	break;
	case &apos;CUF&apos;:
	  	fhirCodeSystem = &quot;https://cuf.pt/fhir/CodeSystem/Service&quot;
	  	break;
	case &apos;patientcare.id&apos;:
	  	fhirCodeSystem = configurationMap.get((&apos;FhirServer_PatientCare_Namespace&apos;)) + &quot;/fhir/CodeSystem/&quot; + patientCareCodeSystem
	  	break;
	  default:
	    fhirCodeSystem = null;
	}

	return fhirCodeSystem;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ca4aadf2-7203-414a-92b5-3257db7a363a</id>
                <name>createChargeItemRequisicaoMCDT</name>
                <revision>3</revision>
                <lastModified>
                  <time>1730888277851</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função auxiliar na criação de ChargeItems. Esta função trata de construir a base de um ChargeItem referente à REQUISIÇÃO DE MCDTS (!!).

	@param {Object} infosExame - informações gerais relativas ao exame:
          {
              &quot;exameIdentificadores&quot;: null,
              &quot;identificadorSequencialUnicoExame&quot; : null,
              &quot;exameRefExt&quot;: null,
              &quot;cdExameRefExt&quot;: null,
              &quot;cdExameDescr&quot;: null,
              &quot;cdServicoExecutanteId&quot;: null,
              &quot;cdServicoExecutanteDescr&quot;: null,
              &quot;cdServicoExecutanteRefExt&quot;: null,
              &quot;cdEspecialidadeRefExt&quot;: null,
              &quot;cdEspecialidadeDescr&quot;: null,
              &quot;exameEstadoRefExt&quot;: null,
              &quot;anulado&quot;: false,
              &quot;dataCriacao&quot;: null,
              &quot;utCriacaoId&quot;: null,
              &quot;dataAlt&quot;: null,
              &quot;utAltId&quot;: null,
              &quot;dataExameEstado&quot;: null,
              &quot;prioridadeRefExt&quot;: null,
              &quot;exameObs&quot;: null,
              &quot;anatomiaPatologica&quot;: null,
              &quot;autopsia&quot;: null,
              &quot;citologiaGinecologica&quot;: null,
              &quot;citologiaNaoGinecologica&quot;: null,
              &quot;histologia&quot;: null,
              &quot;mfr&quot;: null,
              &quot;revisaoExame&quot; : null
          }

	@param {Object} utilizadores - informação dos utilizadores:
		[{
		      &quot;nome&quot; : null,
		      &quot;numMecanografico&quot; : null,
		      &quot;perfil&quot; : null
		 }]

	@param {Object} infosRequisicao - informações gerais relativas à requisição:
		{
		      &quot;criar&quot;: true,
		      &quot;requisicaoId&quot;: null,
		      &quot;requisicaoRefExt&quot;: null,
		      &quot;identificadorSequencialUnico&quot;: null,
		      &quot;estadoRefExt&quot;: null,
		      &quot;dataCriacao&quot;: null,
		      &quot;dataPretendida&quot;: null,
		      &quot;anulado&quot;: false,
		      &quot;prioridadeRefExt&quot;: null,
		      &quot;infoClinicaGeral&quot;: null,
		      &quot;obsReq&quot;: null
		}

	@param {Object} doente - informações do doente:
		{
		    &quot;numProcesso&quot; : null,
		    &quot;numSequencial&quot; : null,
		    &quot;nomeDoente&quot; : null
		}
		
	@param {String} visitaRefExt - identificador externo do episódio /Encounter 
	@param {String} theCode - código a ser colocado em ChargeItem.code 
	@return {Object} return ChargeItem
*/
function createChargeItemRequisicaoMCDT(infosExame, utilizadores, infosRequisicao, doente, visitaRefExt, theCode) {

	// Add Performers
	var Performer = [];
	var occurenceDateTime = infosRequisicao[&apos;dataCriacao&apos;]; //default
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(infosExame[&apos;accoes&apos;]); j++ ){
	
		if (infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;] == &quot;1&quot; /* Relato */){
			dataRelato = infosExame[&apos;accoes&apos;][j][&apos;data&apos;];
		} else if (infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;] == &quot;2&quot; /* Validacao */){
			dataValidacao = infosExame[&apos;accoes&apos;][j][&apos;data&apos;];
		} /*else {
			occurenceDateTime = infosRequisicao[&apos;dataCriacao&apos;];
		}*/

		Performer.push({
			function: {
				coding: [{
					system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
					code: newStringOrUndefined( infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;] == &quot;3&quot; /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadores, infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;])) : mapFuncao(infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;]) )
				}]
			},
			actor: {
				reference: newStringOrUndefined(infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadores, infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;]) ) : null),
				identifier: {
					use: newStringOrUndefined(&apos;official&apos;),
					type: {
						coding: [{
							system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
							code: newStringOrUndefined(&apos;4&apos;)
						}],
						text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
					},
					value: newStringOrUndefined(infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadores, infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;]) : null)
				}
			}
		});
	}

	chargeItemId = UUIDGenerator.getUUID();
	var ChargeItem = {
		resourceType: newStringOrUndefined(&apos;ChargeItem&apos;),
		id: newStringOrUndefined(chargeItemId),
		extension: [{
				url: newStringOrUndefined(infosRequisicao[&apos;infoClinicaGeral&apos;] != null ? $(&apos;localAddress&apos;) + &quot;/fhir/StructureDefinition/CarePlan.ClinicalInformation&quot; : null),
				valueString: newStringOrUndefined(infosRequisicao[&apos;infoClinicaGeral&apos;] != null ? infosRequisicao[&apos;infoClinicaGeral&apos;] : null)
			},
			{
				url: newStringOrUndefined(infosExame[&apos;identificadorSequencialUnicoExame&apos;] != null ? $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ServiceRequest.ExternalId&quot; : null),
				valueString: newStringOrUndefined(infosExame[&apos;identificadorSequencialUnicoExame&apos;] != null ? infosExame[&apos;identificadorSequencialUnicoExame&apos;] : null)
			
			},
			{
				extension: [{
					url: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? &apos;code&apos; : null),
					valueCoding: {
						system: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? $(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/RootFunctionalHealthUnit&quot; : null),
						code: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? infosExame[&apos;cdEspecialidadeRefExt&apos;] : null),
						display: newStringOrUndefined(infosExame[&apos;cdEspecialidadeDescr&apos;] != null ? infosExame[&apos;cdEspecialidadeDescr&apos;] : null)
					}
				}],	
				url: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ChargeItem.ExecutingFunctionalHealthUnit.WithCode&quot; : null)
			}
		],
		status: newStringOrUndefined(&apos;billable&apos;),
		identifier: [{
			use: newStringOrUndefined(&apos;official&apos;),
			type: {
				coding: [{
					system: newStringOrUndefined(&apos;http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203&apos;),
					code: newStringOrUndefined(&apos;PLAC&apos;)
				}],
				text: newStringOrUndefined(&apos;Placer Identifier&apos;)
			},
			value: newStringOrUndefined(infosExame[&apos;identificadorSequencialUnicoExame&apos;] + &apos;-&apos; + chargeItemId)
		}],
		code: {
			coding: [{
				system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/Service&quot;),
				code: newStringOrUndefined(typeof theCode != &apos;undefined&apos; ? theCode : null)
			}]
		},
		subject: {
		   	reference: newStringOrUndefined(&quot;Patient/&quot; + msg[&apos;doente&apos;][&apos;numSequencial&apos;]),
		   	identifier: {
		       	use: newStringOrUndefined(&apos;official&apos;),
		       	type: {
		           	coding: [{
		               	system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PatientCode&quot;),
		               	code: newStringOrUndefined(&apos;JMS&apos;)
		           	}],
		           	text: newStringOrUndefined(&apos;JMS Identifier&apos;)
		       	},
		       	value: newStringOrUndefined(msg[&apos;doente&apos;][&apos;numSequencial&apos;])
		   	},
		   	display: newStringOrUndefined( msg[&apos;doente&apos;][&apos;nomeDoente&apos;] != &apos;undefined&apos; ? msg[&apos;doente&apos;][&apos;nomeDoente&apos;] : null )
		},
		context: {
			reference: newStringOrUndefined( visitaRefExt != null ? &quot;Encounter/&quot; + visitaRefExt : null)
		},										
		occurrenceDateTime: newStringOrUndefined(dataRelato != null ? dataRelato : (dataValidacao!= null ? dataValidacao : occurenceDateTime)),
		performer: Performer.length != 0 ? Performer : null,
		quantity: {
			value: newNumberOrUndefined(1)
		},
		note: [{
			text: newStringOrUndefined(infosExame[&apos;exameObs&apos;] != null ? infosExame[&apos;exameObs&apos;] : null)
		}]
	}

	return ChargeItem;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>69abe225-7dba-4362-a5df-e12fe5391e07</id>
                <name>createOperationOutcome</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788391</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Creates a FHIR OperationOutcome resource and adds it to the response map with the key &quot;response&quot;.
	@param {String} severity - Indicates whether the issue indicates a variation from successful
		processing. Values: fatal | error | warning | information
	@param {String} code - Describes the type of the issue. The system that creates an
		OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may
		additional provide its own code for the error in the details element. Values: invalid | security |
		processing | transient | informational
	@param {String} details - Additional details about the error. This may be a text description of
		the error, or a system code that identifies the error.
	@param {String} fhirVersion - The FHIR version of the OperationOutcome resource. Values: DSTU2 | DSTU2_1 | 
		   DSTU_HL7ORG | STU3 | R4 | R5
	@param {int} httpStatusCode - The HTTP status code to send back with the response. Defaults to 400
		if not specified.
	@param {Error} e - If included, this will be used to build up the response status message and
		error.
	@param {Boolean} isFormatXML - If true, the resource will be formatted in XML. Otherwise, it will
		be formatted in JSON. If not specified, it will attempt to find the _format parameter in the source
		map, or return JSON.
	@return {Response} The created Response object.
*/
function createOperationOutcome(severity, code, details, fhirVersion, httpStatusCode, e, isFormatXML) {
	if (!httpStatusCode) {
		httpStatusCode = 400;
	}

	if (!isFormatXML &amp;&amp; $s(&apos;parameters&apos;) &amp;&amp; $s(&apos;parameters&apos;).contains(&apos;_format&apos;)) {
		isFormatXML = !FhirUtil.isJSON($s(&apos;parameters&apos;).getParameter(&apos;_format&apos;));
	}

	var outcome = FhirUtil.createOperationOutcome(severity, code, details, fhirVersion);
	var message = isFormatXML ? FhirUtil.toXML(outcome, fhirVersion) : FhirUtil.toJSON(outcome, fhirVersion);
	responseMap.put(&apos;response&apos;, FhirResponseFactory.getResponse(message, httpStatusCode, isFormatXML ? FhirUtil.getMIMETypeXML() : FhirUtil.getMIMETypeJSON()));
	var response = new Response(message);
	response.setStatusMessage(severity.toUpperCase() + &apos; OperationOutcome created with status &apos; + httpStatusCode + &apos;.&apos;);

	if (httpStatusCode &gt;= 400) {
		response.setStatus(Status.ERROR);

		if (e) {
			var customMessage = &apos;Channel &apos; + channelName + &apos;: &apos;;
			if (e.rhinoException) {
				customMessage += &apos;Error on line &apos; + e.rhinoException.lineNumber() + &apos;: &apos;;
			}
			customMessage += e.toString();
	
			var errorContent = com.mirth.connect.util.ErrorMessageBuilder.buildErrorMessage(&apos;FHIR Listener&apos;, customMessage, e.javaException || null);
			if (e.javaException) {
				logger.error(errorContent, e.javaException);	
			} else {
				logger.error(errorContent);
			}
			response.setError(errorContent);
		}
	}

	return response;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>244238ae-b07b-45d1-b796-4be032c44900</id>
                <name>getChargeItem</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Obtém o Id do chargeItem num bundle relacionado a um item code ou a um serviceRequest.Id

	@param {String} msg - Bundle message
	@param {String} arg1 - item code
	@param {String} arg2 - service Request Id
	@return {String} return ChargeItem.Id
*/

function getChargeItem(msg, itemCode, serviceRequestId){

	var chargeItemId = null;
	for (var i = 0; i &lt; msg[&apos;entry&apos;].length; i++){
		if (msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] == &apos;ChargeItem&apos;){

			if (typeof(msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;contained&apos;]) != &apos;undefined&apos; ){
				msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;contained&apos;].find(function(contained){
					if (contained[&apos;resourceType&apos;].includes(&apos;Procedure&apos;) ) {
						contained[&apos;basedOn&apos;].find(function(basedOn){
							if (basedOn[&apos;reference&apos;].includes(serviceRequestId)){
								chargeItemId = msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;id&apos;];
								return chargeItemId;
							}
						})
					}
				})
			}else if (typeof(msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;code&apos;][&apos;coding&apos;]) != &apos;undefined&apos; ){
				msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;code&apos;][&apos;coding&apos;].find(function(coding){
					if ( coding[&apos;system&apos;].includes(&apos;cuf&apos;) &amp;&amp;  !coding[&apos;system&apos;].includes(&apos;thom&apos;) ) {
						if (coding[&apos;code&apos;] == itemCode){
							chargeItemId = msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;id&apos;];
							return chargeItemId;
						}						
					}
				});	
			}
		}
	}

	return chargeItemId;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c06d7e5c-c77d-409b-8ae2-ca835b843794</id>
                <name>getSystemBaseURL</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790966</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito é auxiliar a construção dos campos &quot;system&quot; associados a CodeSystems aquando da análise de uma lista de identificadores. A lista de identificadores, por normal, tem um &apos;sistemaCodificador&apos; e cada
	um destes &apos;sistemaCodificador&apos; deve originar uma base de URL diferente. Por exemplo,
		caso &apos;sistemaCodificador&apos; = &apos;patientcare.id&apos;, o system correspondente ao code a ser enviado terá um system do género &quot;https://bsimple-esb-fhir (...)&quot; ($(&apos;FhirServer_PatientCare_NameSpace&apos;))
		caso &apos;sistemaCodificador&apos; = &apos;glint&apos;, o system correspondente ao code a ser enviado terá um system do género &quot;https://glintt.pt&quot;
		nos restantes caso, o sistema  ser enviado deve ser CUF, pois tratam-se de catálogos CUF: &quot;https://cuf.pt&quot;

	@param {String} sistemaCodificador - sistema Codificador em causa
	@return {String} return http base URL relativo a esse sistema codificador
*/
function getSystemBaseURL(sistemaCodificador) {
	var baseURL = &quot;&quot;;
	if (typeof sistemaCodificador == &quot;string&quot; ) {
		if (sistemaCodificador.toLowerCase().includes(&quot;patientcare&quot;)) {
			var patientcareUrl = configurationMap.get((&apos;FhirServer_PatientCare_Namespace&apos;));
			baseURL = patientcareUrl != null ? patientcareUrl : &quot;&quot;;
			if (patientcareUrl == null) {
				logger.error(&quot;Configuration map variable &apos;FhirServer_PatientCare_Namespace&apos; not defined for use in Code Template getSystemBaseURL()&quot;);
			}
		}
		else if (sistemaCodificador.includes(&quot;glintt&quot;)) {
			baseURL = &quot;https://glintt.pt&quot;;
		} else { //é catálogo cuf
			baseURL = configurationMap.get(&apos;FhirServer_CUFBUS_Namespace&apos;);
		}
	}
	return baseURL;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>1d99918a-7c7c-4886-9e18-329b73f529bc</id>
                <name>mapingAppointmentStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788279</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function allows mapping the states of the Appointment resource to the states covered in PatientCare. 

	@param {String} status - Appointment Status
	@return {String} return status to application
*/
function mapingAppointmentStatus(status) {
	
	switch(status.toLowerCase()) {
		case &quot;booked&quot;: 
			break;
		case &quot;pending&quot;:
			break;
		case &quot;cancelled&quot;:
			break;
		case &quot;proposed&quot;:
			break;
		case &quot;arrived&quot;:
			status = &quot;booked&quot;;
			break;
		case &quot;fulfilled&quot;:
			status = &quot;booked&quot;;
			break;
		case &quot;noshow&quot;:
			status = &quot;cancelled&quot;;
			break;
		case &quot;entered-in-error&quot;:
			break;
		case &quot;checked-in&quot;:
			status = &quot;booked&quot;;
			break;
		case &quot;waitlist&quot;:
			break;
		default:
			break;		
	}

	return status;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fcfb26cf-995b-455c-955a-c9e5b7832529</id>
                <name>validateDate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788118</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate Date formats: yyyy-MM-ddTHH:mm:ss and yyyy-MM-dd

	@param {String} dateString
	@return {String} return boolean true if date format is valid
*/
function validateTimestamp(dateString) {
	var ISOregex = /^(?:\d{4})-(?:\d{2})-(?:\d{2})T(?:\d{2}):(?:\d{2}):(?:\d{2}(?:\.\d*)?)(?:(?:-(?:\d{2}):(?:\d{2})|Z)?)$/;
	return ISOregex.test(dateString);
}


/**
	Validate Date format yyyy-MM-dd

	@param {String} dateString
	@return {String} return boolean true if date format is valid
*/
function validateDate(dateString) {
	var ISOregex = /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/;
	return ISOregex.test(dateString);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>eb373187-823e-4693-a2f9-b5031d95ea10</id>
                <name>validateFhirClinicalStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787978</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR clinical Status: active | recurrence | relapse | inactive | remission | resolved

	@param {String} clinical Status
	@return {String} return boolean true if FHIR clinical Status is valid
*/
function validateFhirClinicalStatus(clinicalStatus) {
	var arrClinicalStatus = [&apos;active&apos;, &apos;recurrence&apos;, &apos;relapse&apos;, &apos;inactive&apos;, &apos;remission&apos;, &apos;resolved&apos;];
	return arrClinicalStatus.includes(clinicalStatus.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>80630059-deea-4efb-92df-20ddd07a2411</id>
                <name>validateFhirDocumentStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790213</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR Document Reference Status:  current | superseded | entered-in-error

	@param {String} Document Reference Status
	@return {String} return boolean true if FHIR Document Reference Status is valid
*/
function validateFhirDocumentStatus(docStatus) {
	var arrDocStatus = [&apos;current&apos;, &apos;superseded&apos;, &apos;entered-in-error&apos;];
	return arrDocStatus.includes(docStatus.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee50fb32-fd62-485c-b9b5-03e865055502</id>
                <name>validateFhirEventStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788051</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR clinical Status: preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown

	@param {String} clinical Status
	@return {String} return boolean true if FHIR clinical Status is valid
*/
function validateFhirEventStatus(eventStatus) {
	var arrEventStatus = [&apos;preparation&apos;, &apos;in-progress&apos;, &apos;not-done&apos;, &apos;on-hold&apos;, &apos;stopped&apos;, &apos;completed&apos;, &apos;entered-in-error&apos;, &apos;unknown&apos;];
	return arrEventStatus.includes(eventStatus.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>12fb2da1-439a-4149-ae2f-adfcd6651095</id>
                <name>validateFhirGender</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788633</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR gender: male | female | other

	@param {String} genderString
	@return {String} return boolean true if FHIR gender is valid
*/
function validateFhirGender(gender) {
	var arrGender = [&apos;male&apos;, &apos;female&apos;, &apos;other&apos;];
	return arrGender.includes(gender.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6cc8a9f9-7d96-4990-96a8-0ff41be6b101</id>
            <name>Logger Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089520</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Funções auxiliares para o logging de mensagens dos canais</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>bc286d01-89d0-4a3f-916e-09a25a4e68c7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>68dfb5b9-bb8e-418d-8425-79fe31bd7538</id>
                <name>generateLogMsg</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to build and return a log msg, originating from any channel.
	Documentação função: https://b-simple.atlassian.net/wiki/x/AoACBg
	Documentação Entity e Tags: https://b-simple.atlassian.net/wiki/x/AgB_Bg

	@param theEntity {String} - string that denotes the group of messages the message belongs to, i.e appointment, document, cda, accident, etc.
	@param {Class} message - ImmutableConnectorMessage Class message containing information about all connectors that a
		message passed through
	@param tagsArr {Array} - array of user-defined and relevant tags that should be associated with the message
	@param sourceServer {String} - message&apos;s source app/entity (name of the app or entity responsible for sending the messge to the channel)
	@param destinationServerMap {Map} - Map&lt;int,string&gt; , where the key is the destination&apos;s metadataID and the value is the entity to which such destination&apos;s message was sent to
	@param {Array} sourceMetadataArr - source metadata: metadata associated with the source processing 
	@param {Array} destinationsMetadataArr - destinations metadata: metadata associated with the destinations processing
	@return {Object JSON} message log
*/
function generateLogMsg(theEntity, message, tagsArr, sourceServer, destinationServerMap, sourceMetadataArr, destinationsMetadataMap) {
	if (message == undefined || message == null) {
		logger.info(&quot;sendMsgInfoLogChannel:message --&gt; message argument is mandatory!&quot;);
	} else {
		try {
			var logMsg = new Object();
		
			// messageSummary
			var messageSummaryObj = new Object();
			//messageID
			messageSummaryObj.messageId = message.getConnectorMessages().get(0).getMessageId();
			//messageOriginalID - não funciona ...
			//messageSummaryObj.messageOriginalId = message.getOriginalId();
			//channelID
			messageSummaryObj.channelId = message.getConnectorMessages().get(0).getChannelId();
			//serverID
			messageSummaryObj.serverId = message.getConnectorMessages().get(0).getServerId();
			//channelName
			messageSummaryObj.channelName = message.getConnectorMessages().get(0).getChannelName();
			//lastDeployedDate
			try {
				var controller = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createEngineController();
				var dashboardStatus = controller.getChannelStatus(message.getConnectorMessages().get(0).getChannelId());
				messageSummaryObj.lastDeployedDate = auxCalendarParse(dashboardStatus.getDeployedDate());
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:lastDeployedDate --&gt; &quot; + error.toString());
				messageSummaryObj.lastDeployedDate = null;
			}
			//entity
			messageSummaryObj.entity = theEntity == undefined ? null : theEntity;
			//tags
			messageSummaryObj.tags = (tagsArr == undefined || tagsArr == null) ? new Array() : tagsArr;
			//logDate
			var datestr = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
			var dateUTC = DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
			messageSummaryObj.logDate = dateUTC;
			//status
			var statusObj = new Object();
			statusObj.error = false;
			statusObj.code = null;
			statusObj.message = null;
			try {
				message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName (inclui Source também)
					value = parseInt(value);
					if (value != 0) { // só as destinations é que têm Response relativamente a erros, logo não dá para ir buscar Response de erro na Source (Source =metadataId 0)
						//code - testar no que isto dá! ??
						if (message.getConnectorMessages().get(value).getStatus().toString() == &apos;ERROR&apos;) {
							statusObj.error = true;
							/*
							if (statusObj.code != null) {
								statusObj.code = statusObj.code + &quot;;&quot; + message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							} else {
								statusObj.code = message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							}
							*/
							if (statusObj.message != null) {
								statusObj.message = statusObj.message + &quot;;&quot; + auxGetStatusMessage(value);
							} else {
								statusObj.message = auxGetStatusMessage(value);
							}
						}
					}
				});
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel: messageSummary status --&gt; &quot; + error.toString());
			}
			messageSummaryObj.status = statusObj;
		
			//metaData
			//messageSummaryObj.metaData = (summMetadataArr == undefined || summMetadataArr == null) ? new Array() : summMetadataArr;
			try {
				var listMetadataCol = com.mirth.connect.server.controllers.ChannelController.getInstance().getMetaDataColumns(messageSummaryObj.channelId);
				var metadataColArr = new Array();
				for (var i = 0; i &lt; listMetadataCol.size(); i++) {
					var metaObj = new Object();
					metaObj.name = listMetadataCol.get(i).getName();
					var mappingName = listMetadataCol.get(i).getMappingName();
					metaObj.value = (message.getConnectorMessages().get(0).getChannelMap().get(mappingName) == undefined) ? null : message.getConnectorMessages().get(0).getChannelMap().get(mappingName).toString(); // para ficarem todos como string
					if (metaObj.value != null) {
						metadataColArr.push(metaObj);
					}
				}
				messageSummaryObj.metaData = metadataColArr;
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
				messageSummaryObj.metadata = null;
			}
			
			logMsg.messageSummary = messageSummaryObj;
		
			// ------------------------
			//content
			var contentObj = new Object();
			//content.source
			var sourceObj = new Object();
			//content.source.server
			sourceObj.server = sourceServer == undefined ? null : sourceServer;
			//content.source.status
			sourceObj.status = message.getConnectorMessages().get(0).getStatus().toString();
			//content.source.statusMessage
			sourceObj.statusMessage = auxGetStatusMessage(0);
			//content.source.message
			sourceObj.message = isJSON(message.getConnectorMessages().get(0).getRawData()) ? JSON.parse(message.getConnectorMessages().get(0).getRawData()) : message.getConnectorMessages().get(0).getRawData(); //msg antes de passar pelo preprocessor e antes de ser mudada no Transformer
			//content.source.dataType
			sourceObj.dataType = message.getConnectorMessages().get(0).getRaw().getDataType();
			//content.source.date
			var dateCalendar = message.getConnectorMessages().get(0).getReceivedDate();
			var dateUTC = auxCalendarParse(dateCalendar);
			sourceObj.date = dateUTC;
			//content.source.metadata
			sourceObj.metaData = (sourceMetadataArr == undefined || sourceMetadataArr == null) ? new Array() : sourceMetadataArr;
			//content.source.responseMessage
			if (message.getConnectorMessages().get(0).getResponseData() == null) { // no response
				sourceObj.responseMessage = null;
			} else if (message.getConnectorMessages().get(0).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
				sourceObj.responseMessage = null;
			} else { //houve response 
				sourceObj.responseMessage = isJSON(message.getConnectorMessages().get(0).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(0).getResponseData().getMessage()) : message.getConnectorMessages().get(0).getResponseData().getMessage();
			}
			contentObj.source = sourceObj;
		
			// -------------------------
			//content.destinations
			var destinationsArray = new Array();
			message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName
				value = parseInt(value);
				if (value != 0) { //ignorar Source (metadataId=0)
					//logger.info(&quot;value= &quot; + typeof(value) + &quot; &quot; + value + &quot;;&quot; + &quot;key= &quot; + typeof(key) + &quot; &quot; + key);
					var destinationObj = new Object();
					//content.destinations.server
					if (destinationServerMap != undefined &amp;&amp; destinationServerMap != null) {
						if (destinationServerMap.has(value)) {
							destinationObj.server = destinationServerMap.get(value);
						} else {
							destinationObj.server = null;
						}
					} else {
						destinationObj.server = null;
					}
					//content.destinations.destinationId
					destinationObj.destinationId = value;
					//content.destinations.destinationName
					destinationObj.destinationName = key;
					//content.destinations.status
					destinationObj.status = message.getConnectorMessages().get(value).getStatus().toString();
					//content.destinations.statusMessage
					destinationObj.statusMessage = auxGetStatusMessage(value);
					//content.destinations.message
					try {
						destinationObj.message = isJSON(message.getConnectorMessages().get(value).getEncodedData()) ? JSON.parse(message.getConnectorMessages().get(value).getEncodedData()) : message.getConnectorMessages().get(value).getEncodedData();
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel: destination message --&gt; &quot; + error.toString());
						destinationObj.message = null;
					}
					//logger.info(message.getConnectorMessages().get(value).getMessageContent(ContentType.SENT));
					//content.destinations.dataType
					// destinationObj.dataType = message.getConnectorMessages().get(value).getEncoded().getDataType();
					try {
						var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
						var channel = channelController.getChannelByName(message.getConnectorMessages().get(0).getChannelName().toString());
						var connectors = channel.getDestinationConnectors().toArray();
						// Iterate through the connectors
						for each (var connector in connectors) {
						    // Check if the current connector matches the desired connector name
						    if (connector.getName() == key) {
						    		destinationObj.dataType = connector.getTransformer().getOutboundDataType();
						    		break;
						    }
						}
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
						destinationObj.dataType = null;
					}
					
					//content.destinations.date
					var dateCalendar = message.getConnectorMessages().get(value).getSendDate();
					if (dateCalendar != null) { // destination QUEUED
						var dateUTC = auxCalendarParse(dateCalendar);
						destinationObj.date = dateUTC;
					} else {
						destinationObj.date = null;
					}

					//content.destinations.metaData
					if (destinationsMetadataMap != undefined &amp;&amp; destinationsMetadataMap != null) {
						if (destinationsMetadataMap.has(value)) {
							destinationObj.metaData = destinationsMetadataMap.get(value) == null ? new Array() : destinationsMetadataMap.get(value);
						} else {
							destinationObj.metaData = new Array();
						}
					} else {
						destinationObj.metaData = new Array();
					}
		
					//content.destinations.responseMessage
					if (message.getConnectorMessages().get(value).getResponseData() == null) { // no response
						destinationObj.responseMessage = null;
					} else if (message.getConnectorMessages().get(value).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
						destinationObj.responseMessage = null;
					} else { //houve response
						destinationObj.responseMessage = isJSON(message.getConnectorMessages().get(value).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(value).getResponseData().getMessage()) : message.getConnectorMessages().get(value).getResponseData().getMessage();
					}
					destinationsArray.push(destinationObj);
				}
			});
			contentObj.destinations = destinationsArray;
			
			logMsg.content = contentObj;
			//logger.info(JSON.stringify(logMsg));

			//send it
			return JSON.stringify(logMsg);

			/*
			var respLogChannel = router.routeMessage(&apos;Logs_WHS-OUT&apos;, JSON.stringify(logMsg));
			if (respLogChannel == null || respLogChannel == undefined) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			} else if (respLogChannel.getStatus() == Status.ERROR) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			}
			*/

		} catch (error) {
			logger.info(&quot;sendMsgInfoLogChannel:geral  --&gt; &quot; + error.toString());
		}
	}	
}

function auxCalendarParse(dateCalendar) {
	var theMonth = dateCalendar.get(dateCalendar.MONTH) +1;
	var theMonthStr = theMonth.toString().padStart(2,&apos;0&apos;);
	var datestr = dateCalendar.get(dateCalendar.YEAR).toString() + theMonthStr + dateCalendar.get(dateCalendar.DAY_OF_MONTH).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.HOUR_OF_DAY).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.MINUTE).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.SECOND).toString().padStart(2,&apos;0&apos;);
	return DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
}

function auxGetStatusMessage(connMetadaId) {
	connMessage = message.getConnectorMessages().get(connMetadaId);
	if (connMessage.getStatus().toString() == &quot;ERROR&quot;) {
		if (connMessage.getProcessingError() != &quot;&quot;) {
			return connMessage.getProcessingError();
		} else if (connMessage.getPostProcessorError() != &quot;&quot;) {
			return connMessage.getPostProcessorError();
		} else if (connMessage.getResponseError() != &quot;&quot;) {
			return connMessage.getResponseError();
		}
	}
	return null;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>a3267879-bfbd-4fd7-8faf-79b8ce019cef</id>
            <name>Mappers</name>
            <revision>8</revision>
            <lastModified>
              <time>1730893909840</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Mapeamentos de dados de varios sistemas externos</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>2fb4b788-fa00-4ba1-9d27-794110d1f1eb</id>
                <name>convertCodeSystems</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792624</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converte um codesystem para o campo sistemaCodificador do PatientCare, por exemplo se recebermos do sistema externo 
	&quot;https://thom-fhir.apis.sat.jmslab.pt/fhir/CodeSystem/FunctionalHealthUnit&quot; -&gt; THOM@fhir/CodeSystem/FunctionalHealthUnitForSchedule
	garantindo assim que se o URL do sistema externo mudar, a tag na BD mantém-se

	@param {String} URL do sistema codificador
	@return {String} retorna o sistema codificador com a tag que identifica o sistema codificador sem dependencia do URL
*/
function convertCodeSystems(fullUrlCodeSystem) {

	var convertedCodeSystem = null;
	if(fullUrlCodeSystem.includes($(&apos;FhirServer_IMTHOM_Host&apos;))){
		convertedCodeSystem = fullUrlCodeSystem.replace($(&apos;FhirServer_IMTHOM_Host&apos;), &quot;THOM@&quot;).replace(&quot;/&quot;, &apos;&apos;);
	}else if (fullUrlCodeSystem.includes($(&apos;FhirServer_CUFBUS_Namespace&apos;))){
		convertedCodeSystem = fullUrlCodeSystem.replace($(&apos;FhirServer_IMTHOM_Host&apos;), &quot;CUF@&quot;).replace(&quot;/&quot;, &apos;&apos;);
	}

	return convertedCodeSystem;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c97a884e-6f38-45fb-97a8-4d3cef47fa15</id>
                <name>mapCarePlanSurgicalPriority</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788677</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de prioridade da proposta cirurgica (#99034) TODO: A Ser removido quando o PatientCare enviar uma lista (#98331 e #98562)

	@param {String} arg1 - codigo codigo interno PatientCare
	@return {String} return código sistema externo
*/
function mapCarePlanSurgicalPriority(codigo){

    var priority = null;

    switch (codigo) {
        case &quot;1&quot;:
            priority = &quot;routine&quot;;
            break;
        case &quot;2&quot;:
            priority = &quot;asap&quot;;
            break;
        case &quot;5&quot;:
            priority = &quot;urgent&quot;;
            break;
        default:
            priority = &quot;routine&quot;;
    }

    return priority;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f6b5728a-80af-41e5-b1a2-e5b91e032794</id>
                <name>mapCarePlanSurgicalRegime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791228</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento do regime (Tipo de Cirurgia) da proposta cirurgica (#99034) TODO: A Ser removido quando o PatientCare enviar uma lista (#98331 e #98562)

	@param {String} arg1 - codigo PatientCare
	@return {String} return regime
*/
function mapCarePlanSurgicalRegime(codigo){

    var regime = null;

    switch (codigo) {
        case &quot;2&quot;:
            regime = &quot;2&quot;;
            break;
        case &quot;1&quot;:
            regime = &quot;3&quot;;
            break;
        case &quot;4&quot;:
            regime = &quot;2&quot;;
            break;
        default:
            regime = &quot;&quot;;
    }

    return regime;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>59f5da96-4b1e-4339-9cf7-b028307845bd</id>
                <name>mapDocumentLoinc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792141</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Esta funcao determina qual o código Loinc e respectiva descricao para um documento tendo em conta o titulo, o subtitulo e a descricao da categoria

	@param {String} titulo do docuemnto
	@param {String} subtitulo do documento
	@param {String} descricao da categoria do documento
	@return {Object} return Loinc Object com o código (loinc) e descr (descricao do código)
*/
function mapDocumentLoinc(titulo, subtitulo, categoriaDescr) {
	
	var loinc = null;
	var loincDescr = null;
	var Loinc = new Object();
	
	if (titulo.includes(&apos;Relatório de AP&apos;)){
		loinc = &apos;34878-9&apos;;
		loincDescr = &apos;Emergency medicine Note&apos;;
	}else if (titulo.includes(&apos;Internamento Geral&apos;) &amp;&amp; subtitulo.includes(&apos;Codificadores&apos;)){
		loinc = &apos;75321-0&apos;;
		loincDescr = &apos;Clinical finding&apos;;
	}else if (titulo.includes(&apos;Internamento Geral&apos;)){
		loinc = &apos;101005-7&apos;;
		loincDescr = &apos;Hospitalist Discharge summary&apos;;
	}else if (titulo.includes(&apos;Internamento Cuidados Intensivos&apos;)){
		loinc = &apos;34100-8&apos;;
		loincDescr = &apos;Intensive care unit Consult note&apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; categoriaDescr.includes(&apos;Administrativo&apos;) ){
		loinc = &apos;51851-4&apos;;
		loincDescr = &apos;Administrative note&apos;;
	}else if (titulo.includes(&apos;Atestado de Carta de Condução&apos;)){
		loinc = &apos;104990-7&apos;;
		loincDescr = &apos;Driver license medical fitness certificate&apos;;
	}else if (titulo.includes(&apos;Consentimento&apos;)){
		loinc = &apos;59284-0&apos;;
		loincDescr = &apos;Consent Document&apos;;
	}else if (titulo.includes(&apos;Relatório de Consulta&apos;) &amp;&amp; subtitulo.includes(&apos;Anestesia&apos;)){
		loinc = &apos;34751-8&apos;;
		loincDescr = &apos;Anesthesiology Preoperative evaluation and management note&apos;;
	}else if ([&apos;Relatório de Consulta&apos;, &apos;Declaração&apos;, &apos;Relatório Clínico&apos;].includes(titulo)){
		loinc = &apos;75321-0&apos;;
		loincDescr = &apos;Clinical finding&apos;;
	}else if ([&apos;Requisição de MCDT&apos;, &apos;Relatório de Pequena Cirurgia&apos;, &apos;Relatório de Proposta Cirúrgica&apos;].includes(titulo)){
		loinc = &apos;34765-8&apos;;
		loincDescr = &apos;General medicine note&apos;;
	}else if (titulo.includes(&apos;Relatório de Bloco&apos;)){
		loinc = &apos;11504-8&apos;;
		loincDescr = &apos;Surgical operation note&apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; [&apos;ADSE - Prescrições&apos;, &apos;Prescrições&apos;].includes(categoriaDescr)){
		loinc = &apos;57828-6&apos;;
		loincDescr = &apos;Prescription list document&apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; [&apos;Documentos clínicos&apos;, &apos;Documentos clínicos ADSE&apos;, &apos;Documentos gerais&apos;, &apos;Enfermagem&apos;, &apos;Imagem&apos;,  &apos;Nota de alta&apos;,  &apos;Relatório médico&apos;, &apos;Relatório de alta consulta&apos;, &apos;Requisição de exames&apos;].includes(categoriaDescr)){
		loinc = &apos;34765-8&apos;;
		loincDescr = &apos;General medicine note &apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; categoriaDescr.includes(&apos;Resultados patologia clínica&apos;)){
		loinc = &apos;102009-8&apos;;
		loincDescr = &apos;Clinical pathology Laboratory report&apos;;
	}
	else{
		loinc = &apos;34765-8&apos;;
		loincDescr = &apos;General medicine note&apos;;
	}


	Loinc.code = loinc;
	Loinc.descr = loincDescr;
	
	return Loinc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d089bae-49ee-43dc-9cc9-eeae588eacdf</id>
                <name>mapFuncao</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788812</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de função de profissional do PatientCare para o sistema externo (CUF); 
		1- Médico Relator
		2- Médico Validador
		3- Executante

	@param {String} função PatientCare
	@return {String} return map
*/
// Mapping Professional Role
function mapFuncao(funcaoPC){
	map = null;
	switch (funcaoPC){
		case 1:
			map = &apos;MR&apos;;
			break;
		case 2:
			map = &apos;MV&apos;;
			break;
		default:
			map = &apos;MED&apos;;
			break; 
	}
	return map;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83ba1284-a199-4699-84f7-96ffd17ccd24</id>
                <name>mapHospital</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790427</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de hospital do id PatientCare para o código sistema externo (CUF)

	@param {String} hospitalId
	@return {String} return map
*/
// Mapping HospitalId
function mapHospital(hospitalId){
	map = null;
	switch (hospitalId){
		case &quot;201&quot;:
			map = &apos;HCP&apos;;
			break;
		case &quot;202&quot;:
			map = &apos;HCP&apos;;
			break;
		case &quot;204&quot;:
			map = &apos;HCV&apos;;
			break;
		case &quot;214&quot;:
			map = &apos;CCS&apos;;
			break;
		case &quot;260&quot;:
			map = &apos;CCC&apos;;
			break;
		case &quot;261&quot;:
			map = &apos;OT&apos;;
			break;
		case &quot;286&quot;:
			map = &apos;HCIS&apos;;
			break;
		case &quot;287&quot;:
			map = &apos;CCTV&apos;;
			break;
		case &quot;288&quot;:
			map = &apos;CUFC&apos;;
			break;
		case &quot;289&quot;:
			map = &apos;HCS&apos;;
			break;
		case &quot;290&quot;:
			map = &apos;CCAL&apos;;
			break;
		case &quot;291&quot;:
			map = &apos;CLRA&apos;;
			break;
		case &quot;293&quot;:
			map = &apos;CMFL&apos;;
			break;
		case &quot;294&quot;:
			map = &apos;CNSB&apos;;
			break;
		case &quot;295&quot;:
			map = &apos;HACR&apos;;
			break;
		case &quot;296&quot;:
			map = &apos;CMDS&apos;;
			break;
		case &quot;297&quot;:
			map = &apos;CLAL&apos;;
			break;
		case &quot;298&quot;:
			map = &apos;CMDB&apos;;
			break;
		case &quot;299&quot;:
			map = &apos;CBRR&apos;;
			break;
		case &quot;300&quot;:
			map = &apos;CMTJ&apos;;
			break;
		case &quot;301&quot;:
			map = &apos;CMFR&apos;;
			break;
		case &quot;302&quot;:
			map = &apos;CSDR&apos;;
			break;
		case &quot;303&quot;:
			map = &apos;CUFon&apos;;
			break;
		case &quot;304&quot;:
			map = &apos;CSJM&apos;;
			break;
		case &quot;305&quot;:
			map = &apos;CBLM&apos;;
			break;
		case &quot;306&quot;:
			map = &apos;CALV&apos;;
			break;
		case &quot;307&quot;:
			map = &apos;CINS&apos;;
			break;
		case &quot;308&quot;:
			map = &apos;HCUF&apos;;
			break;
		case &quot;309&quot;:
			map = &apos;CPRD&apos;;
			break;
		default:
			map = &apos;&apos; + hospitalId;
			break; 
	}
	return map;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>01087435-3581-4899-a043-b3b766ffb459</id>
                <name>mapPerfil</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787776</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de perfil de profissional do PatientCare para o sistema externo (CUF)

	@param {String} Perfil PatientCare
	@return {String} return map
*/
// Mapping Professional Profile
function mapPerfil(perfilPC){
	map = null;
	switch (perfilPC){
		case 1:
			map = &apos;MED&apos;;
			break;
		case 2:
			map = &apos;ENF&apos;;
			break;
		case 3:
			map = &apos;TECD&apos;;
			break;
		default:
			map = &apos;MED&apos;;
			break; 
	}
	return map;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>46e363dc-757f-4f98-9492-37dca92e00dd</id>
                <name>mapSurgicalIncisionLaterality</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791847</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento da lateralidade da proposta cirurgica

	@param {String} arg1 - codigo PatientCare
	@return {String} return lateralidade do catálogo THOM
*/
function mapSurgicalIncisionLaterality(codigo){

    var laterality = null;

    switch (codigo) {
        case &quot;N&quot;:
            laterality = &quot;4&quot;;
            break;
        default:
            laterality = codigo;
    }

    return laterality;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>09ed46d2-0cff-406e-a532-a7a3f76a3e0b</id>
            <name>RabbitMQ Helper Function</name>
            <revision>4</revision>
            <lastModified>
              <time>1730914089529</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Functions defined in order to assist reading and writing into a RabbitMQ queue</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>e1072519-3eb3-465f-8465-c45d5ef958a5</id>
                <name>queueDeclareRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790901</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to make a queue declaration

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {String} inExchangeType - RabbitMQ exchange&apos;s type
	@param {String} inQueueName - RabbitMQ queue&apos;s name
	@param {String} inRoutingKey - exchange&apos;s routing key
	@return no return 
*/
function queueDeclareRMQ(inExchangeName, inExchangeType, inQueueName, inRoutingKey) {
	//if (!inExchangeName || !inExchangeType || !inQueueName) {
		importPackage(com.mirth.basicproducer);
		broker = new BasicConsumer();
		broker.queueDeclare($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inExchangeType, inQueueName, inRoutingKey);
	//}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>17d1585c-595a-495f-bc6d-7f6667b0279c</id>
                <name>readQueueRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789866</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function built for helping to read messages from a RabbitMQ&apos;s exchange

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {Boolean} inAutoAck - boolean for automatic ackowledgment
	@param {Boolean} inCommit - boolean for commiting
	@return {String} return RabbitMQ message&apos;s content
*/
function readQueueRMQ(inExchangeName, inAutoAck, inCommit) {
	//if (!inExchangeName || typeof inAutoAck != &quot;boolean&quot; || typeof inCommit != &quot;boolean&quot;) {
		importPackage(com.mirth.basicproducer);
		
		broker = new BasicConsumer();
		jsonString = broker.getMessage($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inAutoAck, inCommit);
	
		if (jsonString != null){
			mensagem = JSON.parse(jsonString);
			JSON.stringify(mensagem[&apos;message&apos;]);
			return JSON.stringify(mensagem[&apos;message&apos;]);
		}
	//}
	return null;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0689aac9-a462-4b03-ac79-5cfd1824b5e4</id>
                <name>writeQueueRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789047</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function built for helping to write messages to a RabbitMQ&apos;s exchange

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {String} inMessageType - custom message type
	@param {String} inMessagePayload - payload to be sent
	@return {Object} return operation result (w/ statusCode and statusText)
*/
function writeQueueRMQ(inExchangeName, inMessageType, inMessagePayload, inRoutingKey) {
	importPackage(com.mirth.basicproducer);
	// Import internal code template
	var getCurrentDateUTC = globalMap.get(&quot;getCurrentDateUTC&quot;);
	
	result = new Object();

	if (!inExchangeName || !inMessageType || !inMessagePayload) {
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;At least one input parameter is a falsy value.&quot;;
		return result;
	} else if (!isJSON(inMessagePayload)) { // ?? confirmar se é sempre JSON que vai ou se pode ir outra coisa
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;Message payload to be sent is not a string in JSON format.&quot;;
		return result;
	}
	
	try{
			
		envelop = new Object();
		
		envelop.MessageId = UUIDGenerator.getUUID();
		envelop.DestinationAddress = &quot;rabbitmq://&quot; + $(&apos;RabbitMqHost&apos;) + &quot;:&quot; + $(&apos;RabbitMqPort&apos;) + &quot;/&quot; + inExchangeName;
		messageType = [&quot;urn:message:&quot; + inMessageType];
		envelop.MessageType = messageType;
		
		envelop.Message = JSON.parse(inMessagePayload);
		
		envelop.SentTime = getCurrentDateUTC();
		
		host = new Object();
		host.MachineName = $(&apos;localAddress&apos;);
		host.ProcessName = channelName;
		
		envelop.Host = host;
	
		try{
			producer = new BasicProducer();
			if (typeof inRoutingKey == &quot;undefined&quot; || inRoutingKey == null) {
				producer.produce($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, JSON.stringify(envelop));	
			} else {
				producer.produceToRoutingKey($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inRoutingKey, JSON.stringify(envelop));
			}
			result.statusCode = &quot;200&quot;;
			result.statusText = JSON.stringify(envelop);
			return result;
		}catch(e){
			result.statusCode = &quot;400&quot;;
			result.statusText = &quot;Fail to produce to rabbitMQ, message will be reprocessed | &quot; + e;
			return result;
		}
		
	}catch(exception) {
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;Fail to build and communicate message to rabbitMQ (internal error) | &quot; + exception;
		return result;	
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6df54a97-f980-47f7-a86a-788d32a98a16</id>
            <name>THOM API Helper Functions</name>
            <revision>11</revision>
            <lastModified>
              <time>1730915907338</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>6bfbe323-d3b2-41f5-b831-125601788430</id>
                <name>getAccidentIncapacityTypeByCode</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função que converte, a partir da consulta à API do THOM, o código de catálogo em UUID de THOM para o catálogo AccidentIncapacityType

	@param {String} arg1 -inputCode (código de catálogo)
	@return {String} return Código UUID de THOM
*/

function getAccidentIncapacityTypeByCode(inputCode) {
	var parameters = new Object();
	var httpPostURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/$find-matches&quot;;

	parameters.resourceType = &quot;Parameters&quot;;
	parameters.parameter = [];
	
	parameterSystem = new Object();
	parameterSystem.name = &apos;system&apos;;
	parameterSystem.valueUri = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/AccidentIncapacityType&apos;;
	
	parameters.parameter.push(parameterSystem);

	parameterProperty = new Object();
	parameterProperty.name = &apos;property&apos;;
	parameterProperty.part = [];
	partCode = new Object();
	partCode.name = &apos;code&apos;;
	partCode.valueCode = &apos;code&apos;;
	parameterProperty.part.push(partCode);

	partValue = new Object();
	partValue.name = &apos;value&apos;;
	partValue.valueString = inputCode;
	parameterProperty.part.push(partValue);
	parameters.parameter.push(parameterProperty);


	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpPost(httpPostURL, JSON.stringify(parameters), authHeader);

	var accidentIncapacityType = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var resource = JSON.parse(httpResp.responseMessage);
			if (typeof(resource.parameter) != &apos;undefined&apos;){
				accidentIncapacityType = resource.parameter[0].part[0].valueCoding.code;
			}
		}
	}

	return accidentIncapacityType;	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>db5829bf-47fe-4df9-9275-98545493d366</id>
                <name>GetAccidentInfo</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790265</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dado o id externo de um EpisodeOfcare, consultar no sistema externo se essa informação é referente a um processo de sinistro. Em caso afirmativo, constrói
	a informação do processo de sinistro e faz o seu retorno.

	@param {String} episodeOfCareGUID - id externo de um EpisodeOfcare
	@return {Object} processo de sinistro
*/
function getAccidentInfo(episodeOfCareGUID) {

		var returnMessage = {};

		returnMessage.processoSinistro = {};
		returnMessage.tipoSinistro = null;
		returnMessage.statusCode = &quot;500&quot;;
		returnMessage.statusMessage = &quot;Internal Server Error&quot;;

		var processoSinistro = {};
		 
		 var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/EpisodeOfCare/&quot; + episodeOfCareGUID;
		 	 
		 httpResp = httpGet(httpGetURL,null);
		 
		 if(httpResp.statusCode === &quot;200&quot;){

			if(isJSON(httpResp.responseMessage)){
		 
				episodeOfCare = JSON.parse(httpResp.responseMessage);
				
				var tipo = &quot;&quot;;
				
				if (episodeOfCare &amp;&amp; episodeOfCare.type) {
					episodeOfCare.type.forEach(function(type) {
						if (type.coding) {
							type.coding.forEach(function(coding) {
								if (coding.system &amp;&amp; coding.system.includes(&quot;/CodeSystem/EpisodeOfCareType&quot;)) {
									tipo = coding.code; 
								}
							});
						}
					});
				}
				
				if( tipo === &quot;5&quot;){

					processoSinistro.sinistroIdentificadores = [];
					sinistroIdentificadores = {};
					sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.id&quot;;
					sinistroIdentificadores.codigo = episodeOfCareGUID;

					processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);

					if (episodeOfCare &amp;&amp; episodeOfCare.identifier) {
						sinistroIdentificadores = {};
						sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.identifier&quot;;
						sinistroIdentificadores.codigo = episodeOfCare.identifier[0].value;

						processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);
					}

					
					processoSinistro.subsistemaIntRefExt = null;
					processoSinistro.subsistemaDescr = null;
					processoSinistro.ramoDescr = null;
					processoSinistro.ramoIdentificadores = [];
					//var ramoIdentificador = {};
					//ramoIdentificador.codigo = null;
					//ramoIdentificador.sistemaCodificador = null;

					//processoSinistro.ramoIdentificadores.push(ramoIdentificador);

					processoSinistro.numProcesso = null;
					processoSinistro.nomeSegurado = null;
					processoSinistro.tipoSinistradoIdentificadores = [];
					processoSinistro.tipoSinistradoDescr = null;
					processoSinistro.dataAberturaProcesso = null;

					var sinistro  = {};

					sinistro.data = null;
					sinistro.descr = null;
					sinistro.localDescr = null;
					sinistro.transporteChegadaIdentificadores = [];
					
					if(episodeOfCare.period &amp;&amp; episodeOfCare.period.start){
						processoSinistro.dataAberturaProcesso = java.time.OffsetDateTime.parse(episodeOfCare.period.start).toInstant().toString();
					}

					if (episodeOfCare &amp;&amp; episodeOfCare.extension) {
					episodeOfCare.extension.forEach(function(extension1) {
						if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.HealthSystem&quot;)) {
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;HealthSystem&quot;) {
									if (extension2.valueReference.reference){
										var organizationId = extension2.valueReference.reference;
										var organization = getOrganization(organizationId.split(&quot;/&quot;)[1]);
										processoSinistro.subsistemaIntRefExt = organization.intRefExt;
										processoSinistro.subsistemaDescr = organization.name;
									}
									
									
								}
								else if (extension2.url &amp;&amp; extension2.url === &quot;InsuredName&quot;) {
									processoSinistro.nomeSegurado = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;PolicyNumber&quot;) {
									processoSinistro.numBeneficiario = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;ExternalCode&quot;) {
									processoSinistro.numProcesso = extension2.valueString; 
								}
							});
						}else if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.Accident&quot;)) { // ?? ir buscar aqui tipoSinistrado e tipoTransporte
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;Date&quot;) {
									sinistro.data = extension2.valueDate + &quot;T00:00:00Z&quot;; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Description&quot;) {
									sinistro.descr = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Type&quot;) {
									if(extension2.valueCoding &amp;&amp; extension2.valueCoding.system &amp;&amp; extension2.valueCoding.display ){
										var ramoIdentificador = {};
										ramoIdentificador.codigo = extension2.valueCoding.code;
										ramoIdentificador.sistemaCodificador = &quot;THOM&quot;;

										processoSinistro.ramoIdentificadores.push(ramoIdentificador);

										processoSinistro.ramoDescr = extension2.valueCoding.display;
									}
								} else if (extension2.url &amp;&amp; extension2.url === &quot;TransportType&quot;) {
									var transporteIdentificador = {};
									transporteIdentificador.codigo = extension2.valueCoding.code;
									transporteIdentificador.sistemaCodificador = &quot;THOM&quot;;
									sinistro.transporteChegadaIdentificadores.push(transporteIdentificador);

									sinistro.transporteChegadaDescr = extension2.valueCoding.display;
								
								}else if (extension2.url &amp;&amp; extension2.url === &quot;InjuredPartyType&quot;) {
									var tipoSinistradoIdentificador = {};
									tipoSinistradoIdentificador.codigo = extension2.valueCoding.code;
									tipoSinistradoIdentificador.sistemaCodificador = &quot;THOM&quot;;
									processoSinistro.tipoSinistradoIdentificadores.push(tipoSinistradoIdentificador);

									processoSinistro.tipoSinistradoDescr = extension2.valueCoding.display;
								} else if (extension2.url &amp;&amp; extension2.url === &quot;Local&quot;) {
									sinistro.localDescr = extension2.valueString ? extension2.valueString : null;
								}
							});
						}
					});
				}

					
					
					processoSinistro.sinistro = sinistro;
					returnMessage.processoSinistro = processoSinistro;
					returnMessage.tipoSinistro = true;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;OK&quot;;
				
				}else{
					// EpisodeOfCare não é do tipo Sinistro
					
					returnMessage.processoSinistro = null;
					returnMessage.tipoSinistro = false;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;episodeOfCare não é do tipo sinistro&quot;;
				}
			
		 
		 	}else{
				//resposta ao pedido API não é JSON
				returnMessage.processoSinistro = null;
				returnMessage.tipoSinistro = null;
				returnMessage.statusCode = &quot;400&quot;;
				returnMessage.statusMessage = &quot;Formato inválido devolvido pela API&quot;;
		 		
		 	}
			
		 		
		 }else{
		 	// Pedido API não retorna código 200
			returnMessage.processoSinistro = null;
			returnMessage.tipoSinistro = null;
			returnMessage.statusCode = httpResp.statusCode; // &gt;= 400
			returnMessage.statusMessage = &quot;API Error: &quot; + httpResp.statusCode + &apos; - &apos; + (typeof httpResp.statusText != &apos;undefined&apos; ? httpResp.statusText : httpResp.responseMessage) ;
			
		 
		 }

		 return returnMessage;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>1b5b099a-483d-425f-ad76-e0141c8f4237</id>
                <name>getFacility</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787810</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Facility (cama, área, local, etc)

	@param {String} - facility name
	@param {String} - isHealthCenter (0 - No; 1- Yes)
	@return {String} return facility UUID
*/
function getFacility(facilityName, isHealthCenter) {

	var boolHealthCenter = (isHealthCenter != null) ? isHealthCenter : 0;
	
	var facilityUUID = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location?name=&quot; + encodeURIComponent(facilityName) + &quot;&amp;isHealthCenter=&quot; + boolHealthCenter, authHeader);
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			resposta.entry.find(function(resource){
				resource.resource.alias.find(function(alias){
					if (alias === String(facilityName) ){
						facilityUUID = resource.resource.id;
					}
				});
			})
	    		
		}
	}

	return facilityUUID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c71850ca-03ed-4ac8-91b5-88fa6a65b6ca</id>
                <name>getFacilityDescription</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730915907351</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM the information about Location (cama, área, local, etc) and returns the description = Código Serviço

	@param {String} - facility UUID
	@return {String} return facility description
*/
function getFacilityDescription(facilityUUID) {
	
	var facilityDescription = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location/&quot; + facilityUUID);

	channelMap.put(&quot;GetLocationApi&quot;, httpResp);
	
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			facilityDescription = resposta.description;
		}
	}

	return facilityDescription;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5e48274b-22ab-4d11-94f7-1b0bc29c8b72</id>
                <name>getGeneralInfoAppointment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791695</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Appoitment Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} apppointmentRes - o Appointment Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoAppointment(apppointmentRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof apppointmentRes[&apos;supportingInformation&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; apppointmentRes[&apos;supportingInformation&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( apppointmentRes[&apos;supportingInformation&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}
	
	if (typeof apppointmentRes[&apos;extension&apos;] != &apos;undefined&apos;){
		apppointmentRes[&apos;extension&apos;].find(function(extension){
			if (extension[&apos;url&apos;].includes(&apos;Appointment.Encounter&apos;)){
				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.id&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;reference&apos;].split(&quot;/&quot;)[1];
				respObj.episodioIdentificadores.push(episodioIdentificador);

				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.identifier&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;display&apos;];
				respObj.episodioIdentificadores.push(episodioIdentificador);
			}
		})
	}
      
     ////	Dados do Doente
     for (var j = 0; j &lt; apppointmentRes[&apos;participant&apos;].length; j++){  
		if(apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;reference&apos;].includes(&quot;Patient&quot;)){
			respObj.doente.nomeDoente = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;display&apos;];
		   	respObj.doente.numSequencial = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;identifier&apos;][&apos;value&apos;]; 
		}
     }
      
	// agendamentoIdentificadores
	if (typeof apppointmentRes[&apos;id&apos;] != &quot;undefined&quot; &amp;&amp; apppointmentRes[&apos;id&apos;] != &quot;&quot;) {
		agendamentoIdentificadoresObj = new Object();
		agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
		agendamentoIdentificadoresObj.codigo = apppointmentRes[&apos;id&apos;];	// nº do agendamento
		respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
	}

	// tipoAgendamentoIdentificadores
	apppointmentRes[&apos;serviceCategory&apos;].find(function(serviceCategory){
		serviceCategory[&apos;coding&apos;].find(function(codingSC){ 
			if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; !codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;) ){
				var objCUF= {};
				objCUF.sistemaCodificador = &quot;CUF@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objCUF.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objCUF);
			} else if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;)) {
				var objTHOM = {};
				objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objTHOM.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objTHOM);
			}
		});
	});

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5df4529e-ac29-482a-a8c8-6b86c2434803</id>
                <name>getGeneralInfoEncounter</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789003</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Encounter Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} encounterRes - o Encounter Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoEncounter(encounterRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof encounterRes[&apos;episodeOfCare&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; encounterRes[&apos;episodeOfCare&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( encounterRes[&apos;episodeOfCare&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}

	respObj.doente.numSequencial = encounterRes[&apos;subject&apos;][&apos;identifier&apos;][&apos;value&apos;];
	respObj.doente.nomeDoente = encounterRes[&apos;subject&apos;][&apos;display&apos;];
	
	if (typeof encounterRes[&apos;appointment&apos;] != &apos;undefined&apos;){
    	  	encounterRes[&apos;appointment&apos;].find(function (appointment) {
    	  		// agendamentoIdentificadores
			agendamentoIdentificadoresObj = new Object();
			agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
			agendamentoIdentificadoresObj.codigo = appointment[&apos;reference&apos;].replace(&apos;Appointment/&apos;, &apos;&apos;);
			respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
    	  	})
    	}

	// episodioIdentificadores
	episodioIdentificadorObj = new Object();
	episodioIdentificadorObj.sistemaCodificador = &quot;Encounter.id&quot;;
	episodioIdentificadorObj.codigo = encounterRes[&apos;id&apos;];
	respObj.episodioIdentificadores.push(episodioIdentificadorObj);

	// Human-redable ID
    	if (typeof encounterRes[&apos;identifier&apos;] != &apos;undefined&apos;){
		episodioIdentificadorHumanRedableObj = new Object();
		episodioIdentificadorHumanRedableObj.sistemaCodificador = &quot;Encounter.identifier&quot;;
		episodioIdentificadorHumanRedableObj.codigo = encounterRes[&apos;identifier&apos;][0][&apos;value&apos;];
		respObj.episodioIdentificadores.push(episodioIdentificadorHumanRedableObj);
    	}
	
	encounterRes[&apos;extension&apos;].find( function(extension) {
		if (extension[&apos;url&apos;].includes(&quot;Encounter.OperationalHealthUnit&quot;)) {
			var objTHOM = {};
			objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
			objTHOM.codigo = extension[&apos;valueCoding&apos;][&apos;code&apos;];
			respObj.tipoAgendamentoIdentificadores.push(objTHOM);
		}
	})

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7370760c-76cd-4fa8-bb89-34738bfe7995</id>
                <name>getIdProposta</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791423</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função auxiliar genérica com o propósito de extrair o id da proposta.
	com o intuito de extrair da API do sistema externo um determinado CarePlan e extrair o id da proposta cirúrgica associado, se este dado existir

	@param {String} propostaExtId - id externo identificativo da proposta
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;idproposta111&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getIdProposta(appointmentId, appContext) {

	var contextList = [&quot;cuf&quot;]; // contextos de aplicação da função (CUF, ...)
	var respostaObj = {};

	if (contextList.includes(appContext.trim().toLowerCase()) ) {
	
		if (appContext.trim().toLowerCase() == &quot;cuf&quot;) { // CUF

			/*
			if (propostaExtId &amp;&amp; !appointmentId) { //agendamento - extrair id da proposta de PC através do id externo da proposta
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			} else if (!propostaExtId &amp;&amp; appointmentId) { //checkin - 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC através do id externo da proposta
				var propostaExtId = getPropostaExtId_CUF(appointmentId);
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			}
			*/

			// 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC, através do id externo da proposta
			var respostaExtId = getPropostaExtId_CUF(appointmentId);
			if (respostaExtId.statusCode = &quot;200&quot;) {
				respostaObj = geIdPropostaPC_CUF(respostaExtId.responseMessage);
			} else {
				respostaObj = respostaExtId;
			}
		}
	} else {
		respostaObj.statusCode = &quot;500&quot;;
		respostaObj.responseMessage = &quot;Contexto de aplicação inválido&quot;;
	}
	return respostaObj;
}


// -------------- FUNCOES AUXILIARES -----------------------

function geIdPropostaPC_CUF(propostaExtId) { // extrair id da proposta de PC através do id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;CarePlan&quot;, propostaExtId);
	if (resposta.statusCode == &quot;200&quot;) {
		carePlanRes = JSON.parse(resposta.responseMessage);
		var patientCareId = null;
		carePlanRes[&quot;identifier&quot;].find( function(identifier) {
			identifier[&quot;type&quot;][&quot;coding&quot;].find( function(coding) {
				if (coding[&quot;code&quot;] == &quot;PLAC&quot;) {
					patientCareId = identifier[&quot;value&quot;];
				}
			});
		});
		if (patientCareId !== null) {
			result.statusCode = &quot;200&quot;;
			result.responseMessage = idProposta;
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;Id não encontrado como placer identifier no CarePlan com id &quot; + propostaExtId;			
		}
		
	} else {
		result = resposta;
	}
	return result;
}

function getPropostaExtId_CUF(appointmentId) { // obter id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;Appointment&quot;, appointmentId);
	if (resposta.statusCode == &quot;200&quot;) {
		appointmentRes = JSON.parse(resposta.responseMessage);
		if (appointmentRes[&apos;supportingInformation&apos;]) {
			var propostaExtId = null;
			appointmentRes[&apos;supportingInformation&apos;].find( function(suppInfo) {
				if (suppInfo[&apos;reference&apos;].includes(&quot;CarePlan&quot;)) {
					propostaExtId = suppInfo[&apos;reference&apos;].replace(&quot;CarePlan/&quot;,&quot;&quot;);
					return ;
				}
			});
			if (propostaExtId !== null) {
				result.statusCode = &quot;200&quot;;
				result.responseMessage = propostaExtId;
			} else {
				result.statusCode = &quot;500&quot;;
				result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
			}
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
		}
	} else {
		result = resposta;
	}
	return result;
}


</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>799a6dcb-19c1-4600-8ff8-6b905747eeaa</id>
                <name>GetOrganization</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788084</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} organizationGUID - thom guid fro organization
	@return {Object} return intRefExt
*/
function getOrganization(organizationGUID) {

	var organizationObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Organization/&quot; + organizationGUID;
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			organization = JSON.parse(httpResp.responseMessage);

			organizationObj.intRefExt = organization.alias[0];
			organizationObj.name = organization.name;
			
		}
	}

	return organizationObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c1c0f8a3-571c-4066-8324-a7b7ba0966db</id>
                <name>getPcSurgicalProposalIdFromThom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792484</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} patientUuid - ID do Paciente de THOM (UUID)
	@param {String} episodOfCareUuid - ID do EpisodeOfCare de THOM (UUID)
	@return {String} return ID sequencial da proposta cirurgica do PatientCare 
*/
function getPcSurgicalProposalIdFromThom(patientUuid, episodOfCareUuid) {
	var pcSurgicalProposal = null;
	var carePlanId = null;

	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	// Get all CarePlan to specific Patient
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CarePlan?_pretty=true&amp;patient=Patient/&quot; + patientUuid + &apos;&amp;category=https://thom-fhir.apis.sat.jmslab.pt/fhir/CodeSystem/TreatmentRequestType|1&apos;;
	httpResp = httpGet(httpGetURL, authHeader);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var bundle = JSON.parse(httpResp.responseMessage);
			
			bundle.entry.find(function(bundleResource){
				if (bundleResource.resource.resourceType == &apos;CarePlan&apos; &amp;&amp; typeof(bundleResource.resource.supportingInfo) != &apos;undefined&apos;){
					bundleResource.resource.supportingInfo.find(function(supportingInfo){
						if (supportingInfo.display == episodOfCareUuid){
							carePlanId = bundleResource.resource.id;
							//return;
						}	
					});
				}
			});
		}
	}

	// Get specific CarePlan to get the placer identifier
	if (carePlanId != null){
		var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CarePlan/&apos; + carePlanId;
		httpResp = httpGet(httpGetURL, authHeader);
		//logger.info(&quot;httpResp - &quot; + JSON.stringify(httpResp));
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var carePlan = JSON.parse(httpResp.responseMessage);
				
				carePlan.identifier.find(function(identifiers){
					identifiers.type.coding.find(function(codings){
						if (codings.code == &apos;PLAC&apos;){
							pcSurgicalProposal = identifiers.value;
							return;
						}
					});
				});
			}
		}
	}

	return pcSurgicalProposal;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>82e9fc81-294a-416a-9674-857fb9e5af64</id>
                <name>GetPractitionerByNumMecanografico</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791487</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} Practitioner NumMecanografico - numero mecanográfico do médico
	@return {Object} return Practitioner GUID do THOM
*/
function getPractitionerByNumMecanografico(numMecanografico) {
	var respObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Practitioner?identifier=&quot; + numMecanografico;
	httpResp = httpGet(httpGetURL,null);
	respObj.statusCode = httpResp.statusCode;

	respObj.response = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			practitioner = JSON.parse(httpResp.responseMessage);

			if (practitioner.type  == &apos;searchset&apos; &amp;&amp; practitioner.total &gt; 0){
				practitioner.entry.find(function(practitionerResource){
					return practitionerResource.resource.identifier.find(function(identifier){
						
						return identifier.type.coding.find(function(codes){
							if (codes.code == &apos;4&apos;){
								if (numMecanografico == identifier.value){
									respObj.response = practitionerResource.resource;
									return true;
								}
							}
						})
					})
				})	
			}
		}
	} else {
		respObj.response = httpResp.responseMessage != null ? httpResp.responseMessage : httpResp.statusText;
	}
	
	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>45bbb451-aab7-4513-8107-952866fd2a95</id>
                <name>getResourceExternalAPI</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789667</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo intuito passa por ir buscar à API externa uma determinada instância de um pretendido resource type

	@param {String} resourceType - FHIR Resource Type (por exemplo, Appointment, Bundle, CarePlan, Encounter, etc.)
	@param {String} resourceExtId - id externo da instância a ser obtida
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;fullResource&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getResourceExternalAPI(resourceType, resourceExtId) {
	var respostaObj = {};
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/&quot; + resourceType + &quot;/&quot; + resourceExtId;	
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			respostaObj = httpResp;
		} else {
			respostaObj.statusCode = &quot;500&quot;;
			respostaObj.responseMessage = &quot;Resposta retornada não é JSON&quot;;
		}
	} else {
		respostaObj = httpResp;
	}
	return respostaObj;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>fe90c913-c365-44d1-b309-7c4dae7d9d9a</id>
            <name>Utils</name>
            <revision>6</revision>
            <lastModified>
              <time>1730893909835</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Utils functions for Mirth Channels</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>9d0737dd-b85f-4e05-bd6e-b83828e87bdf</id>
                <name>addIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792349</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Aidiciona um objeto relativo a um identificador (Ex: {&quot;sistemaCodificador&quot;:&quot;Appointment.id&quot;, &quot;codigo&quot;: 1111} ) a uma lista de identificadores

	@param {String} sistCodificador - nome do sistemaCodificador (ex: &quot;Appointment.id&quot; ou &quot;Encounter.identifier&quot;)
	@param {String} codigo - value relativo ao sistCodificador
	@param {String} listaAdicionar - listagem já existente (ou vazia/null/undefined) de identificadores
	@return {String} return listaIdentificadores
*/
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	var lista;
	try {
		if (listaAdicionar  &amp;&amp; Array.isArray(listaAdicionar)) {
			lista = JSON.parse( JSON.stringify(listaAdicionar));
		} else {
			logger.info(&quot;excecao1&quot;);
			lista= [];
		}
	} catch (err) {
		logger.info(&quot;excecao2&quot; + err.toString());
		lista =  [];
	}
	/*
	if (! Array.isArray(listaAdicionar)) {
		lista = [];
	} else {
		lista = JSON.parse( JSON.stringify(listaAdicionar));
	}
	*/
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			lista.push(obj);
		}
	}
    	return lista;
	
}

/*
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	if (! Array.isArray(listaAdicionar)) {
		listaAdicionar = [];
	}
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			listaAdicionar.push(obj);
		}
	}
    	return listaAdicionar;
	
}
*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83c82ac5-e364-41b2-99cc-6a4ead5eaa37</id>
                <name>callApi</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793110</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Generic code to implement API call

	@param {String} method - http method
	@param {String} url - http url
	@param {String} user - api username
	@param {String} pass - api password
	@return {Object} return api response
*/
function callApi(method, url, user, pass) {
	
	var url = new Packages.java.net.URL(url);
	var connection = url.openConnection();
	connection.setRequestMethod(method);
	
	try {
	  var responseCode = connection.getResponseCode();
	  if (responseCode === Packages.java.net.HttpURLConnection.HTTP_OK) {	//	200
	    var inputStream = connection.getInputStream();
	    var reader = new Packages.java.io.BufferedReader(new Packages.java.io.InputStreamReader(inputStream));
	    var response = &quot;&quot;; // Inicializa a variável response
	
		    while ((line = reader.readLine()) !== null) {
		      response += line;
		    }      
	        reader.close();	      
		   
		   return JSON.parse(response.toString());
	
	    } else {
	        var errorMessage = &quot;Erro na chamada ao Web Service: &quot; +  url + &quot; Código de resposta: &quot; + responseCode;
	        // Trata os casos em que a chamada ao Web Service não foi bem-sucedida        
	        throw new Error(errorMessage);
	    }
	} catch (e) {
	    // Capturar exceção e retornar status e mensagem de erro
	    var errorStatus = connection.getResponseCode();
//	    var errorMessage = e.getMessage();	    
	    throw new Error(errorStatus);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fd200634-44bd-483c-97ab-743c373d4b7a</id>
                <name>checkIfExameEspecial</name>
                <revision>2</revision>
                <lastModified>
                  <time>1730739683915</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo objetivo passa por receber um código identificativo de um exame (ou outro serviço qualquer) e retornar se o mesmo é um exame especial ou não. Para
	tal, a função vai à tabela de catálogo da BD verificar se o código lá existe. Caso haja algum problema de acesso à BD, e de forma opcional, a função tenta aceder
	ao endpoint do sistema externo para fazer a verificação de exame especial.

	@param {String} catalogCode - código de catálogo CUF a ser analisado
	@param {String} externalSysCode - código de catálogo do sistema externo a ser analisado
	@return {Object} return object
*/
function checkIfExameEspecial(catalogCode, externalSysCode) {
	var error = false;
	var errorMsg = null;
	var isExameEspecial = null;
	var resposta = new Object();
	
	// Get a database connection 
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	var selectQuery = &quot;SELECT * FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; WHERE \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; and ativo = true;&quot;;
	try {
		// Execute the SQL query
		result = dbConn.executeCachedQuery(selectQuery);
		if (result.next() ) { // true
			isExameEspecial = true;
		} else { 
			isExameEspecial = false; // false
		}
	} catch (e) {
		error = true;
		logger.info(&quot;e.toString() = &quot; + e.toString());
		errorMsg = e.toString();
	} finally {
	    // Close the database connection
	    dbConn.close();
	}

	//houve erro no acesso à BD, logo tenta aceder ao endpoint do sistema externo para obter essa informação
	if (isExameEspecial == null &amp;&amp; typeof externalSysCode != &apos;undefined&apos;) {
		var httpPostURL = $(&apos;Transactional_CUFBUS_Host&apos;) + &quot;CodeSystem/Service/$lookup&quot;;
		var body = new Object();
		body.resourceType= &quot;Parameters&quot;;
		body.parameter = [{&quot;name&quot;:&quot;code&quot;,&quot;valueCode&quot;:externalSysCode}];
		var authHeader = null
		if ($(&apos;Transactional_CUFBUS_User&apos;) != null &amp;&amp; $(&apos;Transactional_CUFBUS_Pass&apos;) != &apos;&apos;){
			authHeader = apiGenerateBasicAuthHeader($(&apos;Transactional_CUFBUS_User&apos;), $(&apos;Transactional_CUFBUS_Pass&apos;));  
		}
		httpResp = httpPost(httpPostURL,JSON.stringify(body),authHeader);
		
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var parametersRes = JSON.parse(httpResp.responseMessage);
				try {
					if (parametersRes[&apos;resourceType&apos;] == &quot;Parameters&quot;) {
						var checkExameEspecial = null;
						parametersRes[&apos;parameter&apos;].find( function(parameter) {
							if(parameter[&apos;name&apos;] == &quot;property&quot;) {
								parameter[&apos;part&apos;].find( function(part) {
									if (part[&apos;valueCoding&apos;]) {
										if (part[&apos;valueCoding&apos;][&apos;code&apos;] == $(&apos;Catalogo_ServiceCategory_ExameEspecial&apos;)) {
											isExameEspecial = true;
											checkExameEspecial = true;
											return true;
										}
									}
								})
							}
						})
						if (checkExameEspecial == null) { // não encontrou property de exame especial, logo não é exame especial
							isExameEspecial = false;
						}
					} else {
						error = true;
						errorMsg = &quot;A Parameters Resource was expected as a response&quot;;
					}
				} catch (e2) {
					error = true;
					errorMsg = &quot;Error parsing the response from the endpoint &quot; + e2.toString();
				}
			} else {
				error = true;
				errorMsg = &quot;Endpoint response was not JSON&quot;;
			}
		} else {
			error = true;
			errorMsg = httpResp.statusText ? httpResp.statusText : (httpResp.responseMessage ? httpResp.responseMessage : null);;		
		}
	}
	if (isExameEspecial == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg; //string
	} else {
		resposta.statusCode = &quot;200&quot;;
		resposta.responseMessage = isExameEspecial; // boolean
	}
	return resposta;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b53102c9-17cf-431e-b87a-40d08fe73203</id>
                <name>convertDateToTimeStamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793287</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertDateToTimeStamp(date) {

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = &apos;00&apos;;
	var min = &apos;00&apos;;
	var sec = &apos;00&apos;;
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5714586f-45b8-45cb-9af6-fdabfe1bf9b2</id>
                <name>convertTimeStampToDateStr</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787735</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and time &quot;HHmmss&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@param {String} time - time in format &quot;HHmmss&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertTimeStampToDateStr(date, time) {

	if (time.length &lt;= 5){ // left pad
		time = time.padStart(time.length + 1, &apos;0&apos;);
	}

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = time.substring(0, 2);
	var min = time.substring(2, 4);
	var sec = time.substring(4, 6);
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b4455483-c833-4b4e-adb9-c646cad7bcfe</id>
                <name>DateUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791914</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Date to UTC

	@param {String} date - Date string in format &quot;yyyy-MM-ddTHH:mm:ss+SSSS&quot;
	@return {String} return date in UTC &quot;yyyy-MM-ddTHH:mm:ss+Z&quot;
*/
function DateUtc(date, dateFormat) {

     var formatter_hl7 = new java.text.SimpleDateFormat(dateFormat != null ? dateFormat : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss+SSSS&quot;);
     formatter_hl7.setTimeZone(java.util.TimeZone.getTimeZone($(&apos;serverTimeZone&apos;)));
     var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
     formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	return formatter_utc.format(formatter_hl7.parse(date));			
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4fbdd7b8-7dd0-4ba3-ba13-0a8990b4513b</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788357</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8cb44e20-4b8a-48e6-93ae-aa905dbf2445</id>
                <name>generate_HLv2_messageId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788478</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função criadora de id de mensagem HL7 v2 (MSH.10.1) único v5

	@return {String} id unico
*/
function generate_HLv2_messageId(tipo_mensagem) {

	var timestamp = new Date().getTime().toString();
	var timestamp_length = timestamp.length;

	//random remaining characters
	remainder = 20-3-timestamp_length;
	
	// Generate a random number between 0... and 9...
	var randomNumber = Math.floor(Math.random() * Math.pow(10,remainder));
	// Convert the number to a string and pad it with leading zeros if needed
	var formattedNumber = randomNumber.toString().padStart(remainder, &apos;0&apos;);
	
	return timestamp + &quot;-&quot; + tipo_mensagem[0] +&quot;-&quot; + formattedNumber;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b4aa14b-ee5a-464f-b1c8-0917d2ea815c</id>
                <name>getArrayUniqueValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792417</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns unique values from an array

	@param {array} array - array
	@return {array} return unique values from array
*/
function getArrayUniqueValues(array) {
	var uniqueArray = [];
	for (var i = 0; i &lt; array.length; i++) {
	    if (uniqueArray.indexOf(array[i]) === -1) {
	        uniqueArray.push(array[i]);
	    }
	}

	return uniqueArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bd7561e-2fb9-41d1-a8e3-fbeabaf8099a</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793452</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4814b63d-13ac-4097-86e2-22ca3c24eda4</id>
                <name>getFirstName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns first name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getFirstName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[0];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a594fff0-deb4-4d2a-a11e-f39582b42120</id>
                <name>getIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791988</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Extrai da listagem de identificadores o &quot;codigo&quot; associado a um pretendido &quot;sistCodificador&quot;

	@param {String} listaIds - listagem de identificadores onde procurar
	@param {String} sistCodificador - sistemaCodificador a ser procurado na listagem de identificadores
	@return {String} return codigo (ou null, caso não exista)
*/
function getIdentificador(listaIds, sistCodificador) {
	var codigo = null;	
	try{  		
	    	listaIds.find(function(elemento) {
	    		if (elemento.sistemaCodificador){
	    			try { // para o caso de algum dos identificadores estar mal definido não impedir que se extraia a informação pretendida
		        		if (elemento.sistemaCodificador.toLowerCase() == sistCodificador.toLowerCase()){
		          		codigo= elemento.codigo;
		          		return true;
		        		}
	    			} catch (err) {
		        		;
		        	}
	      	}
	    });
    	} catch (ex1){
    		codigo = null;
    	}
	return codigo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f9529854-80ad-450b-ad8a-54a1b63ba9d1</id>
                <name>getLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791292</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns last name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getLastName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[(names.length -1) ];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6ff6cc61-fa90-455a-b9b4-26f12a870f91</id>
                <name>getLocationExameEspecial</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792555</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dada informação sobre o hospital, o código de catálogo de exame especial e a especialidade, retornar qual a localização no pretendido hospital predestinada para
	a ocorrência de exames especiais dessa mesma especialidade

	@param {String} hospitalINTRefExt - INTRefExt do hospital (CMFL, HTEJO, ...)
	@param {String} catalogCode - código de catálogo do exame especial (10058, 20056, ...)
	@param {String} especialidade - especialidade associada ao exame especial (Cardiologia, Oftalmologia, ...)
	@return {String} return {&quot;servico&quot;: &quot;...&quot;, &quot;area&quot;: &quot;...&quot;, &quot;sala&quot;: &quot;...&quot; &quot;cama&quot;: &quot;...&quot;}
*/
function getLocationExameEspecial(hospitalINTRefExt, catalogCode, especialidade) {
	var error = false;
	var errorMsg = null;
	var resposta = new Object();

	var cama = null;
	var sala = null;
	var area = null;
	var servico = null;
	
	if ( !hospitalINTRefExt || !catalogCode || !especialidade ) {
		error = true;
		errorMsg = &quot;Um dos parametros da função é invalido&quot;;
	} else {
	
		var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	
		/* var selectQuery = &quot;SELECT cama, sala, area FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE servico = &apos;&quot; + AAAAAAAAA + &quot;&apos; AND especialidade = &apos;&quot;+ especialidade + &quot;&apos; AND id =&quot;
						+ &quot;(SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where intRefExt = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) LIMIT 1) LIMIT 1;&quot;; */
	
		var selectIdLocalizacaoSQL = &quot;SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) ;&quot;;
	
		var listIdLocalizacao= [];
		try {
			// Execute the SQL query
			result = dbConn.executeCachedQuery(selectIdLocalizacaoSQL); // return javax.sql.rowset.CachedRowSet
			while (result.next()) {
				listIdLocalizacao.push(result.getString(&quot;idLocalizacao&quot;));
			}
		} catch (e) {
			error = true;
			logger.info(&quot;e.toString() = &quot; + e.toString());
			errorMsg = e.toString();
		} finally {
		    // Close the database connection
		    dbConn.close();
		}
		logger.info(&quot;lsita ids localizacao = &quot; +JSON.stringify(listIdLocalizacao));
		

		if (listIdLocalizacao.length == 0){ // não existem idLocalizacao configurados para o exame
			error = true;
			errorMsg = &quot;Não existem idLocalizacao para o código de catálogo &quot; + catalogCode + &quot; e hospital &quot; + hospitalINTRefExt;
		} else {
			var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
			if (listIdLocalizacao.length == 1) { //só existe 1 idLocalizacao, logo não interessa a especialidade porque a localizacao do exame especial é sempre no mesmo local
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id = &apos;&quot; + listIdLocalizacao[0] + &quot;&apos;;&quot;;
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}			
			} else { // existe mais do que uma localização, logo vai diferenceiar por especialidade
				ids = &quot;(&quot;;
				for (var i=0; i&lt; listIdLocalizacao.length; i++) {
				    ids += &quot;&apos;&quot; + listIdLocalizacao[i].toString() + &quot;&apos;,&quot;;
				}
				ids = ids.slice(0,-1) + &quot;)&quot;;
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id in &quot; + ids + &quot; and especialidade = &apos;&quot;+especialidade+ &quot;&apos;;&quot;;
				logger.info(selectInfosSQL);
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}	
			}
		}
	}


	if (error == true  ) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro interno getLocationExameEspecial()&quot;;
	} else if ( cama == null &amp;&amp; sala == null &amp;&amp; area == null  &amp;&amp; servico == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro na query à LocalizacaoExamesEspeciais&quot;;
	}else {
		resposta.statusCode = &quot;200&quot;;
		var respObj = new Object();
		respObj.cama = cama;
		respObj.area = area;
		respObj.sala = sala;
		respObj.servico = servico;
		resposta.responseMessage = respObj;
	}
	return resposta;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>903737fd-9a14-45ea-b3cf-2af18ba88142</id>
                <name>getNumMecanograficoById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791627</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getNumMecanograficoById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.numMecanografico;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6bdd892d-3953-4f68-af96-44ff89434b13</id>
                <name>getPerfilUtilizadorById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789557</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getPerfilUtilizadorById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.perfil;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee58620f-c785-44f2-a4f7-26a8808c4e16</id>
                <name>getPerformerAndDatesRequisicaoMcdts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788016</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Object} accoesList - ...
	@param {Object} dataCriacaoRequisicao - ...
	@param {Object} utilizadoresList - ...
	@return {Object} return description

	(//R = obrigatório)
	--&gt; Formato esperado acoesList: [
          {
            &quot;utilizadorId&quot; : 12284, //R
            &quot;funcao&quot; : 1, //R
            &quot;data&quot; : &quot;2024-05-08T14:41:51.089035Z&quot; //R
          },
          {
            &quot;utilizadorId&quot; : 12284,
            &quot;funcao&quot; : 3,
            &quot;data&quot; : &quot;2024-05-08T14:27:58.349313Z&quot;
          }
        ]

     --&gt; Formato esperado utilizadoresList: [
	    {
	      &quot;id&quot; : 12284,
	      &quot;login&quot; : &quot;MDPIRES&quot;,
	      &quot;nome&quot; : &quot;Marcos Pires&quot;,
	      &quot;numMecanografico&quot; : &quot;263812278&quot;,
	      &quot;numOrdem&quot; : &quot;123&quot;,
	      &quot;numFuncionario&quot; : null,
	      &quot;perfil&quot; : 1,
	      &quot;intRefExt&quot; : null
	    }
	  ]
	
*/
function getPerformerAndDatesRequisicaoMcdts(accoesList,dataCriacaoRequisicao, utilizadoresList) {

	logger.info(&quot;accoesList - &quot; +JSON.stringify(accoesList));
	logger.info(&quot;dataCriacaoRequisicao - &quot; + JSON.stringify(dataCriacaoRequisicao));
	logger.info(&quot;utilizadoresList - &quot; + JSON.stringify(accoesList));
	returnObj = new Object();
	
	var Performer = Lists.list();
	var occurenceDateTime = null;
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(accoesList); j++ ){
	
	      try {
			if (accoesList[j][&apos;funcao&apos;] == 1 /* Relato */){
				dataRelato = accoesList[j][&apos;data&apos;];
			} else if (accoesList[j][&apos;funcao&apos;] == 2 /* Validacao */){
				dataValidacao = accoesList[j][&apos;data&apos;];
			} else {
				occurenceDateTime = dataCriacaoRequisicao;
			}
	       } catch (error) {
	       	logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro nas datas - &quot; + error.toString()); 
	     }
	
		try {
			  Performer.add({
			    function: {
			        coding: [{
			          system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			          code: newStringOrUndefined( accoesList[j][&apos;funcao&apos;] == 3 /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;])) : mapFuncao(accoesList[j][&apos;funcao&apos;]) )
			        }]
			      },
			    actor: {
			      reference: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) ) : null),
			      identifier: {
			        use: newStringOrUndefined(&apos;official&apos;),
			        type: {
			          coding: [{
			            system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
			            code: newStringOrUndefined(&apos;4&apos;)
			          }],
			          text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
			        },
			        value: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) : null)
			      }
			    }
		  });
		} catch (error2) {
			logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro no performer - &quot; + error2.toString()); 
		}
	}

	returnObj.performer = Performer;
	returnObj.occurenceDateTime = occurenceDateTime;
	returnObj.dataValidacao = dataValidacao;
	returnObj.dataRelato = dataRelato;

	return returnObj;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8615c472-c47a-48aa-a6e7-45e487c4463f</id>
                <name>getRabbitMqHosts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791032</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Void}
	@return {HostsDto} return hosts
*/
function getRabbitMqHosts() {
	// Set RabbitMQ Hosts
	importPackage(com.mirth.rabbitmq.client.dto);
	hosts = [];
	addr = new HostsDto(); // Main Host
	addr.setHost($(&apos;RabbitMqHost&apos;));
	addr.setPort(parseInt($(&apos;RabbitMqPort&apos;)));
	hosts.push(addr);

	return hosts;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f331cea8-c75e-40d4-83d9-a6779b688c81</id>
                <name>isJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790116</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a string is a valid JSON

	@param {String} string to validate if is JSON
	@return {Boolean} return boolean
*/
function isJSON(str) {
  try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27f41d50-5bd7-46da-9ad9-203181a92ba9</id>
                <name>isNumeric</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789613</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a value (string or number) is numeric

	@param {String} value to validate if is numeric
	@return {Boolean} return boolean
*/
function isNumeric(num) {
  if (typeof num == &quot;string&quot;) { 
    return !isNaN(num) &amp;&amp;
           !isNaN(parseFloat(num));
  } else if (typeof num == &quot;number&quot;) {
  	return true;
  } else {
  	return false;
  }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5c27a913-629d-4605-9e85-716a84e11410</id>
                <name>MappFrequencies</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to create multiple VAR Segments according Initial Date and CD_PrescricaoFrequencias

	@param {String} freqUni - CD_PrescricaoFrequencias description code
	@param {String} dateInit - Date HL7 string: start prescription date
	@param {String} DateEnd - Date HL7 string: end prescription date
	@return {String} return VAR Segment
*/
function MappFrequencies(freqUni, dateStart, DateEnd) {

	startDate = &quot;20230227115700&quot;;
	hora = startDate.substring(10, 8);
	freqfactor = 8;
	freqUnit = &apos;Dias&apos;;
	
	if (freqUnit == &apos;Hora&apos;){ // x em x horas
	    // calc hours segments
	    if (startDate.length &gt; 0 &amp;&amp; freqfactor &gt; 1){
	        console.log(&quot;running ...&quot;);
	        for (i = 0; i &lt; (24 / freqfactor) ; i++){
	            if ( (parseInt(hora) + (freqfactor * i) - 24) &gt;= 0  ){
	                hora = parseInt(hora) + (freqfactor * i) - 24;
	                break;
	            }
	        }
	        
	        if ((24 / freqfactor) &gt;= 1){
	            for(i = 0; i &lt; (24 / freqfactor); i++){
	                console.log( (parseInt(hora) + (freqfactor * i)).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	            }
	        }else {
	            console.log( parseInt(hora).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	        }   
	    }
	} else if (freqUnit == &apos;Dias&apos;){ // x em x dias
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Dias da Semanas&apos; || freqUnit == &apos;Por Dia&apos; || freqUnit == &apos;Refeições&apos; || freqUnit == &apos;Dia/Hora&apos;){ // têm de ser criados a cada dia
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Única&apos;){ // Hora fixa^5
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;SOS&apos;){
	    console.log( null )
	}else if (freqUnit == &apos;Turno Fixo&apos;) {
	    // tenho de pedir ao bruno para ter alguma informação relacionada com os turnos
	}else if (freqUnit == &apos;Contínuo&apos; || freqUnit == &apos;Sem horário&apos;){ // Sem hor\XE1\rio^0
	    console.log( null )
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e5cc4c3f-7233-42b0-8162-b3bec0ab5c94</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792857</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fdd919fc-4700-4a8f-aafe-cc2f4653f100</id>
                <name>Unescape HL7 Characters</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790479</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function hexMappingPreProcessor(result) {
	var hexMapping = [
			[/\\x21\\/gi, &quot;!&quot;], [/\\x22\\/gi, &apos;&quot;&apos;], [/\\x23\\/gi, &quot;#&quot;], [/\\x24\\/gi, &quot;$&quot;], [/\\x25\\/gi, &quot;%&quot;], [/\\x26\\/gi, &quot;&amp;&quot;], [/\\x27\\/gi, &quot;&apos;&quot;], [/\\x28\\/gi, &quot;(&quot;], [/\\x29\\/gi, &quot;)&quot;],
			[/\\x2a\\/gi, &quot;*&quot;], [/\\x2b\\/gi, &quot;+&quot;], [/\\x2c\\/gi, &quot;,&quot;], [/\\x2d\\/gi, &quot;-&quot;], [/\\x2e\\/gi, &quot;.&quot;], [/\\x2f\\/gi, &quot;/&quot;], [/\\x30\\/gi, &quot;0&quot;], [/\\x31\\/gi, &quot;1&quot;], [/\\x32\\/gi, &quot;2&quot;],
			[/\\x33\\/gi, &quot;3&quot;], [/\\x34\\/gi, &quot;4&quot;], [/\\x35\\/gi, &quot;5&quot;], [/\\x36\\/gi, &quot;6&quot;], [/\\x37\\/gi, &quot;7&quot;], [/\\x38\\/gi, &quot;8&quot;], [/\\x39\\/gi, &quot;9&quot;], [/\\x3a\\/gi, &quot;:&quot;], [/\\x3b\\/gi, &quot;;&quot;],
			[/\\x3c\\/gi, &quot;&lt;&quot;], [/\\x3d\\/gi, &quot;=&quot;], [/\\x3e\\/gi, &quot;&gt;&quot;], [/\\x3f\\/gi, &quot;?&quot;], [/\\x40\\/gi, &quot;@&quot;], [/\\x41\\/gi, &quot;A&quot;], [/\\x42\\/gi, &quot;B&quot;], [/\\x43\\/gi, &quot;C&quot;], [/\\x44\\/gi, &quot;D&quot;],
			[/\\x45\\/gi, &quot;E&quot;], [/\\x46\\/gi, &quot;F&quot;], [/\\x47\\/gi, &quot;G&quot;], [/\\x48\\/gi, &quot;H&quot;], [/\\x49\\/gi, &quot;I&quot;], [/\\x4a\\/gi, &quot;J&quot;], [/\\x4b\\/gi, &quot;K&quot;], [/\\x4c\\/gi, &quot;L&quot;], [/\\x4d\\/gi, &quot;M&quot;],
			[/\\x4e\\/gi, &quot;N&quot;], [/\\x4f\\/gi, &quot;O&quot;], [/\\x50\\/gi, &quot;P&quot;], [/\\x51\\/gi, &quot;Q&quot;], [/\\x52\\/gi, &quot;R&quot;], [/\\x53\\/gi, &quot;S&quot;], [/\\x54\\/gi, &quot;T&quot;], [/\\x55\\/gi, &quot;U&quot;], [/\\x56\\/gi, &quot;V&quot;],
			[/\\x57\\/gi, &quot;W&quot;], [/\\x58\\/gi, &quot;X&quot;], [/\\x59\\/gi, &quot;Y&quot;], [/\\x5a\\/gi, &quot;Z&quot;], [/\\x5b\\/gi, &quot;[&quot;], [/\\x5c\\/gi, &quot;\\&quot;], [/\\x5d\\/gi, &quot;]&quot;], [/\\x5e\\/gi, &quot;^&quot;], [/\\x5f\\/gi, &quot;_&quot;],
			[/\\x60\\/gi, &quot;`&quot;], [/\\x61\\/gi, &quot;a&quot;], [/\\x62\\/gi, &quot;b&quot;], [/\\x63\\/gi, &quot;c&quot;], [/\\x64\\/gi, &quot;d&quot;], [/\\x65\\/gi, &quot;e&quot;], [/\\x66\\/gi, &quot;f&quot;], [/\\x67\\/gi, &quot;g&quot;], [/\\x68\\/gi, &quot;h&quot;],
			[/\\x69\\/gi, &quot;i&quot;], [/\\x6a\\/gi, &quot;j&quot;], [/\\x6b\\/gi, &quot;k&quot;], [/\\x6c\\/gi, &quot;l&quot;], [/\\x6d\\/gi, &quot;m&quot;], [/\\x6e\\/gi, &quot;n&quot;], [/\\x6f\\/gi, &quot;o&quot;], [/\\x70\\/gi, &quot;p&quot;], [/\\x71\\/gi, &quot;q&quot;],
			[/\\x72\\/gi, &quot;r&quot;], [/\\x73\\/gi, &quot;s&quot;], [/\\x74\\/gi, &quot;t&quot;], [/\\x75\\/gi, &quot;u&quot;], [/\\x76\\/gi, &quot;v&quot;], [/\\x77\\/gi, &quot;w&quot;], [/\\x78\\/gi, &quot;x&quot;], [/\\x79\\/gi, &quot;y&quot;], [/\\x7a\\/gi, &quot;z&quot;],
			[/\\x7b\\/gi, &quot;{&quot;], [/\\x7c\\/gi, &quot;|&quot;], [/\\x7d\\/gi, &quot;}&quot;], [/\\x7e\\/gi, &quot;~&quot;], [/\\xa1\\/gi, &quot;¡&quot;], [/\\xa2\\/gi, &quot;¢&quot;], [/\\xa3\\/gi, &quot;£&quot;], [/\\xa4\\/gi, &quot;¤&quot;], [/\\xa5\\/gi, &quot;¥&quot;],
			[/\\xa6\\/gi, &quot;¦&quot;], [/\\xa7\\/gi, &quot;§&quot;], [/\\xa8\\/gi, &quot;¨&quot;], [/\\xa9\\/gi, &quot;©&quot;], [/\\xaa\\/gi, &quot;ª&quot;], [/\\xab\\/gi, &quot;«&quot;], [/\\xac\\/gi, &quot;¬&quot;], [/\\xa0\\/gi, &quot; &quot;], [/\\xae\\/gi, &quot;®&quot;],
			[/\\xaf\\/gi, &quot;¯&quot;], [/\\xad\\/gi, &quot; &quot;], [/\\xb0\\/gi, &quot;°&quot;], [/\\xb1\\/gi, &quot;±&quot;], [/\\xb2\\/gi, &quot;²&quot;], [/\\xb3\\/gi, &quot;³&quot;], [/\\xb4\\/gi, &quot;´&quot;], [/\\xb5\\/gi, &quot;µ&quot;], [/\\xb6\\/gi, &quot;¶&quot;],
			[/\\xb7\\/gi, &quot;·&quot;], [/\\xb8\\/gi, &quot;¸&quot;], [/\\xb9\\/gi, &quot;¹&quot;], [/\\xba\\/gi, &quot;º&quot;], [/\\xbb\\/gi, &quot;»&quot;], [/\\xbc\\/gi, &quot;¼&quot;], [/\\xbd\\/gi, &quot;½&quot;], [/\\xbe\\/gi, &quot;¾&quot;], [/\\xbf\\/gi, &quot;¿&quot;],
			[/\\xc0\\/gi, &quot;À&quot;], [/\\xc1\\/gi, &quot;Á&quot;], [/\\xc2\\/gi, &quot;Â&quot;], [/\\xc3\\/gi, &quot;Ã&quot;], [/\\xc4\\/gi, &quot;Ä&quot;], [/\\xc5\\/gi, &quot;Å&quot;], [/\\xc6\\/gi, &quot;Æ&quot;], [/\\xc7\\/gi, &quot;Ç&quot;], [/\\xc8\\/gi, &quot;È&quot;],
			[/\\xc9\\/gi, &quot;É&quot;], [/\\xca\\/gi, &quot;Ê&quot;], [/\\xcb\\/gi, &quot;Ë&quot;], [/\\xcc\\/gi, &quot;Ì&quot;], [/\\xcd\\/gi, &quot;Í&quot;], [/\\xce\\/gi, &quot;Î&quot;], [/\\xcf\\/gi, &quot;Ï&quot;], [/\\xd0\\/gi, &quot;Ð&quot;], [/\\xd1\\/gi, &quot;Ñ&quot;],
			[/\\xd2\\/gi, &quot;Ò&quot;], [/\\xd3\\/gi, &quot;Ó&quot;], [/\\xd4\\/gi, &quot;Ô&quot;], [/\\xd5\\/gi, &quot;Õ&quot;], [/\\xd6\\/gi, &quot;Ö&quot;], [/\\xd7\\/gi, &quot;×&quot;], [/\\xd8\\/gi, &quot;Ø&quot;], [/\\xd9\\/gi, &quot;Ù&quot;], [/\\xda\\/gi, &quot;Ú&quot;],
			[/\\xdb\\/gi, &quot;Û&quot;], [/\\xdc\\/gi, &quot;Ü&quot;], [/\\xdd\\/gi, &quot;Ý&quot;], [/\\xde\\/gi, &quot;Þ&quot;], [/\\xdf\\/gi, &quot;ß&quot;], [/\\xe0\\/gi, &quot;à&quot;], [/\\xe1\\/gi, &quot;á&quot;], [/\\xe2\\/gi, &quot;â&quot;], [/\\xe3\\/gi, &quot;ã&quot;],
			[/\\xe4\\/gi, &quot;ä&quot;], [/\\xe5\\/gi, &quot;å&quot;], [/\\xe6\\/gi, &quot;æ&quot;], [/\\xe7\\/gi, &quot;ç&quot;], [/\\xe8\\/gi, &quot;è&quot;], [/\\xe9\\/gi, &quot;é&quot;], [/\\xea\\/gi, &quot;ê&quot;], [/\\xeb\\/gi, &quot;ë&quot;], [/\\xec\\/gi, &quot;ì&quot;],
			[/\\xed\\/gi, &quot;í&quot;], [/\\xee\\/gi, &quot;î&quot;], [/\\xef\\/gi, &quot;ï&quot;], [/\\xf0\\/gi, &quot;ð&quot;], [/\\xf1\\/gi, &quot;ñ&quot;], [/\\xf2\\/gi, &quot;ò&quot;], [/\\xf3\\/gi, &quot;ó&quot;], [/\\xf4\\/gi, &quot;ô&quot;], [/\\xf5\\/gi, &quot;õ&quot;],
			[/\\xf6\\/gi, &quot;ö&quot;], [/\\xf7\\/gi, &quot;÷&quot;], [/\\xf8\\/gi, &quot;ø&quot;], [/\\xf9\\/gi, &quot;ù&quot;], [/\\xfa\\/gi, &quot;ú&quot;], [/\\xfb\\/gi, &quot;û&quot;], [/\\xfc\\/gi, &quot;ü&quot;], [/\\xfd\\/gi, &quot;ý&quot;], [/\\xfe\\/gi, &quot;þ&quot;],
			[/\\xff\\/gi, &quot;ÿ&quot;], [/\\x91\\/gi, &quot;‘&quot;], [/\\x92\\/gi, &quot;’&quot;], [/\\x80\\/gi, &quot;€&quot;], [/\\x83\\/gi, &quot;ƒ&quot;], [/\\x85\\/gi, &quot;…&quot;], [/\\x86\\/gi, &quot;†&quot;], [/\\x87\\/gi, &quot;‡&quot;], [/\\x88\\/gi, &quot;ˆ&quot;],
			[/\\x89\\/gi, &quot;‰&quot;], [/\\x8a\\/gi, &quot;Š&quot;], [/\\x8b\\/gi, &quot;‹&quot;], [/\\x8c\\/gi, &quot;Œ&quot;], [/\\x8e\\/gi, &quot;Ž&quot;], [/\\x93\\/gi, &quot;“&quot;], [/\\x94\\/gi, &quot;”&quot;], [/\\x95\\/gi, &quot;•&quot;], [/\\x96\\/gi, &quot;–&quot;],
			[/\\x97\\/gi, &quot;—&quot;], [/\\x98\\/gi, &quot;˜&quot;], [/\\x99\\/gi, &quot;™&quot;], [/\\x9a\\/gi, &quot;š&quot;], [/\\x9b\\/gi, &quot;›&quot;], [/\\x9c\\/gi, &quot;œ&quot;], [/\\x9e\\/gi, &quot;ž&quot;], [/\\x9f\\/gi, &quot;Ÿ&quot;], [/\\x2079\\/gi, &quot;⁹&quot;],
			[/Ã¡/g, &quot;á&quot;], [/Ã³/g, &quot;ó&quot;], [/Âµ/g, &quot;µ&quot;], [/Ã£/g, &quot;ã&quot;], [/Ã§/g, &quot;ç&quot;], [/Ã©/g, &quot;é&quot;], [/Ãº/g, &quot;ú&quot;], [/Â³/g, &quot;³&quot;], [/\\.br\\/gi, &quot; &quot;], [/  +/g, &apos; &apos;], [/Âº/g, &quot;º&quot;], [/Ã&#x81;/g, &quot;Á&quot;],
			[/Ã¢/g, &quot;â&quot;], [/Ãµ/g, &quot;õ&quot;], [/Ã&#x87;Ã&#x83;/g, &quot;ÇÃ&quot;], [/Ã&#x8d;/g, &apos;Í&apos;], [/Ã&#x87;Ã&#x95;/g, &apos;ÇÕ&apos;], [/Ã&#x93;/g, &quot;Ó&quot;]
			];
	
	for(var i = 0; i &lt; hexMapping.length; i++){
		result = result.replace(hexMapping[i][0], hexMapping[i][1]);
	}

	var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
	for(var i = 0; i &lt; replaceList.length; i++){
		do{
			result = result.replace(replaceList[i][0], replaceList[i][1]);
		}while(result.indexOf(replaceList[i][0]) &gt; -1);
	}
	
	return result;
}



function encodeIsoLatin(result) {
	var hexMapping = [
			/* [&quot;\\x21\\&quot;, &quot;!&quot;], [&quot;\\x3f\\&quot;, &quot;?&quot;], [&quot;\\x2c\\&quot;, &quot;,&quot;], [&quot;\\x3a\\&quot;, &quot;:&quot;], [&quot;\\x2e\\&quot;, &quot;.&quot;], [&quot;\\xa0\\&quot;, &quot; &quot;], [&quot;\\xad\\&quot;, &quot; &quot;], [&quot;\\x2d\\&quot;, &quot;-&quot;], [&quot;\\x5b\\&quot;, &quot;[&quot;], [&quot;\\x5d\\&quot;, &quot;]&quot;], [&quot;\\x5c\\&quot;, &quot;\\&quot;]*/ 
			[&quot;\\x22\\&quot;, /&quot;/g], [&quot;\\x23\\&quot;, /#/g], [&quot;\\x24\\&quot;, /\$/g], [&quot;\\x25\\&quot;, /%/g], [&quot;\\x26\\&quot;, /&amp;/g], [&quot;\\x27\\&quot;, /&apos;/g],
			[&quot;\\x2a\\&quot;, /\*/g], [&quot;\\x2b\\&quot;, /\+/g], [&quot;\\x2f\\&quot;, /\//g], [&quot;\\x3b\\&quot;, /;/g],
			[&quot;\\x3c\\&quot;, /&lt;/g], [&quot;\\x3d\\&quot;, /=/g], [&quot;\\x3e\\&quot;, /&gt;/g], [&quot;\\x40\\&quot;, /@/g], 
			[&quot;\\x5e\\&quot;, /\^/g], [&quot;\\x5f\\&quot;, /_/g], [&quot;\\x60\\&quot;, /`/g], [&quot;\\x7b\\&quot;, /{/g], [&quot;\\x7c\\&quot;, /\|/g], [&quot;\\x7d\\&quot;, /}/g], 
			[&quot;\\x7e\\&quot;, /~/g], [&quot;\\xa1\\&quot;, /¡/g], [&quot;\\xa2\\&quot;, /¢/g], [&quot;\\xa3\\&quot;, /£/g], [&quot;\\xa4\\&quot;, /¤/g], [&quot;\\xa5\\&quot;, /¥/g],
			[&quot;\\xa6\\&quot;, /¦/g], [&quot;\\xa7\\&quot;, /§/g], [&quot;\\xa8\\&quot;, /¨/g], [&quot;\\xa9\\&quot;, /©/g], [&quot;\\xaa\\&quot;, /ª/g], [&quot;\\xab\\&quot;, /«/g], [&quot;\\xac\\&quot;, /¬/g], [&quot;\\xae\\&quot;, /®/g],
			[&quot;\\xaf\\&quot;, /¯/g], [&quot;\\xb0\\&quot;, /°/g], [&quot;\\xb1\\&quot;, /±/g], [&quot;\\xb2\\&quot;, /²/g], [&quot;\\xb3\\&quot;, /³/g], [&quot;\\xb4\\&quot;, /´/g], [&quot;\\xb5\\&quot;, /µ/g], [&quot;\\xb6\\&quot;, /¶/g],
			[&quot;\\xb7\\&quot;, /·/g], [&quot;\\xb8\\&quot;, /¸/g], [&quot;\\xb9\\&quot;, /¹/g], [&quot;\\xba\\&quot;, /º/g], [&quot;\\xbb\\&quot;, /»/g], [&quot;\\xbc\\&quot;, /¼/g], [&quot;\\xbd\\&quot;, /½/g], [&quot;\\xbe\\&quot;, /¾/g], [&quot;\\xbf\\&quot;, /¿/],
			[&quot;\\xc0\\&quot;, /À/g], [&quot;\\xc1\\&quot;, /Á/g], [&quot;\\xc2\\&quot;, /Â/g], [&quot;\\xc3\\&quot;, /Ã/g], [&quot;\\xc4\\&quot;, /Ä/g], [&quot;\\xc5\\&quot;, /Å/g], [&quot;\\xc6\\&quot;, /Æ/g], [&quot;\\xc7\\&quot;, /Ç/g], [&quot;\\xc8\\&quot;, /È/g],
			[&quot;\\xc9\\&quot;, /É/g], [&quot;\\xca\\&quot;, /Ê/g], [&quot;\\xcb\\&quot;, /Ë/g], [&quot;\\xcc\\&quot;, /Ì/g], [&quot;\\xcd\\&quot;, /Í/g], [&quot;\\xce\\&quot;, /Î/g], [&quot;\\xcf\\&quot;, /Ï/g], [&quot;\\xd0\\&quot;, /Ð/g], [&quot;\\xd1\\&quot;, /Ñ/g],
			[&quot;\\xd2\\&quot;, /Ò/g], [&quot;\\xd3\\&quot;, /Ó/g], [&quot;\\xd4\\&quot;, /Ô/g], [&quot;\\xd5\\&quot;, /Õ/g], [&quot;\\xd6\\&quot;, /Ö/g], [&quot;\\xd7\\&quot;, /×/g], [&quot;\\xd8\\&quot;, /Ø/g], [&quot;\\xd9\\&quot;, /Ù/g], [&quot;\\xda\\&quot;, /Ú/g],
			[&quot;\\xdb\\&quot;, /Û/g], [&quot;\\xdc\\&quot;, /Ü/g], [&quot;\\xdd\\&quot;, /Ý/g], [&quot;\\xde\\&quot;, /Þ/g], [&quot;\\xdf\\&quot;, /ß/g], [&quot;\\xe0\\&quot;, /à/g], [&quot;\\xe1\\&quot;, /á/g], [&quot;\\xe2\\&quot;, /â/g], [&quot;\\xe3\\&quot;, /ã/g],
			[&quot;\\xe4\\&quot;, /ä/g], [&quot;\\xe5\\&quot;, /å/g], [&quot;\\xe6\\&quot;, /æ/g], [&quot;\\xe7\\&quot;, /ç/g], [&quot;\\xe8\\&quot;, /è/g], [&quot;\\xe9\\&quot;, /é/g], [&quot;\\xea\\&quot;, /ê/g], [&quot;\\xeb\\&quot;, /ë/g], [&quot;\\xec\\&quot;, /ì/g],
			[&quot;\\xed\\&quot;, /í/g], [&quot;\\xee\\&quot;, /î/g], [&quot;\\xef\\&quot;, /ï/g], [&quot;\\xf0\\&quot;, /ð/g], [&quot;\\xf1\\&quot;, /ñ/g], [&quot;\\xf2\\&quot;, /ò/g], [&quot;\\xf3\\&quot;, /ó/g], [&quot;\\xf4\\&quot;, /ô/g], [&quot;\\xf5\\&quot;, /õ/g],
			[&quot;\\xf6\\&quot;, /ö/g], [&quot;\\xf7\\&quot;, /÷/g], [&quot;\\xf8\\&quot;, /ø/g], [&quot;\\xf9\\&quot;, /ù/g], [&quot;\\xfa\\&quot;, /ú/g], [&quot;\\xfb\\&quot;, /û/g], [&quot;\\xfc\\&quot;, /ü/g], [&quot;\\xfd\\&quot;, /ý/g], [&quot;\\xfe\\&quot;, /þ/g],
			[&quot;\\xff\\&quot;, /ÿ/g], [&quot;\\x91\\&quot;, /‘/g], [&quot;\\x92\\&quot;, /’/g], [&quot;\\x80\\&quot;, /€/g], [&quot;\\x83\\&quot;, /ƒ/g], [&quot;\\x85\\&quot;, /…/g], [&quot;\\x86\\&quot;, /†/g], [&quot;\\x87\\&quot;, /‡/g], [&quot;\\x88\\&quot;, /ˆ/g],
			[&quot;\\x89\\&quot;, /‰/g], [&quot;\\x8a\\&quot;, /Š/g], [&quot;\\x8b\\&quot;, /‹/g], [&quot;\\x8c\\&quot;, /Œ/g], [&quot;\\x8e\\&quot;, /Ž/g], [&quot;\\x93\\&quot;, /“/g], [&quot;\\x94\\&quot;, /”/g], [&quot;\\x95\\&quot;, /•/g], [&quot;\\x96\\&quot;, /–/g],
			[&quot;\\x97\\&quot;, /—/g], [&quot;\\x98\\&quot;, /˜/g], [&quot;\\x99\\&quot;, /™/g], [&quot;\\x9a\\&quot;, /š/g], [&quot;\\x9b\\&quot;, /›/g], [&quot;\\x9c\\&quot;, /œ/g], [&quot;\\x9e\\&quot;, /ž/g], [&quot;\\x9f\\&quot;, /Ÿ/g], [&quot;\\x2079\\&quot;, /⁹/g],
			[&quot;\\x0a\\&quot;, /\n/g], [&quot;\\x0d\\&quot;, /\r/g]
			];
	
	if (result != null){
		for(var i = 0; i &lt; hexMapping.length; i++){
			result = result.replace(hexMapping[i][1], hexMapping[i][0]);
		}		

		var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
		for(var i = 0; i &lt; replaceList.length; i++){
			do{
				result = result.replace(replaceList[i][1], replaceList[i][0]);
			}while(result.indexOf(replaceList[i][0]) &gt; -1);
		}
	}
	
	return result;
}


function hexMappingReservatedChars(result) {
	var pattern = [[/\\T\\/g, &quot;&amp;&quot; ], [/\\R\\/g, &apos;~&apos;], [/\\E\\/g, &apos;\\&apos;], [/\\F\\/g, &apos;|&apos;], [/\\S\\/g, &apos;^&apos;]];
	
	for(var i = 0; i &lt; pattern.length; i++){
		result = result.replace(pattern[i][0], pattern[i][1]);
	}
	
	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fde5f48b-6860-49be-a9ab-dfb0e4ba3b97</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790008</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>06d6a876-8422-48fd-9457-247e615c6495</id>
      <nextMetaDataId>3</nextMetaDataId>
      <name>ACCIDENT_DISCHARGE_BUS</name>
      <description>Descrição:&#xd;
Canal BUS dedicado ao contexto CUF (comunicação com IMTHOM) cuja responsabilidade passa por comunicar com API deste sistema externo de forma a dar alta de sinistro, devolvendo ao canal ACCIDENT_DISCHARGE a resposta (alterada) devolvida pela API do sistema externo.&#xd;
&#xd;
Documentação:&#xd;
https://b-simple.atlassian.net/wiki/x/AgAlEQ&#xd;
&#xd;
Versão:&#xd;
0.0.1&#xd;
&#xd;
Dependências:&#xd;
- getIdentificador()&#xd;
- getAccidentIncapacityTypeByCode()&#xd;
- getPractitionerByNumMecanografico()&#xd;
- generateLogMsg()&#xd;
- DateUtc()&#xd;
- httpPost()&#xd;
&#xd;
Canais interligados:&#xd;
- ACCIDENT_DISCHARGE&#xd;
&#xd;
Variáveis de ambiente:&#xd;
- FhirServer_IMTHOM_Host&#xd;
- Api_Force_Checkin_Username&#xd;
- Api_Force_Checkin_Password&#xd;
- MotivoAltaDescr&#xd;
- FhirServer_IMTHOM_User&#xd;
- FhirServer_IMTHOM_Pass&#xd;
</description>
      <revision>3</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>apiResponse</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var request = msg;

var returnValue = true;

var processoSinistroIntRefExt = getIdentificador(msg[&apos;sinistroIdentificadores&apos;],&quot;EpisodeOfCare.id&quot;); //mandatory
var encounterId;			//Mandatory
var dataAlta;				//Mandatory

var numSequencial = msg[&apos;doente&apos;][&apos;numSequencial&apos;];

channelMap.put(&apos;numSequencial&apos;,numSequencial);

if ( processoSinistroIntRefExt &amp;&amp; processoSinistroIntRefExt.length &gt; 0 ){
	channelMap.put(&apos;processoSinistroIntRefExt&apos;,processoSinistroIntRefExt);
}else{
	returnValue = false;
}

if ( request.dataAlta &amp;&amp; request.dataAlta.length &gt; 0 ){
	dataAlta = request.dataAlta;
	channelMap.put(&apos;dataAlta&apos;,dataAlta);
}else{
	returnValue = false;
}

encounterId = getIdentificador(msg[&apos;episodioIdentificadores&apos;],&quot;Encounter.id&quot;);

if(encounterId){
	channelMap.put(&apos;visitaRefExt&apos;,encounterId);
}else{
	returnValue = false;
}

return returnValue;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">ewogICAgInNpbmlzdHJvSWRlbnRpZmljYWRvcmVzIjogW3sKICAgICAgICAgICJzaXN0ZW1hQ29kaWZpY2Fkb3IiOiAiRXBpc29kZU9mQ2FyZS5pZCIsCiAgICAgICAgICAiY29kaWdvIjogbnVsbAogICAgICAgIH0sewogICAgICAgICAgInNpc3RlbWFDb2RpZmljYWRvciI6ICJFcGlzb2RlT2ZDYXJlLmlkZW50aWZpZXIiLAogICAgICAgICAgImNvZGlnbyI6IG51bGwKICAgICAgICB9CgldLAogICAgIm1vdGl2b0FsdGFJZGVudGlmaWNhZG9yZXMiOiBbIAogICAgICB7IAogICAgICAgICJzaXN0ZW1hQ29kaWZpY2Fkb3IiOiBudWxsLCAKICAgICAgICAiY29kaWdvIjogbnVsbCAKICAgICAgfQogICAgXSwKICAgICJtb3Rpdm9BbHRhRGVzY3IiOiBudWxsLCAKICAgICJkYXRhQWx0YSI6IG51bGwsCiAgICAib2JzIjogbnVsbCwKICAgICJ0aXBvSW5jYXBhY2lkYWRlSWRlbnRpZmljYWRvcmVzIjogWyAKICAgICAgeyAKICAgICAgICAic2lzdGVtYUNvZGlmaWNhZG9yIjogbnVsbCwgCiAgICAgICAgImNvZGlnbyI6IG51bGwgCiAgICAgIH0KICAgIF0sCiAgICAidGlwb0luY2FwYWNpZGFkZURlc2NyIjogbnVsbCwKICAgICJlcGlzb2Rpb0lkZW50aWZpY2Fkb3JlcyI6IFsgCiAgICAgIHsgCiAgICAgICAgInNpc3RlbWFDb2RpZmljYWRvciI6ICJFbmNvdW50ZXIuaWQiLCAKICAgICAgICAiY29kaWdvIjogIjEyMzQiIAogICAgICB9CiAgICBdLAogICAgIm5pdmVsSW5jYXBhY2lkYWRlIjogbnVsbCwgCiAgICAiZGlhc0luY2FwYWNpZGFkZSI6IG51bGwsIAogICAgImRhdGFQcmV2aXN0YUFsdGEiOiBudWxsLAoJInByb2Zpc3Npb25hbCI6IHsKICAgICAgImlkIiA6IG51bGwsCiAgICAgICJsb2dpbiIgOiBudWxsLAogICAgICAibm9tZSIgOiBudWxsLAogICAgICAibnVtTWVjYW5vZ3JhZmljbyIgOiBudWxsLAogICAgICAibnVtT3JkZW0iIDogbnVsbCwKICAgICAgIm51bUZ1bmNpb25hcmlvIiA6IG51bGwsCiAgICAgICJwZXJmaWwiIDogbnVsbCwKICAgICAgImludFJlZkV4dCIgOiBudWxsCiAgICB9Cn0=</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>2</metaDataId>
          <name>API Call</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host>${FhirServer_IMTHOM_Host}/fhir/EpisodeOfCare/${processoSinistroIntRefExt}/$Discharge</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map">
              <entry>
                <string>Authorization</string>
                <list>
                  <string>Basic ${basicAuth}</string>
                </list>
              </entry>
              <entry>
                <string>Content-Type</string>
                <list>
                  <string>application/json</string>
                </list>
              </entry>
              <entry>
                <string>ImpersonateUser</string>
                <list>
                  <string>interfaces_pc</string>
                </list>
              </entry>
            </headers>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|)</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content>${message.encodedData}</content>
            <contentType>application/json</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>API Username and Password encode</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// Encode username and password

var DatatypeConverter = Packages.javax.xml.bind.DatatypeConverter;
var auth = $(&apos;Api_Force_Checkin_Username&apos;) + &quot;:&quot; + $(&apos;Api_Force_Checkin_Password&apos;);

var encodedAuth = DatatypeConverter.printBase64Binary(new java.lang.String(auth).getBytes(&quot;UTF-8&quot;));
channelMap.put(&apos;basicAuth&apos;, encodedAuth);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Build Request Body</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>var request = msg;

var returnValue = true;

//var processoSinistroIntRefExt; //mandatory
//var encounterId;			//Mandatory
//var dataAlta;				//Mandatory
tmp[&apos;parameter&apos;][1][&apos;valueDateTime&apos;] = $(&apos;dataAlta&apos;);

tmp[&apos;parameter&apos;][3][&apos;part&apos;][1][&apos;valueReference&apos;][&apos;reference&apos;] = &apos;Encounter/&apos; + $(&apos;visitaRefExt&apos;);

var motivoAltaId = getIdentificador(msg[&apos;motivoAltaIdentificadores&apos;], &quot;MotivoAlta.id&quot;);
tmp[&apos;parameter&apos;][0][&apos;valueCoding&apos;][&apos;code&apos;] = motivoAltaId;

var motivoAltaDescr = msg[&apos;motivoAltaDescr&apos;];
tmp[&apos;parameter&apos;][0][&apos;valueCoding&apos;][&apos;display&apos;] = $(&apos;MotivoAltaDescr&apos;);

tmp[&apos;parameter&apos;][0][&apos;valueCoding&apos;][&apos;system&apos;]= $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/TreatmentDischargeReason&apos;;

tmp[&apos;parameter&apos;][3][&apos;part&apos;][0][&apos;valueCoding&apos;][&apos;system&apos;] = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/AccidentIncapacityType&apos;;

var tipoIncapacidadeId = getIdentificador(msg[&apos;tipoIncapacidadeIdentificadores&apos;], &quot;AccidentIncapacityType.id&quot;);

tmp[&apos;parameter&apos;][3][&apos;part&apos;][0][&apos;valueCoding&apos;][&apos;code&apos;] = getAccidentIncapacityTypeByCode(tipoIncapacidadeId);

var tipoIncapacidadeDescr = msg[&apos;tipoIncapacidadeDescr&apos;];
tmp[&apos;parameter&apos;][3][&apos;part&apos;][0][&apos;valueCoding&apos;][&apos;display&apos;] = tipoIncapacidadeDescr;

var obs = msg[&apos;obs&apos;];
if (obs){
	tmp[&apos;parameter&apos;][2][&apos;valueString&apos;] = obs;
}

var nivelIncapacidade = msg[&apos;nivelIncapacidade&apos;];
tmp[&apos;parameter&apos;][3][&apos;part&apos;][2][&apos;valuePositiveInt&apos;] = nivelIncapacidade;

var diasIncapacidade = msg[&apos;diasIncapacidade&apos;];
tmp[&apos;parameter&apos;][3][&apos;part&apos;][3][&apos;valuePositiveInt&apos;] = diasIncapacidade;

var dataPresvistaAlta = msg[&apos;dataPrevistaAlta&apos;];
tmp[&apos;parameter&apos;][3][&apos;part&apos;][4][&apos;valueDateTime&apos;] = (dataPresvistaAlta != null &amp;&amp; dataPresvistaAlta != &apos;&apos;) ? dataPresvistaAlta : null;

// Validar a estrutura com THOM
if (typeof(msg[&apos;profissional&apos;]) != &apos;undefined&apos;){
	var practitioner = getPractitionerByNumMecanografico(msg[&apos;profissional&apos;][&apos;numMecanografico&apos;]);
	
	if(practitioner.statusCode === &quot;200&quot;){
		if (practitioner.response != null) {
			tmp[&apos;parameter&apos;][3][&apos;part&apos;][5][&apos;valueReference&apos;][&apos;reference&apos;] = &apos;Practitioner/&apos; + practitioner.response.id;
			tmp[&apos;parameter&apos;][3][&apos;part&apos;][5][&apos;valueReference&apos;][&apos;display&apos;] = (msg[&apos;profissional&apos;][&apos;nome&apos;] != &apos;&apos; &amp;&amp; msg[&apos;profissional&apos;][&apos;nome&apos;] != null) ? msg[&apos;profissional&apos;][&apos;nome&apos;] : null;
		}
	}
}

return tmp;</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICAgInNpbmlzdHJvSWRlbnRpZmljYWRvcmVzIjogW3sKICAgICAgICAgICJzaXN0ZW1hQ29kaWZpY2Fkb3IiOiAiRXBpc29kZU9mQ2FyZS5pZCIsCiAgICAgICAgICAiY29kaWdvIjogbnVsbAogICAgICAgIH0sewogICAgICAgICAgInNpc3RlbWFDb2RpZmljYWRvciI6ICJFcGlzb2RlT2ZDYXJlLmlkZW50aWZpZXIiLAogICAgICAgICAgImNvZGlnbyI6IG51bGwKICAgICAgICB9CgldLAogICAgIm1vdGl2b0FsdGFJZGVudGlmaWNhZG9yZXMiOiBbIAogICAgICB7IAogICAgICAgICJzaXN0ZW1hQ29kaWZpY2Fkb3IiOiBudWxsLCAKICAgICAgICAiY29kaWdvIjogbnVsbCAKICAgICAgfQogICAgXSwKICAgICJtb3Rpdm9BbHRhRGVzY3IiOiBudWxsLCAKICAgICJkYXRhQWx0YSI6IG51bGwsCiAgICAib2JzIjogbnVsbCwKICAgICJ0aXBvSW5jYXBhY2lkYWRlSWRlbnRpZmljYWRvcmVzIjogWyAKICAgICAgeyAKICAgICAgICAic2lzdGVtYUNvZGlmaWNhZG9yIjogbnVsbCwgCiAgICAgICAgImNvZGlnbyI6IG51bGwgCiAgICAgIH0KICAgIF0sCiAgICAidGlwb0luY2FwYWNpZGFkZURlc2NyIjogbnVsbCwKICAgICJlcGlzb2Rpb0lkZW50aWZpY2Fkb3JlcyI6IFsgCiAgICAgIHsgCiAgICAgICAgInNpc3RlbWFDb2RpZmljYWRvciI6ICJFbmNvdW50ZXIuaWQiLCAKICAgICAgICAiY29kaWdvIjogIjEyMzQiIAogICAgICB9CiAgICBdLAogICAgIm5pdmVsSW5jYXBhY2lkYWRlIjogbnVsbCwgCiAgICAiZGlhc0luY2FwYWNpZGFkZSI6IG51bGwsIAogICAgImRhdGFQcmV2aXN0YUFsdGEiOiBudWxsLAoJInByb2Zpc3Npb25hbCI6IHsKICAgICAgImlkIiA6IG51bGwsCiAgICAgICJsb2dpbiIgOiBudWxsLAogICAgICAibm9tZSIgOiBudWxsLAogICAgICAibnVtTWVjYW5vZ3JhZmljbyIgOiBudWxsLAogICAgICAibnVtT3JkZW0iIDogbnVsbCwKICAgICAgIm51bUZ1bmNpb25hcmlvIiA6IG51bGwsCiAgICAgICJwZXJmaWwiIDogbnVsbCwKICAgICAgImludFJlZkV4dCIgOiBudWxsCiAgICB9Cn0=</inboundTemplate>
            <outboundTemplate encoding="base64">ewogICJyZXNvdXJjZVR5cGUiOiAiUGFyYW1ldGVycyIsCiAgInBhcmFtZXRlciI6IFsKICAgIHsKICAgICAgIm5hbWUiOiAiUmVhc29uSWQiLAogICAgICAidmFsdWVDb2RpbmciOiB7CiAgICAgICAgInN5c3RlbSI6IG51bGwsCiAgICAgICAgImNvZGUiOiBudWxsLAogICAgICAgICJkaXNwbGF5IjogbnVsbAogICAgICB9CiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJEaXNjaGFyZ2VEYXRlIiwKICAgICAgInZhbHVlRGF0ZVRpbWUiOiBudWxsCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJOb3RlcyIsCiAgICAgICJ2YWx1ZVN0cmluZyI6ICJTZW0gbm90YXMiCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJBY2NpZGVudEluY2FwYWNpdHkiLAogICAgICAicGFydCI6IFsKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJJbmNhcGFjaXR5VHlwZUlkIiwKICAgICAgICAgICJ2YWx1ZUNvZGluZyI6IHsKICAgICAgICAgICAgInN5c3RlbSI6IG51bGwsCiAgICAgICAgICAgICJjb2RlIjogbnVsbCwKICAgICAgICAgICAgImRpc3BsYXkiOiBudWxsCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJFbmNvdW50ZXIiLAogICAgICAgICAgInZhbHVlUmVmZXJlbmNlIjogewogICAgICAgICAgICAicmVmZXJlbmNlIjogbnVsbAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAiSW5jYXBhY2l0eUxldmVsIiwKICAgICAgICAgICJ2YWx1ZVBvc2l0aXZlSW50IjogbnVsbAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAiSW5jYXBhY2l0eURheXMiLAogICAgICAgICAgInZhbHVlUG9zaXRpdmVJbnQiOiBudWxsCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJEaXNjaGFyZ2VEYXRlRXN0aW1hdGUiLAogICAgICAgICAgInZhbHVlRGF0ZVRpbWUiOiBudWxsCiAgICAgICAgfSwKCQl7CiAgICAgCQkibmFtZSI6ICJEaXNjaGFyZ2VQcmFjdGl0aW9uZXIiLAogICAgICAJCSJ2YWx1ZVJlZmVyZW5jZSI6IHsKICAgICAgICAJCSJyZWZlcmVuY2UiOiBudWxsLAogICAgICAgIAkJImRpc3BsYXkiOiBudWxsCiAgICAgIAkJfQogICAgCX0KICAgICAgXQogICAgfQogIF0KfQ==</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>API response processor</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try{
	msg = JSON.parse(msg); // porque data type está como &quot;Raw Data&quot;
	try{
		if (typeof(msg[&apos;resourceType&apos;]) != &apos;undefined&apos;){
			checkin = {};
			error = {};
			
			if (msg[&apos;resourceType&apos;] == &apos;OperationOutcome&apos; ){
				
				msg[&apos;issue&apos;].find(function(issue){
					switch(issue[&apos;severity&apos;]){

						case &apos;fatal&apos;:
							tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
							tmp[&apos;estadoIntegracaoId&apos;] = 4;
							error.codigo = &apos;400&apos;;
							error.descr = issue[&apos;diagnostics&apos;];
							tmp[&apos;erro&apos;] = error;
							responseStatus = SENT;
							channelMap.put(&apos;httpStatus&apos;, &apos;200&apos;);
							break;
						case &apos;error&apos;:
							tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
							tmp[&apos;estadoIntegracaoId&apos;] = 4;
							error.codigo = &apos;400&apos;;
							error.descr = issue[&apos;diagnostics&apos;];
							tmp[&apos;erro&apos;] = error;
							responseStatus = SENT;
							channelMap.put(&apos;httpStatus&apos;, &apos;200&apos;);
							break;
						case &apos;warning&apos;:
							tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
							tmp[&apos;estadoIntegracaoId&apos;] = 3;
							error.codigo = null;
							error.descr = issue[&apos;diagnostics&apos;];
							tmp[&apos;erro&apos;] = error;
							responseStatus = SENT;
							channelMap.put(&apos;httpStatus&apos;, &apos;200&apos;);
							break;
						case &apos;information&apos;:
							tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
							tmp[&apos;estadoIntegracaoId&apos;] = 3;
							tmp[&apos;erro&apos;] = null;
							responseStatus = SENT;
							channelMap.put(&apos;httpStatus&apos;, &apos;200&apos;);
							break;
						case &apos;success&apos;:
							tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
							tmp[&apos;estadoIntegracaoId&apos;] = 3;
							tmp[&apos;erro&apos;] = null;
							responseStatus = SENT;
							channelMap.put(&apos;httpStatus&apos;, &apos;200&apos;);
							break;
						default:
							tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
							tmp[&apos;estadoIntegracaoId&apos;] = 3;
							error.codigo = &apos;500&apos;;
							error.descr = &apos;Internal API Error&apos;;
							tmp[&apos;erro&apos;] = error;
							responseStatus = ERROR;
							channelMap.put(&apos;httpStatus&apos;, &apos;500&apos;);
							break;
						
					}

				});
			
			} else {
				
				tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
				tmp[&apos;estadoIntegracaoId&apos;] = 4;
				error = {};
				error.codigo = &apos;503&apos;;
				error.descr = &apos;Unexpected External API Error&apos;;
				tmp[&apos;erro&apos;] = error;
				responseStatus = ERROR;
				channelMap.put(&apos;httpStatus&apos;, &apos;200&apos;);					
			}

		}else {
			tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
			tmp[&apos;estadoIntegracaoId&apos;] = 4;
			error = {};
			error.codigo = &apos;503&apos;;
			error.descr = &apos;Unexpected External API Error&apos;;
			tmp[&apos;erro&apos;] = error;
			responseStatus = ERROR;
			channelMap.put(&apos;httpStatus&apos;, &apos;200&apos;);	
		}
		

		responseMap.put(&apos;apiResponse&apos;, JSON.stringify(tmp));
		
	}catch(ex){

		//logger.info(&quot;cai aqui: &quot; + ex );

		tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
		tmp[&apos;estadoIntegracaoId&apos;] = 4;
		error = {};
		error.codigo = null;
		error.descr = ex;
		tmp[&apos;erro&apos;] = error;
		responseStatus = ERROR;
		channelMap.put(&apos;httpStatus&apos;, &apos;500&apos;);
		responseMap.put(&apos;apiResponse&apos;, JSON.stringify(tmp));
	}
}catch(ex){
	responseStatus = ERROR;
	if (typeof($(&apos;responseStatusLine&apos;)) != &apos;undefined&apos; &amp;&amp;  $(&apos;responseStatusLine&apos;) != &apos;&apos; ){
		tmp[&apos;sinistroIdentificadores&apos;][0][&apos;codigo&apos;] = $(&apos;processoSinistroIntRefExt&apos;);
		tmp[&apos;estadoIntegracaoId&apos;] = 4;
		error = {};
		error.codigo = $(&apos;responseStatusLine&apos;).contains(&apos;401&apos;) ? &apos;401&apos; : &apos;500&apos;;
		error.descr = $(&apos;responseStatusLine&apos;).contains(&apos;401&apos;) ? &apos;Unauthorized&apos; : &apos;Unexpected External API Error&apos;;
		tmp[&apos;erro&apos;] = error;
		channelMap.put(&apos;httpStatus&apos;, &apos;200&apos;);
		responseMap.put(&apos;apiResponse&apos;, JSON.stringify(tmp));
	}else{
		responseMap.put(&apos;apiResponse&apos;, null);
	}
	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICAgInJlc291cmNlVHlwZSI6ICJPcGVyYXRpb25PdXRjb21lIiwKICAgICJpZCI6ICI4ODY5NTQ5NS02MjlhLTExZWUtOGVjYy0wMDUwNTY5ZmU4YTgiLAogICAgInRleHQiOiB7CiAgICAgICAgInN0YXR1cyI6ICJnZW5lcmF0ZWQiLAogICAgICAgICJkaXYiOiAiPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48aHIvPjx1bD48bGk+PHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogYm9sZDtcIj5GQVRBTDwvc3Bhbj48dWw+PGxpPiBUeXBlOiA8c3Bhbj5FWENFUFRJT048L3NwYW4+PC9saT48bGk+IERpYWdub3N0aWNzOiA8c3Bhbj5DaWJlcmJpdC5FbnRlcnByaXNlLkRpYWdub3N0aWNzLkV4MkJ1ZzogQnVnQ2hlY2s6SXNOb3ROdWxsIGZhaWxlZC4gRW50cnlJZCAnODg2OTU0OTUtNjI5YS0xMWVlLThlY2MtMDA1MDU2OWZlOGE4JyBub3QgZm91bmQhPC9zcGFuPjwvbGk+PC91bD48L2xpPjwvdWw+PC9kaXY+IgogICAgfSwKICAgICJpc3N1ZSI6IFsKICAgICAgICB7CiAgICAgICAgICAgICJzZXZlcml0eSI6ICJmYXRhbCIsCiAgICAgICAgICAgICJjb2RlIjogImV4Y2VwdGlvbiIsCiAgICAgICAgICAgICJkaWFnbm9zdGljcyI6ICJDaWJlcmJpdC5FbnRlcnByaXNlLkRpYWdub3N0aWNzLkV4MkJ1ZzogQnVnQ2hlY2s6SXNOb3ROdWxsIGZhaWxlZC4gRW50cnlJZCAnODg2OTU0OTUtNjI5YS0xMWVlLThlY2MtMDA1MDU2OWZlOGE4JyBub3QgZm91bmQhIgogICAgICAgIH0KICAgIF0KfQ==</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInNpbmlzdHJvSWRlbnRpZmljYWRvcmVzIjogW3sKICAgICAgICAgICJzaXN0ZW1hQ29kaWZpY2Fkb3IiOiAiRXBpc29kZU9mQ2FyZS5pZCIsCiAgICAgICAgICAiY29kaWdvIjogbnVsbAogICAgICAgIH0KCV0sCgkiZXN0YWRvSW50ZWdyYWNhb0lkIjogbnVsbCwKCSJlcnJvIjogbnVsbAp9</outboundTemplate>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
logger.info(generateLogMsg(&quot;accident-discharge-bus&quot;, message, null, null, null, null, null));
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>false</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>NUMSEQUENCIAL</name>
            <type>STRING</type>
            <mappingName>numSequencial</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SINISTROREFEXT</name>
            <type>STRING</type>
            <mappingName>processoSinistroIntRefExt</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>DATAALTA</name>
            <type>STRING</type>
            <mappingName>dataAlta</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISITAREFEXT</name>
            <type>STRING</type>
            <mappingName>visitaRefExt</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1728295151964</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>60</pruneMetaDataDays>
            <pruneContentDays>60</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>c25a6d1c-7154-457f-8439-db6753a0e5ba</id>
            <name>ACK Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089556</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>ACK build messages Library</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>bf581ddc-6233-464c-a6e6-874a3800cfb0</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>b6d68590-ac13-4d9f-a89c-6808f98fd974</string>
              <string>7ec636a5-c259-415e-9da9-564aa4bf0672</string>
              <string>4c8fbb62-1ca4-4411-8bf1-4b619448830e</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>070cf4a3-def7-4c23-b200-e7337ab0f153</string>
              <string>6ea09eb4-6715-415b-a316-e198babef289</string>
              <string>2980f7b0-4597-4f7a-a1de-4dfcd19b0540</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>41717973-8a73-452a-8319-9aa627759cac</string>
              <string>7fe76b86-ac84-4140-afef-92dd9ec13ae9</string>
              <string>261b007b-b999-4ecd-8998-837c62a32c27</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>18320ce6-5da5-4671-a4bc-9705e45ccdbb</string>
              <string>5e5544cd-b85e-4932-a96f-5cad28e705b8</string>
              <string>d9d6b5f5-edd1-4e0c-8ba5-c6f2a3365a5c</string>
              <string>c8b97a44-0120-4afc-a32f-bdd66a3bc089</string>
              <string>939c8b83-1d56-4bf4-b289-113c1b14e1b3</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>ed32950f-b0c1-47ee-931f-de451ed6a172</string>
              <string>a3530d49-3114-40a0-90cb-ce4914aca839</string>
              <string>cbafbd6e-0e63-435e-88ae-618619ca42a3</string>
              <string>15567a1f-541e-45e3-94cb-e843e059152b</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>545149dd-520a-4a1d-80c4-54052e6d380a</string>
              <string>ec6680ee-83f9-482c-b034-8614c6bce636</string>
              <string>9318d741-059f-440a-b2c9-6fc5c8ed473f</string>
              <string>a08e87c0-e56e-4f95-8f12-3b7c69eded8d</string>
              <string>0242838f-5c27-4ae4-838c-c0f0e267a80b</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>3ce8e5be-dae2-4413-9c4f-15bac6049cb7</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>373e79bd-82f0-466b-9c1b-042e6e095b36</string>
              <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>2def6f76-6543-4127-a6bb-959b3cc38f7f</string>
              <string>e574181a-e3e1-49b6-9d71-78d846d0daae</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>34349ce2-b1e2-4bfc-992c-1f6e3cc281d9</string>
              <string>99d0bf51-bb19-4bbd-adbd-4b606148e9a4</string>
              <string>0e98b91f-3169-4733-902f-118afa2d5ebc</string>
              <string>936a0f91-1bad-49d1-852a-a895c15146ae</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>77280229-7400-4c9c-b2f6-ac099d60871f</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>a1e1cf09-3c02-489d-80f4-6305b0df80ec</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>ebb78470-f376-47b6-9455-4cf2be31e2ef</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>44168b10-92fd-45f4-acef-61c9c29b8ec4</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>3dded9e0-9a69-4467-a20f-f140bd8fe21f</string>
              <string>c8bfd286-e39f-4ab4-8bc3-d5d9c95b900a</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>a5afc88e-7d8f-4743-8e9c-5389edf3e35c</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>da62ba87-3c04-44da-b011-8b0e52b8891b</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>41c81aeb-b462-4891-a0ea-673c6017218c</string>
              <string>9401b329-8281-41f2-9da1-4cba8d3babd3</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>5611c4d6-0a58-4ed6-bfe2-efa1f2294f07</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>1d6b1caf-4821-4230-8745-54b5cecf2ba3</string>
              <string>cfd7159f-485a-42c8-8a95-413a074f53d8</string>
              <string>89b1df84-4519-48a9-ae1f-3ae158692b3d</string>
              <string>fc11ccb5-476e-485e-a5db-6ac8d460eb41</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>a0b77f2b-f4b0-4ed7-9b27-fe970a0634b4</string>
              <string>c2cd049b-a261-47b5-9190-b55229521a62</string>
              <string>04596ec4-bf23-44d8-92c9-14a08643d97e</string>
              <string>ae0b3b5b-6437-4586-8928-078fe8642a15</string>
              <string>615a7abb-c95b-41c1-a21e-99c9b8b05fb1</string>
              <string>5d0603d7-9d9a-409b-adf8-940a46be63a1</string>
              <string>fcb46535-635a-4858-917a-e976107bdba4</string>
              <string>048f2703-af21-4569-bf3b-955d189e4340</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>fab3c156-aea1-4068-800b-04a1a30b814c</string>
              <string>ac621c30-0bd6-4cc6-9bba-6f4f17c452a0</string>
              <string>61126aab-70d8-4f38-91c0-59c299bda0ad</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>86025761-218b-4205-99db-f5e1f4273da9</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>43882c7e-dcbb-44ec-b9e6-705cc6a4f6a9</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>38ba78b7-d9d0-4347-ac8d-0f2064c49a27</string>
              <string>49f8299b-3fd9-48e6-897d-f2702da9d4b2</string>
              <string>ef70a082-0f5c-46b7-ae20-8ac4e5261c57</string>
              <string>d2250d91-f3ef-4154-ba78-c0bf6955b1b7</string>
              <string>276a26a4-2cfe-47ab-9f7c-ed1c3517e687</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>c1f79f09-d8ef-4469-9a57-6a7102bc3064</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>089d31ff-a9bb-4822-8818-e197344dca47</string>
              <string>41e8684c-2279-4940-b3f9-9f1914e9cc68</string>
              <string>63a5f186-7923-433b-99ff-1526c531d35f</string>
              <string>23bbf873-536c-44b2-a6f0-2d2ab63d2828</string>
              <string>e09fd6b0-367b-4467-912b-7f8bcf8c5248</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f17bab68-7a00-4bac-b717-7ab79efa1e7d</string>
              <string>202e6b27-a55c-423d-b244-6598aaa773d7</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>99a0314f-8ddf-4396-b39d-f54934ddfee9</string>
              <string>4b9dcf36-6e79-4d05-8009-844fe670ba9d</string>
              <string>74e9f626-0758-4b79-a95c-e9a5fff5efe0</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>a21c12a2-a2c1-4e17-8b90-c34df006fc18</string>
              <string>67f8e921-4aa1-4b3f-9c36-3d55209b2099</string>
              <string>eb1c2f17-0144-45ab-93f4-50451910c465</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>158b3aff-e071-4c40-b2c4-41dc64bee216</string>
              <string>f82b4a29-6f2f-4723-af05-a7bb5f34613c</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>2739c703-c938-4f42-8d33-19d758fcd880</string>
              <string>e879c60d-1ea5-454c-a729-6d2184f82e24</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>aa608b20-43f8-49ea-8789-2a6aa784900a</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>15ac195f-2cac-4db8-a152-7bc4a42e40bf</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>aefa6e5b-bad3-4dbf-af8a-3222f0393d1e</string>
              <string>137331af-f61f-4ec1-8296-39febdafc1d2</string>
              <string>1a8c9dcb-1052-49af-9960-c65db16e81e7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>362a4cf9-cb04-463b-82c5-cbbd1889ee9c</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>2c8d2aec-304a-4e73-884b-87d7a27d7692</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>b36a2576-ce3e-4530-8bf8-375124d3eb8d</string>
              <string>f7543395-422c-4bea-ba48-6809decf267c</string>
              <string>07b6fa93-1b3f-41d3-9bb5-6983ac32aa9e</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>b7e144f5-2ed1-43c9-b29e-b21b118d0469</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d10c1e46-1b5f-46a6-8494-5bb48bc8f26f</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>bac2ab11-2d35-44e0-b927-91ebaca6cea7</id>
                <name>getAllDestinationStatusCode</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790319</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Return ACK for all Destination Satus HL7 Code AA, AR or AE

	@param {message} message object
	@return {Object} return ackCode: AA, AR or AE ; ackDesc ; operationCode ; operationDesc
*/
function getAllDestinationStatusCode(message) {
	var result = {};
	
	for each (connMessage in message.getConnectorMessages().values().toArray()) {
		if (connMessage.getMetaDataId() &gt; 0 &amp;&amp; connMessage.getStatus() == ERROR) {
			result.ackCode = &apos;AE&apos;;
			result.ackDesc = &apos;Erro Interno&apos;;
			result.operationCode = &apos;1&apos;;
			result.operationDesc = &apos;Operação não efectuada&apos;;
		/*} else if (connMessage.getMetaDataId() &gt; 0 &amp;&amp; connMessage.getStatus() == FILTERED){
			return &apos;AR&apos;; */
		}else {
			result.ackCode = &apos;AA&apos;;
			result.ackDesc = &apos;Integrado com sucesso&apos;;
			result.operationCode = &apos;0&apos;;
			result.operationDesc = &apos;Operação efectuada com sucesso&apos;;
		}
	}

	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4b4cfe62-6125-4635-95de-4e1cd8300009</id>
                <name>getDestinationStatusCode</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788715</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Return ACK for one Destination Satus HL7 Code AA, AR or AE

	@param {String} status - destination status
	@return {Object} return return ackCode: AA, AR or AE ; ackDesc ; operationCode ; operationDesc
*/
function getDestinationStatusCode(status) {
	var result = {};
	
	if (status == &apos;SENT&apos;){  
		result.ackCode = &apos;AA&apos;;
		result.ackDesc = &apos;Integrado com sucesso&apos;;
		result.operationCode = &apos;0&apos;;
		result.operationDesc = &apos;Operação &quot;UPDATE_RECORD&quot; efectuada com sucesso&apos;;
	} else if (status == &apos;FILTERED&apos;){
		result.ackCode = &apos;AR&apos;;
		result.ackDesc = &apos;Messagem Rejeitada&apos;;
		result.operationCode = &apos;2&apos;;
		result.operationDesc = &apos;Operação &quot;UPDATE_RECORD&quot; rejeitada/filtrada &apos;;
	} else {
		result.ackCode = &apos;AE&apos;;
		result.ackDesc = &apos;Erro Interno&apos;; 
		result.operationCode = &apos;1&apos;;
		result.operationDesc = &apos;Operação &quot;UPDATE_RECORD&quot; não efectuada&apos;;
	}
	
	return result;
};</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>552e2c11-37bf-43a3-baa2-1754b361168d</id>
            <name>API Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089515</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>API functions library with utility functions for generic functions that will be invoked along the various channels, e.g. consumption of basic PatientCare services, logging of logs, etc
</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>b6d68590-ac13-4d9f-a89c-6808f98fd974</string>
              <string>7ec636a5-c259-415e-9da9-564aa4bf0672</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>070cf4a3-def7-4c23-b200-e7337ab0f153</string>
              <string>2980f7b0-4597-4f7a-a1de-4dfcd19b0540</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>4f2e8bd8-d8ce-4829-9109-17b568f1162b</string>
              <string>7fe76b86-ac84-4140-afef-92dd9ec13ae9</string>
              <string>261b007b-b999-4ecd-8998-837c62a32c27</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>18320ce6-5da5-4671-a4bc-9705e45ccdbb</string>
              <string>5e5544cd-b85e-4932-a96f-5cad28e705b8</string>
              <string>d9d6b5f5-edd1-4e0c-8ba5-c6f2a3365a5c</string>
              <string>aa608b20-43f8-49ea-8789-2a6aa784900a</string>
              <string>939c8b83-1d56-4bf4-b289-113c1b14e1b3</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>ed32950f-b0c1-47ee-931f-de451ed6a172</string>
              <string>a3530d49-3114-40a0-90cb-ce4914aca839</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>15567a1f-541e-45e3-94cb-e843e059152b</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>545149dd-520a-4a1d-80c4-54052e6d380a</string>
              <string>362a4cf9-cb04-463b-82c5-cbbd1889ee9c</string>
              <string>ec6680ee-83f9-482c-b034-8614c6bce636</string>
              <string>a08e87c0-e56e-4f95-8f12-3b7c69eded8d</string>
              <string>7ac3f48d-16c4-4449-80d5-a8103a9ac5f8</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>3ce8e5be-dae2-4413-9c4f-15bac6049cb7</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>373e79bd-82f0-466b-9c1b-042e6e095b36</string>
              <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>e574181a-e3e1-49b6-9d71-78d846d0daae</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>34349ce2-b1e2-4bfc-992c-1f6e3cc281d9</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
              <string>99d0bf51-bb19-4bbd-adbd-4b606148e9a4</string>
              <string>0e98b91f-3169-4733-902f-118afa2d5ebc</string>
              <string>936a0f91-1bad-49d1-852a-a895c15146ae</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>77280229-7400-4c9c-b2f6-ac099d60871f</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>a1e1cf09-3c02-489d-80f4-6305b0df80ec</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>ebb78470-f376-47b6-9455-4cf2be31e2ef</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>44168b10-92fd-45f4-acef-61c9c29b8ec4</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c8bfd286-e39f-4ab4-8bc3-d5d9c95b900a</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>a5afc88e-7d8f-4743-8e9c-5389edf3e35c</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>41c81aeb-b462-4891-a0ea-673c6017218c</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>5611c4d6-0a58-4ed6-bfe2-efa1f2294f07</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>1d6b1caf-4821-4230-8745-54b5cecf2ba3</string>
              <string>89b1df84-4519-48a9-ae1f-3ae158692b3d</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>fc11ccb5-476e-485e-a5db-6ac8d460eb41</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>4cbef2bc-962d-4bdb-8d13-e7145d88621c</string>
              <string>a0b77f2b-f4b0-4ed7-9b27-fe970a0634b4</string>
              <string>c2cd049b-a261-47b5-9190-b55229521a62</string>
              <string>04596ec4-bf23-44d8-92c9-14a08643d97e</string>
              <string>615a7abb-c95b-41c1-a21e-99c9b8b05fb1</string>
              <string>5d0603d7-9d9a-409b-adf8-940a46be63a1</string>
              <string>048f2703-af21-4569-bf3b-955d189e4340</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>fab3c156-aea1-4068-800b-04a1a30b814c</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>86025761-218b-4205-99db-f5e1f4273da9</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>43882c7e-dcbb-44ec-b9e6-705cc6a4f6a9</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>38ba78b7-d9d0-4347-ac8d-0f2064c49a27</string>
              <string>ef70a082-0f5c-46b7-ae20-8ac4e5261c57</string>
              <string>d2250d91-f3ef-4154-ba78-c0bf6955b1b7</string>
              <string>607f13a0-8dc9-41e4-8e1d-623a145c8c6b</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>089d31ff-a9bb-4822-8818-e197344dca47</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>41e8684c-2279-4940-b3f9-9f1914e9cc68</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>137331af-f61f-4ec1-8296-39febdafc1d2</string>
              <string>1a8c9dcb-1052-49af-9960-c65db16e81e7</string>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>99a0314f-8ddf-4396-b39d-f54934ddfee9</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>67f8e921-4aa1-4b3f-9c36-3d55209b2099</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>400af9f5-05ef-403c-82aa-67899d791953</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>b36a2576-ce3e-4530-8bf8-375124d3eb8d</string>
              <string>e879c60d-1ea5-454c-a729-6d2184f82e24</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>276a26a4-2cfe-47ab-9f7c-ed1c3517e687</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>b7e144f5-2ed1-43c9-b29e-b21b118d0469</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>aefa6e5b-bad3-4dbf-af8a-3222f0393d1e</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>15cb318d-2648-4764-b972-2ab63d540c04</id>
                <name>apiGenerateBasicAuthHeader</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791559</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
 Generates an HTTP Basic Authentication header using the provided username and password.
 The credentials are encoded in Base64 and formatted appropriately for inclusion in HTTP request headers.
 This function is useful for creating headers for HTTP requests that require Basic Authentication.
 
 @param {String} user - The username to be included in the HTTP Basic Auth header.
 @param {String} pass - The password to be included in the HTTP Basic Auth header.
 @return {String} The HTTP Basic Authentication header, encoded in Base64 format.
**/
function apiGenerateBasicAuthHeader(user, pass) {
    var Base64 = Packages.java.util.Base64;
    var credentials = user + &quot;:&quot; + pass;
    var encodedCredentials = Base64.getEncoder().encodeToString(new java.lang.String(credentials).getBytes());
    var authHeader = &quot;Basic &quot; + encodedCredentials;
    return authHeader;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c32dc269-7c82-4fba-9d39-32a29b00ee01</id>
                <name>httpGet</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788760</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
  Envia um pedido HTTP GET para o URL especificado com autenticação Básica opcional.
  
  @param {String} url - O URL para o qual o pedido GET deve ser feito.
  @param {String|null} authHeader - Cabeçalho opcional de Autenticação Básica no formato Base64.
  @return {Object} Um objeto contendo o código de estado HTTP e o conteúdo da resposta.
                   - statusCode (Number): O código de estado HTTP.
                   - response (String): O conteúdo da resposta ou uma mensagem de erro.
  
  @example
  // Enviar um pedido GET sem autenticação
  var result = httpGet(&apos;https://example.com/api/resource&apos;, null);
  console.log(result.statusCode); // Código de estado HTTP
  console.log(result.response); // Conteúdo da resposta ou mensagem de erro
  
  @example
  // Enviar um pedido GET com Autenticação Básica
  var authHeader = generateBasicAuthHeader(&apos;username&apos;, &apos;password&apos;);
  var result = httpGet(&apos;https://example.com/api/resource&apos;, authHeader);
  console.log(result.statusCode); // Código de estado HTTP
  console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 **/
function httpGet(url, authHeader) {
    var result = {};

    var responseCode =  null;
    try {
        var URL = Packages.java.net.URL;
        var HttpURLConnection = Packages.java.net.HttpURLConnection;
        var BufferedReader = Packages.java.io.BufferedReader;
        var InputStreamReader = Packages.java.io.InputStreamReader;
        var StringBuilder = Packages.java.lang.StringBuilder;

        var urlObj = new URL(url);
        var httpConnection = urlObj.openConnection();
        httpConnection.setRequestMethod(&quot;GET&quot;);
        httpConnection.setConnectTimeout(10000);
        httpConnection.setReadTimeout(10000);

        if (authHeader) {
            httpConnection.setRequestProperty(&quot;Authorization&quot;, authHeader);
        }

        responseCode = httpConnection.getResponseCode().toString();
        var responseMessage = new StringBuilder();
        var inputStream = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
        var inputLine;
        while ((inputLine = inputStream.readLine()) != null) {
            responseMessage.append(inputLine);
        }
        inputStream.close();

        result.statusCode = responseCode;
        result.responseMessage = responseMessage.toString();
    } catch (e) {
        result.statusCode = responseCode != null ? responseCode : &quot;500&quot;; // 500 = Internal Server Error
        result.statusText = e.toString(); // antes: &quot;Internal Server Error: &quot; + e.toString()
        result.responseMessage = null;
    } /*finally {
    		if (httpConnection) httpConnection.disconnect();
    }*/

    return result;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>39bee33f-7fa8-475b-a294-eccc1ce715af</id>
                <name>httpPost</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
 Envia um pedido HTTP POST para o URL especificado com autenticação Básica opcional.
 
 @param {String} url - O URL para o qual o pedido POST deve ser feito.
 @param {String} data - Os dados a serem enviados no corpo do pedido (como uma string JSON).
 @param {String|null} authHeader - Cabeçalho opcional de Autenticação Básica no formato Base64.
 @return {Object} Um objeto contendo o código de estado HTTP e o conteúdo da resposta.
                  - statusCode (Number): O código de estado HTTP.
                  - response (String): O conteúdo da resposta ou uma mensagem de erro.
 
 @example
 // Enviar um pedido POST sem autenticação
 var result = httpPost(&apos;https://example.com/api/resource&apos;, &apos;{&quot;key&quot;: &quot;value&quot;}&apos;, null);
 console.log(result.statusCode); // Código de estado HTTP
 console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 
 @example
 // Enviar um pedido POST com Autenticação Básica
 var authHeader = generateBasicAuthHeader(&apos;username&apos;, &apos;password&apos;);
 var result = httpPost(&apos;https://example.com/api/resource&apos;, &apos;{&quot;key&quot;: &quot;value&quot;}&apos;, authHeader);
 console.log(result.statusCode); // Código de estado HTTP
 console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 **/
 function httpPost(url, data, authHeader) {
    var result = {};
    var outpuStream = null;
    var inputStream = null;
    
    try {
        var URL = Packages.java.net.URL;
        var HttpURLConnection = Packages.java.net.HttpURLConnection;
        var DataOutputStream = Packages.java.io.DataOutputStream;
        var BufferedReader = Packages.java.io.BufferedReader;
        var InputStreamReader = Packages.java.io.InputStreamReader;
        var StringBuilder = Packages.java.lang.StringBuilder;

        var urlObj = new URL(url);
        var httpConnection = urlObj.openConnection();
        httpConnection.setRequestMethod(&quot;POST&quot;);
        httpConnection.setDoOutput(true);
        httpConnection.setConnectTimeout(10000);
        httpConnection.setReadTimeout(10000);
        httpConnection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);      

        if (authHeader) {
            httpConnection.setRequestProperty(&quot;Authorization&quot;, authHeader);
        }
        
        try{
        	httpConnection.setRequestProperty(&quot;Content-Length&quot;, String(data.length));
        }catch (ex3) {
		httpConnection.setRequestProperty(&quot;Content-Length&quot;, String(data.length()));
        }

        try {
            outpuStream = new DataOutputStream(httpConnection.getOutputStream());
            outpuStream.writeBytes(data);
        } catch (ex3) {
            result.statusCode = &quot;503&quot;; // Service Unavailable
		  result.statusText = &quot;URL Indisponivel&quot;
            result.responseMessage = null;
            return result;
        } finally {
            if (outpuStream) {
                outpuStream.close();
            }
        }

        var responseCode = -1;
        try {
            responseCode = httpConnection.getResponseCode().toString();
        } catch (ex4) {
            result.statusCode = &quot;500&quot;; // Internal Server Error
            result.responseMessage = &quot;Error getting response code: &quot; + ex4.toString();
            return result;
        }

        var responseMessage = new StringBuilder();
	   var inputStream;

        try {

            inputStream = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));

		} catch (e) {
			inputStream = new BufferedReader(new InputStreamReader(httpConnection.getErrorStream()));
        }

            var inputLine;
            while ((inputLine = inputStream.readLine()) != null) {
                responseMessage.append(inputLine);
            }
            inputStream.close();

            result.statusCode = responseCode;
            result.responseMessage = responseMessage.toString();
        
    } catch (e) {
        // Handle exceptions for other parts of the request
        result.statusCode = &quot;500&quot;; // Internal Server Error
	   result.statusText = &quot;Internal Server Error: &quot; + e.toString();
        result.responseMessage = null;
    }

    return result;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c25c1fd-1f2b-40b7-9841-a884796e0414</id>
                <name>Web Service Rest API Consumption - genericApiCall</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793537</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to call a generic rest API, we can invoke the endpoint, method (GET, POST, PUT, etc), payload and authentication .
	This implementation includes Basic Auth, if the endpoint is not protected by Basic Auth the username and password fields must be set to nul

	@param {String} method - HTTP Method (GET, POST, PUT, PATCH, DELETE)
	@param {String} endpoint - API endpoint (eg: http://localhost:8008/api/v1/patient)
	@param {String} username - API Basic Auth username if necessary, otherwise set to null
	@param {String} password - API Basic Auth password if necessary, otherwise set to null
	@param {Object} payload - Request Payload or set to null if not necessary
	@return {Object} this function returns the operation code and the API requst response body
*/
function genericApiCall(method, endpoint, username, password, payload) {
	// Setting variables
	var ws = null;
	var result =  null;
	
	// Import JAVA custom code
	try{
		ws = new Packages.com.bsimple.mirth.services.RestClient();		
	}catch(err){
		logger.info(&quot;Unable to load RestClient.jar from custom-lib folder&quot;);
		return null;
	}

	// Try to consume API
	try   {
		result = ws.callService(method, endpoint, username, password, payload);
		return result;
	}  catch(err) {
		logger.info(&quot;Internbal error consuming API&quot;);
		var ret = {};
		ret.statusCode = &quot;500&quot;;
		ret.statusCodeValue = &quot;Internal error consuming API - make sure the endpoint is correctly setted&quot;;
		ret.body = null;
		return ret;
	}
	
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6cc8a9f9-7d96-4990-96a8-0ff41be6b101</id>
            <name>Logger Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089520</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Funções auxiliares para o logging de mensagens dos canais</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>bc286d01-89d0-4a3f-916e-09a25a4e68c7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>68dfb5b9-bb8e-418d-8425-79fe31bd7538</id>
                <name>generateLogMsg</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to build and return a log msg, originating from any channel.
	Documentação função: https://b-simple.atlassian.net/wiki/x/AoACBg
	Documentação Entity e Tags: https://b-simple.atlassian.net/wiki/x/AgB_Bg

	@param theEntity {String} - string that denotes the group of messages the message belongs to, i.e appointment, document, cda, accident, etc.
	@param {Class} message - ImmutableConnectorMessage Class message containing information about all connectors that a
		message passed through
	@param tagsArr {Array} - array of user-defined and relevant tags that should be associated with the message
	@param sourceServer {String} - message&apos;s source app/entity (name of the app or entity responsible for sending the messge to the channel)
	@param destinationServerMap {Map} - Map&lt;int,string&gt; , where the key is the destination&apos;s metadataID and the value is the entity to which such destination&apos;s message was sent to
	@param {Array} sourceMetadataArr - source metadata: metadata associated with the source processing 
	@param {Array} destinationsMetadataArr - destinations metadata: metadata associated with the destinations processing
	@return {Object JSON} message log
*/
function generateLogMsg(theEntity, message, tagsArr, sourceServer, destinationServerMap, sourceMetadataArr, destinationsMetadataMap) {
	if (message == undefined || message == null) {
		logger.info(&quot;sendMsgInfoLogChannel:message --&gt; message argument is mandatory!&quot;);
	} else {
		try {
			var logMsg = new Object();
		
			// messageSummary
			var messageSummaryObj = new Object();
			//messageID
			messageSummaryObj.messageId = message.getConnectorMessages().get(0).getMessageId();
			//messageOriginalID - não funciona ...
			//messageSummaryObj.messageOriginalId = message.getOriginalId();
			//channelID
			messageSummaryObj.channelId = message.getConnectorMessages().get(0).getChannelId();
			//serverID
			messageSummaryObj.serverId = message.getConnectorMessages().get(0).getServerId();
			//channelName
			messageSummaryObj.channelName = message.getConnectorMessages().get(0).getChannelName();
			//lastDeployedDate
			try {
				var controller = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createEngineController();
				var dashboardStatus = controller.getChannelStatus(message.getConnectorMessages().get(0).getChannelId());
				messageSummaryObj.lastDeployedDate = auxCalendarParse(dashboardStatus.getDeployedDate());
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:lastDeployedDate --&gt; &quot; + error.toString());
				messageSummaryObj.lastDeployedDate = null;
			}
			//entity
			messageSummaryObj.entity = theEntity == undefined ? null : theEntity;
			//tags
			messageSummaryObj.tags = (tagsArr == undefined || tagsArr == null) ? new Array() : tagsArr;
			//logDate
			var datestr = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
			var dateUTC = DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
			messageSummaryObj.logDate = dateUTC;
			//status
			var statusObj = new Object();
			statusObj.error = false;
			statusObj.code = null;
			statusObj.message = null;
			try {
				message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName (inclui Source também)
					value = parseInt(value);
					if (value != 0) { // só as destinations é que têm Response relativamente a erros, logo não dá para ir buscar Response de erro na Source (Source =metadataId 0)
						//code - testar no que isto dá! ??
						if (message.getConnectorMessages().get(value).getStatus().toString() == &apos;ERROR&apos;) {
							statusObj.error = true;
							/*
							if (statusObj.code != null) {
								statusObj.code = statusObj.code + &quot;;&quot; + message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							} else {
								statusObj.code = message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							}
							*/
							if (statusObj.message != null) {
								statusObj.message = statusObj.message + &quot;;&quot; + auxGetStatusMessage(value);
							} else {
								statusObj.message = auxGetStatusMessage(value);
							}
						}
					}
				});
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel: messageSummary status --&gt; &quot; + error.toString());
			}
			messageSummaryObj.status = statusObj;
		
			//metaData
			//messageSummaryObj.metaData = (summMetadataArr == undefined || summMetadataArr == null) ? new Array() : summMetadataArr;
			try {
				var listMetadataCol = com.mirth.connect.server.controllers.ChannelController.getInstance().getMetaDataColumns(messageSummaryObj.channelId);
				var metadataColArr = new Array();
				for (var i = 0; i &lt; listMetadataCol.size(); i++) {
					var metaObj = new Object();
					metaObj.name = listMetadataCol.get(i).getName();
					var mappingName = listMetadataCol.get(i).getMappingName();
					metaObj.value = (message.getConnectorMessages().get(0).getChannelMap().get(mappingName) == undefined) ? null : message.getConnectorMessages().get(0).getChannelMap().get(mappingName).toString(); // para ficarem todos como string
					if (metaObj.value != null) {
						metadataColArr.push(metaObj);
					}
				}
				messageSummaryObj.metaData = metadataColArr;
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
				messageSummaryObj.metadata = null;
			}
			
			logMsg.messageSummary = messageSummaryObj;
		
			// ------------------------
			//content
			var contentObj = new Object();
			//content.source
			var sourceObj = new Object();
			//content.source.server
			sourceObj.server = sourceServer == undefined ? null : sourceServer;
			//content.source.status
			sourceObj.status = message.getConnectorMessages().get(0).getStatus().toString();
			//content.source.statusMessage
			sourceObj.statusMessage = auxGetStatusMessage(0);
			//content.source.message
			sourceObj.message = isJSON(message.getConnectorMessages().get(0).getRawData()) ? JSON.parse(message.getConnectorMessages().get(0).getRawData()) : message.getConnectorMessages().get(0).getRawData(); //msg antes de passar pelo preprocessor e antes de ser mudada no Transformer
			//content.source.dataType
			sourceObj.dataType = message.getConnectorMessages().get(0).getRaw().getDataType();
			//content.source.date
			var dateCalendar = message.getConnectorMessages().get(0).getReceivedDate();
			var dateUTC = auxCalendarParse(dateCalendar);
			sourceObj.date = dateUTC;
			//content.source.metadata
			sourceObj.metaData = (sourceMetadataArr == undefined || sourceMetadataArr == null) ? new Array() : sourceMetadataArr;
			//content.source.responseMessage
			if (message.getConnectorMessages().get(0).getResponseData() == null) { // no response
				sourceObj.responseMessage = null;
			} else if (message.getConnectorMessages().get(0).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
				sourceObj.responseMessage = null;
			} else { //houve response 
				sourceObj.responseMessage = isJSON(message.getConnectorMessages().get(0).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(0).getResponseData().getMessage()) : message.getConnectorMessages().get(0).getResponseData().getMessage();
			}
			contentObj.source = sourceObj;
		
			// -------------------------
			//content.destinations
			var destinationsArray = new Array();
			message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName
				value = parseInt(value);
				if (value != 0) { //ignorar Source (metadataId=0)
					//logger.info(&quot;value= &quot; + typeof(value) + &quot; &quot; + value + &quot;;&quot; + &quot;key= &quot; + typeof(key) + &quot; &quot; + key);
					var destinationObj = new Object();
					//content.destinations.server
					if (destinationServerMap != undefined &amp;&amp; destinationServerMap != null) {
						if (destinationServerMap.has(value)) {
							destinationObj.server = destinationServerMap.get(value);
						} else {
							destinationObj.server = null;
						}
					} else {
						destinationObj.server = null;
					}
					//content.destinations.destinationId
					destinationObj.destinationId = value;
					//content.destinations.destinationName
					destinationObj.destinationName = key;
					//content.destinations.status
					destinationObj.status = message.getConnectorMessages().get(value).getStatus().toString();
					//content.destinations.statusMessage
					destinationObj.statusMessage = auxGetStatusMessage(value);
					//content.destinations.message
					try {
						destinationObj.message = isJSON(message.getConnectorMessages().get(value).getEncodedData()) ? JSON.parse(message.getConnectorMessages().get(value).getEncodedData()) : message.getConnectorMessages().get(value).getEncodedData();
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel: destination message --&gt; &quot; + error.toString());
						destinationObj.message = null;
					}
					//logger.info(message.getConnectorMessages().get(value).getMessageContent(ContentType.SENT));
					//content.destinations.dataType
					// destinationObj.dataType = message.getConnectorMessages().get(value).getEncoded().getDataType();
					try {
						var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
						var channel = channelController.getChannelByName(message.getConnectorMessages().get(0).getChannelName().toString());
						var connectors = channel.getDestinationConnectors().toArray();
						// Iterate through the connectors
						for each (var connector in connectors) {
						    // Check if the current connector matches the desired connector name
						    if (connector.getName() == key) {
						    		destinationObj.dataType = connector.getTransformer().getOutboundDataType();
						    		break;
						    }
						}
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
						destinationObj.dataType = null;
					}
					
					//content.destinations.date
					var dateCalendar = message.getConnectorMessages().get(value).getSendDate();
					if (dateCalendar != null) { // destination QUEUED
						var dateUTC = auxCalendarParse(dateCalendar);
						destinationObj.date = dateUTC;
					} else {
						destinationObj.date = null;
					}

					//content.destinations.metaData
					if (destinationsMetadataMap != undefined &amp;&amp; destinationsMetadataMap != null) {
						if (destinationsMetadataMap.has(value)) {
							destinationObj.metaData = destinationsMetadataMap.get(value) == null ? new Array() : destinationsMetadataMap.get(value);
						} else {
							destinationObj.metaData = new Array();
						}
					} else {
						destinationObj.metaData = new Array();
					}
		
					//content.destinations.responseMessage
					if (message.getConnectorMessages().get(value).getResponseData() == null) { // no response
						destinationObj.responseMessage = null;
					} else if (message.getConnectorMessages().get(value).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
						destinationObj.responseMessage = null;
					} else { //houve response
						destinationObj.responseMessage = isJSON(message.getConnectorMessages().get(value).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(value).getResponseData().getMessage()) : message.getConnectorMessages().get(value).getResponseData().getMessage();
					}
					destinationsArray.push(destinationObj);
				}
			});
			contentObj.destinations = destinationsArray;
			
			logMsg.content = contentObj;
			//logger.info(JSON.stringify(logMsg));

			//send it
			return JSON.stringify(logMsg);

			/*
			var respLogChannel = router.routeMessage(&apos;Logs_WHS-OUT&apos;, JSON.stringify(logMsg));
			if (respLogChannel == null || respLogChannel == undefined) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			} else if (respLogChannel.getStatus() == Status.ERROR) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			}
			*/

		} catch (error) {
			logger.info(&quot;sendMsgInfoLogChannel:geral  --&gt; &quot; + error.toString());
		}
	}	
}

function auxCalendarParse(dateCalendar) {
	var theMonth = dateCalendar.get(dateCalendar.MONTH) +1;
	var theMonthStr = theMonth.toString().padStart(2,&apos;0&apos;);
	var datestr = dateCalendar.get(dateCalendar.YEAR).toString() + theMonthStr + dateCalendar.get(dateCalendar.DAY_OF_MONTH).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.HOUR_OF_DAY).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.MINUTE).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.SECOND).toString().padStart(2,&apos;0&apos;);
	return DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
}

function auxGetStatusMessage(connMetadaId) {
	connMessage = message.getConnectorMessages().get(connMetadaId);
	if (connMessage.getStatus().toString() == &quot;ERROR&quot;) {
		if (connMessage.getProcessingError() != &quot;&quot;) {
			return connMessage.getProcessingError();
		} else if (connMessage.getPostProcessorError() != &quot;&quot;) {
			return connMessage.getPostProcessorError();
		} else if (connMessage.getResponseError() != &quot;&quot;) {
			return connMessage.getResponseError();
		}
	}
	return null;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6df54a97-f980-47f7-a86a-788d32a98a16</id>
            <name>THOM API Helper Functions</name>
            <revision>11</revision>
            <lastModified>
              <time>1730915907338</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>6bfbe323-d3b2-41f5-b831-125601788430</id>
                <name>getAccidentIncapacityTypeByCode</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função que converte, a partir da consulta à API do THOM, o código de catálogo em UUID de THOM para o catálogo AccidentIncapacityType

	@param {String} arg1 -inputCode (código de catálogo)
	@return {String} return Código UUID de THOM
*/

function getAccidentIncapacityTypeByCode(inputCode) {
	var parameters = new Object();
	var httpPostURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/$find-matches&quot;;

	parameters.resourceType = &quot;Parameters&quot;;
	parameters.parameter = [];
	
	parameterSystem = new Object();
	parameterSystem.name = &apos;system&apos;;
	parameterSystem.valueUri = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/AccidentIncapacityType&apos;;
	
	parameters.parameter.push(parameterSystem);

	parameterProperty = new Object();
	parameterProperty.name = &apos;property&apos;;
	parameterProperty.part = [];
	partCode = new Object();
	partCode.name = &apos;code&apos;;
	partCode.valueCode = &apos;code&apos;;
	parameterProperty.part.push(partCode);

	partValue = new Object();
	partValue.name = &apos;value&apos;;
	partValue.valueString = inputCode;
	parameterProperty.part.push(partValue);
	parameters.parameter.push(parameterProperty);


	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpPost(httpPostURL, JSON.stringify(parameters), authHeader);

	var accidentIncapacityType = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var resource = JSON.parse(httpResp.responseMessage);
			if (typeof(resource.parameter) != &apos;undefined&apos;){
				accidentIncapacityType = resource.parameter[0].part[0].valueCoding.code;
			}
		}
	}

	return accidentIncapacityType;	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>db5829bf-47fe-4df9-9275-98545493d366</id>
                <name>GetAccidentInfo</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790265</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dado o id externo de um EpisodeOfcare, consultar no sistema externo se essa informação é referente a um processo de sinistro. Em caso afirmativo, constrói
	a informação do processo de sinistro e faz o seu retorno.

	@param {String} episodeOfCareGUID - id externo de um EpisodeOfcare
	@return {Object} processo de sinistro
*/
function getAccidentInfo(episodeOfCareGUID) {

		var returnMessage = {};

		returnMessage.processoSinistro = {};
		returnMessage.tipoSinistro = null;
		returnMessage.statusCode = &quot;500&quot;;
		returnMessage.statusMessage = &quot;Internal Server Error&quot;;

		var processoSinistro = {};
		 
		 var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/EpisodeOfCare/&quot; + episodeOfCareGUID;
		 	 
		 httpResp = httpGet(httpGetURL,null);
		 
		 if(httpResp.statusCode === &quot;200&quot;){

			if(isJSON(httpResp.responseMessage)){
		 
				episodeOfCare = JSON.parse(httpResp.responseMessage);
				
				var tipo = &quot;&quot;;
				
				if (episodeOfCare &amp;&amp; episodeOfCare.type) {
					episodeOfCare.type.forEach(function(type) {
						if (type.coding) {
							type.coding.forEach(function(coding) {
								if (coding.system &amp;&amp; coding.system.includes(&quot;/CodeSystem/EpisodeOfCareType&quot;)) {
									tipo = coding.code; 
								}
							});
						}
					});
				}
				
				if( tipo === &quot;5&quot;){

					processoSinistro.sinistroIdentificadores = [];
					sinistroIdentificadores = {};
					sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.id&quot;;
					sinistroIdentificadores.codigo = episodeOfCareGUID;

					processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);

					if (episodeOfCare &amp;&amp; episodeOfCare.identifier) {
						sinistroIdentificadores = {};
						sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.identifier&quot;;
						sinistroIdentificadores.codigo = episodeOfCare.identifier[0].value;

						processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);
					}

					
					processoSinistro.subsistemaIntRefExt = null;
					processoSinistro.subsistemaDescr = null;
					processoSinistro.ramoDescr = null;
					processoSinistro.ramoIdentificadores = [];
					//var ramoIdentificador = {};
					//ramoIdentificador.codigo = null;
					//ramoIdentificador.sistemaCodificador = null;

					//processoSinistro.ramoIdentificadores.push(ramoIdentificador);

					processoSinistro.numProcesso = null;
					processoSinistro.nomeSegurado = null;
					processoSinistro.tipoSinistradoIdentificadores = [];
					processoSinistro.tipoSinistradoDescr = null;
					processoSinistro.dataAberturaProcesso = null;

					var sinistro  = {};

					sinistro.data = null;
					sinistro.descr = null;
					sinistro.localDescr = null;
					sinistro.transporteChegadaIdentificadores = [];
					
					if(episodeOfCare.period &amp;&amp; episodeOfCare.period.start){
						processoSinistro.dataAberturaProcesso = java.time.OffsetDateTime.parse(episodeOfCare.period.start).toInstant().toString();
					}

					if (episodeOfCare &amp;&amp; episodeOfCare.extension) {
					episodeOfCare.extension.forEach(function(extension1) {
						if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.HealthSystem&quot;)) {
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;HealthSystem&quot;) {
									if (extension2.valueReference.reference){
										var organizationId = extension2.valueReference.reference;
										var organization = getOrganization(organizationId.split(&quot;/&quot;)[1]);
										processoSinistro.subsistemaIntRefExt = organization.intRefExt;
										processoSinistro.subsistemaDescr = organization.name;
									}
									
									
								}
								else if (extension2.url &amp;&amp; extension2.url === &quot;InsuredName&quot;) {
									processoSinistro.nomeSegurado = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;PolicyNumber&quot;) {
									processoSinistro.numBeneficiario = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;ExternalCode&quot;) {
									processoSinistro.numProcesso = extension2.valueString; 
								}
							});
						}else if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.Accident&quot;)) { // ?? ir buscar aqui tipoSinistrado e tipoTransporte
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;Date&quot;) {
									sinistro.data = extension2.valueDate + &quot;T00:00:00Z&quot;; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Description&quot;) {
									sinistro.descr = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Type&quot;) {
									if(extension2.valueCoding &amp;&amp; extension2.valueCoding.system &amp;&amp; extension2.valueCoding.display ){
										var ramoIdentificador = {};
										ramoIdentificador.codigo = extension2.valueCoding.code;
										ramoIdentificador.sistemaCodificador = &quot;THOM&quot;;

										processoSinistro.ramoIdentificadores.push(ramoIdentificador);

										processoSinistro.ramoDescr = extension2.valueCoding.display;
									}
								} else if (extension2.url &amp;&amp; extension2.url === &quot;TransportType&quot;) {
									var transporteIdentificador = {};
									transporteIdentificador.codigo = extension2.valueCoding.code;
									transporteIdentificador.sistemaCodificador = &quot;THOM&quot;;
									sinistro.transporteChegadaIdentificadores.push(transporteIdentificador);

									sinistro.transporteChegadaDescr = extension2.valueCoding.display;
								
								}else if (extension2.url &amp;&amp; extension2.url === &quot;InjuredPartyType&quot;) {
									var tipoSinistradoIdentificador = {};
									tipoSinistradoIdentificador.codigo = extension2.valueCoding.code;
									tipoSinistradoIdentificador.sistemaCodificador = &quot;THOM&quot;;
									processoSinistro.tipoSinistradoIdentificadores.push(tipoSinistradoIdentificador);

									processoSinistro.tipoSinistradoDescr = extension2.valueCoding.display;
								} else if (extension2.url &amp;&amp; extension2.url === &quot;Local&quot;) {
									sinistro.localDescr = extension2.valueString ? extension2.valueString : null;
								}
							});
						}
					});
				}

					
					
					processoSinistro.sinistro = sinistro;
					returnMessage.processoSinistro = processoSinistro;
					returnMessage.tipoSinistro = true;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;OK&quot;;
				
				}else{
					// EpisodeOfCare não é do tipo Sinistro
					
					returnMessage.processoSinistro = null;
					returnMessage.tipoSinistro = false;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;episodeOfCare não é do tipo sinistro&quot;;
				}
			
		 
		 	}else{
				//resposta ao pedido API não é JSON
				returnMessage.processoSinistro = null;
				returnMessage.tipoSinistro = null;
				returnMessage.statusCode = &quot;400&quot;;
				returnMessage.statusMessage = &quot;Formato inválido devolvido pela API&quot;;
		 		
		 	}
			
		 		
		 }else{
		 	// Pedido API não retorna código 200
			returnMessage.processoSinistro = null;
			returnMessage.tipoSinistro = null;
			returnMessage.statusCode = httpResp.statusCode; // &gt;= 400
			returnMessage.statusMessage = &quot;API Error: &quot; + httpResp.statusCode + &apos; - &apos; + (typeof httpResp.statusText != &apos;undefined&apos; ? httpResp.statusText : httpResp.responseMessage) ;
			
		 
		 }

		 return returnMessage;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>1b5b099a-483d-425f-ad76-e0141c8f4237</id>
                <name>getFacility</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787810</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Facility (cama, área, local, etc)

	@param {String} - facility name
	@param {String} - isHealthCenter (0 - No; 1- Yes)
	@return {String} return facility UUID
*/
function getFacility(facilityName, isHealthCenter) {

	var boolHealthCenter = (isHealthCenter != null) ? isHealthCenter : 0;
	
	var facilityUUID = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location?name=&quot; + encodeURIComponent(facilityName) + &quot;&amp;isHealthCenter=&quot; + boolHealthCenter, authHeader);
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			resposta.entry.find(function(resource){
				resource.resource.alias.find(function(alias){
					if (alias === String(facilityName) ){
						facilityUUID = resource.resource.id;
					}
				});
			})
	    		
		}
	}

	return facilityUUID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c71850ca-03ed-4ac8-91b5-88fa6a65b6ca</id>
                <name>getFacilityDescription</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730915907351</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM the information about Location (cama, área, local, etc) and returns the description = Código Serviço

	@param {String} - facility UUID
	@return {String} return facility description
*/
function getFacilityDescription(facilityUUID) {
	
	var facilityDescription = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location/&quot; + facilityUUID);

	channelMap.put(&quot;GetLocationApi&quot;, httpResp);
	
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			facilityDescription = resposta.description;
		}
	}

	return facilityDescription;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5e48274b-22ab-4d11-94f7-1b0bc29c8b72</id>
                <name>getGeneralInfoAppointment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791695</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Appoitment Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} apppointmentRes - o Appointment Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoAppointment(apppointmentRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof apppointmentRes[&apos;supportingInformation&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; apppointmentRes[&apos;supportingInformation&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( apppointmentRes[&apos;supportingInformation&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}
	
	if (typeof apppointmentRes[&apos;extension&apos;] != &apos;undefined&apos;){
		apppointmentRes[&apos;extension&apos;].find(function(extension){
			if (extension[&apos;url&apos;].includes(&apos;Appointment.Encounter&apos;)){
				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.id&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;reference&apos;].split(&quot;/&quot;)[1];
				respObj.episodioIdentificadores.push(episodioIdentificador);

				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.identifier&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;display&apos;];
				respObj.episodioIdentificadores.push(episodioIdentificador);
			}
		})
	}
      
     ////	Dados do Doente
     for (var j = 0; j &lt; apppointmentRes[&apos;participant&apos;].length; j++){  
		if(apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;reference&apos;].includes(&quot;Patient&quot;)){
			respObj.doente.nomeDoente = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;display&apos;];
		   	respObj.doente.numSequencial = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;identifier&apos;][&apos;value&apos;]; 
		}
     }
      
	// agendamentoIdentificadores
	if (typeof apppointmentRes[&apos;id&apos;] != &quot;undefined&quot; &amp;&amp; apppointmentRes[&apos;id&apos;] != &quot;&quot;) {
		agendamentoIdentificadoresObj = new Object();
		agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
		agendamentoIdentificadoresObj.codigo = apppointmentRes[&apos;id&apos;];	// nº do agendamento
		respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
	}

	// tipoAgendamentoIdentificadores
	apppointmentRes[&apos;serviceCategory&apos;].find(function(serviceCategory){
		serviceCategory[&apos;coding&apos;].find(function(codingSC){ 
			if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; !codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;) ){
				var objCUF= {};
				objCUF.sistemaCodificador = &quot;CUF@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objCUF.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objCUF);
			} else if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;)) {
				var objTHOM = {};
				objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objTHOM.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objTHOM);
			}
		});
	});

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5df4529e-ac29-482a-a8c8-6b86c2434803</id>
                <name>getGeneralInfoEncounter</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789003</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Encounter Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} encounterRes - o Encounter Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoEncounter(encounterRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof encounterRes[&apos;episodeOfCare&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; encounterRes[&apos;episodeOfCare&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( encounterRes[&apos;episodeOfCare&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}

	respObj.doente.numSequencial = encounterRes[&apos;subject&apos;][&apos;identifier&apos;][&apos;value&apos;];
	respObj.doente.nomeDoente = encounterRes[&apos;subject&apos;][&apos;display&apos;];
	
	if (typeof encounterRes[&apos;appointment&apos;] != &apos;undefined&apos;){
    	  	encounterRes[&apos;appointment&apos;].find(function (appointment) {
    	  		// agendamentoIdentificadores
			agendamentoIdentificadoresObj = new Object();
			agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
			agendamentoIdentificadoresObj.codigo = appointment[&apos;reference&apos;].replace(&apos;Appointment/&apos;, &apos;&apos;);
			respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
    	  	})
    	}

	// episodioIdentificadores
	episodioIdentificadorObj = new Object();
	episodioIdentificadorObj.sistemaCodificador = &quot;Encounter.id&quot;;
	episodioIdentificadorObj.codigo = encounterRes[&apos;id&apos;];
	respObj.episodioIdentificadores.push(episodioIdentificadorObj);

	// Human-redable ID
    	if (typeof encounterRes[&apos;identifier&apos;] != &apos;undefined&apos;){
		episodioIdentificadorHumanRedableObj = new Object();
		episodioIdentificadorHumanRedableObj.sistemaCodificador = &quot;Encounter.identifier&quot;;
		episodioIdentificadorHumanRedableObj.codigo = encounterRes[&apos;identifier&apos;][0][&apos;value&apos;];
		respObj.episodioIdentificadores.push(episodioIdentificadorHumanRedableObj);
    	}
	
	encounterRes[&apos;extension&apos;].find( function(extension) {
		if (extension[&apos;url&apos;].includes(&quot;Encounter.OperationalHealthUnit&quot;)) {
			var objTHOM = {};
			objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
			objTHOM.codigo = extension[&apos;valueCoding&apos;][&apos;code&apos;];
			respObj.tipoAgendamentoIdentificadores.push(objTHOM);
		}
	})

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7370760c-76cd-4fa8-bb89-34738bfe7995</id>
                <name>getIdProposta</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791423</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função auxiliar genérica com o propósito de extrair o id da proposta.
	com o intuito de extrair da API do sistema externo um determinado CarePlan e extrair o id da proposta cirúrgica associado, se este dado existir

	@param {String} propostaExtId - id externo identificativo da proposta
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;idproposta111&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getIdProposta(appointmentId, appContext) {

	var contextList = [&quot;cuf&quot;]; // contextos de aplicação da função (CUF, ...)
	var respostaObj = {};

	if (contextList.includes(appContext.trim().toLowerCase()) ) {
	
		if (appContext.trim().toLowerCase() == &quot;cuf&quot;) { // CUF

			/*
			if (propostaExtId &amp;&amp; !appointmentId) { //agendamento - extrair id da proposta de PC através do id externo da proposta
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			} else if (!propostaExtId &amp;&amp; appointmentId) { //checkin - 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC através do id externo da proposta
				var propostaExtId = getPropostaExtId_CUF(appointmentId);
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			}
			*/

			// 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC, através do id externo da proposta
			var respostaExtId = getPropostaExtId_CUF(appointmentId);
			if (respostaExtId.statusCode = &quot;200&quot;) {
				respostaObj = geIdPropostaPC_CUF(respostaExtId.responseMessage);
			} else {
				respostaObj = respostaExtId;
			}
		}
	} else {
		respostaObj.statusCode = &quot;500&quot;;
		respostaObj.responseMessage = &quot;Contexto de aplicação inválido&quot;;
	}
	return respostaObj;
}


// -------------- FUNCOES AUXILIARES -----------------------

function geIdPropostaPC_CUF(propostaExtId) { // extrair id da proposta de PC através do id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;CarePlan&quot;, propostaExtId);
	if (resposta.statusCode == &quot;200&quot;) {
		carePlanRes = JSON.parse(resposta.responseMessage);
		var patientCareId = null;
		carePlanRes[&quot;identifier&quot;].find( function(identifier) {
			identifier[&quot;type&quot;][&quot;coding&quot;].find( function(coding) {
				if (coding[&quot;code&quot;] == &quot;PLAC&quot;) {
					patientCareId = identifier[&quot;value&quot;];
				}
			});
		});
		if (patientCareId !== null) {
			result.statusCode = &quot;200&quot;;
			result.responseMessage = idProposta;
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;Id não encontrado como placer identifier no CarePlan com id &quot; + propostaExtId;			
		}
		
	} else {
		result = resposta;
	}
	return result;
}

function getPropostaExtId_CUF(appointmentId) { // obter id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;Appointment&quot;, appointmentId);
	if (resposta.statusCode == &quot;200&quot;) {
		appointmentRes = JSON.parse(resposta.responseMessage);
		if (appointmentRes[&apos;supportingInformation&apos;]) {
			var propostaExtId = null;
			appointmentRes[&apos;supportingInformation&apos;].find( function(suppInfo) {
				if (suppInfo[&apos;reference&apos;].includes(&quot;CarePlan&quot;)) {
					propostaExtId = suppInfo[&apos;reference&apos;].replace(&quot;CarePlan/&quot;,&quot;&quot;);
					return ;
				}
			});
			if (propostaExtId !== null) {
				result.statusCode = &quot;200&quot;;
				result.responseMessage = propostaExtId;
			} else {
				result.statusCode = &quot;500&quot;;
				result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
			}
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
		}
	} else {
		result = resposta;
	}
	return result;
}


</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>799a6dcb-19c1-4600-8ff8-6b905747eeaa</id>
                <name>GetOrganization</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788084</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} organizationGUID - thom guid fro organization
	@return {Object} return intRefExt
*/
function getOrganization(organizationGUID) {

	var organizationObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Organization/&quot; + organizationGUID;
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			organization = JSON.parse(httpResp.responseMessage);

			organizationObj.intRefExt = organization.alias[0];
			organizationObj.name = organization.name;
			
		}
	}

	return organizationObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c1c0f8a3-571c-4066-8324-a7b7ba0966db</id>
                <name>getPcSurgicalProposalIdFromThom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792484</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} patientUuid - ID do Paciente de THOM (UUID)
	@param {String} episodOfCareUuid - ID do EpisodeOfCare de THOM (UUID)
	@return {String} return ID sequencial da proposta cirurgica do PatientCare 
*/
function getPcSurgicalProposalIdFromThom(patientUuid, episodOfCareUuid) {
	var pcSurgicalProposal = null;
	var carePlanId = null;

	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	// Get all CarePlan to specific Patient
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CarePlan?_pretty=true&amp;patient=Patient/&quot; + patientUuid + &apos;&amp;category=https://thom-fhir.apis.sat.jmslab.pt/fhir/CodeSystem/TreatmentRequestType|1&apos;;
	httpResp = httpGet(httpGetURL, authHeader);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var bundle = JSON.parse(httpResp.responseMessage);
			
			bundle.entry.find(function(bundleResource){
				if (bundleResource.resource.resourceType == &apos;CarePlan&apos; &amp;&amp; typeof(bundleResource.resource.supportingInfo) != &apos;undefined&apos;){
					bundleResource.resource.supportingInfo.find(function(supportingInfo){
						if (supportingInfo.display == episodOfCareUuid){
							carePlanId = bundleResource.resource.id;
							//return;
						}	
					});
				}
			});
		}
	}

	// Get specific CarePlan to get the placer identifier
	if (carePlanId != null){
		var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CarePlan/&apos; + carePlanId;
		httpResp = httpGet(httpGetURL, authHeader);
		//logger.info(&quot;httpResp - &quot; + JSON.stringify(httpResp));
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var carePlan = JSON.parse(httpResp.responseMessage);
				
				carePlan.identifier.find(function(identifiers){
					identifiers.type.coding.find(function(codings){
						if (codings.code == &apos;PLAC&apos;){
							pcSurgicalProposal = identifiers.value;
							return;
						}
					});
				});
			}
		}
	}

	return pcSurgicalProposal;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>82e9fc81-294a-416a-9674-857fb9e5af64</id>
                <name>GetPractitionerByNumMecanografico</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791487</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} Practitioner NumMecanografico - numero mecanográfico do médico
	@return {Object} return Practitioner GUID do THOM
*/
function getPractitionerByNumMecanografico(numMecanografico) {
	var respObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Practitioner?identifier=&quot; + numMecanografico;
	httpResp = httpGet(httpGetURL,null);
	respObj.statusCode = httpResp.statusCode;

	respObj.response = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			practitioner = JSON.parse(httpResp.responseMessage);

			if (practitioner.type  == &apos;searchset&apos; &amp;&amp; practitioner.total &gt; 0){
				practitioner.entry.find(function(practitionerResource){
					return practitionerResource.resource.identifier.find(function(identifier){
						
						return identifier.type.coding.find(function(codes){
							if (codes.code == &apos;4&apos;){
								if (numMecanografico == identifier.value){
									respObj.response = practitionerResource.resource;
									return true;
								}
							}
						})
					})
				})	
			}
		}
	} else {
		respObj.response = httpResp.responseMessage != null ? httpResp.responseMessage : httpResp.statusText;
	}
	
	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>45bbb451-aab7-4513-8107-952866fd2a95</id>
                <name>getResourceExternalAPI</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789667</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo intuito passa por ir buscar à API externa uma determinada instância de um pretendido resource type

	@param {String} resourceType - FHIR Resource Type (por exemplo, Appointment, Bundle, CarePlan, Encounter, etc.)
	@param {String} resourceExtId - id externo da instância a ser obtida
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;fullResource&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getResourceExternalAPI(resourceType, resourceExtId) {
	var respostaObj = {};
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/&quot; + resourceType + &quot;/&quot; + resourceExtId;	
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			respostaObj = httpResp;
		} else {
			respostaObj.statusCode = &quot;500&quot;;
			respostaObj.responseMessage = &quot;Resposta retornada não é JSON&quot;;
		}
	} else {
		respostaObj = httpResp;
	}
	return respostaObj;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>fe90c913-c365-44d1-b309-7c4dae7d9d9a</id>
            <name>Utils</name>
            <revision>6</revision>
            <lastModified>
              <time>1730893909835</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Utils functions for Mirth Channels</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>9d0737dd-b85f-4e05-bd6e-b83828e87bdf</id>
                <name>addIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792349</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Aidiciona um objeto relativo a um identificador (Ex: {&quot;sistemaCodificador&quot;:&quot;Appointment.id&quot;, &quot;codigo&quot;: 1111} ) a uma lista de identificadores

	@param {String} sistCodificador - nome do sistemaCodificador (ex: &quot;Appointment.id&quot; ou &quot;Encounter.identifier&quot;)
	@param {String} codigo - value relativo ao sistCodificador
	@param {String} listaAdicionar - listagem já existente (ou vazia/null/undefined) de identificadores
	@return {String} return listaIdentificadores
*/
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	var lista;
	try {
		if (listaAdicionar  &amp;&amp; Array.isArray(listaAdicionar)) {
			lista = JSON.parse( JSON.stringify(listaAdicionar));
		} else {
			logger.info(&quot;excecao1&quot;);
			lista= [];
		}
	} catch (err) {
		logger.info(&quot;excecao2&quot; + err.toString());
		lista =  [];
	}
	/*
	if (! Array.isArray(listaAdicionar)) {
		lista = [];
	} else {
		lista = JSON.parse( JSON.stringify(listaAdicionar));
	}
	*/
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			lista.push(obj);
		}
	}
    	return lista;
	
}

/*
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	if (! Array.isArray(listaAdicionar)) {
		listaAdicionar = [];
	}
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			listaAdicionar.push(obj);
		}
	}
    	return listaAdicionar;
	
}
*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83c82ac5-e364-41b2-99cc-6a4ead5eaa37</id>
                <name>callApi</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793110</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Generic code to implement API call

	@param {String} method - http method
	@param {String} url - http url
	@param {String} user - api username
	@param {String} pass - api password
	@return {Object} return api response
*/
function callApi(method, url, user, pass) {
	
	var url = new Packages.java.net.URL(url);
	var connection = url.openConnection();
	connection.setRequestMethod(method);
	
	try {
	  var responseCode = connection.getResponseCode();
	  if (responseCode === Packages.java.net.HttpURLConnection.HTTP_OK) {	//	200
	    var inputStream = connection.getInputStream();
	    var reader = new Packages.java.io.BufferedReader(new Packages.java.io.InputStreamReader(inputStream));
	    var response = &quot;&quot;; // Inicializa a variável response
	
		    while ((line = reader.readLine()) !== null) {
		      response += line;
		    }      
	        reader.close();	      
		   
		   return JSON.parse(response.toString());
	
	    } else {
	        var errorMessage = &quot;Erro na chamada ao Web Service: &quot; +  url + &quot; Código de resposta: &quot; + responseCode;
	        // Trata os casos em que a chamada ao Web Service não foi bem-sucedida        
	        throw new Error(errorMessage);
	    }
	} catch (e) {
	    // Capturar exceção e retornar status e mensagem de erro
	    var errorStatus = connection.getResponseCode();
//	    var errorMessage = e.getMessage();	    
	    throw new Error(errorStatus);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fd200634-44bd-483c-97ab-743c373d4b7a</id>
                <name>checkIfExameEspecial</name>
                <revision>2</revision>
                <lastModified>
                  <time>1730739683915</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo objetivo passa por receber um código identificativo de um exame (ou outro serviço qualquer) e retornar se o mesmo é um exame especial ou não. Para
	tal, a função vai à tabela de catálogo da BD verificar se o código lá existe. Caso haja algum problema de acesso à BD, e de forma opcional, a função tenta aceder
	ao endpoint do sistema externo para fazer a verificação de exame especial.

	@param {String} catalogCode - código de catálogo CUF a ser analisado
	@param {String} externalSysCode - código de catálogo do sistema externo a ser analisado
	@return {Object} return object
*/
function checkIfExameEspecial(catalogCode, externalSysCode) {
	var error = false;
	var errorMsg = null;
	var isExameEspecial = null;
	var resposta = new Object();
	
	// Get a database connection 
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	var selectQuery = &quot;SELECT * FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; WHERE \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; and ativo = true;&quot;;
	try {
		// Execute the SQL query
		result = dbConn.executeCachedQuery(selectQuery);
		if (result.next() ) { // true
			isExameEspecial = true;
		} else { 
			isExameEspecial = false; // false
		}
	} catch (e) {
		error = true;
		logger.info(&quot;e.toString() = &quot; + e.toString());
		errorMsg = e.toString();
	} finally {
	    // Close the database connection
	    dbConn.close();
	}

	//houve erro no acesso à BD, logo tenta aceder ao endpoint do sistema externo para obter essa informação
	if (isExameEspecial == null &amp;&amp; typeof externalSysCode != &apos;undefined&apos;) {
		var httpPostURL = $(&apos;Transactional_CUFBUS_Host&apos;) + &quot;CodeSystem/Service/$lookup&quot;;
		var body = new Object();
		body.resourceType= &quot;Parameters&quot;;
		body.parameter = [{&quot;name&quot;:&quot;code&quot;,&quot;valueCode&quot;:externalSysCode}];
		var authHeader = null
		if ($(&apos;Transactional_CUFBUS_User&apos;) != null &amp;&amp; $(&apos;Transactional_CUFBUS_Pass&apos;) != &apos;&apos;){
			authHeader = apiGenerateBasicAuthHeader($(&apos;Transactional_CUFBUS_User&apos;), $(&apos;Transactional_CUFBUS_Pass&apos;));  
		}
		httpResp = httpPost(httpPostURL,JSON.stringify(body),authHeader);
		
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var parametersRes = JSON.parse(httpResp.responseMessage);
				try {
					if (parametersRes[&apos;resourceType&apos;] == &quot;Parameters&quot;) {
						var checkExameEspecial = null;
						parametersRes[&apos;parameter&apos;].find( function(parameter) {
							if(parameter[&apos;name&apos;] == &quot;property&quot;) {
								parameter[&apos;part&apos;].find( function(part) {
									if (part[&apos;valueCoding&apos;]) {
										if (part[&apos;valueCoding&apos;][&apos;code&apos;] == $(&apos;Catalogo_ServiceCategory_ExameEspecial&apos;)) {
											isExameEspecial = true;
											checkExameEspecial = true;
											return true;
										}
									}
								})
							}
						})
						if (checkExameEspecial == null) { // não encontrou property de exame especial, logo não é exame especial
							isExameEspecial = false;
						}
					} else {
						error = true;
						errorMsg = &quot;A Parameters Resource was expected as a response&quot;;
					}
				} catch (e2) {
					error = true;
					errorMsg = &quot;Error parsing the response from the endpoint &quot; + e2.toString();
				}
			} else {
				error = true;
				errorMsg = &quot;Endpoint response was not JSON&quot;;
			}
		} else {
			error = true;
			errorMsg = httpResp.statusText ? httpResp.statusText : (httpResp.responseMessage ? httpResp.responseMessage : null);;		
		}
	}
	if (isExameEspecial == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg; //string
	} else {
		resposta.statusCode = &quot;200&quot;;
		resposta.responseMessage = isExameEspecial; // boolean
	}
	return resposta;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b53102c9-17cf-431e-b87a-40d08fe73203</id>
                <name>convertDateToTimeStamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793287</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertDateToTimeStamp(date) {

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = &apos;00&apos;;
	var min = &apos;00&apos;;
	var sec = &apos;00&apos;;
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5714586f-45b8-45cb-9af6-fdabfe1bf9b2</id>
                <name>convertTimeStampToDateStr</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787735</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and time &quot;HHmmss&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@param {String} time - time in format &quot;HHmmss&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertTimeStampToDateStr(date, time) {

	if (time.length &lt;= 5){ // left pad
		time = time.padStart(time.length + 1, &apos;0&apos;);
	}

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = time.substring(0, 2);
	var min = time.substring(2, 4);
	var sec = time.substring(4, 6);
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b4455483-c833-4b4e-adb9-c646cad7bcfe</id>
                <name>DateUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791914</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Date to UTC

	@param {String} date - Date string in format &quot;yyyy-MM-ddTHH:mm:ss+SSSS&quot;
	@return {String} return date in UTC &quot;yyyy-MM-ddTHH:mm:ss+Z&quot;
*/
function DateUtc(date, dateFormat) {

     var formatter_hl7 = new java.text.SimpleDateFormat(dateFormat != null ? dateFormat : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss+SSSS&quot;);
     formatter_hl7.setTimeZone(java.util.TimeZone.getTimeZone($(&apos;serverTimeZone&apos;)));
     var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
     formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	return formatter_utc.format(formatter_hl7.parse(date));			
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4fbdd7b8-7dd0-4ba3-ba13-0a8990b4513b</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788357</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8cb44e20-4b8a-48e6-93ae-aa905dbf2445</id>
                <name>generate_HLv2_messageId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788478</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função criadora de id de mensagem HL7 v2 (MSH.10.1) único v5

	@return {String} id unico
*/
function generate_HLv2_messageId(tipo_mensagem) {

	var timestamp = new Date().getTime().toString();
	var timestamp_length = timestamp.length;

	//random remaining characters
	remainder = 20-3-timestamp_length;
	
	// Generate a random number between 0... and 9...
	var randomNumber = Math.floor(Math.random() * Math.pow(10,remainder));
	// Convert the number to a string and pad it with leading zeros if needed
	var formattedNumber = randomNumber.toString().padStart(remainder, &apos;0&apos;);
	
	return timestamp + &quot;-&quot; + tipo_mensagem[0] +&quot;-&quot; + formattedNumber;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b4aa14b-ee5a-464f-b1c8-0917d2ea815c</id>
                <name>getArrayUniqueValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792417</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns unique values from an array

	@param {array} array - array
	@return {array} return unique values from array
*/
function getArrayUniqueValues(array) {
	var uniqueArray = [];
	for (var i = 0; i &lt; array.length; i++) {
	    if (uniqueArray.indexOf(array[i]) === -1) {
	        uniqueArray.push(array[i]);
	    }
	}

	return uniqueArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bd7561e-2fb9-41d1-a8e3-fbeabaf8099a</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793452</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4814b63d-13ac-4097-86e2-22ca3c24eda4</id>
                <name>getFirstName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns first name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getFirstName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[0];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a594fff0-deb4-4d2a-a11e-f39582b42120</id>
                <name>getIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791988</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Extrai da listagem de identificadores o &quot;codigo&quot; associado a um pretendido &quot;sistCodificador&quot;

	@param {String} listaIds - listagem de identificadores onde procurar
	@param {String} sistCodificador - sistemaCodificador a ser procurado na listagem de identificadores
	@return {String} return codigo (ou null, caso não exista)
*/
function getIdentificador(listaIds, sistCodificador) {
	var codigo = null;	
	try{  		
	    	listaIds.find(function(elemento) {
	    		if (elemento.sistemaCodificador){
	    			try { // para o caso de algum dos identificadores estar mal definido não impedir que se extraia a informação pretendida
		        		if (elemento.sistemaCodificador.toLowerCase() == sistCodificador.toLowerCase()){
		          		codigo= elemento.codigo;
		          		return true;
		        		}
	    			} catch (err) {
		        		;
		        	}
	      	}
	    });
    	} catch (ex1){
    		codigo = null;
    	}
	return codigo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f9529854-80ad-450b-ad8a-54a1b63ba9d1</id>
                <name>getLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791292</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns last name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getLastName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[(names.length -1) ];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6ff6cc61-fa90-455a-b9b4-26f12a870f91</id>
                <name>getLocationExameEspecial</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792555</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dada informação sobre o hospital, o código de catálogo de exame especial e a especialidade, retornar qual a localização no pretendido hospital predestinada para
	a ocorrência de exames especiais dessa mesma especialidade

	@param {String} hospitalINTRefExt - INTRefExt do hospital (CMFL, HTEJO, ...)
	@param {String} catalogCode - código de catálogo do exame especial (10058, 20056, ...)
	@param {String} especialidade - especialidade associada ao exame especial (Cardiologia, Oftalmologia, ...)
	@return {String} return {&quot;servico&quot;: &quot;...&quot;, &quot;area&quot;: &quot;...&quot;, &quot;sala&quot;: &quot;...&quot; &quot;cama&quot;: &quot;...&quot;}
*/
function getLocationExameEspecial(hospitalINTRefExt, catalogCode, especialidade) {
	var error = false;
	var errorMsg = null;
	var resposta = new Object();

	var cama = null;
	var sala = null;
	var area = null;
	var servico = null;
	
	if ( !hospitalINTRefExt || !catalogCode || !especialidade ) {
		error = true;
		errorMsg = &quot;Um dos parametros da função é invalido&quot;;
	} else {
	
		var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	
		/* var selectQuery = &quot;SELECT cama, sala, area FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE servico = &apos;&quot; + AAAAAAAAA + &quot;&apos; AND especialidade = &apos;&quot;+ especialidade + &quot;&apos; AND id =&quot;
						+ &quot;(SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where intRefExt = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) LIMIT 1) LIMIT 1;&quot;; */
	
		var selectIdLocalizacaoSQL = &quot;SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) ;&quot;;
	
		var listIdLocalizacao= [];
		try {
			// Execute the SQL query
			result = dbConn.executeCachedQuery(selectIdLocalizacaoSQL); // return javax.sql.rowset.CachedRowSet
			while (result.next()) {
				listIdLocalizacao.push(result.getString(&quot;idLocalizacao&quot;));
			}
		} catch (e) {
			error = true;
			logger.info(&quot;e.toString() = &quot; + e.toString());
			errorMsg = e.toString();
		} finally {
		    // Close the database connection
		    dbConn.close();
		}
		logger.info(&quot;lsita ids localizacao = &quot; +JSON.stringify(listIdLocalizacao));
		

		if (listIdLocalizacao.length == 0){ // não existem idLocalizacao configurados para o exame
			error = true;
			errorMsg = &quot;Não existem idLocalizacao para o código de catálogo &quot; + catalogCode + &quot; e hospital &quot; + hospitalINTRefExt;
		} else {
			var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
			if (listIdLocalizacao.length == 1) { //só existe 1 idLocalizacao, logo não interessa a especialidade porque a localizacao do exame especial é sempre no mesmo local
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id = &apos;&quot; + listIdLocalizacao[0] + &quot;&apos;;&quot;;
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}			
			} else { // existe mais do que uma localização, logo vai diferenceiar por especialidade
				ids = &quot;(&quot;;
				for (var i=0; i&lt; listIdLocalizacao.length; i++) {
				    ids += &quot;&apos;&quot; + listIdLocalizacao[i].toString() + &quot;&apos;,&quot;;
				}
				ids = ids.slice(0,-1) + &quot;)&quot;;
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id in &quot; + ids + &quot; and especialidade = &apos;&quot;+especialidade+ &quot;&apos;;&quot;;
				logger.info(selectInfosSQL);
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}	
			}
		}
	}


	if (error == true  ) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro interno getLocationExameEspecial()&quot;;
	} else if ( cama == null &amp;&amp; sala == null &amp;&amp; area == null  &amp;&amp; servico == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro na query à LocalizacaoExamesEspeciais&quot;;
	}else {
		resposta.statusCode = &quot;200&quot;;
		var respObj = new Object();
		respObj.cama = cama;
		respObj.area = area;
		respObj.sala = sala;
		respObj.servico = servico;
		resposta.responseMessage = respObj;
	}
	return resposta;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>903737fd-9a14-45ea-b3cf-2af18ba88142</id>
                <name>getNumMecanograficoById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791627</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getNumMecanograficoById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.numMecanografico;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6bdd892d-3953-4f68-af96-44ff89434b13</id>
                <name>getPerfilUtilizadorById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789557</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getPerfilUtilizadorById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.perfil;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee58620f-c785-44f2-a4f7-26a8808c4e16</id>
                <name>getPerformerAndDatesRequisicaoMcdts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788016</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Object} accoesList - ...
	@param {Object} dataCriacaoRequisicao - ...
	@param {Object} utilizadoresList - ...
	@return {Object} return description

	(//R = obrigatório)
	--&gt; Formato esperado acoesList: [
          {
            &quot;utilizadorId&quot; : 12284, //R
            &quot;funcao&quot; : 1, //R
            &quot;data&quot; : &quot;2024-05-08T14:41:51.089035Z&quot; //R
          },
          {
            &quot;utilizadorId&quot; : 12284,
            &quot;funcao&quot; : 3,
            &quot;data&quot; : &quot;2024-05-08T14:27:58.349313Z&quot;
          }
        ]

     --&gt; Formato esperado utilizadoresList: [
	    {
	      &quot;id&quot; : 12284,
	      &quot;login&quot; : &quot;MDPIRES&quot;,
	      &quot;nome&quot; : &quot;Marcos Pires&quot;,
	      &quot;numMecanografico&quot; : &quot;263812278&quot;,
	      &quot;numOrdem&quot; : &quot;123&quot;,
	      &quot;numFuncionario&quot; : null,
	      &quot;perfil&quot; : 1,
	      &quot;intRefExt&quot; : null
	    }
	  ]
	
*/
function getPerformerAndDatesRequisicaoMcdts(accoesList,dataCriacaoRequisicao, utilizadoresList) {

	logger.info(&quot;accoesList - &quot; +JSON.stringify(accoesList));
	logger.info(&quot;dataCriacaoRequisicao - &quot; + JSON.stringify(dataCriacaoRequisicao));
	logger.info(&quot;utilizadoresList - &quot; + JSON.stringify(accoesList));
	returnObj = new Object();
	
	var Performer = Lists.list();
	var occurenceDateTime = null;
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(accoesList); j++ ){
	
	      try {
			if (accoesList[j][&apos;funcao&apos;] == 1 /* Relato */){
				dataRelato = accoesList[j][&apos;data&apos;];
			} else if (accoesList[j][&apos;funcao&apos;] == 2 /* Validacao */){
				dataValidacao = accoesList[j][&apos;data&apos;];
			} else {
				occurenceDateTime = dataCriacaoRequisicao;
			}
	       } catch (error) {
	       	logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro nas datas - &quot; + error.toString()); 
	     }
	
		try {
			  Performer.add({
			    function: {
			        coding: [{
			          system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			          code: newStringOrUndefined( accoesList[j][&apos;funcao&apos;] == 3 /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;])) : mapFuncao(accoesList[j][&apos;funcao&apos;]) )
			        }]
			      },
			    actor: {
			      reference: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) ) : null),
			      identifier: {
			        use: newStringOrUndefined(&apos;official&apos;),
			        type: {
			          coding: [{
			            system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
			            code: newStringOrUndefined(&apos;4&apos;)
			          }],
			          text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
			        },
			        value: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) : null)
			      }
			    }
		  });
		} catch (error2) {
			logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro no performer - &quot; + error2.toString()); 
		}
	}

	returnObj.performer = Performer;
	returnObj.occurenceDateTime = occurenceDateTime;
	returnObj.dataValidacao = dataValidacao;
	returnObj.dataRelato = dataRelato;

	return returnObj;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8615c472-c47a-48aa-a6e7-45e487c4463f</id>
                <name>getRabbitMqHosts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791032</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Void}
	@return {HostsDto} return hosts
*/
function getRabbitMqHosts() {
	// Set RabbitMQ Hosts
	importPackage(com.mirth.rabbitmq.client.dto);
	hosts = [];
	addr = new HostsDto(); // Main Host
	addr.setHost($(&apos;RabbitMqHost&apos;));
	addr.setPort(parseInt($(&apos;RabbitMqPort&apos;)));
	hosts.push(addr);

	return hosts;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f331cea8-c75e-40d4-83d9-a6779b688c81</id>
                <name>isJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790116</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a string is a valid JSON

	@param {String} string to validate if is JSON
	@return {Boolean} return boolean
*/
function isJSON(str) {
  try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27f41d50-5bd7-46da-9ad9-203181a92ba9</id>
                <name>isNumeric</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789613</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a value (string or number) is numeric

	@param {String} value to validate if is numeric
	@return {Boolean} return boolean
*/
function isNumeric(num) {
  if (typeof num == &quot;string&quot;) { 
    return !isNaN(num) &amp;&amp;
           !isNaN(parseFloat(num));
  } else if (typeof num == &quot;number&quot;) {
  	return true;
  } else {
  	return false;
  }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5c27a913-629d-4605-9e85-716a84e11410</id>
                <name>MappFrequencies</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to create multiple VAR Segments according Initial Date and CD_PrescricaoFrequencias

	@param {String} freqUni - CD_PrescricaoFrequencias description code
	@param {String} dateInit - Date HL7 string: start prescription date
	@param {String} DateEnd - Date HL7 string: end prescription date
	@return {String} return VAR Segment
*/
function MappFrequencies(freqUni, dateStart, DateEnd) {

	startDate = &quot;20230227115700&quot;;
	hora = startDate.substring(10, 8);
	freqfactor = 8;
	freqUnit = &apos;Dias&apos;;
	
	if (freqUnit == &apos;Hora&apos;){ // x em x horas
	    // calc hours segments
	    if (startDate.length &gt; 0 &amp;&amp; freqfactor &gt; 1){
	        console.log(&quot;running ...&quot;);
	        for (i = 0; i &lt; (24 / freqfactor) ; i++){
	            if ( (parseInt(hora) + (freqfactor * i) - 24) &gt;= 0  ){
	                hora = parseInt(hora) + (freqfactor * i) - 24;
	                break;
	            }
	        }
	        
	        if ((24 / freqfactor) &gt;= 1){
	            for(i = 0; i &lt; (24 / freqfactor); i++){
	                console.log( (parseInt(hora) + (freqfactor * i)).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	            }
	        }else {
	            console.log( parseInt(hora).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	        }   
	    }
	} else if (freqUnit == &apos;Dias&apos;){ // x em x dias
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Dias da Semanas&apos; || freqUnit == &apos;Por Dia&apos; || freqUnit == &apos;Refeições&apos; || freqUnit == &apos;Dia/Hora&apos;){ // têm de ser criados a cada dia
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Única&apos;){ // Hora fixa^5
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;SOS&apos;){
	    console.log( null )
	}else if (freqUnit == &apos;Turno Fixo&apos;) {
	    // tenho de pedir ao bruno para ter alguma informação relacionada com os turnos
	}else if (freqUnit == &apos;Contínuo&apos; || freqUnit == &apos;Sem horário&apos;){ // Sem hor\XE1\rio^0
	    console.log( null )
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e5cc4c3f-7233-42b0-8162-b3bec0ab5c94</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792857</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fdd919fc-4700-4a8f-aafe-cc2f4653f100</id>
                <name>Unescape HL7 Characters</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790479</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function hexMappingPreProcessor(result) {
	var hexMapping = [
			[/\\x21\\/gi, &quot;!&quot;], [/\\x22\\/gi, &apos;&quot;&apos;], [/\\x23\\/gi, &quot;#&quot;], [/\\x24\\/gi, &quot;$&quot;], [/\\x25\\/gi, &quot;%&quot;], [/\\x26\\/gi, &quot;&amp;&quot;], [/\\x27\\/gi, &quot;&apos;&quot;], [/\\x28\\/gi, &quot;(&quot;], [/\\x29\\/gi, &quot;)&quot;],
			[/\\x2a\\/gi, &quot;*&quot;], [/\\x2b\\/gi, &quot;+&quot;], [/\\x2c\\/gi, &quot;,&quot;], [/\\x2d\\/gi, &quot;-&quot;], [/\\x2e\\/gi, &quot;.&quot;], [/\\x2f\\/gi, &quot;/&quot;], [/\\x30\\/gi, &quot;0&quot;], [/\\x31\\/gi, &quot;1&quot;], [/\\x32\\/gi, &quot;2&quot;],
			[/\\x33\\/gi, &quot;3&quot;], [/\\x34\\/gi, &quot;4&quot;], [/\\x35\\/gi, &quot;5&quot;], [/\\x36\\/gi, &quot;6&quot;], [/\\x37\\/gi, &quot;7&quot;], [/\\x38\\/gi, &quot;8&quot;], [/\\x39\\/gi, &quot;9&quot;], [/\\x3a\\/gi, &quot;:&quot;], [/\\x3b\\/gi, &quot;;&quot;],
			[/\\x3c\\/gi, &quot;&lt;&quot;], [/\\x3d\\/gi, &quot;=&quot;], [/\\x3e\\/gi, &quot;&gt;&quot;], [/\\x3f\\/gi, &quot;?&quot;], [/\\x40\\/gi, &quot;@&quot;], [/\\x41\\/gi, &quot;A&quot;], [/\\x42\\/gi, &quot;B&quot;], [/\\x43\\/gi, &quot;C&quot;], [/\\x44\\/gi, &quot;D&quot;],
			[/\\x45\\/gi, &quot;E&quot;], [/\\x46\\/gi, &quot;F&quot;], [/\\x47\\/gi, &quot;G&quot;], [/\\x48\\/gi, &quot;H&quot;], [/\\x49\\/gi, &quot;I&quot;], [/\\x4a\\/gi, &quot;J&quot;], [/\\x4b\\/gi, &quot;K&quot;], [/\\x4c\\/gi, &quot;L&quot;], [/\\x4d\\/gi, &quot;M&quot;],
			[/\\x4e\\/gi, &quot;N&quot;], [/\\x4f\\/gi, &quot;O&quot;], [/\\x50\\/gi, &quot;P&quot;], [/\\x51\\/gi, &quot;Q&quot;], [/\\x52\\/gi, &quot;R&quot;], [/\\x53\\/gi, &quot;S&quot;], [/\\x54\\/gi, &quot;T&quot;], [/\\x55\\/gi, &quot;U&quot;], [/\\x56\\/gi, &quot;V&quot;],
			[/\\x57\\/gi, &quot;W&quot;], [/\\x58\\/gi, &quot;X&quot;], [/\\x59\\/gi, &quot;Y&quot;], [/\\x5a\\/gi, &quot;Z&quot;], [/\\x5b\\/gi, &quot;[&quot;], [/\\x5c\\/gi, &quot;\\&quot;], [/\\x5d\\/gi, &quot;]&quot;], [/\\x5e\\/gi, &quot;^&quot;], [/\\x5f\\/gi, &quot;_&quot;],
			[/\\x60\\/gi, &quot;`&quot;], [/\\x61\\/gi, &quot;a&quot;], [/\\x62\\/gi, &quot;b&quot;], [/\\x63\\/gi, &quot;c&quot;], [/\\x64\\/gi, &quot;d&quot;], [/\\x65\\/gi, &quot;e&quot;], [/\\x66\\/gi, &quot;f&quot;], [/\\x67\\/gi, &quot;g&quot;], [/\\x68\\/gi, &quot;h&quot;],
			[/\\x69\\/gi, &quot;i&quot;], [/\\x6a\\/gi, &quot;j&quot;], [/\\x6b\\/gi, &quot;k&quot;], [/\\x6c\\/gi, &quot;l&quot;], [/\\x6d\\/gi, &quot;m&quot;], [/\\x6e\\/gi, &quot;n&quot;], [/\\x6f\\/gi, &quot;o&quot;], [/\\x70\\/gi, &quot;p&quot;], [/\\x71\\/gi, &quot;q&quot;],
			[/\\x72\\/gi, &quot;r&quot;], [/\\x73\\/gi, &quot;s&quot;], [/\\x74\\/gi, &quot;t&quot;], [/\\x75\\/gi, &quot;u&quot;], [/\\x76\\/gi, &quot;v&quot;], [/\\x77\\/gi, &quot;w&quot;], [/\\x78\\/gi, &quot;x&quot;], [/\\x79\\/gi, &quot;y&quot;], [/\\x7a\\/gi, &quot;z&quot;],
			[/\\x7b\\/gi, &quot;{&quot;], [/\\x7c\\/gi, &quot;|&quot;], [/\\x7d\\/gi, &quot;}&quot;], [/\\x7e\\/gi, &quot;~&quot;], [/\\xa1\\/gi, &quot;¡&quot;], [/\\xa2\\/gi, &quot;¢&quot;], [/\\xa3\\/gi, &quot;£&quot;], [/\\xa4\\/gi, &quot;¤&quot;], [/\\xa5\\/gi, &quot;¥&quot;],
			[/\\xa6\\/gi, &quot;¦&quot;], [/\\xa7\\/gi, &quot;§&quot;], [/\\xa8\\/gi, &quot;¨&quot;], [/\\xa9\\/gi, &quot;©&quot;], [/\\xaa\\/gi, &quot;ª&quot;], [/\\xab\\/gi, &quot;«&quot;], [/\\xac\\/gi, &quot;¬&quot;], [/\\xa0\\/gi, &quot; &quot;], [/\\xae\\/gi, &quot;®&quot;],
			[/\\xaf\\/gi, &quot;¯&quot;], [/\\xad\\/gi, &quot; &quot;], [/\\xb0\\/gi, &quot;°&quot;], [/\\xb1\\/gi, &quot;±&quot;], [/\\xb2\\/gi, &quot;²&quot;], [/\\xb3\\/gi, &quot;³&quot;], [/\\xb4\\/gi, &quot;´&quot;], [/\\xb5\\/gi, &quot;µ&quot;], [/\\xb6\\/gi, &quot;¶&quot;],
			[/\\xb7\\/gi, &quot;·&quot;], [/\\xb8\\/gi, &quot;¸&quot;], [/\\xb9\\/gi, &quot;¹&quot;], [/\\xba\\/gi, &quot;º&quot;], [/\\xbb\\/gi, &quot;»&quot;], [/\\xbc\\/gi, &quot;¼&quot;], [/\\xbd\\/gi, &quot;½&quot;], [/\\xbe\\/gi, &quot;¾&quot;], [/\\xbf\\/gi, &quot;¿&quot;],
			[/\\xc0\\/gi, &quot;À&quot;], [/\\xc1\\/gi, &quot;Á&quot;], [/\\xc2\\/gi, &quot;Â&quot;], [/\\xc3\\/gi, &quot;Ã&quot;], [/\\xc4\\/gi, &quot;Ä&quot;], [/\\xc5\\/gi, &quot;Å&quot;], [/\\xc6\\/gi, &quot;Æ&quot;], [/\\xc7\\/gi, &quot;Ç&quot;], [/\\xc8\\/gi, &quot;È&quot;],
			[/\\xc9\\/gi, &quot;É&quot;], [/\\xca\\/gi, &quot;Ê&quot;], [/\\xcb\\/gi, &quot;Ë&quot;], [/\\xcc\\/gi, &quot;Ì&quot;], [/\\xcd\\/gi, &quot;Í&quot;], [/\\xce\\/gi, &quot;Î&quot;], [/\\xcf\\/gi, &quot;Ï&quot;], [/\\xd0\\/gi, &quot;Ð&quot;], [/\\xd1\\/gi, &quot;Ñ&quot;],
			[/\\xd2\\/gi, &quot;Ò&quot;], [/\\xd3\\/gi, &quot;Ó&quot;], [/\\xd4\\/gi, &quot;Ô&quot;], [/\\xd5\\/gi, &quot;Õ&quot;], [/\\xd6\\/gi, &quot;Ö&quot;], [/\\xd7\\/gi, &quot;×&quot;], [/\\xd8\\/gi, &quot;Ø&quot;], [/\\xd9\\/gi, &quot;Ù&quot;], [/\\xda\\/gi, &quot;Ú&quot;],
			[/\\xdb\\/gi, &quot;Û&quot;], [/\\xdc\\/gi, &quot;Ü&quot;], [/\\xdd\\/gi, &quot;Ý&quot;], [/\\xde\\/gi, &quot;Þ&quot;], [/\\xdf\\/gi, &quot;ß&quot;], [/\\xe0\\/gi, &quot;à&quot;], [/\\xe1\\/gi, &quot;á&quot;], [/\\xe2\\/gi, &quot;â&quot;], [/\\xe3\\/gi, &quot;ã&quot;],
			[/\\xe4\\/gi, &quot;ä&quot;], [/\\xe5\\/gi, &quot;å&quot;], [/\\xe6\\/gi, &quot;æ&quot;], [/\\xe7\\/gi, &quot;ç&quot;], [/\\xe8\\/gi, &quot;è&quot;], [/\\xe9\\/gi, &quot;é&quot;], [/\\xea\\/gi, &quot;ê&quot;], [/\\xeb\\/gi, &quot;ë&quot;], [/\\xec\\/gi, &quot;ì&quot;],
			[/\\xed\\/gi, &quot;í&quot;], [/\\xee\\/gi, &quot;î&quot;], [/\\xef\\/gi, &quot;ï&quot;], [/\\xf0\\/gi, &quot;ð&quot;], [/\\xf1\\/gi, &quot;ñ&quot;], [/\\xf2\\/gi, &quot;ò&quot;], [/\\xf3\\/gi, &quot;ó&quot;], [/\\xf4\\/gi, &quot;ô&quot;], [/\\xf5\\/gi, &quot;õ&quot;],
			[/\\xf6\\/gi, &quot;ö&quot;], [/\\xf7\\/gi, &quot;÷&quot;], [/\\xf8\\/gi, &quot;ø&quot;], [/\\xf9\\/gi, &quot;ù&quot;], [/\\xfa\\/gi, &quot;ú&quot;], [/\\xfb\\/gi, &quot;û&quot;], [/\\xfc\\/gi, &quot;ü&quot;], [/\\xfd\\/gi, &quot;ý&quot;], [/\\xfe\\/gi, &quot;þ&quot;],
			[/\\xff\\/gi, &quot;ÿ&quot;], [/\\x91\\/gi, &quot;‘&quot;], [/\\x92\\/gi, &quot;’&quot;], [/\\x80\\/gi, &quot;€&quot;], [/\\x83\\/gi, &quot;ƒ&quot;], [/\\x85\\/gi, &quot;…&quot;], [/\\x86\\/gi, &quot;†&quot;], [/\\x87\\/gi, &quot;‡&quot;], [/\\x88\\/gi, &quot;ˆ&quot;],
			[/\\x89\\/gi, &quot;‰&quot;], [/\\x8a\\/gi, &quot;Š&quot;], [/\\x8b\\/gi, &quot;‹&quot;], [/\\x8c\\/gi, &quot;Œ&quot;], [/\\x8e\\/gi, &quot;Ž&quot;], [/\\x93\\/gi, &quot;“&quot;], [/\\x94\\/gi, &quot;”&quot;], [/\\x95\\/gi, &quot;•&quot;], [/\\x96\\/gi, &quot;–&quot;],
			[/\\x97\\/gi, &quot;—&quot;], [/\\x98\\/gi, &quot;˜&quot;], [/\\x99\\/gi, &quot;™&quot;], [/\\x9a\\/gi, &quot;š&quot;], [/\\x9b\\/gi, &quot;›&quot;], [/\\x9c\\/gi, &quot;œ&quot;], [/\\x9e\\/gi, &quot;ž&quot;], [/\\x9f\\/gi, &quot;Ÿ&quot;], [/\\x2079\\/gi, &quot;⁹&quot;],
			[/Ã¡/g, &quot;á&quot;], [/Ã³/g, &quot;ó&quot;], [/Âµ/g, &quot;µ&quot;], [/Ã£/g, &quot;ã&quot;], [/Ã§/g, &quot;ç&quot;], [/Ã©/g, &quot;é&quot;], [/Ãº/g, &quot;ú&quot;], [/Â³/g, &quot;³&quot;], [/\\.br\\/gi, &quot; &quot;], [/  +/g, &apos; &apos;], [/Âº/g, &quot;º&quot;], [/Ã&#x81;/g, &quot;Á&quot;],
			[/Ã¢/g, &quot;â&quot;], [/Ãµ/g, &quot;õ&quot;], [/Ã&#x87;Ã&#x83;/g, &quot;ÇÃ&quot;], [/Ã&#x8d;/g, &apos;Í&apos;], [/Ã&#x87;Ã&#x95;/g, &apos;ÇÕ&apos;], [/Ã&#x93;/g, &quot;Ó&quot;]
			];
	
	for(var i = 0; i &lt; hexMapping.length; i++){
		result = result.replace(hexMapping[i][0], hexMapping[i][1]);
	}

	var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
	for(var i = 0; i &lt; replaceList.length; i++){
		do{
			result = result.replace(replaceList[i][0], replaceList[i][1]);
		}while(result.indexOf(replaceList[i][0]) &gt; -1);
	}
	
	return result;
}



function encodeIsoLatin(result) {
	var hexMapping = [
			/* [&quot;\\x21\\&quot;, &quot;!&quot;], [&quot;\\x3f\\&quot;, &quot;?&quot;], [&quot;\\x2c\\&quot;, &quot;,&quot;], [&quot;\\x3a\\&quot;, &quot;:&quot;], [&quot;\\x2e\\&quot;, &quot;.&quot;], [&quot;\\xa0\\&quot;, &quot; &quot;], [&quot;\\xad\\&quot;, &quot; &quot;], [&quot;\\x2d\\&quot;, &quot;-&quot;], [&quot;\\x5b\\&quot;, &quot;[&quot;], [&quot;\\x5d\\&quot;, &quot;]&quot;], [&quot;\\x5c\\&quot;, &quot;\\&quot;]*/ 
			[&quot;\\x22\\&quot;, /&quot;/g], [&quot;\\x23\\&quot;, /#/g], [&quot;\\x24\\&quot;, /\$/g], [&quot;\\x25\\&quot;, /%/g], [&quot;\\x26\\&quot;, /&amp;/g], [&quot;\\x27\\&quot;, /&apos;/g],
			[&quot;\\x2a\\&quot;, /\*/g], [&quot;\\x2b\\&quot;, /\+/g], [&quot;\\x2f\\&quot;, /\//g], [&quot;\\x3b\\&quot;, /;/g],
			[&quot;\\x3c\\&quot;, /&lt;/g], [&quot;\\x3d\\&quot;, /=/g], [&quot;\\x3e\\&quot;, /&gt;/g], [&quot;\\x40\\&quot;, /@/g], 
			[&quot;\\x5e\\&quot;, /\^/g], [&quot;\\x5f\\&quot;, /_/g], [&quot;\\x60\\&quot;, /`/g], [&quot;\\x7b\\&quot;, /{/g], [&quot;\\x7c\\&quot;, /\|/g], [&quot;\\x7d\\&quot;, /}/g], 
			[&quot;\\x7e\\&quot;, /~/g], [&quot;\\xa1\\&quot;, /¡/g], [&quot;\\xa2\\&quot;, /¢/g], [&quot;\\xa3\\&quot;, /£/g], [&quot;\\xa4\\&quot;, /¤/g], [&quot;\\xa5\\&quot;, /¥/g],
			[&quot;\\xa6\\&quot;, /¦/g], [&quot;\\xa7\\&quot;, /§/g], [&quot;\\xa8\\&quot;, /¨/g], [&quot;\\xa9\\&quot;, /©/g], [&quot;\\xaa\\&quot;, /ª/g], [&quot;\\xab\\&quot;, /«/g], [&quot;\\xac\\&quot;, /¬/g], [&quot;\\xae\\&quot;, /®/g],
			[&quot;\\xaf\\&quot;, /¯/g], [&quot;\\xb0\\&quot;, /°/g], [&quot;\\xb1\\&quot;, /±/g], [&quot;\\xb2\\&quot;, /²/g], [&quot;\\xb3\\&quot;, /³/g], [&quot;\\xb4\\&quot;, /´/g], [&quot;\\xb5\\&quot;, /µ/g], [&quot;\\xb6\\&quot;, /¶/g],
			[&quot;\\xb7\\&quot;, /·/g], [&quot;\\xb8\\&quot;, /¸/g], [&quot;\\xb9\\&quot;, /¹/g], [&quot;\\xba\\&quot;, /º/g], [&quot;\\xbb\\&quot;, /»/g], [&quot;\\xbc\\&quot;, /¼/g], [&quot;\\xbd\\&quot;, /½/g], [&quot;\\xbe\\&quot;, /¾/g], [&quot;\\xbf\\&quot;, /¿/],
			[&quot;\\xc0\\&quot;, /À/g], [&quot;\\xc1\\&quot;, /Á/g], [&quot;\\xc2\\&quot;, /Â/g], [&quot;\\xc3\\&quot;, /Ã/g], [&quot;\\xc4\\&quot;, /Ä/g], [&quot;\\xc5\\&quot;, /Å/g], [&quot;\\xc6\\&quot;, /Æ/g], [&quot;\\xc7\\&quot;, /Ç/g], [&quot;\\xc8\\&quot;, /È/g],
			[&quot;\\xc9\\&quot;, /É/g], [&quot;\\xca\\&quot;, /Ê/g], [&quot;\\xcb\\&quot;, /Ë/g], [&quot;\\xcc\\&quot;, /Ì/g], [&quot;\\xcd\\&quot;, /Í/g], [&quot;\\xce\\&quot;, /Î/g], [&quot;\\xcf\\&quot;, /Ï/g], [&quot;\\xd0\\&quot;, /Ð/g], [&quot;\\xd1\\&quot;, /Ñ/g],
			[&quot;\\xd2\\&quot;, /Ò/g], [&quot;\\xd3\\&quot;, /Ó/g], [&quot;\\xd4\\&quot;, /Ô/g], [&quot;\\xd5\\&quot;, /Õ/g], [&quot;\\xd6\\&quot;, /Ö/g], [&quot;\\xd7\\&quot;, /×/g], [&quot;\\xd8\\&quot;, /Ø/g], [&quot;\\xd9\\&quot;, /Ù/g], [&quot;\\xda\\&quot;, /Ú/g],
			[&quot;\\xdb\\&quot;, /Û/g], [&quot;\\xdc\\&quot;, /Ü/g], [&quot;\\xdd\\&quot;, /Ý/g], [&quot;\\xde\\&quot;, /Þ/g], [&quot;\\xdf\\&quot;, /ß/g], [&quot;\\xe0\\&quot;, /à/g], [&quot;\\xe1\\&quot;, /á/g], [&quot;\\xe2\\&quot;, /â/g], [&quot;\\xe3\\&quot;, /ã/g],
			[&quot;\\xe4\\&quot;, /ä/g], [&quot;\\xe5\\&quot;, /å/g], [&quot;\\xe6\\&quot;, /æ/g], [&quot;\\xe7\\&quot;, /ç/g], [&quot;\\xe8\\&quot;, /è/g], [&quot;\\xe9\\&quot;, /é/g], [&quot;\\xea\\&quot;, /ê/g], [&quot;\\xeb\\&quot;, /ë/g], [&quot;\\xec\\&quot;, /ì/g],
			[&quot;\\xed\\&quot;, /í/g], [&quot;\\xee\\&quot;, /î/g], [&quot;\\xef\\&quot;, /ï/g], [&quot;\\xf0\\&quot;, /ð/g], [&quot;\\xf1\\&quot;, /ñ/g], [&quot;\\xf2\\&quot;, /ò/g], [&quot;\\xf3\\&quot;, /ó/g], [&quot;\\xf4\\&quot;, /ô/g], [&quot;\\xf5\\&quot;, /õ/g],
			[&quot;\\xf6\\&quot;, /ö/g], [&quot;\\xf7\\&quot;, /÷/g], [&quot;\\xf8\\&quot;, /ø/g], [&quot;\\xf9\\&quot;, /ù/g], [&quot;\\xfa\\&quot;, /ú/g], [&quot;\\xfb\\&quot;, /û/g], [&quot;\\xfc\\&quot;, /ü/g], [&quot;\\xfd\\&quot;, /ý/g], [&quot;\\xfe\\&quot;, /þ/g],
			[&quot;\\xff\\&quot;, /ÿ/g], [&quot;\\x91\\&quot;, /‘/g], [&quot;\\x92\\&quot;, /’/g], [&quot;\\x80\\&quot;, /€/g], [&quot;\\x83\\&quot;, /ƒ/g], [&quot;\\x85\\&quot;, /…/g], [&quot;\\x86\\&quot;, /†/g], [&quot;\\x87\\&quot;, /‡/g], [&quot;\\x88\\&quot;, /ˆ/g],
			[&quot;\\x89\\&quot;, /‰/g], [&quot;\\x8a\\&quot;, /Š/g], [&quot;\\x8b\\&quot;, /‹/g], [&quot;\\x8c\\&quot;, /Œ/g], [&quot;\\x8e\\&quot;, /Ž/g], [&quot;\\x93\\&quot;, /“/g], [&quot;\\x94\\&quot;, /”/g], [&quot;\\x95\\&quot;, /•/g], [&quot;\\x96\\&quot;, /–/g],
			[&quot;\\x97\\&quot;, /—/g], [&quot;\\x98\\&quot;, /˜/g], [&quot;\\x99\\&quot;, /™/g], [&quot;\\x9a\\&quot;, /š/g], [&quot;\\x9b\\&quot;, /›/g], [&quot;\\x9c\\&quot;, /œ/g], [&quot;\\x9e\\&quot;, /ž/g], [&quot;\\x9f\\&quot;, /Ÿ/g], [&quot;\\x2079\\&quot;, /⁹/g],
			[&quot;\\x0a\\&quot;, /\n/g], [&quot;\\x0d\\&quot;, /\r/g]
			];
	
	if (result != null){
		for(var i = 0; i &lt; hexMapping.length; i++){
			result = result.replace(hexMapping[i][1], hexMapping[i][0]);
		}		

		var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
		for(var i = 0; i &lt; replaceList.length; i++){
			do{
				result = result.replace(replaceList[i][1], replaceList[i][0]);
			}while(result.indexOf(replaceList[i][0]) &gt; -1);
		}
	}
	
	return result;
}


function hexMappingReservatedChars(result) {
	var pattern = [[/\\T\\/g, &quot;&amp;&quot; ], [/\\R\\/g, &apos;~&apos;], [/\\E\\/g, &apos;\\&apos;], [/\\F\\/g, &apos;|&apos;], [/\\S\\/g, &apos;^&apos;]];
	
	for(var i = 0; i &lt; pattern.length; i++){
		result = result.replace(pattern[i][0], pattern[i][1]);
	}
	
	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fde5f48b-6860-49be-a9ab-dfb0e4ba3b97</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790008</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>98336369-69c8-4249-abb8-7479f97c4e58</id>
      <nextMetaDataId>6</nextMetaDataId>
      <name>SEND_CHARGE_ITEM</name>
      <description>Descrição:
Canal cuja funcionalidade passa por encaminhar os Bundles com ChargeItems para o BUS da CUF, adicionando à estrutura do Bundle informações características da CUF: circutio TECMED, etc.
NOTA DE TRABALHO FUTURO: definir os nossos próprios codesystems e destinations para o ChargeItem nos outros canais (standard B-Simple) e neste canal reestruturar essas partes para bater com os codesystems e destinations da CUF (especificação CUF).

Documentação:
Contrato interno: deve ser enviado o Bundle pronto a ser enviado (incluindo MessageHeader correto).

Versão:
1.0.0
	ChangeLog:
	0.0.1 - versão inicial com a retificação do MessageHeader.focus do ChargeItem intracanal.
	0.0.2 - Bundle c/ ChargeItem já vem corretamente construído e aqui só se manipulam aspetos de BUS: características TECMED, etc. (existiu reestruturação para centralizar a lógica de construção do ChargeItem no canal FUNC_CREATE_CHARGE_ITEM)

Dependências:
- generateLogMsg()
- DateUtc()
- getPractitionerByNumMecanografico()
- httpGet()

Canais interligados:
- FUNC_CREATE_CHARGE_ITEM

Variáveis de ambiente:
- FhirServer_CUFBUS_Host
- FhirServer_CUFBUS_User
- FhirServer_CUFBUS_Pass</description>
      <revision>154</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>Auto-generate (Before processing)</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Consolidate MessageHeader Focus</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>false</enabled>
              <script>var list = [];
for (var i = 0; i &lt; msg[&apos;entry&apos;][0][&apos;resource&apos;][&apos;focus&apos;].length ; i++){
	if (msg[&apos;entry&apos;][0][&apos;resource&apos;][&apos;focus&apos;][i][&apos;reference&apos;].replace(&quot;ChargeItem/&quot;, &quot;&quot;).equals(msg[&apos;entry&apos;][1][&apos;resource&apos;][&apos;id&apos;])){
		var obj = {};
		obj.reference = msg[&apos;entry&apos;][0][&apos;resource&apos;][&apos;focus&apos;][i][&apos;reference&apos;];
		list.push(obj);
	}
}

msg[&apos;entry&apos;][0][&apos;resource&apos;][&apos;focus&apos;] = list;</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>bundleId</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <variable>bundleId</variable>
              <mapping>msg[&apos;id&apos;]</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>custom metadata</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>// mensagem de origem (id da mensagem no canal anterior)
channelMap.put(&apos;idMsg_canalAnterior&apos;, sourceMap.get(&apos;sourceMessageId&apos;));

// canal de origem
var idCanalOrigem = sourceMap.get(&apos;sourceChannelId&apos;)
if (idCanalOrigem == &apos;c694edba-a184-4970-a5a5-b296092b53a0&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;CONSUMOS_OUT&apos;);

} else if (idCanalOrigem == &apos;74dbb502-8da5-45ee-90ed-3ccc48afe44c&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;FUNC_CREATE_CHARGE_ITEM&apos;);

} else if (idCanalOrigem == &apos;a3596087-6fb3-4fa8-b94c-a589692fe2b0&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;DELIVERS_INTERVENCOES_OUT&apos;);

} else if (idCanalOrigem == &apos;3fe6d772-4b87-435b-ab48-1a3cd74b6a18&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;CREATE_MCDT_PRESCRIPTION_OUT&apos;);

} else if (idCanalOrigem == &apos;06a5f02f-49cc-47d7-ad4d-a0da403d4d8a&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;BUS_CREATE_MCDT_PRESCRIPTION_OUT&apos;);

} else if (idCanalOrigem == &apos;70552e1b-f45c-4b0c-a5aa-857417d1ffd8&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;CREATE_MEDICAL_VISIT_CHARGE_ITEM_OUT&apos;);
	
} else if (idCanalOrigem == &apos;0fac608a-4239-45eb-9822-e5d714d7d5db&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;URGENCY_UPDATE_LOCATION_OUT&apos;);
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">ew0KICAicmVzb3VyY2VUeXBlIiA6ICJCdW5kbGUiLA0KICAiaWQiIDogIjc3N2YwOTE0LWQxZjQtNDIxZi04ODEwLWJlZjE5MmNkNmUyMCIsDQogICJ0eXBlIiA6ICJtZXNzYWdlIiwNCiAgInRpbWVzdGFtcCIgOiAiMjAyMy0wNy0wM1QxMTozMToyOS4wMDAwMzEzKzAxOjAwIiwNCiAgImVudHJ5IiA6IFsNCiAgICAKICBdDQp9</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>FHIR</inboundDataType>
          <outboundDataType>FHIR</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
              <serializationType>JSON</serializationType>
              <fhirVersion>R4</fhirVersion>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
              <serializationType>JSON</serializationType>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
              <serializationType>JSON</serializationType>
              <fhirVersion>R4</fhirVersion>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
              <serializationType>JSON</serializationType>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>1</metaDataId>
          <name>Send Charge Item Bundle</name>
          <properties class="com.mirth.connect.connectors.fhir.shared.FhirDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <host>${FhirServer_CUFBUS_Host}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>POST</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>true</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username>${FhirServer_CUFBUS_User}</username>
            <password>${FhirServer_CUFBUS_Pass}</password>
            <content>${message.encodedData}</content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
            <capabilitiesURL></capabilitiesURL>
            <systemInteraction>false</systemInteraction>
            <resource>Bundle</resource>
            <interaction>create</interaction>
            <operationScopeInstance>false</operationScopeInstance>
            <path>${FhirServer_CUFBUS_Host}/Bundle</path>
            <pathVariables/>
            <usingBuilder>false</usingBuilder>
            <modelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
              <usingBuilder>true</usingBuilder>
              <properties class="linked-hash-map">
                <entry>
                  <string>resourceType</string>
                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    <enabled>true</enabled>
                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                      <stringValue>Bundle</stringValue>
                    </properties>
                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                </entry>
                <entry>
                  <string>type</string>
                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    <enabled>false</enabled>
                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                      <stringValue>document</stringValue>
                      <usingEnum>true</usingEnum>
                    </properties>
                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                </entry>
              </properties>
            </modelProperties>
            <fhirVersion>R4</fhirVersion>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>TecMed Edit</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var outBundle = msg
var medPractitioner = -1;
var mvPractitioner = -2;
var nrPractitioner = -3;
var queued = false;

var chargeItem = outBundle.entry.find(function(entry1){
		
	if(entry1.resource.resourceType &amp;&amp; entry1.resource.resourceType === &quot;ChargeItem&quot;){
		return entry1;
	}else{
		return false;
	}
	
});

if (typeof(chargeItem.resource.performer) != &apos;undefined&apos;){
	
	chargeItem.resource.performer.forEach(function(performer1){
	if (performer1.function.coding[0].code == &quot;MED&quot;){
		var practitioner = getPractitionerByNumMecanografico(performer1.actor.identifier.value)
		if(practitioner.statusCode === &quot;200&quot;){
			if (practitioner.response != null) {
			practitioner.response.qualification.find(function (qual1){
					if (qual1.code.coding[0].code == &quot;3&quot; || qual1.code.coding[0].code == &quot;4&quot;){
						performer1.function.coding[0].code = &quot;TEC&quot;
						return true;			
					}	
				})
			}
			
		}else {
			if(practitioner.statusCode &gt;= &quot;400&quot;){
				queued = true;
			}
		}
	}
		
	});

	chargeItem.resource.performer.forEach(function(performer1){
		switch(performer1.function.coding[0].code){
			case &quot;MED&quot;: 
				performer1.function.coding[0].code = &quot;MV&quot;
				mvPractitioner = performer1.actor.identifier.value; 
				break;
			case &quot;MV&quot;: 
				mvPractitioner = performer1.actor.identifier.value; 
				break;
			case &quot;MR&quot;: 
				nrPractitioner = performer1.actor.identifier.value; 
				break;
		}	
		
	});
	
	if (medPractitioner == mvPractitioner){
		var index = chargeItem.resource.performer.findIndex(performer1 =&gt; performer1.function.coding[0].code === &quot;MED&quot; );
		chargeItem.resource.performer.splice(index,1);
	}
	
	if (mvPractitioner == nrPractitioner){
		var index = chargeItem.resource.performer.findIndex(performer1 =&gt; performer1.function.coding[0].code === &quot;MV&quot; );
		chargeItem.resource.performer.splice(index,1);
	}
}

channelMap.put(&apos;queued&apos;, queued);
return outBundle;</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICJyZXNvdXJjZVR5cGUiIDogIkJ1bmRsZSIsCiAgImlkIiA6ICJjMTUyZjUwZi04ZGIwLTQ4NmItOWI4NS1hZDcwMzIwYTEzODEiLAogICJ0eXBlIiA6ICJtZXNzYWdlIiwKICAidGltZXN0YW1wIiA6ICIyMDI0LTA2LTI3VDE2OjU0OjQ5LjAwMDAwNDMrMDE6MDAiLAogICJlbnRyeSIgOiBbCiAgICB7CiAgICAgICJyZXNvdXJjZSIgOiB7CiAgICAgICAgInJlc291cmNlVHlwZSIgOiAiTWVzc2FnZUhlYWRlciIsCiAgICAgICAgImV2ZW50Q29kaW5nIiA6IHsKICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vYnNpbXBsZS1lc2ItdWF0LWEuaS5qbXNsYWIucHQvZmhpci9Db2RlU3lzdGVtL0ZoaXJTZXJ2ZXJPdXRNZXNzYWdlcyIsCiAgICAgICAgICAiY29kZSIgOiAiQ3JlYXRlQ2hhcmdlSXRlbSIKICAgICAgICB9LAogICAgICAgICJkZXN0aW5hdGlvbiIgOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIiA6ICJJTVRIT00iLAogICAgICAgICAgICAiZW5kcG9pbnQiIDogImh0dHBzOi8vdGhvbS1maGlyLmFwaXMudWF0Lmptc2xhYi5wdC9maGlyLyRwcm9jZXNzLW1lc3NhZ2UiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAic291cmNlIiA6IHsKICAgICAgICAgICJuYW1lIiA6ICJQYXRpZW50Q2FyZSIsCiAgICAgICAgICAiZW5kcG9pbnQiIDogImh0dHBzOi8vYnNpbXBsZS1lc2ItdWF0LWEuaS5qbXNsYWIucHQvZmhpci9yNC8kcHJvY2Vzcy1tZXNzYWdlIgogICAgICAgIH0sCiAgICAgICAgImZvY3VzIiA6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hhcmdlSXRlbS9QQ185MDgxIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgInJlc291cmNlIiA6IHsKICAgICAgICAicmVzb3VyY2VUeXBlIiA6ICJDaGFyZ2VJdGVtIiwKICAgICAgICAiaWQiIDogIlBDXzkwODEiLAogICAgICAgICJleHRlbnNpb24iIDogWwogICAgICAgICAgewogICAgICAgICAgICAidXJsIiA6ICJodHRwczovL2JzaW1wbGUtZXNiLXVhdC1hLmkuam1zbGFiLnB0L2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9DYXJlUGxhbi5DbGluaWNhbEluZm9ybWF0aW9uIiwKICAgICAgICAgICAgInZhbHVlU3RyaW5nIiA6ICJ0ZXN0ZSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ1cmwiIDogImh0dHBzOi8vdGhvbS1maGlyLmFwaXMudWF0Lmptc2xhYi5wdC9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vU2VydmljZVJlcXVlc3QuRXh0ZXJuYWxJZCIsCiAgICAgICAgICAgICJ2YWx1ZVN0cmluZyIgOiAiUENfOTA4MSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJpZGVudGlmaWVyIiA6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInVzZSIgOiAib2ZmaWNpYWwiLAogICAgICAgICAgICAidHlwZSIgOiB7CiAgICAgICAgICAgICAgImNvZGluZyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwMyIsCiAgICAgICAgICAgICAgICAgICJjb2RlIiA6ICJQTEFDIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRleHQiIDogIlBsYWNlciBJZGVudGlmaWVyIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidmFsdWUiIDogIlBDXzkwODEiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAic3RhdHVzIiA6ICJiaWxsYWJsZSIsCiAgICAgICAgImNvZGUiIDogewogICAgICAgICAgImNvZGluZyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAic3lzdGVtIiA6ICJodHRwczovL2JzaW1wbGUtZXNiLXVhdC1hLmkuam1zbGFiLnB0L2ZoaXIvQ29kZVN5c3RlbS9TZXJ2aWNlIiwKICAgICAgICAgICAgICAiY29kZSIgOiAiUENfOTA4MSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vY3VmLnB0L2ZoaXIvQ29kZVN5c3RlbS9TZXJ2aWNlIiwKICAgICAgICAgICAgICAiY29kZSIgOiAiNDE1MDM4MDA4IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgInRleHQiIDogIkJpb21ldHJpYSDDk3B0aWNhIC8gSW50ZXJmZXJvbWV0cmlhIExBU0VSKiIKICAgICAgICB9LAogICAgICAgICJzdWJqZWN0IiA6IHsKICAgICAgICAgICJyZWZlcmVuY2UiIDogIlBhdGllbnQvMTg1MjM4MDUiLAogICAgICAgICAgImlkZW50aWZpZXIiIDogewogICAgICAgICAgICAidXNlIiA6ICJvZmZpY2lhbCIsCiAgICAgICAgICAgICJ0eXBlIiA6IHsKICAgICAgICAgICAgICAiY29kaW5nIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInN5c3RlbSIgOiAiaHR0cHM6Ly9jdWYucHQvZmhpci9Db2RlU3lzdGVtL1BhdGllbnRDb2RlIiwKICAgICAgICAgICAgICAgICAgImNvZGUiIDogIkpNUyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0ZXh0IiA6ICJKTVMgSWRlbnRpZmllciIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZhbHVlIiA6ICIxODUyMzgwNSIKICAgICAgICAgIH0sCiAgICAgICAgICAiZGlzcGxheSIgOiAiQUlEQSBNQVJJTElBIEJBTkRFSVJBIFNBTlRPUyBST0NIQSIKICAgICAgICB9LAogICAgICAgICJjb250ZXh0IiA6IHsKICAgICAgICAgICJyZWZlcmVuY2UiIDogIkVuY291bnRlci82ZDE3MjNmOS05YzM0LWVmMTEtOGVjZS0wMDUwNTY5ZjU4ZTIiCiAgICAgICAgfSwKICAgICAgICAib2NjdXJyZW5jZURhdGVUaW1lIiA6ICIyMDI0LTA2LTI3VDE1OjU0OjAwWiIsCiAgICAgICAgInBlcmZvcm1lciIgOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJmdW5jdGlvbiIgOiB7CiAgICAgICAgICAgICAgImNvZGluZyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vY3VmLnB0L2ZoaXIvQ29kZVN5c3RlbS9QZXJzb25GdW5jdGlvbiIsCiAgICAgICAgICAgICAgICAgICJjb2RlIiA6ICJNViIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJhY3RvciIgOiB7CiAgICAgICAgICAgICAgInJlZmVyZW5jZSIgOiAiUHJhY3RpdGlvbmVyLzIxOTMxNzg4NyIsCiAgICAgICAgICAgICAgImlkZW50aWZpZXIiIDogewogICAgICAgICAgICAgICAgInVzZSIgOiAib2ZmaWNpYWwiLAogICAgICAgICAgICAgICAgInR5cGUiIDogewogICAgICAgICAgICAgICAgICAiY29kaW5nIiA6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAic3lzdGVtIiA6ICJodHRwczovL2N1Zi5wdC9maGlyL0NvZGVTeXN0ZW0vUGVyc29uSWRlbnRpZmllclR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgImNvZGUiIDogIjQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAidGV4dCIgOiAiTi7CuiBtZWNhbm9ncsOhZmljbyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAidmFsdWUiIDogIjIxOTMxNzg4NyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJmdW5jdGlvbiIgOiB7CiAgICAgICAgICAgICAgImNvZGluZyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vY3VmLnB0L2ZoaXIvQ29kZVN5c3RlbS9QZXJzb25GdW5jdGlvbiIsCiAgICAgICAgICAgICAgICAgICJjb2RlIiA6ICJNRUQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiYWN0b3IiIDogewogICAgICAgICAgICAgICJyZWZlcmVuY2UiIDogIlByYWN0aXRpb25lci85NjUxIiwKICAgICAgICAgICAgICAiaWRlbnRpZmllciIgOiB7CiAgICAgICAgICAgICAgICAidXNlIiA6ICJvZmZpY2lhbCIsCiAgICAgICAgICAgICAgICAidHlwZSIgOiB7CiAgICAgICAgICAgICAgICAgICJjb2RpbmciIDogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vY3VmLnB0L2ZoaXIvQ29kZVN5c3RlbS9QZXJzb25JZGVudGlmaWVyVHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAiY29kZSIgOiAiNCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJ0ZXh0IiA6ICJOLsK6IG1lY2Fub2dyw6FmaWNvIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiOTY1MSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJxdWFudGl0eSIgOiB7CiAgICAgICAgICAidmFsdWUiIDogMQogICAgICAgIH0KICAgICAgfQogICAgfQogIF0KfQ==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>FHIR Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>5</metaDataId>
          <name>Send Charge Item Bundle - Tecmed consulta API</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>true</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>true</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>if(Boolean($(&apos;queued&apos;) === &quot;true&quot;)){
	response = Response(Status.QUEUED,  &apos;Falha na comunicação com a API para obter o perfil do profissional&apos;);
}else{
	var authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_CUFBUS_User&apos;), $(&apos;FhirServer_CUFBUS_Pass&apos;));
	logger.info(&quot;authHeader: &quot; + authHeader);
	httpResp = httpPost($(&apos;FhirServer_CUFBUS_Host&apos;) + &apos;/Bundle&apos;, JSON.stringify(connectorMessage.getEncodedData()), authHeader);
	channelMap.put(&apos;httpResp&apos;, httpResp)
	var statusMessage = &quot;\n POST &quot; + $(&apos;FhirServer_CUFBUS_Host&apos;) + &apos;/Bundle&apos; + &apos;\n&apos; + &apos;[BODY]\n&apos; + connectorMessage.getEncodedData();
	
	if(httpResp.statusCode === &quot;200&quot;){
		response = Response(Status.SENT, httpResp.responseMessage, statusMessage);
	}else {
		response = Response(Status.QUEUED, JSON.stringify(httpResp), statusMessage);
	}
	
}

return response;
</script>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>TecMed Edit</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var outBundle = msg
var medPractitioner = -1;
var mvPractitioner = -2;
var nrPractitioner = -3;
var queued = false;

var chargeItem = outBundle.entry.find(function(entry1){
		
	if(entry1.resource.resourceType &amp;&amp; entry1.resource.resourceType === &quot;ChargeItem&quot;){
		return entry1;
	}else{
		return false;
	}
	
});

if (typeof(chargeItem.resource.performer) != &apos;undefined&apos;){
	
	chargeItem.resource.performer.forEach(function(performer1){
	if (performer1.function.coding[0].code == &quot;MED&quot;){
		var practitioner = getPractitionerByNumMecanografico(performer1.actor.identifier.value)
		if(practitioner.statusCode === &quot;200&quot;){
			if(isJSON(practitioner.response)){
				if (practitioner.response != null) {
				practitioner.response.qualification.find(function (qual1){
						if (qual1.code.coding[0].code == &quot;4&quot; || qual1.code.coding[0].code == &quot;5&quot;){
							performer1.function.coding[0].code = &quot;TEC&quot;
							return true;			
						}	
					})
				}
			}
		}else {
			if(practitioner.statusCode &gt;= &quot;400&quot;){
				queued = true;
			}
		}
	}
		
	});

	chargeItem.resource.performer.forEach(function(performer1){
		switch(performer1.function.coding[0].code){
			case &quot;MED&quot;: 
				performer1.function.coding[0].code = &quot;MV&quot;
				mvPractitioner = performer1.actor.identifier.value; 
				break;
			case &quot;MV&quot;: 
				mvPractitioner = performer1.actor.identifier.value; 
				break;
			case &quot;NR&quot;: 
				nrPractitioner = performer1.actor.identifier.value; 
				break;
		}	
		
	});
	
	if (medPractitioner == mvPractitioner){
		var index = chargeItem.resource.performer.findIndex(performer1 =&gt; performer1.function.coding[0].code === &quot;MED&quot; );
		chargeItem.resource.performer.splice(index,1);
	}
	
	if (mvPractitioner == nrPractitioner){
		var index = chargeItem.resource.performer.findIndex(performer1 =&gt; performer1.function.coding[0].code === &quot;MV&quot; );
		chargeItem.resource.performer.splice(index,1);
	}
}

channelMap.put(&apos;queued&apos;, queued);
return outBundle;</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICJyZXNvdXJjZVR5cGUiIDogIkJ1bmRsZSIsCiAgImlkIiA6ICJjMTUyZjUwZi04ZGIwLTQ4NmItOWI4NS1hZDcwMzIwYTEzODEiLAogICJ0eXBlIiA6ICJtZXNzYWdlIiwKICAidGltZXN0YW1wIiA6ICIyMDI0LTA2LTI3VDE2OjU0OjQ5LjAwMDAwNDMrMDE6MDAiLAogICJlbnRyeSIgOiBbCiAgICB7CiAgICAgICJyZXNvdXJjZSIgOiB7CiAgICAgICAgInJlc291cmNlVHlwZSIgOiAiTWVzc2FnZUhlYWRlciIsCiAgICAgICAgImV2ZW50Q29kaW5nIiA6IHsKICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vYnNpbXBsZS1lc2ItdWF0LWEuaS5qbXNsYWIucHQvZmhpci9Db2RlU3lzdGVtL0ZoaXJTZXJ2ZXJPdXRNZXNzYWdlcyIsCiAgICAgICAgICAiY29kZSIgOiAiQ3JlYXRlQ2hhcmdlSXRlbSIKICAgICAgICB9LAogICAgICAgICJkZXN0aW5hdGlvbiIgOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIiA6ICJJTVRIT00iLAogICAgICAgICAgICAiZW5kcG9pbnQiIDogImh0dHBzOi8vdGhvbS1maGlyLmFwaXMudWF0Lmptc2xhYi5wdC9maGlyLyRwcm9jZXNzLW1lc3NhZ2UiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAic291cmNlIiA6IHsKICAgICAgICAgICJuYW1lIiA6ICJQYXRpZW50Q2FyZSIsCiAgICAgICAgICAiZW5kcG9pbnQiIDogImh0dHBzOi8vYnNpbXBsZS1lc2ItdWF0LWEuaS5qbXNsYWIucHQvZmhpci9yNC8kcHJvY2Vzcy1tZXNzYWdlIgogICAgICAgIH0sCiAgICAgICAgImZvY3VzIiA6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInJlZmVyZW5jZSIgOiAiQ2hhcmdlSXRlbS9QQ185MDgxIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgInJlc291cmNlIiA6IHsKICAgICAgICAicmVzb3VyY2VUeXBlIiA6ICJDaGFyZ2VJdGVtIiwKICAgICAgICAiaWQiIDogIlBDXzkwODEiLAogICAgICAgICJleHRlbnNpb24iIDogWwogICAgICAgICAgewogICAgICAgICAgICAidXJsIiA6ICJodHRwczovL2JzaW1wbGUtZXNiLXVhdC1hLmkuam1zbGFiLnB0L2ZoaXIvU3RydWN0dXJlRGVmaW5pdGlvbi9DYXJlUGxhbi5DbGluaWNhbEluZm9ybWF0aW9uIiwKICAgICAgICAgICAgInZhbHVlU3RyaW5nIiA6ICJ0ZXN0ZSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJ1cmwiIDogImh0dHBzOi8vdGhvbS1maGlyLmFwaXMudWF0Lmptc2xhYi5wdC9maGlyL1N0cnVjdHVyZURlZmluaXRpb24vU2VydmljZVJlcXVlc3QuRXh0ZXJuYWxJZCIsCiAgICAgICAgICAgICJ2YWx1ZVN0cmluZyIgOiAiUENfOTA4MSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJpZGVudGlmaWVyIiA6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInVzZSIgOiAib2ZmaWNpYWwiLAogICAgICAgICAgICAidHlwZSIgOiB7CiAgICAgICAgICAgICAgImNvZGluZyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwMyIsCiAgICAgICAgICAgICAgICAgICJjb2RlIiA6ICJQTEFDIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInRleHQiIDogIlBsYWNlciBJZGVudGlmaWVyIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidmFsdWUiIDogIlBDXzkwODEiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAic3RhdHVzIiA6ICJiaWxsYWJsZSIsCiAgICAgICAgImNvZGUiIDogewogICAgICAgICAgImNvZGluZyIgOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAic3lzdGVtIiA6ICJodHRwczovL2JzaW1wbGUtZXNiLXVhdC1hLmkuam1zbGFiLnB0L2ZoaXIvQ29kZVN5c3RlbS9TZXJ2aWNlIiwKICAgICAgICAgICAgICAiY29kZSIgOiAiUENfOTA4MSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vY3VmLnB0L2ZoaXIvQ29kZVN5c3RlbS9TZXJ2aWNlIiwKICAgICAgICAgICAgICAiY29kZSIgOiAiNDE1MDM4MDA4IgogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgInRleHQiIDogIkJpb21ldHJpYSDDk3B0aWNhIC8gSW50ZXJmZXJvbWV0cmlhIExBU0VSKiIKICAgICAgICB9LAogICAgICAgICJzdWJqZWN0IiA6IHsKICAgICAgICAgICJyZWZlcmVuY2UiIDogIlBhdGllbnQvMTg1MjM4MDUiLAogICAgICAgICAgImlkZW50aWZpZXIiIDogewogICAgICAgICAgICAidXNlIiA6ICJvZmZpY2lhbCIsCiAgICAgICAgICAgICJ0eXBlIiA6IHsKICAgICAgICAgICAgICAiY29kaW5nIiA6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgInN5c3RlbSIgOiAiaHR0cHM6Ly9jdWYucHQvZmhpci9Db2RlU3lzdGVtL1BhdGllbnRDb2RlIiwKICAgICAgICAgICAgICAgICAgImNvZGUiIDogIkpNUyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJ0ZXh0IiA6ICJKTVMgSWRlbnRpZmllciIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInZhbHVlIiA6ICIxODUyMzgwNSIKICAgICAgICAgIH0sCiAgICAgICAgICAiZGlzcGxheSIgOiAiQUlEQSBNQVJJTElBIEJBTkRFSVJBIFNBTlRPUyBST0NIQSIKICAgICAgICB9LAogICAgICAgICJjb250ZXh0IiA6IHsKICAgICAgICAgICJyZWZlcmVuY2UiIDogIkVuY291bnRlci82ZDE3MjNmOS05YzM0LWVmMTEtOGVjZS0wMDUwNTY5ZjU4ZTIiCiAgICAgICAgfSwKICAgICAgICAib2NjdXJyZW5jZURhdGVUaW1lIiA6ICIyMDI0LTA2LTI3VDE1OjU0OjAwWiIsCiAgICAgICAgInBlcmZvcm1lciIgOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJmdW5jdGlvbiIgOiB7CiAgICAgICAgICAgICAgImNvZGluZyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vY3VmLnB0L2ZoaXIvQ29kZVN5c3RlbS9QZXJzb25GdW5jdGlvbiIsCiAgICAgICAgICAgICAgICAgICJjb2RlIiA6ICJNViIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJhY3RvciIgOiB7CiAgICAgICAgICAgICAgInJlZmVyZW5jZSIgOiAiUHJhY3RpdGlvbmVyLzIxOTMxNzg4NyIsCiAgICAgICAgICAgICAgImlkZW50aWZpZXIiIDogewogICAgICAgICAgICAgICAgInVzZSIgOiAib2ZmaWNpYWwiLAogICAgICAgICAgICAgICAgInR5cGUiIDogewogICAgICAgICAgICAgICAgICAiY29kaW5nIiA6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAic3lzdGVtIiA6ICJodHRwczovL2N1Zi5wdC9maGlyL0NvZGVTeXN0ZW0vUGVyc29uSWRlbnRpZmllclR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgImNvZGUiIDogIjQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAidGV4dCIgOiAiTi7CuiBtZWNhbm9ncsOhZmljbyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAidmFsdWUiIDogIjIxOTMxNzg4NyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJmdW5jdGlvbiIgOiB7CiAgICAgICAgICAgICAgImNvZGluZyIgOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vY3VmLnB0L2ZoaXIvQ29kZVN5c3RlbS9QZXJzb25GdW5jdGlvbiIsCiAgICAgICAgICAgICAgICAgICJjb2RlIiA6ICJNRUQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiYWN0b3IiIDogewogICAgICAgICAgICAgICJyZWZlcmVuY2UiIDogIlByYWN0aXRpb25lci85NjUxIiwKICAgICAgICAgICAgICAiaWRlbnRpZmllciIgOiB7CiAgICAgICAgICAgICAgICAidXNlIiA6ICJvZmZpY2lhbCIsCiAgICAgICAgICAgICAgICAidHlwZSIgOiB7CiAgICAgICAgICAgICAgICAgICJjb2RpbmciIDogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJzeXN0ZW0iIDogImh0dHBzOi8vY3VmLnB0L2ZoaXIvQ29kZVN5c3RlbS9QZXJzb25JZGVudGlmaWVyVHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAiY29kZSIgOiAiNCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJ0ZXh0IiA6ICJOLsK6IG1lY2Fub2dyw6FmaWNvIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ2YWx1ZSIgOiAiOTY1MSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJxdWFudGl0eSIgOiB7CiAgICAgICAgICAidmFsdWUiIDogMQogICAgICAgIH0KICAgICAgfQogICAgfQogIF0KfQ==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
logger.info(generateLogMsg(&quot;appointment&quot;, message, null, null, null, null, null));
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>false</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>BUNDLEID</name>
            <type>STRING</type>
            <mappingName>bundleId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CANALORIGEM</name>
            <type>STRING</type>
            <mappingName>canalOrigem</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>IDMSG_CANALANTERIOR</name>
            <type>STRING</type>
            <mappingName>idMsg_canalAnterior</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1730203908628</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>30</pruneMetaDataDays>
            <pruneContentDays>30</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>552e2c11-37bf-43a3-baa2-1754b361168d</id>
            <name>API Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089515</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>API functions library with utility functions for generic functions that will be invoked along the various channels, e.g. consumption of basic PatientCare services, logging of logs, etc
</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>b6d68590-ac13-4d9f-a89c-6808f98fd974</string>
              <string>7ec636a5-c259-415e-9da9-564aa4bf0672</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>070cf4a3-def7-4c23-b200-e7337ab0f153</string>
              <string>2980f7b0-4597-4f7a-a1de-4dfcd19b0540</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>4f2e8bd8-d8ce-4829-9109-17b568f1162b</string>
              <string>7fe76b86-ac84-4140-afef-92dd9ec13ae9</string>
              <string>261b007b-b999-4ecd-8998-837c62a32c27</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>18320ce6-5da5-4671-a4bc-9705e45ccdbb</string>
              <string>5e5544cd-b85e-4932-a96f-5cad28e705b8</string>
              <string>d9d6b5f5-edd1-4e0c-8ba5-c6f2a3365a5c</string>
              <string>aa608b20-43f8-49ea-8789-2a6aa784900a</string>
              <string>939c8b83-1d56-4bf4-b289-113c1b14e1b3</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>ed32950f-b0c1-47ee-931f-de451ed6a172</string>
              <string>a3530d49-3114-40a0-90cb-ce4914aca839</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>15567a1f-541e-45e3-94cb-e843e059152b</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>545149dd-520a-4a1d-80c4-54052e6d380a</string>
              <string>362a4cf9-cb04-463b-82c5-cbbd1889ee9c</string>
              <string>ec6680ee-83f9-482c-b034-8614c6bce636</string>
              <string>a08e87c0-e56e-4f95-8f12-3b7c69eded8d</string>
              <string>7ac3f48d-16c4-4449-80d5-a8103a9ac5f8</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>3ce8e5be-dae2-4413-9c4f-15bac6049cb7</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>373e79bd-82f0-466b-9c1b-042e6e095b36</string>
              <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>e574181a-e3e1-49b6-9d71-78d846d0daae</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>34349ce2-b1e2-4bfc-992c-1f6e3cc281d9</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
              <string>99d0bf51-bb19-4bbd-adbd-4b606148e9a4</string>
              <string>0e98b91f-3169-4733-902f-118afa2d5ebc</string>
              <string>936a0f91-1bad-49d1-852a-a895c15146ae</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>77280229-7400-4c9c-b2f6-ac099d60871f</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>a1e1cf09-3c02-489d-80f4-6305b0df80ec</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>ebb78470-f376-47b6-9455-4cf2be31e2ef</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>44168b10-92fd-45f4-acef-61c9c29b8ec4</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c8bfd286-e39f-4ab4-8bc3-d5d9c95b900a</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>a5afc88e-7d8f-4743-8e9c-5389edf3e35c</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>41c81aeb-b462-4891-a0ea-673c6017218c</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>5611c4d6-0a58-4ed6-bfe2-efa1f2294f07</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>1d6b1caf-4821-4230-8745-54b5cecf2ba3</string>
              <string>89b1df84-4519-48a9-ae1f-3ae158692b3d</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>fc11ccb5-476e-485e-a5db-6ac8d460eb41</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>4cbef2bc-962d-4bdb-8d13-e7145d88621c</string>
              <string>a0b77f2b-f4b0-4ed7-9b27-fe970a0634b4</string>
              <string>c2cd049b-a261-47b5-9190-b55229521a62</string>
              <string>04596ec4-bf23-44d8-92c9-14a08643d97e</string>
              <string>615a7abb-c95b-41c1-a21e-99c9b8b05fb1</string>
              <string>5d0603d7-9d9a-409b-adf8-940a46be63a1</string>
              <string>048f2703-af21-4569-bf3b-955d189e4340</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>fab3c156-aea1-4068-800b-04a1a30b814c</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>86025761-218b-4205-99db-f5e1f4273da9</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>43882c7e-dcbb-44ec-b9e6-705cc6a4f6a9</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>38ba78b7-d9d0-4347-ac8d-0f2064c49a27</string>
              <string>ef70a082-0f5c-46b7-ae20-8ac4e5261c57</string>
              <string>d2250d91-f3ef-4154-ba78-c0bf6955b1b7</string>
              <string>607f13a0-8dc9-41e4-8e1d-623a145c8c6b</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>089d31ff-a9bb-4822-8818-e197344dca47</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>41e8684c-2279-4940-b3f9-9f1914e9cc68</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>137331af-f61f-4ec1-8296-39febdafc1d2</string>
              <string>1a8c9dcb-1052-49af-9960-c65db16e81e7</string>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>99a0314f-8ddf-4396-b39d-f54934ddfee9</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>67f8e921-4aa1-4b3f-9c36-3d55209b2099</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>400af9f5-05ef-403c-82aa-67899d791953</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>b36a2576-ce3e-4530-8bf8-375124d3eb8d</string>
              <string>e879c60d-1ea5-454c-a729-6d2184f82e24</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>276a26a4-2cfe-47ab-9f7c-ed1c3517e687</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>b7e144f5-2ed1-43c9-b29e-b21b118d0469</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>aefa6e5b-bad3-4dbf-af8a-3222f0393d1e</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>15cb318d-2648-4764-b972-2ab63d540c04</id>
                <name>apiGenerateBasicAuthHeader</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791559</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
 Generates an HTTP Basic Authentication header using the provided username and password.
 The credentials are encoded in Base64 and formatted appropriately for inclusion in HTTP request headers.
 This function is useful for creating headers for HTTP requests that require Basic Authentication.
 
 @param {String} user - The username to be included in the HTTP Basic Auth header.
 @param {String} pass - The password to be included in the HTTP Basic Auth header.
 @return {String} The HTTP Basic Authentication header, encoded in Base64 format.
**/
function apiGenerateBasicAuthHeader(user, pass) {
    var Base64 = Packages.java.util.Base64;
    var credentials = user + &quot;:&quot; + pass;
    var encodedCredentials = Base64.getEncoder().encodeToString(new java.lang.String(credentials).getBytes());
    var authHeader = &quot;Basic &quot; + encodedCredentials;
    return authHeader;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c32dc269-7c82-4fba-9d39-32a29b00ee01</id>
                <name>httpGet</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788760</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
  Envia um pedido HTTP GET para o URL especificado com autenticação Básica opcional.
  
  @param {String} url - O URL para o qual o pedido GET deve ser feito.
  @param {String|null} authHeader - Cabeçalho opcional de Autenticação Básica no formato Base64.
  @return {Object} Um objeto contendo o código de estado HTTP e o conteúdo da resposta.
                   - statusCode (Number): O código de estado HTTP.
                   - response (String): O conteúdo da resposta ou uma mensagem de erro.
  
  @example
  // Enviar um pedido GET sem autenticação
  var result = httpGet(&apos;https://example.com/api/resource&apos;, null);
  console.log(result.statusCode); // Código de estado HTTP
  console.log(result.response); // Conteúdo da resposta ou mensagem de erro
  
  @example
  // Enviar um pedido GET com Autenticação Básica
  var authHeader = generateBasicAuthHeader(&apos;username&apos;, &apos;password&apos;);
  var result = httpGet(&apos;https://example.com/api/resource&apos;, authHeader);
  console.log(result.statusCode); // Código de estado HTTP
  console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 **/
function httpGet(url, authHeader) {
    var result = {};

    var responseCode =  null;
    try {
        var URL = Packages.java.net.URL;
        var HttpURLConnection = Packages.java.net.HttpURLConnection;
        var BufferedReader = Packages.java.io.BufferedReader;
        var InputStreamReader = Packages.java.io.InputStreamReader;
        var StringBuilder = Packages.java.lang.StringBuilder;

        var urlObj = new URL(url);
        var httpConnection = urlObj.openConnection();
        httpConnection.setRequestMethod(&quot;GET&quot;);
        httpConnection.setConnectTimeout(10000);
        httpConnection.setReadTimeout(10000);

        if (authHeader) {
            httpConnection.setRequestProperty(&quot;Authorization&quot;, authHeader);
        }

        responseCode = httpConnection.getResponseCode().toString();
        var responseMessage = new StringBuilder();
        var inputStream = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
        var inputLine;
        while ((inputLine = inputStream.readLine()) != null) {
            responseMessage.append(inputLine);
        }
        inputStream.close();

        result.statusCode = responseCode;
        result.responseMessage = responseMessage.toString();
    } catch (e) {
        result.statusCode = responseCode != null ? responseCode : &quot;500&quot;; // 500 = Internal Server Error
        result.statusText = e.toString(); // antes: &quot;Internal Server Error: &quot; + e.toString()
        result.responseMessage = null;
    } /*finally {
    		if (httpConnection) httpConnection.disconnect();
    }*/

    return result;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>39bee33f-7fa8-475b-a294-eccc1ce715af</id>
                <name>httpPost</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
 Envia um pedido HTTP POST para o URL especificado com autenticação Básica opcional.
 
 @param {String} url - O URL para o qual o pedido POST deve ser feito.
 @param {String} data - Os dados a serem enviados no corpo do pedido (como uma string JSON).
 @param {String|null} authHeader - Cabeçalho opcional de Autenticação Básica no formato Base64.
 @return {Object} Um objeto contendo o código de estado HTTP e o conteúdo da resposta.
                  - statusCode (Number): O código de estado HTTP.
                  - response (String): O conteúdo da resposta ou uma mensagem de erro.
 
 @example
 // Enviar um pedido POST sem autenticação
 var result = httpPost(&apos;https://example.com/api/resource&apos;, &apos;{&quot;key&quot;: &quot;value&quot;}&apos;, null);
 console.log(result.statusCode); // Código de estado HTTP
 console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 
 @example
 // Enviar um pedido POST com Autenticação Básica
 var authHeader = generateBasicAuthHeader(&apos;username&apos;, &apos;password&apos;);
 var result = httpPost(&apos;https://example.com/api/resource&apos;, &apos;{&quot;key&quot;: &quot;value&quot;}&apos;, authHeader);
 console.log(result.statusCode); // Código de estado HTTP
 console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 **/
 function httpPost(url, data, authHeader) {
    var result = {};
    var outpuStream = null;
    var inputStream = null;
    
    try {
        var URL = Packages.java.net.URL;
        var HttpURLConnection = Packages.java.net.HttpURLConnection;
        var DataOutputStream = Packages.java.io.DataOutputStream;
        var BufferedReader = Packages.java.io.BufferedReader;
        var InputStreamReader = Packages.java.io.InputStreamReader;
        var StringBuilder = Packages.java.lang.StringBuilder;

        var urlObj = new URL(url);
        var httpConnection = urlObj.openConnection();
        httpConnection.setRequestMethod(&quot;POST&quot;);
        httpConnection.setDoOutput(true);
        httpConnection.setConnectTimeout(10000);
        httpConnection.setReadTimeout(10000);
        httpConnection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);      

        if (authHeader) {
            httpConnection.setRequestProperty(&quot;Authorization&quot;, authHeader);
        }
        
        try{
        	httpConnection.setRequestProperty(&quot;Content-Length&quot;, String(data.length));
        }catch (ex3) {
		httpConnection.setRequestProperty(&quot;Content-Length&quot;, String(data.length()));
        }

        try {
            outpuStream = new DataOutputStream(httpConnection.getOutputStream());
            outpuStream.writeBytes(data);
        } catch (ex3) {
            result.statusCode = &quot;503&quot;; // Service Unavailable
		  result.statusText = &quot;URL Indisponivel&quot;
            result.responseMessage = null;
            return result;
        } finally {
            if (outpuStream) {
                outpuStream.close();
            }
        }

        var responseCode = -1;
        try {
            responseCode = httpConnection.getResponseCode().toString();
        } catch (ex4) {
            result.statusCode = &quot;500&quot;; // Internal Server Error
            result.responseMessage = &quot;Error getting response code: &quot; + ex4.toString();
            return result;
        }

        var responseMessage = new StringBuilder();
	   var inputStream;

        try {

            inputStream = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));

		} catch (e) {
			inputStream = new BufferedReader(new InputStreamReader(httpConnection.getErrorStream()));
        }

            var inputLine;
            while ((inputLine = inputStream.readLine()) != null) {
                responseMessage.append(inputLine);
            }
            inputStream.close();

            result.statusCode = responseCode;
            result.responseMessage = responseMessage.toString();
        
    } catch (e) {
        // Handle exceptions for other parts of the request
        result.statusCode = &quot;500&quot;; // Internal Server Error
	   result.statusText = &quot;Internal Server Error: &quot; + e.toString();
        result.responseMessage = null;
    }

    return result;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c25c1fd-1f2b-40b7-9841-a884796e0414</id>
                <name>Web Service Rest API Consumption - genericApiCall</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793537</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to call a generic rest API, we can invoke the endpoint, method (GET, POST, PUT, etc), payload and authentication .
	This implementation includes Basic Auth, if the endpoint is not protected by Basic Auth the username and password fields must be set to nul

	@param {String} method - HTTP Method (GET, POST, PUT, PATCH, DELETE)
	@param {String} endpoint - API endpoint (eg: http://localhost:8008/api/v1/patient)
	@param {String} username - API Basic Auth username if necessary, otherwise set to null
	@param {String} password - API Basic Auth password if necessary, otherwise set to null
	@param {Object} payload - Request Payload or set to null if not necessary
	@return {Object} this function returns the operation code and the API requst response body
*/
function genericApiCall(method, endpoint, username, password, payload) {
	// Setting variables
	var ws = null;
	var result =  null;
	
	// Import JAVA custom code
	try{
		ws = new Packages.com.bsimple.mirth.services.RestClient();		
	}catch(err){
		logger.info(&quot;Unable to load RestClient.jar from custom-lib folder&quot;);
		return null;
	}

	// Try to consume API
	try   {
		result = ws.callService(method, endpoint, username, password, payload);
		return result;
	}  catch(err) {
		logger.info(&quot;Internbal error consuming API&quot;);
		var ret = {};
		ret.statusCode = &quot;500&quot;;
		ret.statusCodeValue = &quot;Internal error consuming API - make sure the endpoint is correctly setted&quot;;
		ret.body = null;
		return ret;
	}
	
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>f15f2324-5af5-4bb8-ad87-5c528494dfb6</id>
            <name>DateUtils</name>
            <revision>9</revision>
            <lastModified>
              <time>1730914089537</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Date Utilities for formating Dates and convert formats, Date Processing</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>3d1c4a14-5d9d-40ee-8c72-931459c94b75</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>4de0b993-bf9e-49e0-b224-3eef7e76e2b3</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>c6cdb85d-527a-45c4-bca5-1e110167cc50</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788437</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0ff87898-9f14-46b4-bc5d-f4091165b164</id>
                <name>getCurrentDateUTC</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788191</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is to get current system date in UTC+0 format - &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSS&apos;Z&apos;&quot;
	
	@return {String} return formmatted system date in UTC format
*/
function getCurrentDateUTC() {
	// Import Java classes
	var SimpleDateFormat = java.text.SimpleDateFormat;
	var Date = java.util.Date;
	var TimeZone = java.util.TimeZone;
	
	var dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSS&apos;Z&apos;&quot;);
	// Set the timezone to UTC
	dateFormat.setTimeZone(TimeZone.getTimeZone(&quot;UTC&quot;));
	// Get the current date
	var currentDate = new Date();
	// Format the date in UTC
	var formattedDate = dateFormat.format(currentDate);

	return formattedDate;
}

globalMap.put(&quot;getCurrentDateUTC&quot;, getCurrentDateUTC);</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3bb1d234-3e4f-4832-8a59-01e5388865fb</id>
                <name>LocalTimeToUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788319</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function LocalDateTimeToUtc(localDateTime, timezone) {

	var DateTimeFormatter = Packages.java.time.format.DateTimeFormatter;
	var LocalDateTime = Packages.java.time.LocalDateTime;
	var ZoneOffset = Packages.java.time.ZoneOffset;

	var cleanDateTime = localDateTime.replace(/[^\d]/g, &apos;&apos;).padEnd(14, &apos;0&apos;);

	var zone;
	if(timezone == undefined){
		zone = java.time.ZoneId.systemDefault();
	}else{
		zone = java.time.ZoneId.of(timezone);
	}
	
	var pattern = &quot;yyyyMMddHHmmss&quot;;
	
	var formatter = DateTimeFormatter.ofPattern(pattern);
	var localDateTime = LocalDateTime.parse(cleanDateTime, formatter);
	

	return localDateTime.atZone(zone).toOffsetDateTime().toInstant().toString();

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c64a2526-183c-4378-b708-c0c880f8e987</id>
                <name>OffsetDateTimeToUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790057</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function OffsetTimeToUtc(offsetDateTimeStr) {
	
	var offsetDateTime = java.time.OffsetDateTime.parse(offsetDateTimeStr);

     return offsetDateTime.toInstant().toString();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bdf25c4-c7a4-4248-bc1e-7148ebccc58b</id>
                <name>subtractDatesUTC</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790375</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to perceive the number of miliseconds/seconds/minutes/hours/days between two given (string) dates in UTC format.

	@param {String} startStr - start date in UTC format
	@param {String} endStr - end date in UTC format
	@param {String} unit - time unit used. Options: milliseconds&apos;, &apos;seconds&apos;, &apos;minutes&apos;, &apos;hours&apos;, &apos;days&apos;
	@return {String} return description
*/
function subtractDatesUTC(startStr, endStr, unit) {
    // Parse the input dates as Date objects
    const start = new Date(startStr);
    const end = new Date(endStr);

    // Get the difference in milliseconds
    const diffMilliseconds = end.getTime() - start.getTime();

    // Convert the difference to the requested unit
    var diff = null;
    switch(unit) {
        case &apos;milliseconds&apos;:
            diff = diffMilliseconds;
            break;
        case &apos;seconds&apos;:
            diff = diffMilliseconds / 1000;
            break;
        case &apos;minutes&apos;:
            diff = diffMilliseconds / (1000 * 60);
            break;
        case &apos;hours&apos;:
            diff = diffMilliseconds / (1000 * 60 * 60);
            break;
        case &apos;days&apos;:
            diff = diffMilliseconds / (1000 * 60 * 60 * 24);
            break;
        default:
            throw new Error(&apos;Invalid unit. Please use &quot;milliseconds&quot;, &quot;seconds&quot;, &quot;minutes&quot;, &quot;hours&quot;, or &quot;days&quot;.&apos;);
    }

    return diff;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2f1419d7-0352-47e8-af40-159b623aa777</id>
                <name>UtcDateTimeAdd</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788151</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to add/subtract set intervals. This is not meant to change local times between timezones!

	@param {String} UtcDateTime - UtcDateString in ISO Format &apos;YYYY-MM-DDThh:mm:ssZ&apos; (millis optional)
	@param {String} interval - interval to add (ss - seconds, mm - minutes, hh - hours, DD - days, MM - months, YY - years )
	@param {int} value - value to add (negative values will subtract from date)
	@return {String} newUTCDate
*/
function UtcDateTimeAdd(utcDateTime, interval, value) {

	var ChronoUnit = Packages.java.time.temporal.ChronoUnit;

	var inst = java.time.Instant.parse(utcDateTime);
	
	switch(interval){
		case &apos;ss&apos;:
			return inst.plusSeconds(value).toString();
			break;
		case &apos;mm&apos;:
			return inst.plus(value, ChronoUnit.MINUTES).toString();
			break;
		case &apos;hh&apos;:
			return inst.plus(value, ChronoUnit.HOURS).toString();
			break;
		case &apos;DD&apos;:
			return inst.plus(value, ChronoUnit.DAYS).toString();
			break;
		case &apos;MM&apos;:
			return inst.plus(value, ChronoUnit.MONTHS).toString();
			break;
		case &apos;YY&apos;:
			return inst.plus(value, ChronoUnit.YEARS).toString();
			break;
		default:
			return &apos;&apos; 
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bd844bee-5372-484b-a9f4-fe2f98b6bd3a</id>
                <name>utcToLocalDateCdaString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793366</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function utcToLocalDateCdaString(date) {
	
	var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
	formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	var formatter_final = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
	formatter_final.setTimeZone(java.util.TimeZone.getTimeZone(&quot;Europe/Lisbon&quot;));

	var dataFormat = date.replace(/\.\d+/, &apos;&apos;);
	var dataUTC = formatter_utc.parse(dataFormat);
	var dataLocal = formatter_final.format(dataUTC);
	
    	return dataLocal;
    
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5617deeb-09e0-4d29-a1cc-e63ac6fafb0b</id>
                <name>UtcToLocalDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790566</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function UtcToLocalDateTime(utcDate, withOffset, targetTimezone) {

	var DateTimeFormatter = Packages.java.time.format.DateTimeFormatter;
    	
    	var inst = java.time.Instant.parse(utcDate);
    	var zone;
	
	if(withOffset == undefined){
		withOffset = false;	
	}

	if(targetTimezone == undefined){

		zone = java.time.ZoneId.systemDefault();	
	}else{
		zone = java.time.ZoneId.of(targetTimezone);
	}

	var offsetDateTime = inst.atZone(zone).toOffsetDateTime();
   
    	if (withOffset) {

		return offsetDateTime.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);    		
    	}else{

    		return offsetDateTime.toLocalDateTime().toString();
    	}
    	
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6cc8a9f9-7d96-4990-96a8-0ff41be6b101</id>
            <name>Logger Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089520</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Funções auxiliares para o logging de mensagens dos canais</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>bc286d01-89d0-4a3f-916e-09a25a4e68c7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>68dfb5b9-bb8e-418d-8425-79fe31bd7538</id>
                <name>generateLogMsg</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to build and return a log msg, originating from any channel.
	Documentação função: https://b-simple.atlassian.net/wiki/x/AoACBg
	Documentação Entity e Tags: https://b-simple.atlassian.net/wiki/x/AgB_Bg

	@param theEntity {String} - string that denotes the group of messages the message belongs to, i.e appointment, document, cda, accident, etc.
	@param {Class} message - ImmutableConnectorMessage Class message containing information about all connectors that a
		message passed through
	@param tagsArr {Array} - array of user-defined and relevant tags that should be associated with the message
	@param sourceServer {String} - message&apos;s source app/entity (name of the app or entity responsible for sending the messge to the channel)
	@param destinationServerMap {Map} - Map&lt;int,string&gt; , where the key is the destination&apos;s metadataID and the value is the entity to which such destination&apos;s message was sent to
	@param {Array} sourceMetadataArr - source metadata: metadata associated with the source processing 
	@param {Array} destinationsMetadataArr - destinations metadata: metadata associated with the destinations processing
	@return {Object JSON} message log
*/
function generateLogMsg(theEntity, message, tagsArr, sourceServer, destinationServerMap, sourceMetadataArr, destinationsMetadataMap) {
	if (message == undefined || message == null) {
		logger.info(&quot;sendMsgInfoLogChannel:message --&gt; message argument is mandatory!&quot;);
	} else {
		try {
			var logMsg = new Object();
		
			// messageSummary
			var messageSummaryObj = new Object();
			//messageID
			messageSummaryObj.messageId = message.getConnectorMessages().get(0).getMessageId();
			//messageOriginalID - não funciona ...
			//messageSummaryObj.messageOriginalId = message.getOriginalId();
			//channelID
			messageSummaryObj.channelId = message.getConnectorMessages().get(0).getChannelId();
			//serverID
			messageSummaryObj.serverId = message.getConnectorMessages().get(0).getServerId();
			//channelName
			messageSummaryObj.channelName = message.getConnectorMessages().get(0).getChannelName();
			//lastDeployedDate
			try {
				var controller = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createEngineController();
				var dashboardStatus = controller.getChannelStatus(message.getConnectorMessages().get(0).getChannelId());
				messageSummaryObj.lastDeployedDate = auxCalendarParse(dashboardStatus.getDeployedDate());
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:lastDeployedDate --&gt; &quot; + error.toString());
				messageSummaryObj.lastDeployedDate = null;
			}
			//entity
			messageSummaryObj.entity = theEntity == undefined ? null : theEntity;
			//tags
			messageSummaryObj.tags = (tagsArr == undefined || tagsArr == null) ? new Array() : tagsArr;
			//logDate
			var datestr = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
			var dateUTC = DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
			messageSummaryObj.logDate = dateUTC;
			//status
			var statusObj = new Object();
			statusObj.error = false;
			statusObj.code = null;
			statusObj.message = null;
			try {
				message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName (inclui Source também)
					value = parseInt(value);
					if (value != 0) { // só as destinations é que têm Response relativamente a erros, logo não dá para ir buscar Response de erro na Source (Source =metadataId 0)
						//code - testar no que isto dá! ??
						if (message.getConnectorMessages().get(value).getStatus().toString() == &apos;ERROR&apos;) {
							statusObj.error = true;
							/*
							if (statusObj.code != null) {
								statusObj.code = statusObj.code + &quot;;&quot; + message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							} else {
								statusObj.code = message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							}
							*/
							if (statusObj.message != null) {
								statusObj.message = statusObj.message + &quot;;&quot; + auxGetStatusMessage(value);
							} else {
								statusObj.message = auxGetStatusMessage(value);
							}
						}
					}
				});
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel: messageSummary status --&gt; &quot; + error.toString());
			}
			messageSummaryObj.status = statusObj;
		
			//metaData
			//messageSummaryObj.metaData = (summMetadataArr == undefined || summMetadataArr == null) ? new Array() : summMetadataArr;
			try {
				var listMetadataCol = com.mirth.connect.server.controllers.ChannelController.getInstance().getMetaDataColumns(messageSummaryObj.channelId);
				var metadataColArr = new Array();
				for (var i = 0; i &lt; listMetadataCol.size(); i++) {
					var metaObj = new Object();
					metaObj.name = listMetadataCol.get(i).getName();
					var mappingName = listMetadataCol.get(i).getMappingName();
					metaObj.value = (message.getConnectorMessages().get(0).getChannelMap().get(mappingName) == undefined) ? null : message.getConnectorMessages().get(0).getChannelMap().get(mappingName).toString(); // para ficarem todos como string
					if (metaObj.value != null) {
						metadataColArr.push(metaObj);
					}
				}
				messageSummaryObj.metaData = metadataColArr;
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
				messageSummaryObj.metadata = null;
			}
			
			logMsg.messageSummary = messageSummaryObj;
		
			// ------------------------
			//content
			var contentObj = new Object();
			//content.source
			var sourceObj = new Object();
			//content.source.server
			sourceObj.server = sourceServer == undefined ? null : sourceServer;
			//content.source.status
			sourceObj.status = message.getConnectorMessages().get(0).getStatus().toString();
			//content.source.statusMessage
			sourceObj.statusMessage = auxGetStatusMessage(0);
			//content.source.message
			sourceObj.message = isJSON(message.getConnectorMessages().get(0).getRawData()) ? JSON.parse(message.getConnectorMessages().get(0).getRawData()) : message.getConnectorMessages().get(0).getRawData(); //msg antes de passar pelo preprocessor e antes de ser mudada no Transformer
			//content.source.dataType
			sourceObj.dataType = message.getConnectorMessages().get(0).getRaw().getDataType();
			//content.source.date
			var dateCalendar = message.getConnectorMessages().get(0).getReceivedDate();
			var dateUTC = auxCalendarParse(dateCalendar);
			sourceObj.date = dateUTC;
			//content.source.metadata
			sourceObj.metaData = (sourceMetadataArr == undefined || sourceMetadataArr == null) ? new Array() : sourceMetadataArr;
			//content.source.responseMessage
			if (message.getConnectorMessages().get(0).getResponseData() == null) { // no response
				sourceObj.responseMessage = null;
			} else if (message.getConnectorMessages().get(0).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
				sourceObj.responseMessage = null;
			} else { //houve response 
				sourceObj.responseMessage = isJSON(message.getConnectorMessages().get(0).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(0).getResponseData().getMessage()) : message.getConnectorMessages().get(0).getResponseData().getMessage();
			}
			contentObj.source = sourceObj;
		
			// -------------------------
			//content.destinations
			var destinationsArray = new Array();
			message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName
				value = parseInt(value);
				if (value != 0) { //ignorar Source (metadataId=0)
					//logger.info(&quot;value= &quot; + typeof(value) + &quot; &quot; + value + &quot;;&quot; + &quot;key= &quot; + typeof(key) + &quot; &quot; + key);
					var destinationObj = new Object();
					//content.destinations.server
					if (destinationServerMap != undefined &amp;&amp; destinationServerMap != null) {
						if (destinationServerMap.has(value)) {
							destinationObj.server = destinationServerMap.get(value);
						} else {
							destinationObj.server = null;
						}
					} else {
						destinationObj.server = null;
					}
					//content.destinations.destinationId
					destinationObj.destinationId = value;
					//content.destinations.destinationName
					destinationObj.destinationName = key;
					//content.destinations.status
					destinationObj.status = message.getConnectorMessages().get(value).getStatus().toString();
					//content.destinations.statusMessage
					destinationObj.statusMessage = auxGetStatusMessage(value);
					//content.destinations.message
					try {
						destinationObj.message = isJSON(message.getConnectorMessages().get(value).getEncodedData()) ? JSON.parse(message.getConnectorMessages().get(value).getEncodedData()) : message.getConnectorMessages().get(value).getEncodedData();
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel: destination message --&gt; &quot; + error.toString());
						destinationObj.message = null;
					}
					//logger.info(message.getConnectorMessages().get(value).getMessageContent(ContentType.SENT));
					//content.destinations.dataType
					// destinationObj.dataType = message.getConnectorMessages().get(value).getEncoded().getDataType();
					try {
						var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
						var channel = channelController.getChannelByName(message.getConnectorMessages().get(0).getChannelName().toString());
						var connectors = channel.getDestinationConnectors().toArray();
						// Iterate through the connectors
						for each (var connector in connectors) {
						    // Check if the current connector matches the desired connector name
						    if (connector.getName() == key) {
						    		destinationObj.dataType = connector.getTransformer().getOutboundDataType();
						    		break;
						    }
						}
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
						destinationObj.dataType = null;
					}
					
					//content.destinations.date
					var dateCalendar = message.getConnectorMessages().get(value).getSendDate();
					if (dateCalendar != null) { // destination QUEUED
						var dateUTC = auxCalendarParse(dateCalendar);
						destinationObj.date = dateUTC;
					} else {
						destinationObj.date = null;
					}

					//content.destinations.metaData
					if (destinationsMetadataMap != undefined &amp;&amp; destinationsMetadataMap != null) {
						if (destinationsMetadataMap.has(value)) {
							destinationObj.metaData = destinationsMetadataMap.get(value) == null ? new Array() : destinationsMetadataMap.get(value);
						} else {
							destinationObj.metaData = new Array();
						}
					} else {
						destinationObj.metaData = new Array();
					}
		
					//content.destinations.responseMessage
					if (message.getConnectorMessages().get(value).getResponseData() == null) { // no response
						destinationObj.responseMessage = null;
					} else if (message.getConnectorMessages().get(value).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
						destinationObj.responseMessage = null;
					} else { //houve response
						destinationObj.responseMessage = isJSON(message.getConnectorMessages().get(value).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(value).getResponseData().getMessage()) : message.getConnectorMessages().get(value).getResponseData().getMessage();
					}
					destinationsArray.push(destinationObj);
				}
			});
			contentObj.destinations = destinationsArray;
			
			logMsg.content = contentObj;
			//logger.info(JSON.stringify(logMsg));

			//send it
			return JSON.stringify(logMsg);

			/*
			var respLogChannel = router.routeMessage(&apos;Logs_WHS-OUT&apos;, JSON.stringify(logMsg));
			if (respLogChannel == null || respLogChannel == undefined) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			} else if (respLogChannel.getStatus() == Status.ERROR) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			}
			*/

		} catch (error) {
			logger.info(&quot;sendMsgInfoLogChannel:geral  --&gt; &quot; + error.toString());
		}
	}	
}

function auxCalendarParse(dateCalendar) {
	var theMonth = dateCalendar.get(dateCalendar.MONTH) +1;
	var theMonthStr = theMonth.toString().padStart(2,&apos;0&apos;);
	var datestr = dateCalendar.get(dateCalendar.YEAR).toString() + theMonthStr + dateCalendar.get(dateCalendar.DAY_OF_MONTH).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.HOUR_OF_DAY).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.MINUTE).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.SECOND).toString().padStart(2,&apos;0&apos;);
	return DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
}

function auxGetStatusMessage(connMetadaId) {
	connMessage = message.getConnectorMessages().get(connMetadaId);
	if (connMessage.getStatus().toString() == &quot;ERROR&quot;) {
		if (connMessage.getProcessingError() != &quot;&quot;) {
			return connMessage.getProcessingError();
		} else if (connMessage.getPostProcessorError() != &quot;&quot;) {
			return connMessage.getPostProcessorError();
		} else if (connMessage.getResponseError() != &quot;&quot;) {
			return connMessage.getResponseError();
		}
	}
	return null;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6df54a97-f980-47f7-a86a-788d32a98a16</id>
            <name>THOM API Helper Functions</name>
            <revision>11</revision>
            <lastModified>
              <time>1730915907338</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>6bfbe323-d3b2-41f5-b831-125601788430</id>
                <name>getAccidentIncapacityTypeByCode</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função que converte, a partir da consulta à API do THOM, o código de catálogo em UUID de THOM para o catálogo AccidentIncapacityType

	@param {String} arg1 -inputCode (código de catálogo)
	@return {String} return Código UUID de THOM
*/

function getAccidentIncapacityTypeByCode(inputCode) {
	var parameters = new Object();
	var httpPostURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/$find-matches&quot;;

	parameters.resourceType = &quot;Parameters&quot;;
	parameters.parameter = [];
	
	parameterSystem = new Object();
	parameterSystem.name = &apos;system&apos;;
	parameterSystem.valueUri = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/AccidentIncapacityType&apos;;
	
	parameters.parameter.push(parameterSystem);

	parameterProperty = new Object();
	parameterProperty.name = &apos;property&apos;;
	parameterProperty.part = [];
	partCode = new Object();
	partCode.name = &apos;code&apos;;
	partCode.valueCode = &apos;code&apos;;
	parameterProperty.part.push(partCode);

	partValue = new Object();
	partValue.name = &apos;value&apos;;
	partValue.valueString = inputCode;
	parameterProperty.part.push(partValue);
	parameters.parameter.push(parameterProperty);


	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpPost(httpPostURL, JSON.stringify(parameters), authHeader);

	var accidentIncapacityType = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var resource = JSON.parse(httpResp.responseMessage);
			if (typeof(resource.parameter) != &apos;undefined&apos;){
				accidentIncapacityType = resource.parameter[0].part[0].valueCoding.code;
			}
		}
	}

	return accidentIncapacityType;	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>db5829bf-47fe-4df9-9275-98545493d366</id>
                <name>GetAccidentInfo</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790265</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dado o id externo de um EpisodeOfcare, consultar no sistema externo se essa informação é referente a um processo de sinistro. Em caso afirmativo, constrói
	a informação do processo de sinistro e faz o seu retorno.

	@param {String} episodeOfCareGUID - id externo de um EpisodeOfcare
	@return {Object} processo de sinistro
*/
function getAccidentInfo(episodeOfCareGUID) {

		var returnMessage = {};

		returnMessage.processoSinistro = {};
		returnMessage.tipoSinistro = null;
		returnMessage.statusCode = &quot;500&quot;;
		returnMessage.statusMessage = &quot;Internal Server Error&quot;;

		var processoSinistro = {};
		 
		 var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/EpisodeOfCare/&quot; + episodeOfCareGUID;
		 	 
		 httpResp = httpGet(httpGetURL,null);
		 
		 if(httpResp.statusCode === &quot;200&quot;){

			if(isJSON(httpResp.responseMessage)){
		 
				episodeOfCare = JSON.parse(httpResp.responseMessage);
				
				var tipo = &quot;&quot;;
				
				if (episodeOfCare &amp;&amp; episodeOfCare.type) {
					episodeOfCare.type.forEach(function(type) {
						if (type.coding) {
							type.coding.forEach(function(coding) {
								if (coding.system &amp;&amp; coding.system.includes(&quot;/CodeSystem/EpisodeOfCareType&quot;)) {
									tipo = coding.code; 
								}
							});
						}
					});
				}
				
				if( tipo === &quot;5&quot;){

					processoSinistro.sinistroIdentificadores = [];
					sinistroIdentificadores = {};
					sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.id&quot;;
					sinistroIdentificadores.codigo = episodeOfCareGUID;

					processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);

					if (episodeOfCare &amp;&amp; episodeOfCare.identifier) {
						sinistroIdentificadores = {};
						sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.identifier&quot;;
						sinistroIdentificadores.codigo = episodeOfCare.identifier[0].value;

						processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);
					}

					
					processoSinistro.subsistemaIntRefExt = null;
					processoSinistro.subsistemaDescr = null;
					processoSinistro.ramoDescr = null;
					processoSinistro.ramoIdentificadores = [];
					//var ramoIdentificador = {};
					//ramoIdentificador.codigo = null;
					//ramoIdentificador.sistemaCodificador = null;

					//processoSinistro.ramoIdentificadores.push(ramoIdentificador);

					processoSinistro.numProcesso = null;
					processoSinistro.nomeSegurado = null;
					processoSinistro.tipoSinistradoIdentificadores = [];
					processoSinistro.tipoSinistradoDescr = null;
					processoSinistro.dataAberturaProcesso = null;

					var sinistro  = {};

					sinistro.data = null;
					sinistro.descr = null;
					sinistro.localDescr = null;
					sinistro.transporteChegadaIdentificadores = [];
					
					if(episodeOfCare.period &amp;&amp; episodeOfCare.period.start){
						processoSinistro.dataAberturaProcesso = java.time.OffsetDateTime.parse(episodeOfCare.period.start).toInstant().toString();
					}

					if (episodeOfCare &amp;&amp; episodeOfCare.extension) {
					episodeOfCare.extension.forEach(function(extension1) {
						if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.HealthSystem&quot;)) {
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;HealthSystem&quot;) {
									if (extension2.valueReference.reference){
										var organizationId = extension2.valueReference.reference;
										var organization = getOrganization(organizationId.split(&quot;/&quot;)[1]);
										processoSinistro.subsistemaIntRefExt = organization.intRefExt;
										processoSinistro.subsistemaDescr = organization.name;
									}
									
									
								}
								else if (extension2.url &amp;&amp; extension2.url === &quot;InsuredName&quot;) {
									processoSinistro.nomeSegurado = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;PolicyNumber&quot;) {
									processoSinistro.numBeneficiario = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;ExternalCode&quot;) {
									processoSinistro.numProcesso = extension2.valueString; 
								}
							});
						}else if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.Accident&quot;)) { // ?? ir buscar aqui tipoSinistrado e tipoTransporte
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;Date&quot;) {
									sinistro.data = extension2.valueDate + &quot;T00:00:00Z&quot;; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Description&quot;) {
									sinistro.descr = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Type&quot;) {
									if(extension2.valueCoding &amp;&amp; extension2.valueCoding.system &amp;&amp; extension2.valueCoding.display ){
										var ramoIdentificador = {};
										ramoIdentificador.codigo = extension2.valueCoding.code;
										ramoIdentificador.sistemaCodificador = &quot;THOM&quot;;

										processoSinistro.ramoIdentificadores.push(ramoIdentificador);

										processoSinistro.ramoDescr = extension2.valueCoding.display;
									}
								} else if (extension2.url &amp;&amp; extension2.url === &quot;TransportType&quot;) {
									var transporteIdentificador = {};
									transporteIdentificador.codigo = extension2.valueCoding.code;
									transporteIdentificador.sistemaCodificador = &quot;THOM&quot;;
									sinistro.transporteChegadaIdentificadores.push(transporteIdentificador);

									sinistro.transporteChegadaDescr = extension2.valueCoding.display;
								
								}else if (extension2.url &amp;&amp; extension2.url === &quot;InjuredPartyType&quot;) {
									var tipoSinistradoIdentificador = {};
									tipoSinistradoIdentificador.codigo = extension2.valueCoding.code;
									tipoSinistradoIdentificador.sistemaCodificador = &quot;THOM&quot;;
									processoSinistro.tipoSinistradoIdentificadores.push(tipoSinistradoIdentificador);

									processoSinistro.tipoSinistradoDescr = extension2.valueCoding.display;
								} else if (extension2.url &amp;&amp; extension2.url === &quot;Local&quot;) {
									sinistro.localDescr = extension2.valueString ? extension2.valueString : null;
								}
							});
						}
					});
				}

					
					
					processoSinistro.sinistro = sinistro;
					returnMessage.processoSinistro = processoSinistro;
					returnMessage.tipoSinistro = true;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;OK&quot;;
				
				}else{
					// EpisodeOfCare não é do tipo Sinistro
					
					returnMessage.processoSinistro = null;
					returnMessage.tipoSinistro = false;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;episodeOfCare não é do tipo sinistro&quot;;
				}
			
		 
		 	}else{
				//resposta ao pedido API não é JSON
				returnMessage.processoSinistro = null;
				returnMessage.tipoSinistro = null;
				returnMessage.statusCode = &quot;400&quot;;
				returnMessage.statusMessage = &quot;Formato inválido devolvido pela API&quot;;
		 		
		 	}
			
		 		
		 }else{
		 	// Pedido API não retorna código 200
			returnMessage.processoSinistro = null;
			returnMessage.tipoSinistro = null;
			returnMessage.statusCode = httpResp.statusCode; // &gt;= 400
			returnMessage.statusMessage = &quot;API Error: &quot; + httpResp.statusCode + &apos; - &apos; + (typeof httpResp.statusText != &apos;undefined&apos; ? httpResp.statusText : httpResp.responseMessage) ;
			
		 
		 }

		 return returnMessage;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>1b5b099a-483d-425f-ad76-e0141c8f4237</id>
                <name>getFacility</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787810</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Facility (cama, área, local, etc)

	@param {String} - facility name
	@param {String} - isHealthCenter (0 - No; 1- Yes)
	@return {String} return facility UUID
*/
function getFacility(facilityName, isHealthCenter) {

	var boolHealthCenter = (isHealthCenter != null) ? isHealthCenter : 0;
	
	var facilityUUID = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location?name=&quot; + encodeURIComponent(facilityName) + &quot;&amp;isHealthCenter=&quot; + boolHealthCenter, authHeader);
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			resposta.entry.find(function(resource){
				resource.resource.alias.find(function(alias){
					if (alias === String(facilityName) ){
						facilityUUID = resource.resource.id;
					}
				});
			})
	    		
		}
	}

	return facilityUUID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c71850ca-03ed-4ac8-91b5-88fa6a65b6ca</id>
                <name>getFacilityDescription</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730915907351</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM the information about Location (cama, área, local, etc) and returns the description = Código Serviço

	@param {String} - facility UUID
	@return {String} return facility description
*/
function getFacilityDescription(facilityUUID) {
	
	var facilityDescription = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location/&quot; + facilityUUID);

	channelMap.put(&quot;GetLocationApi&quot;, httpResp);
	
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			facilityDescription = resposta.description;
		}
	}

	return facilityDescription;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5e48274b-22ab-4d11-94f7-1b0bc29c8b72</id>
                <name>getGeneralInfoAppointment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791695</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Appoitment Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} apppointmentRes - o Appointment Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoAppointment(apppointmentRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof apppointmentRes[&apos;supportingInformation&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; apppointmentRes[&apos;supportingInformation&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( apppointmentRes[&apos;supportingInformation&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}
	
	if (typeof apppointmentRes[&apos;extension&apos;] != &apos;undefined&apos;){
		apppointmentRes[&apos;extension&apos;].find(function(extension){
			if (extension[&apos;url&apos;].includes(&apos;Appointment.Encounter&apos;)){
				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.id&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;reference&apos;].split(&quot;/&quot;)[1];
				respObj.episodioIdentificadores.push(episodioIdentificador);

				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.identifier&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;display&apos;];
				respObj.episodioIdentificadores.push(episodioIdentificador);
			}
		})
	}
      
     ////	Dados do Doente
     for (var j = 0; j &lt; apppointmentRes[&apos;participant&apos;].length; j++){  
		if(apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;reference&apos;].includes(&quot;Patient&quot;)){
			respObj.doente.nomeDoente = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;display&apos;];
		   	respObj.doente.numSequencial = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;identifier&apos;][&apos;value&apos;]; 
		}
     }
      
	// agendamentoIdentificadores
	if (typeof apppointmentRes[&apos;id&apos;] != &quot;undefined&quot; &amp;&amp; apppointmentRes[&apos;id&apos;] != &quot;&quot;) {
		agendamentoIdentificadoresObj = new Object();
		agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
		agendamentoIdentificadoresObj.codigo = apppointmentRes[&apos;id&apos;];	// nº do agendamento
		respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
	}

	// tipoAgendamentoIdentificadores
	apppointmentRes[&apos;serviceCategory&apos;].find(function(serviceCategory){
		serviceCategory[&apos;coding&apos;].find(function(codingSC){ 
			if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; !codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;) ){
				var objCUF= {};
				objCUF.sistemaCodificador = &quot;CUF@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objCUF.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objCUF);
			} else if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;)) {
				var objTHOM = {};
				objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objTHOM.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objTHOM);
			}
		});
	});

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5df4529e-ac29-482a-a8c8-6b86c2434803</id>
                <name>getGeneralInfoEncounter</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789003</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Encounter Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} encounterRes - o Encounter Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoEncounter(encounterRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof encounterRes[&apos;episodeOfCare&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; encounterRes[&apos;episodeOfCare&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( encounterRes[&apos;episodeOfCare&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}

	respObj.doente.numSequencial = encounterRes[&apos;subject&apos;][&apos;identifier&apos;][&apos;value&apos;];
	respObj.doente.nomeDoente = encounterRes[&apos;subject&apos;][&apos;display&apos;];
	
	if (typeof encounterRes[&apos;appointment&apos;] != &apos;undefined&apos;){
    	  	encounterRes[&apos;appointment&apos;].find(function (appointment) {
    	  		// agendamentoIdentificadores
			agendamentoIdentificadoresObj = new Object();
			agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
			agendamentoIdentificadoresObj.codigo = appointment[&apos;reference&apos;].replace(&apos;Appointment/&apos;, &apos;&apos;);
			respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
    	  	})
    	}

	// episodioIdentificadores
	episodioIdentificadorObj = new Object();
	episodioIdentificadorObj.sistemaCodificador = &quot;Encounter.id&quot;;
	episodioIdentificadorObj.codigo = encounterRes[&apos;id&apos;];
	respObj.episodioIdentificadores.push(episodioIdentificadorObj);

	// Human-redable ID
    	if (typeof encounterRes[&apos;identifier&apos;] != &apos;undefined&apos;){
		episodioIdentificadorHumanRedableObj = new Object();
		episodioIdentificadorHumanRedableObj.sistemaCodificador = &quot;Encounter.identifier&quot;;
		episodioIdentificadorHumanRedableObj.codigo = encounterRes[&apos;identifier&apos;][0][&apos;value&apos;];
		respObj.episodioIdentificadores.push(episodioIdentificadorHumanRedableObj);
    	}
	
	encounterRes[&apos;extension&apos;].find( function(extension) {
		if (extension[&apos;url&apos;].includes(&quot;Encounter.OperationalHealthUnit&quot;)) {
			var objTHOM = {};
			objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
			objTHOM.codigo = extension[&apos;valueCoding&apos;][&apos;code&apos;];
			respObj.tipoAgendamentoIdentificadores.push(objTHOM);
		}
	})

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7370760c-76cd-4fa8-bb89-34738bfe7995</id>
                <name>getIdProposta</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791423</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função auxiliar genérica com o propósito de extrair o id da proposta.
	com o intuito de extrair da API do sistema externo um determinado CarePlan e extrair o id da proposta cirúrgica associado, se este dado existir

	@param {String} propostaExtId - id externo identificativo da proposta
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;idproposta111&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getIdProposta(appointmentId, appContext) {

	var contextList = [&quot;cuf&quot;]; // contextos de aplicação da função (CUF, ...)
	var respostaObj = {};

	if (contextList.includes(appContext.trim().toLowerCase()) ) {
	
		if (appContext.trim().toLowerCase() == &quot;cuf&quot;) { // CUF

			/*
			if (propostaExtId &amp;&amp; !appointmentId) { //agendamento - extrair id da proposta de PC através do id externo da proposta
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			} else if (!propostaExtId &amp;&amp; appointmentId) { //checkin - 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC através do id externo da proposta
				var propostaExtId = getPropostaExtId_CUF(appointmentId);
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			}
			*/

			// 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC, através do id externo da proposta
			var respostaExtId = getPropostaExtId_CUF(appointmentId);
			if (respostaExtId.statusCode = &quot;200&quot;) {
				respostaObj = geIdPropostaPC_CUF(respostaExtId.responseMessage);
			} else {
				respostaObj = respostaExtId;
			}
		}
	} else {
		respostaObj.statusCode = &quot;500&quot;;
		respostaObj.responseMessage = &quot;Contexto de aplicação inválido&quot;;
	}
	return respostaObj;
}


// -------------- FUNCOES AUXILIARES -----------------------

function geIdPropostaPC_CUF(propostaExtId) { // extrair id da proposta de PC através do id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;CarePlan&quot;, propostaExtId);
	if (resposta.statusCode == &quot;200&quot;) {
		carePlanRes = JSON.parse(resposta.responseMessage);
		var patientCareId = null;
		carePlanRes[&quot;identifier&quot;].find( function(identifier) {
			identifier[&quot;type&quot;][&quot;coding&quot;].find( function(coding) {
				if (coding[&quot;code&quot;] == &quot;PLAC&quot;) {
					patientCareId = identifier[&quot;value&quot;];
				}
			});
		});
		if (patientCareId !== null) {
			result.statusCode = &quot;200&quot;;
			result.responseMessage = idProposta;
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;Id não encontrado como placer identifier no CarePlan com id &quot; + propostaExtId;			
		}
		
	} else {
		result = resposta;
	}
	return result;
}

function getPropostaExtId_CUF(appointmentId) { // obter id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;Appointment&quot;, appointmentId);
	if (resposta.statusCode == &quot;200&quot;) {
		appointmentRes = JSON.parse(resposta.responseMessage);
		if (appointmentRes[&apos;supportingInformation&apos;]) {
			var propostaExtId = null;
			appointmentRes[&apos;supportingInformation&apos;].find( function(suppInfo) {
				if (suppInfo[&apos;reference&apos;].includes(&quot;CarePlan&quot;)) {
					propostaExtId = suppInfo[&apos;reference&apos;].replace(&quot;CarePlan/&quot;,&quot;&quot;);
					return ;
				}
			});
			if (propostaExtId !== null) {
				result.statusCode = &quot;200&quot;;
				result.responseMessage = propostaExtId;
			} else {
				result.statusCode = &quot;500&quot;;
				result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
			}
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
		}
	} else {
		result = resposta;
	}
	return result;
}


</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>799a6dcb-19c1-4600-8ff8-6b905747eeaa</id>
                <name>GetOrganization</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788084</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} organizationGUID - thom guid fro organization
	@return {Object} return intRefExt
*/
function getOrganization(organizationGUID) {

	var organizationObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Organization/&quot; + organizationGUID;
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			organization = JSON.parse(httpResp.responseMessage);

			organizationObj.intRefExt = organization.alias[0];
			organizationObj.name = organization.name;
			
		}
	}

	return organizationObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c1c0f8a3-571c-4066-8324-a7b7ba0966db</id>
                <name>getPcSurgicalProposalIdFromThom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792484</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} patientUuid - ID do Paciente de THOM (UUID)
	@param {String} episodOfCareUuid - ID do EpisodeOfCare de THOM (UUID)
	@return {String} return ID sequencial da proposta cirurgica do PatientCare 
*/
function getPcSurgicalProposalIdFromThom(patientUuid, episodOfCareUuid) {
	var pcSurgicalProposal = null;
	var carePlanId = null;

	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	// Get all CarePlan to specific Patient
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CarePlan?_pretty=true&amp;patient=Patient/&quot; + patientUuid + &apos;&amp;category=https://thom-fhir.apis.sat.jmslab.pt/fhir/CodeSystem/TreatmentRequestType|1&apos;;
	httpResp = httpGet(httpGetURL, authHeader);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var bundle = JSON.parse(httpResp.responseMessage);
			
			bundle.entry.find(function(bundleResource){
				if (bundleResource.resource.resourceType == &apos;CarePlan&apos; &amp;&amp; typeof(bundleResource.resource.supportingInfo) != &apos;undefined&apos;){
					bundleResource.resource.supportingInfo.find(function(supportingInfo){
						if (supportingInfo.display == episodOfCareUuid){
							carePlanId = bundleResource.resource.id;
							//return;
						}	
					});
				}
			});
		}
	}

	// Get specific CarePlan to get the placer identifier
	if (carePlanId != null){
		var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CarePlan/&apos; + carePlanId;
		httpResp = httpGet(httpGetURL, authHeader);
		//logger.info(&quot;httpResp - &quot; + JSON.stringify(httpResp));
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var carePlan = JSON.parse(httpResp.responseMessage);
				
				carePlan.identifier.find(function(identifiers){
					identifiers.type.coding.find(function(codings){
						if (codings.code == &apos;PLAC&apos;){
							pcSurgicalProposal = identifiers.value;
							return;
						}
					});
				});
			}
		}
	}

	return pcSurgicalProposal;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>82e9fc81-294a-416a-9674-857fb9e5af64</id>
                <name>GetPractitionerByNumMecanografico</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791487</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} Practitioner NumMecanografico - numero mecanográfico do médico
	@return {Object} return Practitioner GUID do THOM
*/
function getPractitionerByNumMecanografico(numMecanografico) {
	var respObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Practitioner?identifier=&quot; + numMecanografico;
	httpResp = httpGet(httpGetURL,null);
	respObj.statusCode = httpResp.statusCode;

	respObj.response = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			practitioner = JSON.parse(httpResp.responseMessage);

			if (practitioner.type  == &apos;searchset&apos; &amp;&amp; practitioner.total &gt; 0){
				practitioner.entry.find(function(practitionerResource){
					return practitionerResource.resource.identifier.find(function(identifier){
						
						return identifier.type.coding.find(function(codes){
							if (codes.code == &apos;4&apos;){
								if (numMecanografico == identifier.value){
									respObj.response = practitionerResource.resource;
									return true;
								}
							}
						})
					})
				})	
			}
		}
	} else {
		respObj.response = httpResp.responseMessage != null ? httpResp.responseMessage : httpResp.statusText;
	}
	
	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>45bbb451-aab7-4513-8107-952866fd2a95</id>
                <name>getResourceExternalAPI</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789667</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo intuito passa por ir buscar à API externa uma determinada instância de um pretendido resource type

	@param {String} resourceType - FHIR Resource Type (por exemplo, Appointment, Bundle, CarePlan, Encounter, etc.)
	@param {String} resourceExtId - id externo da instância a ser obtida
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;fullResource&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getResourceExternalAPI(resourceType, resourceExtId) {
	var respostaObj = {};
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/&quot; + resourceType + &quot;/&quot; + resourceExtId;	
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			respostaObj = httpResp;
		} else {
			respostaObj.statusCode = &quot;500&quot;;
			respostaObj.responseMessage = &quot;Resposta retornada não é JSON&quot;;
		}
	} else {
		respostaObj = httpResp;
	}
	return respostaObj;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>fe90c913-c365-44d1-b309-7c4dae7d9d9a</id>
            <name>Utils</name>
            <revision>6</revision>
            <lastModified>
              <time>1730893909835</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Utils functions for Mirth Channels</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>9d0737dd-b85f-4e05-bd6e-b83828e87bdf</id>
                <name>addIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792349</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Aidiciona um objeto relativo a um identificador (Ex: {&quot;sistemaCodificador&quot;:&quot;Appointment.id&quot;, &quot;codigo&quot;: 1111} ) a uma lista de identificadores

	@param {String} sistCodificador - nome do sistemaCodificador (ex: &quot;Appointment.id&quot; ou &quot;Encounter.identifier&quot;)
	@param {String} codigo - value relativo ao sistCodificador
	@param {String} listaAdicionar - listagem já existente (ou vazia/null/undefined) de identificadores
	@return {String} return listaIdentificadores
*/
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	var lista;
	try {
		if (listaAdicionar  &amp;&amp; Array.isArray(listaAdicionar)) {
			lista = JSON.parse( JSON.stringify(listaAdicionar));
		} else {
			logger.info(&quot;excecao1&quot;);
			lista= [];
		}
	} catch (err) {
		logger.info(&quot;excecao2&quot; + err.toString());
		lista =  [];
	}
	/*
	if (! Array.isArray(listaAdicionar)) {
		lista = [];
	} else {
		lista = JSON.parse( JSON.stringify(listaAdicionar));
	}
	*/
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			lista.push(obj);
		}
	}
    	return lista;
	
}

/*
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	if (! Array.isArray(listaAdicionar)) {
		listaAdicionar = [];
	}
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			listaAdicionar.push(obj);
		}
	}
    	return listaAdicionar;
	
}
*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83c82ac5-e364-41b2-99cc-6a4ead5eaa37</id>
                <name>callApi</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793110</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Generic code to implement API call

	@param {String} method - http method
	@param {String} url - http url
	@param {String} user - api username
	@param {String} pass - api password
	@return {Object} return api response
*/
function callApi(method, url, user, pass) {
	
	var url = new Packages.java.net.URL(url);
	var connection = url.openConnection();
	connection.setRequestMethod(method);
	
	try {
	  var responseCode = connection.getResponseCode();
	  if (responseCode === Packages.java.net.HttpURLConnection.HTTP_OK) {	//	200
	    var inputStream = connection.getInputStream();
	    var reader = new Packages.java.io.BufferedReader(new Packages.java.io.InputStreamReader(inputStream));
	    var response = &quot;&quot;; // Inicializa a variável response
	
		    while ((line = reader.readLine()) !== null) {
		      response += line;
		    }      
	        reader.close();	      
		   
		   return JSON.parse(response.toString());
	
	    } else {
	        var errorMessage = &quot;Erro na chamada ao Web Service: &quot; +  url + &quot; Código de resposta: &quot; + responseCode;
	        // Trata os casos em que a chamada ao Web Service não foi bem-sucedida        
	        throw new Error(errorMessage);
	    }
	} catch (e) {
	    // Capturar exceção e retornar status e mensagem de erro
	    var errorStatus = connection.getResponseCode();
//	    var errorMessage = e.getMessage();	    
	    throw new Error(errorStatus);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fd200634-44bd-483c-97ab-743c373d4b7a</id>
                <name>checkIfExameEspecial</name>
                <revision>2</revision>
                <lastModified>
                  <time>1730739683915</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo objetivo passa por receber um código identificativo de um exame (ou outro serviço qualquer) e retornar se o mesmo é um exame especial ou não. Para
	tal, a função vai à tabela de catálogo da BD verificar se o código lá existe. Caso haja algum problema de acesso à BD, e de forma opcional, a função tenta aceder
	ao endpoint do sistema externo para fazer a verificação de exame especial.

	@param {String} catalogCode - código de catálogo CUF a ser analisado
	@param {String} externalSysCode - código de catálogo do sistema externo a ser analisado
	@return {Object} return object
*/
function checkIfExameEspecial(catalogCode, externalSysCode) {
	var error = false;
	var errorMsg = null;
	var isExameEspecial = null;
	var resposta = new Object();
	
	// Get a database connection 
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	var selectQuery = &quot;SELECT * FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; WHERE \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; and ativo = true;&quot;;
	try {
		// Execute the SQL query
		result = dbConn.executeCachedQuery(selectQuery);
		if (result.next() ) { // true
			isExameEspecial = true;
		} else { 
			isExameEspecial = false; // false
		}
	} catch (e) {
		error = true;
		logger.info(&quot;e.toString() = &quot; + e.toString());
		errorMsg = e.toString();
	} finally {
	    // Close the database connection
	    dbConn.close();
	}

	//houve erro no acesso à BD, logo tenta aceder ao endpoint do sistema externo para obter essa informação
	if (isExameEspecial == null &amp;&amp; typeof externalSysCode != &apos;undefined&apos;) {
		var httpPostURL = $(&apos;Transactional_CUFBUS_Host&apos;) + &quot;CodeSystem/Service/$lookup&quot;;
		var body = new Object();
		body.resourceType= &quot;Parameters&quot;;
		body.parameter = [{&quot;name&quot;:&quot;code&quot;,&quot;valueCode&quot;:externalSysCode}];
		var authHeader = null
		if ($(&apos;Transactional_CUFBUS_User&apos;) != null &amp;&amp; $(&apos;Transactional_CUFBUS_Pass&apos;) != &apos;&apos;){
			authHeader = apiGenerateBasicAuthHeader($(&apos;Transactional_CUFBUS_User&apos;), $(&apos;Transactional_CUFBUS_Pass&apos;));  
		}
		httpResp = httpPost(httpPostURL,JSON.stringify(body),authHeader);
		
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var parametersRes = JSON.parse(httpResp.responseMessage);
				try {
					if (parametersRes[&apos;resourceType&apos;] == &quot;Parameters&quot;) {
						var checkExameEspecial = null;
						parametersRes[&apos;parameter&apos;].find( function(parameter) {
							if(parameter[&apos;name&apos;] == &quot;property&quot;) {
								parameter[&apos;part&apos;].find( function(part) {
									if (part[&apos;valueCoding&apos;]) {
										if (part[&apos;valueCoding&apos;][&apos;code&apos;] == $(&apos;Catalogo_ServiceCategory_ExameEspecial&apos;)) {
											isExameEspecial = true;
											checkExameEspecial = true;
											return true;
										}
									}
								})
							}
						})
						if (checkExameEspecial == null) { // não encontrou property de exame especial, logo não é exame especial
							isExameEspecial = false;
						}
					} else {
						error = true;
						errorMsg = &quot;A Parameters Resource was expected as a response&quot;;
					}
				} catch (e2) {
					error = true;
					errorMsg = &quot;Error parsing the response from the endpoint &quot; + e2.toString();
				}
			} else {
				error = true;
				errorMsg = &quot;Endpoint response was not JSON&quot;;
			}
		} else {
			error = true;
			errorMsg = httpResp.statusText ? httpResp.statusText : (httpResp.responseMessage ? httpResp.responseMessage : null);;		
		}
	}
	if (isExameEspecial == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg; //string
	} else {
		resposta.statusCode = &quot;200&quot;;
		resposta.responseMessage = isExameEspecial; // boolean
	}
	return resposta;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b53102c9-17cf-431e-b87a-40d08fe73203</id>
                <name>convertDateToTimeStamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793287</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertDateToTimeStamp(date) {

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = &apos;00&apos;;
	var min = &apos;00&apos;;
	var sec = &apos;00&apos;;
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5714586f-45b8-45cb-9af6-fdabfe1bf9b2</id>
                <name>convertTimeStampToDateStr</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787735</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and time &quot;HHmmss&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@param {String} time - time in format &quot;HHmmss&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertTimeStampToDateStr(date, time) {

	if (time.length &lt;= 5){ // left pad
		time = time.padStart(time.length + 1, &apos;0&apos;);
	}

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = time.substring(0, 2);
	var min = time.substring(2, 4);
	var sec = time.substring(4, 6);
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b4455483-c833-4b4e-adb9-c646cad7bcfe</id>
                <name>DateUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791914</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Date to UTC

	@param {String} date - Date string in format &quot;yyyy-MM-ddTHH:mm:ss+SSSS&quot;
	@return {String} return date in UTC &quot;yyyy-MM-ddTHH:mm:ss+Z&quot;
*/
function DateUtc(date, dateFormat) {

     var formatter_hl7 = new java.text.SimpleDateFormat(dateFormat != null ? dateFormat : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss+SSSS&quot;);
     formatter_hl7.setTimeZone(java.util.TimeZone.getTimeZone($(&apos;serverTimeZone&apos;)));
     var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
     formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	return formatter_utc.format(formatter_hl7.parse(date));			
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4fbdd7b8-7dd0-4ba3-ba13-0a8990b4513b</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788357</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8cb44e20-4b8a-48e6-93ae-aa905dbf2445</id>
                <name>generate_HLv2_messageId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788478</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função criadora de id de mensagem HL7 v2 (MSH.10.1) único v5

	@return {String} id unico
*/
function generate_HLv2_messageId(tipo_mensagem) {

	var timestamp = new Date().getTime().toString();
	var timestamp_length = timestamp.length;

	//random remaining characters
	remainder = 20-3-timestamp_length;
	
	// Generate a random number between 0... and 9...
	var randomNumber = Math.floor(Math.random() * Math.pow(10,remainder));
	// Convert the number to a string and pad it with leading zeros if needed
	var formattedNumber = randomNumber.toString().padStart(remainder, &apos;0&apos;);
	
	return timestamp + &quot;-&quot; + tipo_mensagem[0] +&quot;-&quot; + formattedNumber;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b4aa14b-ee5a-464f-b1c8-0917d2ea815c</id>
                <name>getArrayUniqueValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792417</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns unique values from an array

	@param {array} array - array
	@return {array} return unique values from array
*/
function getArrayUniqueValues(array) {
	var uniqueArray = [];
	for (var i = 0; i &lt; array.length; i++) {
	    if (uniqueArray.indexOf(array[i]) === -1) {
	        uniqueArray.push(array[i]);
	    }
	}

	return uniqueArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bd7561e-2fb9-41d1-a8e3-fbeabaf8099a</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793452</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4814b63d-13ac-4097-86e2-22ca3c24eda4</id>
                <name>getFirstName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns first name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getFirstName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[0];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a594fff0-deb4-4d2a-a11e-f39582b42120</id>
                <name>getIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791988</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Extrai da listagem de identificadores o &quot;codigo&quot; associado a um pretendido &quot;sistCodificador&quot;

	@param {String} listaIds - listagem de identificadores onde procurar
	@param {String} sistCodificador - sistemaCodificador a ser procurado na listagem de identificadores
	@return {String} return codigo (ou null, caso não exista)
*/
function getIdentificador(listaIds, sistCodificador) {
	var codigo = null;	
	try{  		
	    	listaIds.find(function(elemento) {
	    		if (elemento.sistemaCodificador){
	    			try { // para o caso de algum dos identificadores estar mal definido não impedir que se extraia a informação pretendida
		        		if (elemento.sistemaCodificador.toLowerCase() == sistCodificador.toLowerCase()){
		          		codigo= elemento.codigo;
		          		return true;
		        		}
	    			} catch (err) {
		        		;
		        	}
	      	}
	    });
    	} catch (ex1){
    		codigo = null;
    	}
	return codigo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f9529854-80ad-450b-ad8a-54a1b63ba9d1</id>
                <name>getLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791292</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns last name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getLastName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[(names.length -1) ];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6ff6cc61-fa90-455a-b9b4-26f12a870f91</id>
                <name>getLocationExameEspecial</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792555</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dada informação sobre o hospital, o código de catálogo de exame especial e a especialidade, retornar qual a localização no pretendido hospital predestinada para
	a ocorrência de exames especiais dessa mesma especialidade

	@param {String} hospitalINTRefExt - INTRefExt do hospital (CMFL, HTEJO, ...)
	@param {String} catalogCode - código de catálogo do exame especial (10058, 20056, ...)
	@param {String} especialidade - especialidade associada ao exame especial (Cardiologia, Oftalmologia, ...)
	@return {String} return {&quot;servico&quot;: &quot;...&quot;, &quot;area&quot;: &quot;...&quot;, &quot;sala&quot;: &quot;...&quot; &quot;cama&quot;: &quot;...&quot;}
*/
function getLocationExameEspecial(hospitalINTRefExt, catalogCode, especialidade) {
	var error = false;
	var errorMsg = null;
	var resposta = new Object();

	var cama = null;
	var sala = null;
	var area = null;
	var servico = null;
	
	if ( !hospitalINTRefExt || !catalogCode || !especialidade ) {
		error = true;
		errorMsg = &quot;Um dos parametros da função é invalido&quot;;
	} else {
	
		var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	
		/* var selectQuery = &quot;SELECT cama, sala, area FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE servico = &apos;&quot; + AAAAAAAAA + &quot;&apos; AND especialidade = &apos;&quot;+ especialidade + &quot;&apos; AND id =&quot;
						+ &quot;(SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where intRefExt = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) LIMIT 1) LIMIT 1;&quot;; */
	
		var selectIdLocalizacaoSQL = &quot;SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) ;&quot;;
	
		var listIdLocalizacao= [];
		try {
			// Execute the SQL query
			result = dbConn.executeCachedQuery(selectIdLocalizacaoSQL); // return javax.sql.rowset.CachedRowSet
			while (result.next()) {
				listIdLocalizacao.push(result.getString(&quot;idLocalizacao&quot;));
			}
		} catch (e) {
			error = true;
			logger.info(&quot;e.toString() = &quot; + e.toString());
			errorMsg = e.toString();
		} finally {
		    // Close the database connection
		    dbConn.close();
		}
		logger.info(&quot;lsita ids localizacao = &quot; +JSON.stringify(listIdLocalizacao));
		

		if (listIdLocalizacao.length == 0){ // não existem idLocalizacao configurados para o exame
			error = true;
			errorMsg = &quot;Não existem idLocalizacao para o código de catálogo &quot; + catalogCode + &quot; e hospital &quot; + hospitalINTRefExt;
		} else {
			var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
			if (listIdLocalizacao.length == 1) { //só existe 1 idLocalizacao, logo não interessa a especialidade porque a localizacao do exame especial é sempre no mesmo local
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id = &apos;&quot; + listIdLocalizacao[0] + &quot;&apos;;&quot;;
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}			
			} else { // existe mais do que uma localização, logo vai diferenceiar por especialidade
				ids = &quot;(&quot;;
				for (var i=0; i&lt; listIdLocalizacao.length; i++) {
				    ids += &quot;&apos;&quot; + listIdLocalizacao[i].toString() + &quot;&apos;,&quot;;
				}
				ids = ids.slice(0,-1) + &quot;)&quot;;
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id in &quot; + ids + &quot; and especialidade = &apos;&quot;+especialidade+ &quot;&apos;;&quot;;
				logger.info(selectInfosSQL);
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}	
			}
		}
	}


	if (error == true  ) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro interno getLocationExameEspecial()&quot;;
	} else if ( cama == null &amp;&amp; sala == null &amp;&amp; area == null  &amp;&amp; servico == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro na query à LocalizacaoExamesEspeciais&quot;;
	}else {
		resposta.statusCode = &quot;200&quot;;
		var respObj = new Object();
		respObj.cama = cama;
		respObj.area = area;
		respObj.sala = sala;
		respObj.servico = servico;
		resposta.responseMessage = respObj;
	}
	return resposta;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>903737fd-9a14-45ea-b3cf-2af18ba88142</id>
                <name>getNumMecanograficoById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791627</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getNumMecanograficoById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.numMecanografico;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6bdd892d-3953-4f68-af96-44ff89434b13</id>
                <name>getPerfilUtilizadorById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789557</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getPerfilUtilizadorById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.perfil;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee58620f-c785-44f2-a4f7-26a8808c4e16</id>
                <name>getPerformerAndDatesRequisicaoMcdts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788016</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Object} accoesList - ...
	@param {Object} dataCriacaoRequisicao - ...
	@param {Object} utilizadoresList - ...
	@return {Object} return description

	(//R = obrigatório)
	--&gt; Formato esperado acoesList: [
          {
            &quot;utilizadorId&quot; : 12284, //R
            &quot;funcao&quot; : 1, //R
            &quot;data&quot; : &quot;2024-05-08T14:41:51.089035Z&quot; //R
          },
          {
            &quot;utilizadorId&quot; : 12284,
            &quot;funcao&quot; : 3,
            &quot;data&quot; : &quot;2024-05-08T14:27:58.349313Z&quot;
          }
        ]

     --&gt; Formato esperado utilizadoresList: [
	    {
	      &quot;id&quot; : 12284,
	      &quot;login&quot; : &quot;MDPIRES&quot;,
	      &quot;nome&quot; : &quot;Marcos Pires&quot;,
	      &quot;numMecanografico&quot; : &quot;263812278&quot;,
	      &quot;numOrdem&quot; : &quot;123&quot;,
	      &quot;numFuncionario&quot; : null,
	      &quot;perfil&quot; : 1,
	      &quot;intRefExt&quot; : null
	    }
	  ]
	
*/
function getPerformerAndDatesRequisicaoMcdts(accoesList,dataCriacaoRequisicao, utilizadoresList) {

	logger.info(&quot;accoesList - &quot; +JSON.stringify(accoesList));
	logger.info(&quot;dataCriacaoRequisicao - &quot; + JSON.stringify(dataCriacaoRequisicao));
	logger.info(&quot;utilizadoresList - &quot; + JSON.stringify(accoesList));
	returnObj = new Object();
	
	var Performer = Lists.list();
	var occurenceDateTime = null;
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(accoesList); j++ ){
	
	      try {
			if (accoesList[j][&apos;funcao&apos;] == 1 /* Relato */){
				dataRelato = accoesList[j][&apos;data&apos;];
			} else if (accoesList[j][&apos;funcao&apos;] == 2 /* Validacao */){
				dataValidacao = accoesList[j][&apos;data&apos;];
			} else {
				occurenceDateTime = dataCriacaoRequisicao;
			}
	       } catch (error) {
	       	logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro nas datas - &quot; + error.toString()); 
	     }
	
		try {
			  Performer.add({
			    function: {
			        coding: [{
			          system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			          code: newStringOrUndefined( accoesList[j][&apos;funcao&apos;] == 3 /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;])) : mapFuncao(accoesList[j][&apos;funcao&apos;]) )
			        }]
			      },
			    actor: {
			      reference: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) ) : null),
			      identifier: {
			        use: newStringOrUndefined(&apos;official&apos;),
			        type: {
			          coding: [{
			            system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
			            code: newStringOrUndefined(&apos;4&apos;)
			          }],
			          text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
			        },
			        value: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) : null)
			      }
			    }
		  });
		} catch (error2) {
			logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro no performer - &quot; + error2.toString()); 
		}
	}

	returnObj.performer = Performer;
	returnObj.occurenceDateTime = occurenceDateTime;
	returnObj.dataValidacao = dataValidacao;
	returnObj.dataRelato = dataRelato;

	return returnObj;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8615c472-c47a-48aa-a6e7-45e487c4463f</id>
                <name>getRabbitMqHosts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791032</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Void}
	@return {HostsDto} return hosts
*/
function getRabbitMqHosts() {
	// Set RabbitMQ Hosts
	importPackage(com.mirth.rabbitmq.client.dto);
	hosts = [];
	addr = new HostsDto(); // Main Host
	addr.setHost($(&apos;RabbitMqHost&apos;));
	addr.setPort(parseInt($(&apos;RabbitMqPort&apos;)));
	hosts.push(addr);

	return hosts;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f331cea8-c75e-40d4-83d9-a6779b688c81</id>
                <name>isJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790116</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a string is a valid JSON

	@param {String} string to validate if is JSON
	@return {Boolean} return boolean
*/
function isJSON(str) {
  try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27f41d50-5bd7-46da-9ad9-203181a92ba9</id>
                <name>isNumeric</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789613</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a value (string or number) is numeric

	@param {String} value to validate if is numeric
	@return {Boolean} return boolean
*/
function isNumeric(num) {
  if (typeof num == &quot;string&quot;) { 
    return !isNaN(num) &amp;&amp;
           !isNaN(parseFloat(num));
  } else if (typeof num == &quot;number&quot;) {
  	return true;
  } else {
  	return false;
  }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5c27a913-629d-4605-9e85-716a84e11410</id>
                <name>MappFrequencies</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to create multiple VAR Segments according Initial Date and CD_PrescricaoFrequencias

	@param {String} freqUni - CD_PrescricaoFrequencias description code
	@param {String} dateInit - Date HL7 string: start prescription date
	@param {String} DateEnd - Date HL7 string: end prescription date
	@return {String} return VAR Segment
*/
function MappFrequencies(freqUni, dateStart, DateEnd) {

	startDate = &quot;20230227115700&quot;;
	hora = startDate.substring(10, 8);
	freqfactor = 8;
	freqUnit = &apos;Dias&apos;;
	
	if (freqUnit == &apos;Hora&apos;){ // x em x horas
	    // calc hours segments
	    if (startDate.length &gt; 0 &amp;&amp; freqfactor &gt; 1){
	        console.log(&quot;running ...&quot;);
	        for (i = 0; i &lt; (24 / freqfactor) ; i++){
	            if ( (parseInt(hora) + (freqfactor * i) - 24) &gt;= 0  ){
	                hora = parseInt(hora) + (freqfactor * i) - 24;
	                break;
	            }
	        }
	        
	        if ((24 / freqfactor) &gt;= 1){
	            for(i = 0; i &lt; (24 / freqfactor); i++){
	                console.log( (parseInt(hora) + (freqfactor * i)).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	            }
	        }else {
	            console.log( parseInt(hora).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	        }   
	    }
	} else if (freqUnit == &apos;Dias&apos;){ // x em x dias
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Dias da Semanas&apos; || freqUnit == &apos;Por Dia&apos; || freqUnit == &apos;Refeições&apos; || freqUnit == &apos;Dia/Hora&apos;){ // têm de ser criados a cada dia
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Única&apos;){ // Hora fixa^5
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;SOS&apos;){
	    console.log( null )
	}else if (freqUnit == &apos;Turno Fixo&apos;) {
	    // tenho de pedir ao bruno para ter alguma informação relacionada com os turnos
	}else if (freqUnit == &apos;Contínuo&apos; || freqUnit == &apos;Sem horário&apos;){ // Sem hor\XE1\rio^0
	    console.log( null )
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e5cc4c3f-7233-42b0-8162-b3bec0ab5c94</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792857</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fdd919fc-4700-4a8f-aafe-cc2f4653f100</id>
                <name>Unescape HL7 Characters</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790479</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function hexMappingPreProcessor(result) {
	var hexMapping = [
			[/\\x21\\/gi, &quot;!&quot;], [/\\x22\\/gi, &apos;&quot;&apos;], [/\\x23\\/gi, &quot;#&quot;], [/\\x24\\/gi, &quot;$&quot;], [/\\x25\\/gi, &quot;%&quot;], [/\\x26\\/gi, &quot;&amp;&quot;], [/\\x27\\/gi, &quot;&apos;&quot;], [/\\x28\\/gi, &quot;(&quot;], [/\\x29\\/gi, &quot;)&quot;],
			[/\\x2a\\/gi, &quot;*&quot;], [/\\x2b\\/gi, &quot;+&quot;], [/\\x2c\\/gi, &quot;,&quot;], [/\\x2d\\/gi, &quot;-&quot;], [/\\x2e\\/gi, &quot;.&quot;], [/\\x2f\\/gi, &quot;/&quot;], [/\\x30\\/gi, &quot;0&quot;], [/\\x31\\/gi, &quot;1&quot;], [/\\x32\\/gi, &quot;2&quot;],
			[/\\x33\\/gi, &quot;3&quot;], [/\\x34\\/gi, &quot;4&quot;], [/\\x35\\/gi, &quot;5&quot;], [/\\x36\\/gi, &quot;6&quot;], [/\\x37\\/gi, &quot;7&quot;], [/\\x38\\/gi, &quot;8&quot;], [/\\x39\\/gi, &quot;9&quot;], [/\\x3a\\/gi, &quot;:&quot;], [/\\x3b\\/gi, &quot;;&quot;],
			[/\\x3c\\/gi, &quot;&lt;&quot;], [/\\x3d\\/gi, &quot;=&quot;], [/\\x3e\\/gi, &quot;&gt;&quot;], [/\\x3f\\/gi, &quot;?&quot;], [/\\x40\\/gi, &quot;@&quot;], [/\\x41\\/gi, &quot;A&quot;], [/\\x42\\/gi, &quot;B&quot;], [/\\x43\\/gi, &quot;C&quot;], [/\\x44\\/gi, &quot;D&quot;],
			[/\\x45\\/gi, &quot;E&quot;], [/\\x46\\/gi, &quot;F&quot;], [/\\x47\\/gi, &quot;G&quot;], [/\\x48\\/gi, &quot;H&quot;], [/\\x49\\/gi, &quot;I&quot;], [/\\x4a\\/gi, &quot;J&quot;], [/\\x4b\\/gi, &quot;K&quot;], [/\\x4c\\/gi, &quot;L&quot;], [/\\x4d\\/gi, &quot;M&quot;],
			[/\\x4e\\/gi, &quot;N&quot;], [/\\x4f\\/gi, &quot;O&quot;], [/\\x50\\/gi, &quot;P&quot;], [/\\x51\\/gi, &quot;Q&quot;], [/\\x52\\/gi, &quot;R&quot;], [/\\x53\\/gi, &quot;S&quot;], [/\\x54\\/gi, &quot;T&quot;], [/\\x55\\/gi, &quot;U&quot;], [/\\x56\\/gi, &quot;V&quot;],
			[/\\x57\\/gi, &quot;W&quot;], [/\\x58\\/gi, &quot;X&quot;], [/\\x59\\/gi, &quot;Y&quot;], [/\\x5a\\/gi, &quot;Z&quot;], [/\\x5b\\/gi, &quot;[&quot;], [/\\x5c\\/gi, &quot;\\&quot;], [/\\x5d\\/gi, &quot;]&quot;], [/\\x5e\\/gi, &quot;^&quot;], [/\\x5f\\/gi, &quot;_&quot;],
			[/\\x60\\/gi, &quot;`&quot;], [/\\x61\\/gi, &quot;a&quot;], [/\\x62\\/gi, &quot;b&quot;], [/\\x63\\/gi, &quot;c&quot;], [/\\x64\\/gi, &quot;d&quot;], [/\\x65\\/gi, &quot;e&quot;], [/\\x66\\/gi, &quot;f&quot;], [/\\x67\\/gi, &quot;g&quot;], [/\\x68\\/gi, &quot;h&quot;],
			[/\\x69\\/gi, &quot;i&quot;], [/\\x6a\\/gi, &quot;j&quot;], [/\\x6b\\/gi, &quot;k&quot;], [/\\x6c\\/gi, &quot;l&quot;], [/\\x6d\\/gi, &quot;m&quot;], [/\\x6e\\/gi, &quot;n&quot;], [/\\x6f\\/gi, &quot;o&quot;], [/\\x70\\/gi, &quot;p&quot;], [/\\x71\\/gi, &quot;q&quot;],
			[/\\x72\\/gi, &quot;r&quot;], [/\\x73\\/gi, &quot;s&quot;], [/\\x74\\/gi, &quot;t&quot;], [/\\x75\\/gi, &quot;u&quot;], [/\\x76\\/gi, &quot;v&quot;], [/\\x77\\/gi, &quot;w&quot;], [/\\x78\\/gi, &quot;x&quot;], [/\\x79\\/gi, &quot;y&quot;], [/\\x7a\\/gi, &quot;z&quot;],
			[/\\x7b\\/gi, &quot;{&quot;], [/\\x7c\\/gi, &quot;|&quot;], [/\\x7d\\/gi, &quot;}&quot;], [/\\x7e\\/gi, &quot;~&quot;], [/\\xa1\\/gi, &quot;¡&quot;], [/\\xa2\\/gi, &quot;¢&quot;], [/\\xa3\\/gi, &quot;£&quot;], [/\\xa4\\/gi, &quot;¤&quot;], [/\\xa5\\/gi, &quot;¥&quot;],
			[/\\xa6\\/gi, &quot;¦&quot;], [/\\xa7\\/gi, &quot;§&quot;], [/\\xa8\\/gi, &quot;¨&quot;], [/\\xa9\\/gi, &quot;©&quot;], [/\\xaa\\/gi, &quot;ª&quot;], [/\\xab\\/gi, &quot;«&quot;], [/\\xac\\/gi, &quot;¬&quot;], [/\\xa0\\/gi, &quot; &quot;], [/\\xae\\/gi, &quot;®&quot;],
			[/\\xaf\\/gi, &quot;¯&quot;], [/\\xad\\/gi, &quot; &quot;], [/\\xb0\\/gi, &quot;°&quot;], [/\\xb1\\/gi, &quot;±&quot;], [/\\xb2\\/gi, &quot;²&quot;], [/\\xb3\\/gi, &quot;³&quot;], [/\\xb4\\/gi, &quot;´&quot;], [/\\xb5\\/gi, &quot;µ&quot;], [/\\xb6\\/gi, &quot;¶&quot;],
			[/\\xb7\\/gi, &quot;·&quot;], [/\\xb8\\/gi, &quot;¸&quot;], [/\\xb9\\/gi, &quot;¹&quot;], [/\\xba\\/gi, &quot;º&quot;], [/\\xbb\\/gi, &quot;»&quot;], [/\\xbc\\/gi, &quot;¼&quot;], [/\\xbd\\/gi, &quot;½&quot;], [/\\xbe\\/gi, &quot;¾&quot;], [/\\xbf\\/gi, &quot;¿&quot;],
			[/\\xc0\\/gi, &quot;À&quot;], [/\\xc1\\/gi, &quot;Á&quot;], [/\\xc2\\/gi, &quot;Â&quot;], [/\\xc3\\/gi, &quot;Ã&quot;], [/\\xc4\\/gi, &quot;Ä&quot;], [/\\xc5\\/gi, &quot;Å&quot;], [/\\xc6\\/gi, &quot;Æ&quot;], [/\\xc7\\/gi, &quot;Ç&quot;], [/\\xc8\\/gi, &quot;È&quot;],
			[/\\xc9\\/gi, &quot;É&quot;], [/\\xca\\/gi, &quot;Ê&quot;], [/\\xcb\\/gi, &quot;Ë&quot;], [/\\xcc\\/gi, &quot;Ì&quot;], [/\\xcd\\/gi, &quot;Í&quot;], [/\\xce\\/gi, &quot;Î&quot;], [/\\xcf\\/gi, &quot;Ï&quot;], [/\\xd0\\/gi, &quot;Ð&quot;], [/\\xd1\\/gi, &quot;Ñ&quot;],
			[/\\xd2\\/gi, &quot;Ò&quot;], [/\\xd3\\/gi, &quot;Ó&quot;], [/\\xd4\\/gi, &quot;Ô&quot;], [/\\xd5\\/gi, &quot;Õ&quot;], [/\\xd6\\/gi, &quot;Ö&quot;], [/\\xd7\\/gi, &quot;×&quot;], [/\\xd8\\/gi, &quot;Ø&quot;], [/\\xd9\\/gi, &quot;Ù&quot;], [/\\xda\\/gi, &quot;Ú&quot;],
			[/\\xdb\\/gi, &quot;Û&quot;], [/\\xdc\\/gi, &quot;Ü&quot;], [/\\xdd\\/gi, &quot;Ý&quot;], [/\\xde\\/gi, &quot;Þ&quot;], [/\\xdf\\/gi, &quot;ß&quot;], [/\\xe0\\/gi, &quot;à&quot;], [/\\xe1\\/gi, &quot;á&quot;], [/\\xe2\\/gi, &quot;â&quot;], [/\\xe3\\/gi, &quot;ã&quot;],
			[/\\xe4\\/gi, &quot;ä&quot;], [/\\xe5\\/gi, &quot;å&quot;], [/\\xe6\\/gi, &quot;æ&quot;], [/\\xe7\\/gi, &quot;ç&quot;], [/\\xe8\\/gi, &quot;è&quot;], [/\\xe9\\/gi, &quot;é&quot;], [/\\xea\\/gi, &quot;ê&quot;], [/\\xeb\\/gi, &quot;ë&quot;], [/\\xec\\/gi, &quot;ì&quot;],
			[/\\xed\\/gi, &quot;í&quot;], [/\\xee\\/gi, &quot;î&quot;], [/\\xef\\/gi, &quot;ï&quot;], [/\\xf0\\/gi, &quot;ð&quot;], [/\\xf1\\/gi, &quot;ñ&quot;], [/\\xf2\\/gi, &quot;ò&quot;], [/\\xf3\\/gi, &quot;ó&quot;], [/\\xf4\\/gi, &quot;ô&quot;], [/\\xf5\\/gi, &quot;õ&quot;],
			[/\\xf6\\/gi, &quot;ö&quot;], [/\\xf7\\/gi, &quot;÷&quot;], [/\\xf8\\/gi, &quot;ø&quot;], [/\\xf9\\/gi, &quot;ù&quot;], [/\\xfa\\/gi, &quot;ú&quot;], [/\\xfb\\/gi, &quot;û&quot;], [/\\xfc\\/gi, &quot;ü&quot;], [/\\xfd\\/gi, &quot;ý&quot;], [/\\xfe\\/gi, &quot;þ&quot;],
			[/\\xff\\/gi, &quot;ÿ&quot;], [/\\x91\\/gi, &quot;‘&quot;], [/\\x92\\/gi, &quot;’&quot;], [/\\x80\\/gi, &quot;€&quot;], [/\\x83\\/gi, &quot;ƒ&quot;], [/\\x85\\/gi, &quot;…&quot;], [/\\x86\\/gi, &quot;†&quot;], [/\\x87\\/gi, &quot;‡&quot;], [/\\x88\\/gi, &quot;ˆ&quot;],
			[/\\x89\\/gi, &quot;‰&quot;], [/\\x8a\\/gi, &quot;Š&quot;], [/\\x8b\\/gi, &quot;‹&quot;], [/\\x8c\\/gi, &quot;Œ&quot;], [/\\x8e\\/gi, &quot;Ž&quot;], [/\\x93\\/gi, &quot;“&quot;], [/\\x94\\/gi, &quot;”&quot;], [/\\x95\\/gi, &quot;•&quot;], [/\\x96\\/gi, &quot;–&quot;],
			[/\\x97\\/gi, &quot;—&quot;], [/\\x98\\/gi, &quot;˜&quot;], [/\\x99\\/gi, &quot;™&quot;], [/\\x9a\\/gi, &quot;š&quot;], [/\\x9b\\/gi, &quot;›&quot;], [/\\x9c\\/gi, &quot;œ&quot;], [/\\x9e\\/gi, &quot;ž&quot;], [/\\x9f\\/gi, &quot;Ÿ&quot;], [/\\x2079\\/gi, &quot;⁹&quot;],
			[/Ã¡/g, &quot;á&quot;], [/Ã³/g, &quot;ó&quot;], [/Âµ/g, &quot;µ&quot;], [/Ã£/g, &quot;ã&quot;], [/Ã§/g, &quot;ç&quot;], [/Ã©/g, &quot;é&quot;], [/Ãº/g, &quot;ú&quot;], [/Â³/g, &quot;³&quot;], [/\\.br\\/gi, &quot; &quot;], [/  +/g, &apos; &apos;], [/Âº/g, &quot;º&quot;], [/Ã&#x81;/g, &quot;Á&quot;],
			[/Ã¢/g, &quot;â&quot;], [/Ãµ/g, &quot;õ&quot;], [/Ã&#x87;Ã&#x83;/g, &quot;ÇÃ&quot;], [/Ã&#x8d;/g, &apos;Í&apos;], [/Ã&#x87;Ã&#x95;/g, &apos;ÇÕ&apos;], [/Ã&#x93;/g, &quot;Ó&quot;]
			];
	
	for(var i = 0; i &lt; hexMapping.length; i++){
		result = result.replace(hexMapping[i][0], hexMapping[i][1]);
	}

	var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
	for(var i = 0; i &lt; replaceList.length; i++){
		do{
			result = result.replace(replaceList[i][0], replaceList[i][1]);
		}while(result.indexOf(replaceList[i][0]) &gt; -1);
	}
	
	return result;
}



function encodeIsoLatin(result) {
	var hexMapping = [
			/* [&quot;\\x21\\&quot;, &quot;!&quot;], [&quot;\\x3f\\&quot;, &quot;?&quot;], [&quot;\\x2c\\&quot;, &quot;,&quot;], [&quot;\\x3a\\&quot;, &quot;:&quot;], [&quot;\\x2e\\&quot;, &quot;.&quot;], [&quot;\\xa0\\&quot;, &quot; &quot;], [&quot;\\xad\\&quot;, &quot; &quot;], [&quot;\\x2d\\&quot;, &quot;-&quot;], [&quot;\\x5b\\&quot;, &quot;[&quot;], [&quot;\\x5d\\&quot;, &quot;]&quot;], [&quot;\\x5c\\&quot;, &quot;\\&quot;]*/ 
			[&quot;\\x22\\&quot;, /&quot;/g], [&quot;\\x23\\&quot;, /#/g], [&quot;\\x24\\&quot;, /\$/g], [&quot;\\x25\\&quot;, /%/g], [&quot;\\x26\\&quot;, /&amp;/g], [&quot;\\x27\\&quot;, /&apos;/g],
			[&quot;\\x2a\\&quot;, /\*/g], [&quot;\\x2b\\&quot;, /\+/g], [&quot;\\x2f\\&quot;, /\//g], [&quot;\\x3b\\&quot;, /;/g],
			[&quot;\\x3c\\&quot;, /&lt;/g], [&quot;\\x3d\\&quot;, /=/g], [&quot;\\x3e\\&quot;, /&gt;/g], [&quot;\\x40\\&quot;, /@/g], 
			[&quot;\\x5e\\&quot;, /\^/g], [&quot;\\x5f\\&quot;, /_/g], [&quot;\\x60\\&quot;, /`/g], [&quot;\\x7b\\&quot;, /{/g], [&quot;\\x7c\\&quot;, /\|/g], [&quot;\\x7d\\&quot;, /}/g], 
			[&quot;\\x7e\\&quot;, /~/g], [&quot;\\xa1\\&quot;, /¡/g], [&quot;\\xa2\\&quot;, /¢/g], [&quot;\\xa3\\&quot;, /£/g], [&quot;\\xa4\\&quot;, /¤/g], [&quot;\\xa5\\&quot;, /¥/g],
			[&quot;\\xa6\\&quot;, /¦/g], [&quot;\\xa7\\&quot;, /§/g], [&quot;\\xa8\\&quot;, /¨/g], [&quot;\\xa9\\&quot;, /©/g], [&quot;\\xaa\\&quot;, /ª/g], [&quot;\\xab\\&quot;, /«/g], [&quot;\\xac\\&quot;, /¬/g], [&quot;\\xae\\&quot;, /®/g],
			[&quot;\\xaf\\&quot;, /¯/g], [&quot;\\xb0\\&quot;, /°/g], [&quot;\\xb1\\&quot;, /±/g], [&quot;\\xb2\\&quot;, /²/g], [&quot;\\xb3\\&quot;, /³/g], [&quot;\\xb4\\&quot;, /´/g], [&quot;\\xb5\\&quot;, /µ/g], [&quot;\\xb6\\&quot;, /¶/g],
			[&quot;\\xb7\\&quot;, /·/g], [&quot;\\xb8\\&quot;, /¸/g], [&quot;\\xb9\\&quot;, /¹/g], [&quot;\\xba\\&quot;, /º/g], [&quot;\\xbb\\&quot;, /»/g], [&quot;\\xbc\\&quot;, /¼/g], [&quot;\\xbd\\&quot;, /½/g], [&quot;\\xbe\\&quot;, /¾/g], [&quot;\\xbf\\&quot;, /¿/],
			[&quot;\\xc0\\&quot;, /À/g], [&quot;\\xc1\\&quot;, /Á/g], [&quot;\\xc2\\&quot;, /Â/g], [&quot;\\xc3\\&quot;, /Ã/g], [&quot;\\xc4\\&quot;, /Ä/g], [&quot;\\xc5\\&quot;, /Å/g], [&quot;\\xc6\\&quot;, /Æ/g], [&quot;\\xc7\\&quot;, /Ç/g], [&quot;\\xc8\\&quot;, /È/g],
			[&quot;\\xc9\\&quot;, /É/g], [&quot;\\xca\\&quot;, /Ê/g], [&quot;\\xcb\\&quot;, /Ë/g], [&quot;\\xcc\\&quot;, /Ì/g], [&quot;\\xcd\\&quot;, /Í/g], [&quot;\\xce\\&quot;, /Î/g], [&quot;\\xcf\\&quot;, /Ï/g], [&quot;\\xd0\\&quot;, /Ð/g], [&quot;\\xd1\\&quot;, /Ñ/g],
			[&quot;\\xd2\\&quot;, /Ò/g], [&quot;\\xd3\\&quot;, /Ó/g], [&quot;\\xd4\\&quot;, /Ô/g], [&quot;\\xd5\\&quot;, /Õ/g], [&quot;\\xd6\\&quot;, /Ö/g], [&quot;\\xd7\\&quot;, /×/g], [&quot;\\xd8\\&quot;, /Ø/g], [&quot;\\xd9\\&quot;, /Ù/g], [&quot;\\xda\\&quot;, /Ú/g],
			[&quot;\\xdb\\&quot;, /Û/g], [&quot;\\xdc\\&quot;, /Ü/g], [&quot;\\xdd\\&quot;, /Ý/g], [&quot;\\xde\\&quot;, /Þ/g], [&quot;\\xdf\\&quot;, /ß/g], [&quot;\\xe0\\&quot;, /à/g], [&quot;\\xe1\\&quot;, /á/g], [&quot;\\xe2\\&quot;, /â/g], [&quot;\\xe3\\&quot;, /ã/g],
			[&quot;\\xe4\\&quot;, /ä/g], [&quot;\\xe5\\&quot;, /å/g], [&quot;\\xe6\\&quot;, /æ/g], [&quot;\\xe7\\&quot;, /ç/g], [&quot;\\xe8\\&quot;, /è/g], [&quot;\\xe9\\&quot;, /é/g], [&quot;\\xea\\&quot;, /ê/g], [&quot;\\xeb\\&quot;, /ë/g], [&quot;\\xec\\&quot;, /ì/g],
			[&quot;\\xed\\&quot;, /í/g], [&quot;\\xee\\&quot;, /î/g], [&quot;\\xef\\&quot;, /ï/g], [&quot;\\xf0\\&quot;, /ð/g], [&quot;\\xf1\\&quot;, /ñ/g], [&quot;\\xf2\\&quot;, /ò/g], [&quot;\\xf3\\&quot;, /ó/g], [&quot;\\xf4\\&quot;, /ô/g], [&quot;\\xf5\\&quot;, /õ/g],
			[&quot;\\xf6\\&quot;, /ö/g], [&quot;\\xf7\\&quot;, /÷/g], [&quot;\\xf8\\&quot;, /ø/g], [&quot;\\xf9\\&quot;, /ù/g], [&quot;\\xfa\\&quot;, /ú/g], [&quot;\\xfb\\&quot;, /û/g], [&quot;\\xfc\\&quot;, /ü/g], [&quot;\\xfd\\&quot;, /ý/g], [&quot;\\xfe\\&quot;, /þ/g],
			[&quot;\\xff\\&quot;, /ÿ/g], [&quot;\\x91\\&quot;, /‘/g], [&quot;\\x92\\&quot;, /’/g], [&quot;\\x80\\&quot;, /€/g], [&quot;\\x83\\&quot;, /ƒ/g], [&quot;\\x85\\&quot;, /…/g], [&quot;\\x86\\&quot;, /†/g], [&quot;\\x87\\&quot;, /‡/g], [&quot;\\x88\\&quot;, /ˆ/g],
			[&quot;\\x89\\&quot;, /‰/g], [&quot;\\x8a\\&quot;, /Š/g], [&quot;\\x8b\\&quot;, /‹/g], [&quot;\\x8c\\&quot;, /Œ/g], [&quot;\\x8e\\&quot;, /Ž/g], [&quot;\\x93\\&quot;, /“/g], [&quot;\\x94\\&quot;, /”/g], [&quot;\\x95\\&quot;, /•/g], [&quot;\\x96\\&quot;, /–/g],
			[&quot;\\x97\\&quot;, /—/g], [&quot;\\x98\\&quot;, /˜/g], [&quot;\\x99\\&quot;, /™/g], [&quot;\\x9a\\&quot;, /š/g], [&quot;\\x9b\\&quot;, /›/g], [&quot;\\x9c\\&quot;, /œ/g], [&quot;\\x9e\\&quot;, /ž/g], [&quot;\\x9f\\&quot;, /Ÿ/g], [&quot;\\x2079\\&quot;, /⁹/g],
			[&quot;\\x0a\\&quot;, /\n/g], [&quot;\\x0d\\&quot;, /\r/g]
			];
	
	if (result != null){
		for(var i = 0; i &lt; hexMapping.length; i++){
			result = result.replace(hexMapping[i][1], hexMapping[i][0]);
		}		

		var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
		for(var i = 0; i &lt; replaceList.length; i++){
			do{
				result = result.replace(replaceList[i][1], replaceList[i][0]);
			}while(result.indexOf(replaceList[i][0]) &gt; -1);
		}
	}
	
	return result;
}


function hexMappingReservatedChars(result) {
	var pattern = [[/\\T\\/g, &quot;&amp;&quot; ], [/\\R\\/g, &apos;~&apos;], [/\\E\\/g, &apos;\\&apos;], [/\\F\\/g, &apos;|&apos;], [/\\S\\/g, &apos;^&apos;]];
	
	for(var i = 0; i &lt; pattern.length; i++){
		result = result.replace(pattern[i][0], pattern[i][1]);
	}
	
	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fde5f48b-6860-49be-a9ab-dfb0e4ba3b97</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790008</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</id>
      <nextMetaDataId>8</nextMetaDataId>
      <name>ORM_SURGICAL_DISCHARGE_OUT</name>
      <description>Descrição:
Canal cujo objetivo passa por receber mensagens ORM do integrador central de PatientCare, tanto de cirurgia, como de exames especiais. A comunicação é feita com dois sistemas externos: Vigilant (destination &quot;Send ORM&quot;) e IMTHOM (restantes destinations).

Documentação:
https://b-simple.atlassian.net/wiki/x/AYDYEQ

Versão:
1.0.0
	ChangeLog:
	0.0.1 - definição inicial apenas com destination &quot;Send AddSurgery&quot;
	1.0.0 - adição do envio de Encounter e ChargeItems para o sistema externo

Dependências:
- generateBasicAuthHeader()
- httpGet()
- isJson()
- LocalDateTimeToUtc()
- hexMappingPreProcessor()
- httpPost()
- consolidate()
- convertToFhirCodeSystem()
- generateLogMsg()
- DateUtc()
- LocalDateTimeToUtc()

Canais interligados:
NaN

Variáveis de ambiente:
- FhirServer_IMTHOM_Host
- FhirServer_IMTHOM_User
- FhirServer_IMTHOM_Pass
- FhirServer_CUFBUS_Namespace
- tcpOutIpVigilant
- tcpOutPortVigilant
- FhirServer_CUFBUS_Host
- FhirServer_CUFBUS_User
- FhirServer_CUFBUS_Pass
- FhirServer_PatientCare_Namespace
- localAddress</description>
      <revision>10</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>Auto-generate (Before processing)</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Variables</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>/*
Variaveis:
	visitaIntRefExt
	nomeDoente - ter em conta o encoding?
	numSequencial
	agendamentoRefExt - PV1.50?
	dataInicio - formatDateByMask(msg[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString(),&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;); // ou yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSSXXX
	dataFim
	sendingFacility - MSH.4
*/

// visitaIntRefExt, eventoId, isExameEspecial, chargeItemId
var isExameEspecial = false;
var isInicioEpisodio = false;
for (var i =0; i &lt; getArrayOrXmlLength(msg[&apos;NTE&apos;]); i++) {
	if (msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;].toLowerCase() == &quot;encounter.id&quot; &amp;&amp; msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] != &quot;&quot;) {
		channelMap.put(&apos;visitaIntRefExt&apos;, msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;].toString());
	}
	if (msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;].toLowerCase() == &quot;eventoid&quot; &amp;&amp; msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] != &quot;&quot;) {
		channelMap.put(&apos;eventoId&apos;, msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;].toString());
	} 
	if (msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;].toLowerCase() == &quot;tipo_mensagem&quot; &amp;&amp; msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;].toLowerCase() == &quot;mcdt&quot;) {
		isExameEspecial = true;
	}
	if (msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;].toLowerCase() == &quot;chargeitem.id&quot; &amp;&amp; msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] != &quot;&quot;) {
		channelMap.put(&apos;chargeItemId&apos;, msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;]);
	}
	if (msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;].toLowerCase() == &quot;casoiniciado&quot; &amp;&amp; msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] != &quot;&quot;) {
		isInicioEpisodio = true;
		
	}
}
channelMap.put(&apos;isExameEspecial&apos;,isExameEspecial);
channelMap.put(&apos;isInicioEpisodio&apos;, isInicioEpisodio);


// numSequencial
for (var i =0; i &lt; getArrayOrXmlLength(msg[&apos;PID&apos;][&apos;PID.3&apos;]); i++) {
	if ( msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.5&apos;] == &quot;NS&quot;) {
		channelMap.put(&apos;numSequencial&apos;, msg[&apos;PID&apos;][&apos;PID.3&apos;][i][&apos;PID.3.1&apos;]);
	}
}

// nomeDoente
nomeDoente = hexMappingPreProcessor(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString());
if (msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() != &quot;&quot;) {
	nomeDoente += &quot; &quot; + hexMappingPreProcessor(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString());
}
nomeDoente += &quot; &quot; + hexMappingPreProcessor(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString());
channelMap.put(&apos;nomeDoente&apos;, nomeDoente);

// agendamentoRefExt
if (msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.1&apos;].toString() != &quot;&quot;) {
	channelMap.put(&apos;agendamentoRefExt&apos;, msg[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.1&apos;].toString().replace(&quot;PD-&quot;,&quot;&quot;));
}

// dataInicio
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.2&apos;][&apos;ZHS.2.1&apos;].toString() != &quot;&quot;) {
	//channelMap.put(&apos;dataInicio&apos;, formatDateByMask(msg[&apos;ZHS&apos;][0][&apos;ZHS.2&apos;][&apos;ZHS.2.1&apos;].toString(),&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;) );
	channelMap.put(&apos;dataInicio&apos;, LocalDateTimeToUtc(msg[&apos;ZHS&apos;][0][&apos;ZHS.2&apos;][&apos;ZHS.2.1&apos;].toString(), &quot;UTC&quot;));
}

// dataFim
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString() != &quot;&quot;) {
	//channelMap.put(&apos;dataFim&apos;, formatDateByMask(msg[&apos;ZHS&apos;][0][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString(),&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;) );
	channelMap.put(&apos;dataFim&apos;, LocalDateTimeToUtc(msg[&apos;ZHS&apos;][0][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString(), &quot;UTC&quot;));
}

channelMap.put(&apos;sendingFacility&apos;, msg[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;].toString());</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Filtering destinations</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/*
Disntinção entre Exame Especial e Cirurgia: 
	Exame especial = NTE.4.2 = TIPO_MENSAGEM + NTE.3.1 = MCDT
	Cirurgia: outros casos

(Opção 2 de distinção: utilizar checkIfExameEspecial() )
	
Fluxo de mensagens:
	- se Exame Especial:
		inicio: envia Encounter (status = in-progress)
		final: envia Encounter (status = finished) + ChargeItems
		alta: filtra
	- se Cirurgia:
		inicio: envia Encounter (status = in-progress)
		final: envia Encounter (status = finished)
		alta: Send AddSurgery

	- envio Vigilant:
		não alta: filtra
		alta: envia

select * from CD_Eventos where INTSincroniza = 1
Id|Descr
1|Entrada na sala
2|Início anestesia
4|Início cirurgia
5|Fim cirurgia
6|Fim anestesia
7|Saída sala
8|Chegada do doente
9|Saida do doente
10|Indução
12|Entrada Sala Ind.
14|Saída Sala Ind.
16|Indução LR
100|Entrada na UCPA
101|Saída da UCPA

Destinations: &quot;Send AddSurgery&quot;,&quot;Send ORM&quot;,&quot;Send Encounter&quot;,&quot;Send ChargeItem (Equipa cirurgica)&quot;,&quot;Send ChargeItem (Tecnica anestesica)&quot;

*/
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.22&apos;][&apos;ZHS.22.1&apos;].toString() == &quot;S&quot;) { // CANCELAMENTO 
	var activeDestinations = [&quot;Send Encounter&quot;];
	// envia-se cancelamento do ChargeItem se o tivermos recebido aquando do agendamento
	if (channelMap.get(&apos;chargeItemId&apos;) != null) {
		activeDestinations.push(&quot;Send ChargeItem (Equipa cirurgica)&quot;);
	}
	// envia-se ChargeItem de anestesia, caso a mesma tenha sido aplicada ao doente
	if (msg[&apos;ZHS&apos;][0][&apos;ZHS.8&apos;][&apos;ZHS.8.1&apos;].toString() != &quot;&quot;) {
		activeDestinations.push(&quot;Send ChargeItem (Tecnica anestesica)&quot;);
	}
	destinationSet.removeAllExcept(activeDestinations);	
	
} else if ( msg[&apos;ZHS&apos;][0][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString() != &quot;&quot;) { // ALTA (fim da cirurgia só enviado aquando da alta)
	var activeDestinations = [&quot;Send ORM&quot;,&quot;Send Encounter&quot;];
	if ( $(&apos;isExameEspecial&apos;) == true) { // se exame especial
		activeDestinations.push(&quot;Send ChargeItem (Equipa cirurgica)&quot;);
		activeDestinations.push(&quot;Send ChargeItem (Tecnica anestesica)&quot;);
	} else { // se cirurgia
		activeDestinations.push(&quot;Send AddSurgery&quot;);
	}
	destinationSet.removeAllExcept(activeDestinations);
	
} else if ($(&apos;isInicioEpisodio&apos;)) { // mensagem de inicio sai aquando do inicio do episodio!! (momento do clique em &quot;Iniciar Caso&quot;)
	var activeDestinations = [&quot;Send Encounter&quot;];
	destinationSet.removeAllExcept(activeDestinations);
	
} /*else if (channelMap.get(&apos;eventoId&apos;) == &quot;5&quot;) { // FIM
	var activeDestinations = [&quot;Send Encounter&quot;];
	if ( $(&apos;isExameEspecial&apos;) == true ) { // se exame especial
		activeDestinations.push(&quot;Send ChargeItem (Equipa cirurgica)&quot;);
		activeDestinations.push(&quot;Send ChargeItem (Tecnica anestesica)&quot;);
	}
	destinationSet.removeAllExcept(activeDestinations);
	
}*/else {
	//throw new Error(&quot;Erro na definição do tipo de mensagem&quot;);
	// trata-se de um evento que não é para ser enviado
	destinationSet.removeAll();
	channelMap.put(&apos;isFiltrada&apos;, true);
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">TVNIfF5+XCZ8QlVDSUNhcmV8SENEfEdIfEhDRHwyMDE5MDgwMjAwMDY0MHx8T1JNXk8wMXwxNTY0NzA0NDAwOTc2NTN8UHwyLjR8fHx8fHw4ODU5LzF8ClBJRHx8fDgwMDg5MV5eXkhDRH44MDA4OTFeXl5IQ0R8fFNBTF5SSUNBUkRPXnx8MTk1MDA2MjQwMDAwMDB8TXx8fHx8fHx8fHwKUFYxfHxSZWctT3BlcnxCT0NeU08xQ15TTzFDfHwxMDgyMDh8fF5eXnx8fDE0fHx8fHx8fHx8Mjc0MTgzfHx8fHx8fHx8fHx8fHx8fHx8RXx8fHx8fHwyMDE5MDgwMTIwMzAwMHwyMDE5MDgwMjAwMDYwMHx8fHx8Mjk0NjE3Ck9SQ3xTQ3wtMzM0Mzc3Mjl8MTMyNjM3fHxDTXx8fHwyMDE5MDgwMTE5MzExNnw1MDAwNjc2fHw1MDAwNjc2fHx8fApPQlJ8MXwtMzMzMjQ5MTF8MTMxNzk1fDQxMDAwMDAzXlBPU1RFQ1RPTUlBIChDSVJDVU4tQ0lTXFhDM1xPKV5USENEfHx8MjAxOTA4MDExMjIwNDJ8fHx8fHx8fHx8fHx8fHx8fHx8fDF8fHx8fDUwMDAxMjImJiYmJk1FRCZDSVJ8MjQxNDUxNjcxJiYmJiZFTkYmSU5TfjIyOTM2ODE4MiYmJiYmRU5GJkNJUkN+MjYxODg4NDU1JiYmJiZFTkYmQU5FU3x8fApPUkN8Q0F8LTMzNDM3NzI5fDEzMjYzN3x8fHx8fDIwMTkwODAxMTkzMTE2fDUwMDA2NzZ8fDUwMDA2NzZ8fHx8Ck9CUnwxfC0zMzQzNzcyOXwxMzI2Mzd8MF5DSVJVUkdJQSBBIERFRklOSVJeVEhDRHx8fDIwMTkwODAxMTkzMTE2fHx8fHx8fHx8fHx8fHx8fHx8fHwxfHx8fHw1MDAwMDgxJiYmJiZNRUQmQ0lSfDUwMDA2NzYmJiYmJk1FRCZBTkVTfjIwNDU1NDE2MCYmJiYmRU5GJkNJUkN+MjM3MTg2NDAzJiYmJiZFTkYmSU5TfjIyODE1MzE3NCYmJiYmRU5GJkFORVN8fHwKREcxfDF8fDYyMjdeUE9MSVBPIE1VQ09TTyBETyBDT0xPIERPIFVURVJPXkNJRDEyfHwyMDE5MDczMDEzNTExMXxGfHx8fHx8fHx8Mnx8RApERzF8Mnx8NzUyNDFeQ0lTVE8gRU1CUklPTklDTyBETyBDT0xPIFVURVJJTk8sIERBIFZBR0lOQSBFIERPUyBPUkdBT1MgR0VOSVRBSVMgRVhULiBGRU1JTkktTk9TXkNJRDEyfHwyMDE5MDczMDEzNTExMXxGfHx8fHx8fHx8MXx8RApaSFN8MjAxOTA4MDEyMDUwMDB8MjAxOTA4MDEyMDU1MDB8MjAxOTA4MDIwMDA2MDB8fHwyMDE5MDgwMTIxMzIwMHwyMDE5MDgwMTIzMDkwMHwyMDE5MDgwMTIxMzMwMHwyMDE5MDgwMTIzMDkwMHwyMDE5MDgwMTIxNTkwMHwyMDE5MDgwMTIzMDMwMHwyMDE5MDgwMTIzMTcwMHwyMDE5MDgwMjAwMDYwMHx8fEFHfHx8NHxOfHxOfHxJfHwKWlNTfDIwMTkwODAxMjEzNTAwfFN8U3xTfDJ8U3xBfFN8U3xOfHxOfE58MHwyMDE5MDgwMTIxMzUwMHxTfFN8U3xTfFN8QXx8QXx8U3x8U3x8U3x8U3x8U3x8U3x8QXwyMDE5MDgwMTIzMDMwMHxTfFN8U3wzMC4wMHwyOS4wMHw1Ny4wMHxTfFN8U3xTfHxTfHx8NTAwMDA4MXxEfDF8fDIyODE1MzE3NHx8MjI4MTUzMTc0fDIyODE1MzE3NHwyMjgxNTMxNzR8fHx8fHx8fHx8fHx8fHx8fFN8U3xTfFN8fHxOfHxOfHxOfHxO</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V2</inboundDataType>
          <outboundDataType>HL7V2</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>false</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
              <handleRepetitions>true</handleRepetitions>
              <handleSubcomponents>true</handleSubcomponents>
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <stripNamespaces>false</stripNamespaces>
              <segmentDelimiter>\r</segmentDelimiter>
              <convertLineBreaks>true</convertLineBreaks>
            </serializationProperties>
            <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
              <useStrictParser>false</useStrictParser>
              <useStrictValidation>false</useStrictValidation>
              <segmentDelimiter>\r</segmentDelimiter>
            </deserializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
              <splitType>MSH_Segment</splitType>
              <batchScript></batchScript>
            </batchProperties>
            <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
              <segmentDelimiter>\r</segmentDelimiter>
              <successfulACKCode>AA</successfulACKCode>
              <successfulACKMessage></successfulACKMessage>
              <errorACKCode>AE</errorACKCode>
              <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
              <rejectedACKCode>AR</rejectedACKCode>
              <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
              <msh15ACKAccept>false</msh15ACKAccept>
              <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
            </responseGenerationProperties>
            <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
              <successfulACKCode>AA,CA</successfulACKCode>
              <errorACKCode>AE,CE</errorACKCode>
              <rejectedACKCode>AR,CR</rejectedACKCode>
              <validateMessageControlId>true</validateMessageControlId>
              <originalMessageControlId>Destination_Encoded</originalMessageControlId>
              <originalIdMapVariable></originalIdMapVariable>
            </responseValidationProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
              <name>Filter if not start, discharge or cancellation</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var isInicioEpisodio = false;
for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;NTE&apos;]); i++) {
	if (msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;].toLowerCase() == &quot;casoiniciado&quot; &amp;&amp; msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] != &quot;&quot;) {
		isInicioEpisodio = true;
	}
}

if (msg[&apos;ZHS&apos;][0][&apos;ZHS.22&apos;][&apos;ZHS.22.1&apos;].toString() == &quot;S&quot; /*CANCELAMENTO*/ || 
	msg[&apos;ZHS&apos;][0][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString() != &quot;&quot;/*ALTA*/ || 
		isInicioEpisodio /*INICIO*/ ) {

			return true;
}
return false;</script>
            </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
          </elements>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>1</metaDataId>
          <name>Send AddSurgery</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>true</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>true</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host>${FhirServer_IMTHOM_Host}/fhir/Encounter/${encounter}/$AddSurgery</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>post</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json)</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>true</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username>${FhirServer_IMTHOM_User}</username>
            <password>${FhirServer_IMTHOM_Pass}</password>
            <content>${ParametersResource}</content>
            <contentType>application/json</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Init</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var parameters = [];
channelMap.put(&apos;parameters&apos;, parameters);

var encounter = msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
channelMap.put(&quot;encounter&quot;, encounter);

//TODO: Descomentar em SAT e UAT

// PersonFunction Catalog
var personFunctionCatalog = {}
var authHeader = null
if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
	authHeader = generateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
}

var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;, authHeader);
if(httpResp.statusCode === &quot;200&quot;){
	if(isJSON(httpResp.responseMessage)){
		personFunctionCatalog = httpResp.responseMessage
		
	}
}
channelMap.put(&apos;personFunctionCatalog&apos;, personFunctionCatalog);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Surgery Regime</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>var regimeObj = new Object();

//logger.info(&quot;regime: &quot; + msg[&apos;ZHS&apos;] );

if (msg[&apos;ZHS&apos;][0][&apos;ZHS.24&apos;][&apos;ZHS.24.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.24&apos;][&apos;ZHS.24.1&apos;].toString() != &apos;&apos;){

	regimeObj.name = &apos;Regime&apos;;
	regimeObj.valueCoding = new Object();
	regimeObj.valueCoding.system = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/SurgeryRegime&apos;;
	regimeObj.valueCoding.code = msg[&apos;ZHS&apos;][0][&apos;ZHS.24&apos;][&apos;ZHS.24.1&apos;].toString()
	regimeObj.valueCoding.display = &quot;Regime&quot;;

	$(&apos;parameters&apos;).push(regimeObj);
	
}

tmp = $(&apos;parameters&apos;);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Facility</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>//Temos de obter o ID da facility em THOM

var facilityUUID =  getFacility(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString())

if (facilityUUID != null){
	var facility = {
		name: newStringOrUndefined(&quot;Facility&quot;),
		valueReference: {
			reference: newStringOrUndefined(&quot;Location/&quot; + facilityUUID)
		}
	}
	$(&apos;parameters&apos;).push(facility);
}

/*
var authHeader = null
if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
	authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
}

var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location?_pretty=true&amp;name=&quot; + msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString() + &quot;&amp;isHealthCenter=0&quot;, authHeader);
if(httpResp.statusCode === &quot;200&quot;){
	if(isJSON(httpResp.responseMessage)){
		resposta = JSON.parse(httpResp.responseMessage);
		resposta.entry.find(function(resource){
			if (resource.resource.alias.includes(msg[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.2&apos;].toString()) ){
				var facility = {
					name: newStringOrUndefined(&quot;Facility&quot;),
					valueReference: {
						reference: newStringOrUndefined(&quot;Location/&quot; + resource.resource.id)
					}
				}
		
				$(&apos;parameters&apos;).push(facility);
			}
		})
    		
	}
}
*/</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Anesthesia</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>if (msg[&apos;ZHS&apos;][0][&apos;ZHS.16&apos;][&apos;ZHS.16.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.16&apos;][&apos;ZHS.16.1&apos;].toString() != &apos;&apos; ){

	var anesthesiaObj = new Object();
	
	anesthesiaObj.name = &apos;Anesthesia&apos;;
	anesthesiaObj.valueCoding = new Object();
	anesthesiaObj.valueCoding.system = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/Anesthesia&apos;;
	anesthesiaObj.valueCoding.code = msg[&apos;ZHS&apos;][0][&apos;ZHS.16&apos;][&apos;ZHS.16.1&apos;].toString();
	anesthesiaObj.valueCoding.display = &quot;Anesthesia&quot;;

	$(&apos;parameters&apos;).push(anesthesiaObj);
	
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>ContaminationPotential</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>// campo obrigatório em THOM não sei que campo vem isso, se é uma cirurgia limpa, contaminada, suja, limpa contaminada -&gt; creio que é o campo ZHS.29
/*if (msg[&apos;ZHS&apos;][&apos;ZHS.29&apos;][&apos;ZHS.29.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][&apos;ZHS.29&apos;][&apos;ZHS.29.1&apos;].toString() != &apos;&apos;){

	var contaminationObj = new Object();
	contaminationObj.name = &apos;ContaminationPotential&apos;;
	contaminationObj.valueCoding = new Object();
	contaminationObj.valueCoding.system = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;fhir/CodeSystem/ContaminationPotential&apos;
	contaminationObj.valueCoding.code = msg[&apos;ZHS&apos;][&apos;ZHS.29&apos;][&apos;ZHS.29.1&apos;].toString();
	contaminationObj.valueCoding.display = &apos;ContaminationPotential&apos;;

	$(&apos;parameters&apos;).push(contaminationObj);
}*/

// Fixo o potencial de contaminação apenas para efeitos de testes, dado que poderá não ser um requisito
var contaminationObj = new Object();
contaminationObj.name = &apos;ContaminationPotential&apos;;
contaminationObj.valueCoding = new Object();
contaminationObj.valueCoding.system = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/ContaminationPotential&apos;
contaminationObj.valueCoding.code = &apos;424551cd-12ef-4ae0-8f0a-bcb3d231ce42&apos;
contaminationObj.valueCoding.display = &apos;ContaminationPotential&apos;;

$(&apos;parameters&apos;).push(contaminationObj);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>SurgicalFindingsObs</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>if (msg[&apos;ZHS&apos;][0][&apos;ZHS.26&apos;][&apos;ZHS.26.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.26&apos;][&apos;ZHS.26.1&apos;].toString() != &apos;&apos; ){

	var surgicalFindingsObj = new Object();
		
	surgicalFindingsObj.name = &apos;SurgicalFindingsObs&apos;;
	surgicalFindingsObj.valueString = msg[&apos;ZHS&apos;][0][&apos;ZHS.26&apos;][&apos;ZHS.26.1&apos;].toString();

	$(&apos;parameters&apos;).push(surgicalFindingsObj);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Surgery Moments</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <script>// 341 - Hora de Entrada no Bloco -- LocalDateTimeToUtc(date, &quot;UTC&quot;)
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.2&apos;][&apos;ZHS.2.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.2&apos;][&apos;ZHS.2.1&apos;].toString() != &apos;&apos;){
	var momentHoraEntradaBloco = createSurgeryMoment(&apos;341&apos;, &apos;Hora de Entrada no Bloco&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.2&apos;][&apos;ZHS.2.1&apos;].toString() );
	$(&apos;parameters&apos;).push(momentHoraEntradaBloco);
}

// 343 - Hora de Saída do Bloco
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString() != &apos;&apos;){
	var momentHoraSaidaBloco = createSurgeryMoment(&apos;343&apos;, &apos;Hora de Saída do Bloco&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString());
	$(&apos;parameters&apos;).push(momentHoraSaidaBloco);
}

// 337 - Hora de Entrada na Sala
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.6&apos;][&apos;ZHS.6.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.6&apos;][&apos;ZHS.6.1&apos;].toString() != &apos;&apos;){
	var momentHoraEntradaSala = createSurgeryMoment(&apos;337&apos;, &apos;Hora de Entrada na Sala&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.6&apos;][&apos;ZHS.6.1&apos;].toString());
	$(&apos;parameters&apos;).push(momentHoraEntradaSala);
}

// 338 - Hora de Saída da Sala
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.7&apos;][&apos;ZHS.7.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.7&apos;][&apos;ZHS.7.1&apos;].toString() != &apos;&apos;){
	var momentHoraSaidaSala = createSurgeryMoment(&apos;338&apos;, &apos;Hora de Saída na Sala&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.7&apos;][&apos;ZHS.7.1&apos;].toString());
	$(&apos;parameters&apos;).push(momentHoraSaidaSala);
}

// 339 - Hora de Início de Cirurgia
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.10&apos;][&apos;ZHS.10.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.10&apos;][&apos;ZHS.10.1&apos;].toString() != &apos;&apos;){
	var momentHoraInicioCirurgia = createSurgeryMoment(&apos;339&apos;, &apos;Hora de Início de Cirurgia&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.10&apos;][&apos;ZHS.10.1&apos;].toString());
	$(&apos;parameters&apos;).push(momentHoraInicioCirurgia);
}

// 340 - Hora de Fim de Cirurgia
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.11&apos;][&apos;ZHS.11.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.11&apos;][&apos;ZHS.11.1&apos;].toString() != &apos;&apos;){
	var momentHoraFimCirurgia = createSurgeryMoment(&apos;340&apos;, &apos;Hora de Fim de Cirurgia&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.11&apos;][&apos;ZHS.11.1&apos;].toString());
	$(&apos;parameters&apos;).push(momentHoraFimCirurgia);
}

// 342 - Hora de Início da Anestesia
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.8&apos;][&apos;ZHS.8.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.8&apos;][&apos;ZHS.8.1&apos;].toString() != &apos;&apos;){
	var momentHoraInicioAnestesia = createSurgeryMoment(&apos;342&apos;, &apos;Hora de Início da Anestesia&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.8&apos;][&apos;ZHS.8.1&apos;].toString());
	$(&apos;parameters&apos;).push(momentHoraInicioAnestesia);
}

// 344 - Hora de Fim da Anestesia
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.9&apos;][&apos;ZHS.9.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.9&apos;][&apos;ZHS.9.1&apos;].toString() != &apos;&apos;){
	var momentHoraFimAnestesia = createSurgeryMoment(&apos;344&apos;, &apos;Hora de Fim da Anestesia&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.9&apos;][&apos;ZHS.9.1&apos;].toString());
	$(&apos;parameters&apos;).push(momentHoraFimAnestesia);
}

// 345 - Hora de Início do Recobro
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.12&apos;][&apos;ZHS.12.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.12&apos;][&apos;ZHS.12.1&apos;].toString() != &apos;&apos;){
	var momentHoraInicioRecobro = createSurgeryMoment(&apos;345&apos;, &apos;Hora de Início do Recobro&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.12&apos;][&apos;ZHS.12.1&apos;].toString());
	$(&apos;parameters&apos;).push(momentHoraInicioRecobro);
}

// 346 - Hora de Fim de Recobro
if (msg[&apos;ZHS&apos;][0][&apos;ZHS.13&apos;][&apos;ZHS.13.1&apos;] != null &amp;&amp; msg[&apos;ZHS&apos;][0][&apos;ZHS.13&apos;][&apos;ZHS.13.1&apos;].toString() != &apos;&apos;){
	var momentHoraFimRecobro = createSurgeryMoment(&apos;346&apos;, &apos;Hora de Fim do Recobro&apos;, msg[&apos;ZHS&apos;][0][&apos;ZHS.13&apos;][&apos;ZHS.13.1&apos;].toString());
	$(&apos;parameters&apos;).push(momentHoraFimRecobro);
}



function createSurgeryMoment(momentCode, momentDisplay, date){

	var momentObj = new Object();
	var part = [];

	partMomentCodeObj = new Object();
	partMomentDateObj = new Object();
	
	partMomentCodeObj.name = &apos;Code&apos;;
	partMomentCodeObj.valueCoding = new Object();
	partMomentCodeObj.valueCoding.system = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/SurgeryMoment&apos;;
	partMomentCodeObj.valueCoding.code = momentCode;
	partMomentCodeObj.valueCoding.display = momentDisplay;

	part.push(partMomentCodeObj);

	partMomentDateObj.name = &apos;Date&apos;;
	partMomentDateObj.valueDateTime = LocalDateTimeToUtc(date, &quot;UTC&quot;);

	part.push(partMomentDateObj);
	
	momentObj.name = &apos;Moment&apos;;
	momentObj.part = part;
	
	return momentObj;
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>HealthProblem</name>
                <sequenceNumber>7</sequenceNumber>
                <enabled>true</enabled>
                <script>var healthProblemObj = new Object();
healthProblemObj.name = &apos;HealthProblem&apos;;

// Condition
var Condition = {
    resourceType: newStringOrUndefined(&apos;Condition&apos;),
    id: newStringOrUndefined(UUIDGenerator.getUUID()),
    clinicalStatus: {
        coding: [{
            system: newStringOrUndefined(&apos;http:\/\/terminology.hl7.org\/CodeSystem\/condition-clinical&apos;),
            code: newStringOrUndefined(&apos;active&apos;)
        }]
    },
    verificationStatus: {
        coding: [{
            system: newStringOrUndefined(&apos;http:\/\/terminology.hl7.org\/CodeSystem\/condition-ver-status&apos;),
            code: newStringOrUndefined(&apos;confirmed&apos;)
        }]
    },
    category: [{
        coding: [{
            system: newStringOrUndefined(&apos;http:\/\/terminology.hl7.org\/CodeSystem\/condition-category&apos;),
            code: newStringOrUndefined(&apos;encounter-diagnosis&apos;)
        }]
    }],
    code: {
        coding: [{
            system: newStringOrUndefined(&quot;http://hl7.org/fhir/sid/&quot; + (msg[&apos;DG1&apos;][&apos;DG1.3&apos;][&apos;DG1.3.3&apos;].toString() == &apos;ICD10&apos; ? &apos;icd-10&apos; : (msg[&apos;DG1&apos;][&apos;DG1.3&apos;][&apos;DG1.3.3&apos;].toString() == &apos;ICD9&apos; ? &apos;icd-9-cm&apos; : msg[&apos;DG1&apos;][&apos;DG1.3&apos;][&apos;DG1.3.3&apos;].toString() ) )),
            code: newStringOrUndefined(msg[&apos;DG1&apos;][&apos;DG1.3&apos;][&apos;DG1.3.1&apos;].toString())
        }],
        text: newStringOrUndefined(hexMappingPreProcessor(msg[&apos;DG1&apos;][&apos;DG1.3&apos;][&apos;DG1.3.2&apos;].toString()))
    },
    subject: {
        reference: newStringOrUndefined(&quot;Patient/&quot; + msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()),
        identifier: {
            use: newStringOrUndefined(&apos;official&apos;),
            type: {
                coding: [{
                    system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &apos;/fhir/CodeSystem/PatientCode&apos;),
                    code: newStringOrUndefined(&apos;JMS&apos;)
                }],
                text: newStringOrUndefined(&apos;JMS Identifier&apos;)
            },
            value: newStringOrUndefined(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString())
        },
        display: newStringOrUndefined(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() + &apos; &apos; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString())
    },
    encounter: {
        reference: newStringOrUndefined(&quot;Encounter/&quot; + msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString())
    },
    onsetDateTime: newStringOrUndefined(LocalDateTimeToUtc(msg[&apos;DG1&apos;][0][&apos;DG1.5&apos;][&apos;DG1.5.1&apos;].toString(), &quot;UTC&quot;)),
    recordedDate: newStringOrUndefined(LocalDateTimeToUtc(msg[&apos;DG1&apos;][0][&apos;DG1.5&apos;][&apos;DG1.5.1&apos;].toString(), &quot;UTC&quot;))
};


healthProblemObj.resource = Condition;
$(&apos;parameters&apos;).push(healthProblemObj);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Incision</name>
                <sequenceNumber>8</sequenceNumber>
                <enabled>true</enabled>
                <script>var count = 0;
for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;OBR&apos;]); i++) {
	// build the Incision
	if (msg[&apos;ORC&apos;][i][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;] != &apos;CA&apos;) { // Só gera os não cancelados - decisão CUF. Caso se retire esta condição passamos a enviar todos sendo que os cancelados vão com o estado not-done
		count = count + 1;
		incision = buildIncisionFromObr(i, msg[&apos;OBR&apos;][i], msg[&apos;ORC&apos;][i], count);
		// build the procedure
		service = buildServiceFromObr(i, msg[&apos;OBR&apos;][i], incision.resource.id, msg[&apos;ORC&apos;], count)
	
		$(&apos;parameters&apos;).push(incision);
		$(&apos;parameters&apos;).push(service);		
	}
}


function buildIncisionFromObr(incisionNumber, obr, orc, count){
	// Incision Id
	var incisionId = UUIDGenerator.getUUID();
	var incision = {};
	incision.name = &apos;Incision&apos;;

	//logger.info(&quot;incisionNumber: &quot; + incisionNumber);
	//logger.info(&quot;orc[incisionNumber]: &quot; + orc[incisionNumber]);

	var IncisionPerformers = []

	// Cirurgião principal
	var cirurgiaoPrincipal = createPerformerElement(obr[&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.7&apos;].toString(), obr[&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.1&apos;].toString(), (obr[&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.3&apos;].toString() + &apos; &apos; + obr[&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.2&apos;].toString()) );
	IncisionPerformers.push(cirurgiaoPrincipal);

	// Outros elementos da equipa
	if (obr[&apos;OBR.33&apos;] != null &amp;&amp; obr[&apos;OBR.33&apos;] != &quot;&quot;){
		for (var i = 0; i &lt; getArrayOrXmlLength(obr[&apos;OBR.33&apos;]); i++) {
			performerTeamMember = createPerformerElement(obr[&apos;OBR.33&apos;][i][&apos;OBR.33.1&apos;][&apos;OBR.33.1.7&apos;].toString(), obr[&apos;OBR.33&apos;][i][&apos;OBR.33.1&apos;][&apos;OBR.33.1.1&apos;].toString(), (obr[&apos;OBR.33&apos;][i][&apos;OBR.33.1&apos;][&apos;OBR.33.1.3&apos;].toString() + &apos; &apos; + obr[&apos;OBR.33&apos;][i][&apos;OBR.33.1&apos;][&apos;OBR.33.1.2&apos;].toString()))
			IncisionPerformers.push(performerTeamMember);
		}	
	}
	
	
	var IncisionProcedure = {
	    resourceType: newStringOrUndefined(&apos;Procedure&apos;),
	    id: newStringOrUndefined(incisionId),
	    extension: [{
	            url: newStringOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/Procedure.IncisionLaterality&quot;),
	            valueCoding: {
	                system: newStringOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/IncisionLaterality&quot;),
	                code: newStringOrUndefined(orc[&apos;ORC.13&apos;][&apos;ORC.13.1&apos;] != null ? mapSurgicalIncisionLaterality(orc[&apos;ORC.13&apos;][&apos;ORC.13.1&apos;].toString()) : mapSurgicalIncisionLaterality(msg[&apos;ZHS&apos;][0][&apos;ZHS.15&apos;][&apos;ZHS.15.1&apos;].toString()) )
	            }
	        },
	        {
	            url: newStringOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/Procedure.IncisionVia&quot;),
	            valueCoding: {
	                system: newStringOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/IncisionVia&quot;),
	                code: newStringOrUndefined(msg[&apos;ZHS&apos;][0][&apos;ZHS.19&apos;][&apos;ZHS.19.1&apos;].toString())
	            }
	        },
	        {
	            url: newStringOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/StructureDefinition/Procedure.IncisionNumber&apos;),
	            valueInteger: newNumberOrUndefined(count)
	        }
	    ],
	    status: orc[&apos;ORC.1&apos;][&apos;ORC.1.1&apos;] == &quot;CA&quot; ? newStringOrUndefined(&apos;not-done&apos;) : newStringOrUndefined(&apos;completed&apos;),
	    subject: {
	        reference: newStringOrUndefined(&quot;Patient/&quot; + msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()),
	        identifier: {
	            use: newStringOrUndefined(&apos;official&apos;),
	            type: {
	                coding: [{
	                    system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &apos;/fhir/CodeSystem/PatientCode&apos;),
	                    code: newStringOrUndefined(&apos;JMS&apos;)
	                }],
	                text: newStringOrUndefined(&apos;JMS Identifier&apos;)
	            },
	            value: newStringOrUndefined(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString())
	        },
	        display: newStringOrUndefined(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() + &apos; &apos; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString())
	    },
	    encounter: {
	        reference: newStringOrUndefined(&quot;Encounter/&quot; + msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString())
	    },
	    performer: IncisionPerformers
	};


	incision.resource = IncisionProcedure;

	return incision;
};


function buildServiceFromObr(serviceNumber, obr, relatedIncisionId, orc, count){
	// Service Id (procedure)
	var serviceId = UUIDGenerator.getUUID();
	var service = {};
	service.name = &apos;Service&apos;;

	var ServiceProcedure = {
	    resourceType: newStringOrUndefined(&apos;Procedure&apos;),
	    id: newStringOrUndefined(serviceId),
	    extension: [
	        {
	            url: newStringOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/StructureDefinition/Procedure.ServiceOrder&apos;),
	            valueInteger: newNumberOrUndefined(count)
	        }/*, // Não temos o conceito de produtos consumidos ao nível da alta de cirurgia
	        {
	        	  extension: [
	        	  	{
	                  url: newNumberOrUndefined(&quot;Quantity&quot;),
	                  valueQuantity: {
	                  	value: newStringOrUndefined(1)
	                  }
	              },
	              {
	                url: newNumberOrUndefined(&quot;Code&quot;),
	                valueCoding: {
	                  system: newNumberOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/Product&apos;),
	                  code: newNumberOrUndefined(&quot;17ac8749-b21d-ef11-aaf3-40ec99cc75a3&quot;),
	                  display: (&quot;Produto de Teste&quot;)
	                }
	              }
	        	  ],
	        	  url: newNumberOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/StructureDefinition/Procedure.Product&apos;)
	        }*/
	    ],
	    status: orc[&apos;ORC.5&apos;][&apos;ORC.5.1&apos;] == &quot;CA&quot; ? newStringOrUndefined(&apos;not-done&apos;) : newStringOrUndefined(&apos;completed&apos;),
	    partOf: [
          {
            reference: newStringOrUndefined(&quot;Procedure/&quot; + relatedIncisionId)
          }
         ],
         code: {
          coding: [
            {
              system: newStringOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/Service&quot;),
              code: newStringOrUndefined(getServiceIdFromExtSystem(obr[&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString()))
            }
          ]
         },
	    subject: {
	        reference: newStringOrUndefined(&quot;Patient/&quot; + msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString()),
	        identifier: {
	            use: newStringOrUndefined(&apos;official&apos;),
	            type: {
	                coding: [{
	                    system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &apos;/fhir/CodeSystem/PatientCode&apos;),
	                    code: newStringOrUndefined(&apos;JMS&apos;)
	                }],
	                text: newStringOrUndefined(&apos;JMS Identifier&apos;)
	            },
	            value: newStringOrUndefined(msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString())
	        },
	        display: newStringOrUndefined(msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() + &apos; &apos; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString())
	    },
	    encounter: {
	        reference: newStringOrUndefined(&quot;Encounter/&quot; + msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString())
	    }
	};

	service.resource = ServiceProcedure;
	
	return service;
}


function getPersonFunctionExtSytem(cdFunction){
	var thomPersonFunctionId = null;
	if ($(&apos;personFunctionCatalog&apos;) != null){
		var catalog = JSON.parse($(&apos;personFunctionCatalog&apos;));
		var thomPersonFunctionId = catalog.concept.find(function(concept){
			if (typeof(concept.property) != &apos;undefined&apos;){
				concept.property.find(function(properties){
						if (properties.valueString == &apos;CIR&apos;){
							return concept.code;
						}
					}
				)
			}
		});
	
		return thomPersonFunctionId;
	}
}

function createPerformerElement(personFunction, personNumMecanografico, personName){
	var performerElement = 
	{
		function:{
			coding: [
				{
	                  system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
	                  code: newStringOrUndefined(personFunction) // getPersonFunctionExtSytem
	               }
			]				
		},
		actor: {
			reference: newStringOrUndefined(personNumMecanografico != null ? &quot;Practitioner/&quot; + personNumMecanografico : null),
			identifier: {
	            use: newStringOrUndefined(&apos;official&apos;),
	            type: {
	                coding: [{
	                    system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &apos;/fhir/CodeSystem/PersonIdentifierType&apos;),
	                    code: newStringOrUndefined(&apos;4&apos;)
	                }],
	                text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
	            },
	            value: newStringOrUndefined(personNumMecanografico != null ? personNumMecanografico : null)
	        },
	        display: newStringOrUndefined(personName != null ? personName : null)
		}
	};

	return performerElement;
}

function getServiceIdFromExtSystem(codAto){
	
	var codExternalSystem = codAto;

	var parameters = {
		resourceType: newStringOrUndefined(&quot;Parameters&quot;),
		parameter: [
		   {
		   	name: newStringOrUndefined(&quot;system&quot;),
		   	valueUri: newStringOrUndefined($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/Service&quot;)
		   },
		   {
			   name: newStringOrUndefined(&quot;property&quot;),
			   part: [
			       {
				       name: newStringOrUndefined(&quot;code&quot;),
				       valueCode: newStringOrUndefined(&quot;code&quot;)
			       },
			       {
				       name: newStringOrUndefined(&quot;value&quot;),
				       valueString: newStringOrUndefined(codAto)
			       }
			   ]
		   }
		]
	}
	
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = generateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}
	
	var httpResp = httpPost($(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/$find-matches&apos;, JSON.stringify(parameters), authHeader);
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			resposta.parameter.find(function(parameter){
				 parameter.part.find(function(parts){
				 	codExternalSystem = parts.valueCoding.code;
				 });
			});
			
		}
	}

	return codExternalSystem;
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>ParametersResource</name>
                <sequenceNumber>9</sequenceNumber>
                <enabled>true</enabled>
                <script>// Build Resource Parameters
var ParametersResource = {};
ParametersResource.resourceType = &apos;Parameters&apos;;
ParametersResource.parameter = $(&apos;parameters&apos;);

channelMap.put(&apos;ParametersResource&apos;, JSON.stringify(consolidate(ParametersResource)));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
                <name>msgOriginal</name>
                <sequenceNumber>10</sequenceNumber>
                <enabled>true</enabled>
                <variable>msgOriginal</variable>
                <mapping>msg</mapping>
                <defaultValue></defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfF5+XCZ8QlVDSUNhcmV8Q0hMfFNPTkhPfENITHwyMDI0MDgyMDAwMTM1NHx8T1JNXk8wMXwxNzI0MTEyODM0MjQxNDYtTy00ODU4MnxQfDIuNHx8fHxBTHx8ODg1OS8xfApQSUR8fHwzMDY1NzFeXl5DSExeTlN8fENBU1RSTyBTQU5UT15FTUlMSUEgREEgQ09OQ0VJQ0FPXl5eXl5MfHwxOTYzMDkyOTAwMDAwMHxGfHx8fHx8fHx8fDE2MjI5OV5eXkNITApQVjF8MXxJTlR8MV4xMDA5XjEwMDleU0FMQSBVQ1BBfHwyNDAxNDUwN3x8fHx8MTF8fHx8fHx8fHwyNDAxMzMzN3x8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwyNDAxMzU2MQpERzF8MXx8TTE3MTFeQXJ0cm9zZSBwcmltXFhFMVxyaWEgdW5pbCwgam9lbGhvIERJUl5JQ0QxMHx8MjAyNDA4MTkxNjMwMDB8Rnx8fHx8fHx8fDF8fEQKT1JDfFNDfHwzODI2MHx8Q018fHx8MjAyNDA4MTkxNjMwMDB8NTkxM15JbmVzIEZpbGlwYSBNb3JvdWNvIEhlbnJpcXVlc3x8NTc0MDZeRWxpc2EgTWFyZ2FyaWRhIE1hcnRpbmhvIEZlcnJlaXJhfHx8MjAyNDA4MTkyMjQ4MDB8Ck9CUnwxfHwzODI2MHwwU1JDMEo5Xk1DPkFydGljSU5GPlN1YnN0aXR1aVxYRTdcXFhFM1xvPkFydGljIGpvZWxobyBESVI+QWJlcnRhPlN1YnN0IHNpbnQ+Q2ltZW50YWRhXklDRDEwfFB8fDIwMjQwNzI0MTE1OTQ5fHx8fHx8fHx8fHx8fHx8fHx8fHwxfHx8fHwyODMyNCZSb2RyaWd1ZXMmTnVubyYmUCZNRURJQ08mQ0lSVVJHSUFPfDE4NjEmQmF0aXN0YSZNYXJpYSBUZXJlc2EgUm9zYWRvJiZBJlRFQ05JQ08mQVVYSUxJQVJ+MjkwNDgmTUFHQUxIQUVTJjY4IEFOVE9OSU8mJkEmTUVESUNPJkNJUlVSR0lBT34zMjQwJlNhbnRpYWdvJkRpbmlzJiZBJkVORkVSTUVJUk8mQU5FU1RFU0lTVEF+NDI0MSZPbGl2ZWlyYSZKb2FvJiZBJkVORkVSTUVJUk8mSU5TVFJVTUVOVElTVEF+NDQ3MiZNYXJxdWVzJlZhbmVzc2EgU29maWEgTG9wZXMmJkEmRU5GRVJNRUlSTyZDSVJDVUxBTlRFfjY1ODQ4JkdvbWVzJkxlb25vciBBbmljZXRvJiZBJk1FRElDTyZBTkVTVEVTSVNUQXx8fApaSFN8fDIwMjQwODE5MTc1OTAwfDIwMjQwODIwMDAxMzAwfDIwMjQwODE5MTgwMDAwfHwyMDI0MDgxOTE4NTEwMHwyMDI0MDgxOTE5NTkwMHwyMDI0MDgxOTE4NTcwMHx8MjAyNDA4MTkxOTAwMDB8MjAyNDA4MTkxOTUwMDB8MjAyNDA4MTkyMDE0MDB8fE58fHxTfDF8fE58fE58fDEwMHxTZW0gbW90aXZvIHJlZ2lzdGFkb3x8MjAyNDA4MTkxODU1MDB8MjAyNDA4MTkxOTU1MDB8Ck5URXwxfHxBTFRBfF5USVBPX01FTlNBR0VN</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Return analysis and routing for ORR creation</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var statusCode = parseInt( connectorMap.get(&apos;responseStatusLine&apos;).split(&quot; &quot;)[1] );

if (statusCode == 200 || (statusCode &gt;= 400 &amp;&amp; statusCode &lt;= 500) ) { // inclui-se &quot;500&quot;, pois podem ser bugs por parte do sistema externo, que não valem a pena fazer retry
	var errDiagnosis = null;
	if (statusCode &gt;= 400 &amp;&amp; statusCode &lt;= 500) {
		try {
			errDiagnosis = msg[&apos;issue&apos;][0][&apos;diagnostics&apos;];
		} catch (e) {
			;
		}
	}

	//var mess = SerializerFactory.getHL7Serializer().fromXML($(&apos;msgOriginal&apos;));
	var mess = SerializerFactory.getSerializer(&quot;HL7v2&quot;).fromXML($(&apos;msgOriginal&apos;));
	var result = router.routeMessageByChannelId(&quot;65926965-2044-4d3d-8801-8446e793f27e&quot;, RawMessage( mess, null, {&quot;statusCode&quot;: statusCode, &quot;errDiagnosis&quot; : errDiagnosis} ) ); // channel: ORR_GENERATE_IN
	if (result != null) {
		if ( result.toString().includes(&quot;RECEIVED:&quot;)) {
			responseStatus = SENT;
		} else {
			responseStatus = QUEUED;
		}
	} else { // erro no canal seguinte
		channelMap.put(&apos;erroRouting&apos;, true);
		responseStatus = ERROR;
	}

} else if (statusCode &gt; 500) {
	responseStatus = QUEUED;
} else { // erro
	responseStatus = ERROR;
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>3</metaDataId>
          <name>Send ORM</name>
          <properties class="com.mirth.connect.connectors.tcp.TcpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
              <pluginPointName>MLLP</pluginPointName>
              <startOfMessageBytes>0B</startOfMessageBytes>
              <endOfMessageBytes>1C0D</endOfMessageBytes>
              <useMLLPv2>false</useMLLPv2>
              <ackBytes>06</ackBytes>
              <nackBytes>15</nackBytes>
              <maxRetries>2</maxRetries>
            </transmissionModeProperties>
            <serverMode>false</serverMode>
            <remoteAddress>${tcpOutIpVigilant}</remoteAddress>
            <remotePort>${tcpOutPortVigilant}</remotePort>
            <overrideLocalBinding>false</overrideLocalBinding>
            <localAddress>0.0.0.0</localAddress>
            <localPort>0</localPort>
            <sendTimeout>5000</sendTimeout>
            <bufferSize>65536</bufferSize>
            <maxConnections>10</maxConnections>
            <keepConnectionOpen>false</keepConnectionOpen>
            <checkRemoteHost>false</checkRemoteHost>
            <responseTimeout>5000</responseTimeout>
            <ignoreResponse>false</ignoreResponse>
            <queueOnResponseTimeout>true</queueOnResponseTimeout>
            <dataTypeBinary>false</dataTypeBinary>
            <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
            <template>${message.encodedData}</template>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>change Receiving Application (MSH.5)</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>msg[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] = &quot;VIGILANT&quot;;</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfF5+XCZ8QlVDSUNhcmV8Q0hMfFNPTkhPfENITHwyMDI0MDgyMDAwMTM1NHx8T1JNXk8wMXwxNzI0MTEyODM0MjQxNDYtTy00ODU4MnxQfDIuNHx8fHxBTHx8ODg1OS8xfApQSUR8fHwzMDY1NzFeXl5DSExeTlN8fENBU1RSTyBTQU5UT15FTUlMSUEgREEgQ09OQ0VJQ0FPXl5eXl5MfHwxOTYzMDkyOTAwMDAwMHxGfHx8fHx8fHx8fDE2MjI5OV5eXkNITApQVjF8MXxJTlR8MV4xMDA5XjEwMDleU0FMQSBVQ1BBfHwyNDAxNDUwN3x8fHx8MTF8fHx8fHx8fHwyNDAxMzMzN3x8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwyNDAxMzU2MQpERzF8MXx8TTE3MTFeQXJ0cm9zZSBwcmltXFhFMVxyaWEgdW5pbCwgam9lbGhvIERJUl5JQ0QxMHx8MjAyNDA4MTkxNjMwMDB8Rnx8fHx8fHx8fDF8fEQKT1JDfFNDfHwzODI2MHx8Q018fHx8MjAyNDA4MTkxNjMwMDB8NTkxM15JbmVzIEZpbGlwYSBNb3JvdWNvIEhlbnJpcXVlc3x8NTc0MDZeRWxpc2EgTWFyZ2FyaWRhIE1hcnRpbmhvIEZlcnJlaXJhfHx8MjAyNDA4MTkyMjQ4MDB8Ck9CUnwxfHwzODI2MHwwU1JDMEo5Xk1DPkFydGljSU5GPlN1YnN0aXR1aVxYRTdcXFhFM1xvPkFydGljIGpvZWxobyBESVI+QWJlcnRhPlN1YnN0IHNpbnQ+Q2ltZW50YWRhXklDRDEwfFB8fDIwMjQwNzI0MTE1OTQ5fHx8fHx8fHx8fHx8fHx8fHx8fHwxfHx8fHwyODMyNCZSb2RyaWd1ZXMmTnVubyYmUCZNRURJQ08mQ0lSVVJHSUFPfDE4NjEmQmF0aXN0YSZNYXJpYSBUZXJlc2EgUm9zYWRvJiZBJlRFQ05JQ08mQVVYSUxJQVJ+MjkwNDgmTUFHQUxIQUVTJjY4IEFOVE9OSU8mJkEmTUVESUNPJkNJUlVSR0lBT34zMjQwJlNhbnRpYWdvJkRpbmlzJiZBJkVORkVSTUVJUk8mQU5FU1RFU0lTVEF+NDI0MSZPbGl2ZWlyYSZKb2FvJiZBJkVORkVSTUVJUk8mSU5TVFJVTUVOVElTVEF+NDQ3MiZNYXJxdWVzJlZhbmVzc2EgU29maWEgTG9wZXMmJkEmRU5GRVJNRUlSTyZDSVJDVUxBTlRFfjY1ODQ4JkdvbWVzJkxlb25vciBBbmljZXRvJiZBJk1FRElDTyZBTkVTVEVTSVNUQXx8fApaSFN8fDIwMjQwODE5MTc1OTAwfDIwMjQwODIwMDAxMzAwfDIwMjQwODE5MTgwMDAwfHwyMDI0MDgxOTE4NTEwMHwyMDI0MDgxOTE5NTkwMHwyMDI0MDgxOTE4NTcwMHx8MjAyNDA4MTkxOTAwMDB8MjAyNDA4MTkxOTUwMDB8MjAyNDA4MTkyMDE0MDB8fE58fHxTfDF8fE58fE58fEl8U2VtIG1vdGl2byByZWdpc3RhZG98fDIwMjQwODE5MTg1NTAwfDIwMjQwODE5MTk1NTAwfApOVEV8MXx8QUxUQXxeVElQT19NRU5TQUdFTQ==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>HL7V2</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>TCP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>4</metaDataId>
          <name>Send Encounter</name>
          <properties class="com.mirth.connect.connectors.fhir.shared.FhirDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <host>${FhirServer_CUFBUS_Host}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>POST</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>true</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username>${FhirServer_CUFBUS_User}</username>
            <password>${FhirServer_CUFBUS_Pass}</password>
            <content>${BundleEncounter}</content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
            <capabilitiesURL></capabilitiesURL>
            <systemInteraction>false</systemInteraction>
            <resource>Bundle</resource>
            <interaction>create</interaction>
            <operationScopeInstance>false</operationScopeInstance>
            <path>${FhirServer_CUFBUS_Host}/Bundle</path>
            <pathVariables/>
            <usingBuilder>false</usingBuilder>
            <modelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel"/>
            <fhirVersion>R4</fhirVersion>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
                <name>Encounter Definition</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <storeAsLocal>true</storeAsLocal>
                <mapType>CHANNEL</mapType>
                <variable>Encounter</variable>
                <definition>Encounter</definition>
                <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                  <usingBuilder>true</usingBuilder>
                  <properties class="linked-hash-map">
                    <entry>
                      <string>resourceType</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>Encounter</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>id</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>channelMap.get(&apos;visitaIntRefExt&apos;)</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>status</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>msg[&apos;ZHS&apos;][&apos;ZHS.22&apos;][&apos;ZHS.22.1&apos;].toString() == &quot;S&quot; ? &apos;cancelled&apos; : (msg[&apos;ZHS&apos;][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString() != &quot;&quot; ? &apos;finished&apos; : &apos;in-progress&apos;)</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>class</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>system</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>http://terminology.hl7.org/CodeSystem/v3-ActCod</stringValue>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>code</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>AMB</stringValue>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>display</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>Ambulatório</stringValue>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>subject</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>reference</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>&quot;Patient/&quot; + $(&apos;numSequencial&apos;)</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>identifier</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                  <usingBuilder>true</usingBuilder>
                                  <properties class="linked-hash-map">
                                    <entry>
                                      <string>use</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>official</stringValue>
                                          <usingEnum>true</usingEnum>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>type</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                          <usingBuilder>true</usingBuilder>
                                          <properties class="linked-hash-map">
                                            <entry>
                                              <string>coding</string>
                                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                <enabled>true</enabled>
                                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                                                  <usingBuilder>true</usingBuilder>
                                                  <elements>
                                                    <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                                      <usingBuilder>true</usingBuilder>
                                                      <properties class="linked-hash-map">
                                                        <entry>
                                                          <string>system</string>
                                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                            <enabled>true</enabled>
                                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                                              <stringValue>$(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PatientCode&quot;</stringValue>
                                                              <scriptExpression>true</scriptExpression>
                                                            </properties>
                                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                        </entry>
                                                        <entry>
                                                          <string>code</string>
                                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                            <enabled>true</enabled>
                                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                                              <stringValue>JMS</stringValue>
                                                            </properties>
                                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                        </entry>
                                                      </properties>
                                                    </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                                  </elements>
                                                </properties>
                                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            </entry>
                                            <entry>
                                              <string>text</string>
                                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                <enabled>true</enabled>
                                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                                  <stringValue>JMS Identifier</stringValue>
                                                </properties>
                                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            </entry>
                                          </properties>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>value</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>$(&apos;numSequencial&apos;)</stringValue>
                                          <scriptExpression>true</scriptExpression>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                  </properties>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>display</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>$(&apos;nomeDoente&apos;)</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>appointment</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>reference</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>channelMap.get(&apos;agendamentoRefExt&apos;) != null ? &quot;Appointment/&quot; + $(&apos;agendamentoRefExt&apos;) : null</stringValue>
                                      <scriptExpression>true</scriptExpression>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>period</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>start</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>channelMap.get(&apos;dataInicio&apos;) != null ? $(&apos;dataInicio&apos;) : null</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>end</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>channelMap.get(&apos;dataFim&apos;) != null ? $(&apos;dataFim&apos;) : null</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                  </properties>
                </model>
                <fhirVersion>R4</fhirVersion>
              </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
              <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
                <name>MessageHeader Definition</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <storeAsLocal>true</storeAsLocal>
                <mapType>CHANNEL</mapType>
                <variable>MessageHeader</variable>
                <definition>MessageHeader</definition>
                <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                  <usingBuilder>true</usingBuilder>
                  <properties class="linked-hash-map">
                    <entry>
                      <string>resourceType</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>MessageHeader</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>id</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>UUIDGenerator.getUUID()</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>eventCoding</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>system</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>$(&apos;localAddress&apos;) + &quot;/fhir/CodeSystem/FhirServerOutMessages&quot;</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>code</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>EncounterStatusChanged</stringValue>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>destination</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>name</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>IMTHOM</stringValue>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                                <entry>
                                  <string>endpoint</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>$(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/$process-message&quot;</stringValue>
                                      <scriptExpression>true</scriptExpression>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>sender</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>identifier</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                  <usingBuilder>true</usingBuilder>
                                  <properties class="linked-hash-map">
                                    <entry>
                                      <string>use</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>official</stringValue>
                                          <usingEnum>true</usingEnum>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>system</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>&quot;https://cuf.pt/fhir/CodeSystem/Organization&quot;</stringValue>
                                          <scriptExpression>true</scriptExpression>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>value</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>$(&apos;sendingFacility&apos;)</stringValue>
                                          <scriptExpression>true</scriptExpression>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                  </properties>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>source</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>name</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>PatientCare</stringValue>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>endpoint</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>$(&apos;localAddress&apos;) + &quot;/fhir/r4/$process-message&quot;</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>focus</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <stringValue>AAAAAAAAAAAAAAA</stringValue>
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>reference</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>&quot;Encounter/&quot; + Encounter.id</stringValue>
                                      <scriptExpression>true</scriptExpression>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                  </properties>
                </model>
                <fhirVersion>R4</fhirVersion>
              </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
              <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
                <name>Bundle</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <storeAsLocal>true</storeAsLocal>
                <mapType>CHANNEL</mapType>
                <variable>BundleEncounter</variable>
                <definition>Bundle</definition>
                <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                  <usingBuilder>true</usingBuilder>
                  <properties class="linked-hash-map">
                    <entry>
                      <string>resourceType</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>Bundle</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>id</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>UUIDGenerator.getUUID()</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>type</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>message</stringValue>
                          <usingEnum>true</usingEnum>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>timestamp</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>DateUtil.getCurrentDate(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSSXXX&quot;)</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>entry</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>resource</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.OneOfModel">
                                      <usingBuilder>true</usingBuilder>
                                      <oneOfModelTitle>MessageHeader</oneOfModelTitle>
                                      <oneOfModelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                        <stringValue>consolidate(MessageHeader)</stringValue>
                                      </oneOfModelProperties>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>resource</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.OneOfModel">
                                      <usingBuilder>true</usingBuilder>
                                      <oneOfModelTitle>Encounter</oneOfModelTitle>
                                      <oneOfModelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                        <stringValue>consolidate(Encounter)</stringValue>
                                      </oneOfModelProperties>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                  </properties>
                </model>
                <fhirVersion>R4</fhirVersion>
              </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Consolidate Bundle</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;BundleEncounter&apos;, JSON.stringify(consolidate(BundleEncounter)));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfF5+XCZ8QlVDSUNhcmV8SENEfEdIfEhDRHwyMDE5MDgwMjAwMDY0MHx8T1JNXk8wMXwxNTY0NzA0NDAwOTc2NTN8UHwyLjR8fHx8fHw4ODU5LzF8ClBJRHx8fDgwMDg5MV5eXkhDRHx8U0FMXlJJQ0FSRE9efHwxOTUwMDYyNDAwMDAwMHxNfHx8fHx8fHx8fApQVjF8fFJlZy1PcGVyfEJPQ15TTzFDXlNPMUN8fDEwODIwOHx8Xl5efHx8MTR8fHx8fHx8fHwyNzQxODN8fHx8fHx8fHx8fHx8fHx8fHxFfHx8fHx8fDIwMTkwODAxMjAzMDAwfDIwMTkwODAyMDAwNjAwfHx8fHwyOTQ2MTcKT1JDfFNDfC0zMzQzNzcyOXwxMzI2Mzd8fENNfHx8fDIwMTkwODAxMTkzMTE2fDUwMDA2NzZ8fDUwMDA2NzZ8fHx8Ck9CUnwxfC0zMzMyNDkxMXwxMzE3OTV8NDEwMDAwMDNeUE9TVEVDVE9NSUEgKENJUkNVTi1DSVNcWEMzXE8pXlRIQ0R8fHwyMDE5MDgwMTEyMjA0Mnx8fHx8fHx8fHx8fHx8fHx8fHx8MXx8fHx8NTAwMDEyMiYmJiYmTUVEJkNJUnwyNDE0NTE2NzEmJiYmJkVORiZJTlN+MjI5MzY4MTgyJiYmJiZFTkYmQ0lSQ34yNjE4ODg0NTUmJiYmJkVORiZBTkVTfHx8Ck9SQ3xDQXwtMzM0Mzc3Mjl8MTMyNjM3fHx8fHx8MjAxOTA4MDExOTMxMTZ8NTAwMDY3Nnx8NTAwMDY3Nnx8fHwKT0JSfDF8LTMzNDM3NzI5fDEzMjYzN3wwXkNJUlVSR0lBIEEgREVGSU5JUl5USENEfHx8MjAxOTA4MDExOTMxMTZ8fHx8fHx8fHx8fHx8fHx8fHx8fDF8fHx8fDUwMDAwODEmJiYmJk1FRCZDSVJ8NTAwMDY3NiYmJiYmTUVEJkFORVN+MjA0NTU0MTYwJiYmJiZFTkYmQ0lSQ34yMzcxODY0MDMmJiYmJkVORiZJTlN+MjI4MTUzMTc0JiYmJiZFTkYmQU5FU3x8fApERzF8MXx8NjIyN15QT0xJUE8gTVVDT1NPIERPIENPTE8gRE8gVVRFUk9eQ0lEMTJ8fDIwMTkwNzMwMTM1MTExfEZ8fHx8fHx8fHwyfHxECkRHMXwyfHw3NTI0MV5DSVNUTyBFTUJSSU9OSUNPIERPIENPTE8gVVRFUklOTywgREEgVkFHSU5BIEUgRE9TIE9SR0FPUyBHRU5JVEFJUyBFWFQuIEZFTUlOSS1OT1NeQ0lEMTJ8fDIwMTkwNzMwMTM1MTExfEZ8fHx8fHx8fHwxfHxEClpIU3wyMDE5MDgwMTIwNTAwMHwyMDE5MDgwMTIwNTUwMHwyMDE5MDgwMjAwMDYwMHx8fDIwMTkwODAxMjEzMjAwfDIwMTkwODAxMjMwOTAwfDIwMTkwODAxMjEzMzAwfDIwMTkwODAxMjMwOTAwfDIwMTkwODAxMjE1OTAwfDIwMTkwODAxMjMwMzAwfDIwMTkwODAxMjMxNzAwfDIwMTkwODAyMDAwNjAwfHx8QUd8fHw0fE58fE58fEl8fApaU1N8MjAxOTA4MDEyMTM1MDB8U3xTfFN8MnxTfEF8U3xTfE58fE58TnwwfDIwMTkwODAxMjEzNTAwfFN8U3xTfFN8U3xBfHxBfHxTfHxTfHxTfHxTfHxTfHxTfHxBfDIwMTkwODAxMjMwMzAwfFN8U3xTfDMwLjAwfDI5LjAwfDU3LjAwfFN8U3xTfFN8fFN8fHw1MDAwMDgxfER8MXx8MjI4MTUzMTc0fHwyMjgxNTMxNzR8MjI4MTUzMTc0fDIyODE1MzE3NHx8fHx8fHx8fHx8fHx8fHx8U3xTfFN8U3x8fE58fE58fE58fE4=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>FHIR Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>5</metaDataId>
          <name>Send ChargeItem (Tecnica anestesica)</name>
          <properties class="com.mirth.connect.connectors.fhir.shared.FhirDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <host>${FhirServer_CUFBUS_Host}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>POST</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>true</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username>${FhirServer_CUFBUS_User}</username>
            <password>${FhirServer_CUFBUS_Pass}</password>
            <content>${BundleTecnica}</content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
            <capabilitiesURL></capabilitiesURL>
            <systemInteraction>false</systemInteraction>
            <resource>Bundle</resource>
            <interaction>create</interaction>
            <operationScopeInstance>false</operationScopeInstance>
            <path>${FhirServer_CUFBUS_Host}/Bundle</path>
            <pathVariables/>
            <usingBuilder>false</usingBuilder>
            <modelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel"/>
            <fhirVersion>R4</fhirVersion>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>performerList</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>function createPerformerEntry(numMec, role, nome) {
	var performerObj = {};

	var functionObj = {};
	var functionCodingArray = [];
	var functionCodingObj = {};
	functionCodingObj.system = &quot;https://cuf.pt/fhir/CodeSystem/PersonFunction&quot;;
	functionCodingObj.code = role;
	functionCodingArray.push(functionCodingObj);
	functionObj.coding = functionCodingArray;
	performerObj.function = functionObj;

	var actorObj= {};
	actorObj.reference = &quot;Practitioner/&quot; + numMec;
	
	var identifierObj = new Object();
	var codingArray = [];
		var codingObj = new Object();
		codingObj.system = newStringOrUndefined(&quot;https://cuf.pt&quot; + &apos;/fhir/CodeSystem/PersonIdentifierType&apos;);
		codingObj.code = newStringOrUndefined(&quot;4&quot;);
		codingArray.push(codingObj);
	var typeObj = new Object();
		typeObj.coding = codingArray;
		typeObj.text = newStringOrUndefined(&quot;N.º mecanográfico&quot;);
	identifierObj.type = typeObj;
	identifierObj.value = numMec;
	actorObj.identifier = identifierObj;

	actorObj.display = nome;
	performerObj.actor = actorObj;
	return performerObj;
}

var performerList = [];

//OBR.33
for (var i =0; i &lt; getArrayOrXmlLength(msg[&apos;OBR&apos;][0][&apos;OBR.33&apos;]); i++) {
	if (msg[&apos;OBR&apos;][0][&apos;OBR.33&apos;][i][&apos;OBR.33.1&apos;][&apos;OBR.33.1.7&apos;].toString() == &quot;ANES&quot;) {
		var nome = hexMappingPreProcessor( msg[&apos;OBR&apos;][0][&apos;OBR.33&apos;][&apos;OBR.33.1&apos;][&apos;OBR.33.1.3&apos;].toString() + &quot; &quot; + msg[&apos;OBR&apos;][0][&apos;OBR.33&apos;][&apos;OBR.33.1&apos;][&apos;OBR.33.1.2&apos;].toString());
		performerList.push( createPerformerEntry(msg[&apos;OBR&apos;][0][&apos;OBR.33&apos;][i][&apos;OBR.33.1&apos;][&apos;OBR.33.1.1&apos;].toString(), msg[&apos;OBR&apos;][0][&apos;OBR.33&apos;][i][&apos;OBR.33.1&apos;][&apos;OBR.33.1.7&apos;].toString(), nome));
	}
}

channelMap.put(&apos;performerList&apos;,performerList);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
                <name>ChargeItem</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <storeAsLocal>true</storeAsLocal>
                <mapType>CHANNEL</mapType>
                <variable>ChargeItem</variable>
                <definition>ChargeItem</definition>
                <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                  <usingBuilder>true</usingBuilder>
                  <properties class="linked-hash-map">
                    <entry>
                      <string>resourceType</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>ChargeItem</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>id</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>UUIDGenerator.getUUID()</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>status</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>billable</stringValue>
                          <usingEnum>true</usingEnum>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>code</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <stringValue>AAAAAAAAA</stringValue>
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>coding</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                                  <usingBuilder>true</usingBuilder>
                                  <elements>
                                    <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                      <usingBuilder>true</usingBuilder>
                                      <properties class="linked-hash-map">
                                        <entry>
                                          <string>system</string>
                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            <enabled>true</enabled>
                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                              <stringValue>&quot;https://cuf.pt/fhir/CodeSystem/Anesthesia&quot;</stringValue>
                                              <scriptExpression>true</scriptExpression>
                                            </properties>
                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        </entry>
                                        <entry>
                                          <string>code</string>
                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            <enabled>true</enabled>
                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                              <stringValue>msg[&apos;ZHS&apos;][0][&apos;ZHS.16&apos;][&apos;ZHS.16.1&apos;].toString()</stringValue>
                                              <scriptExpression>true</scriptExpression>
                                            </properties>
                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        </entry>
                                      </properties>
                                    </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                  </elements>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>subject</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>reference</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>&quot;Patient/&quot; + $(&apos;numSequencial&apos;)</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>identifier</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                  <usingBuilder>true</usingBuilder>
                                  <properties class="linked-hash-map">
                                    <entry>
                                      <string>use</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>official</stringValue>
                                          <usingEnum>true</usingEnum>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>type</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                          <usingBuilder>true</usingBuilder>
                                          <properties class="linked-hash-map">
                                            <entry>
                                              <string>coding</string>
                                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                <enabled>true</enabled>
                                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                                                  <usingBuilder>true</usingBuilder>
                                                  <elements>
                                                    <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                                      <usingBuilder>true</usingBuilder>
                                                      <properties class="linked-hash-map">
                                                        <entry>
                                                          <string>system</string>
                                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                            <enabled>true</enabled>
                                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                                              <stringValue>$(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PatientCode&quot;</stringValue>
                                                              <scriptExpression>true</scriptExpression>
                                                            </properties>
                                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                        </entry>
                                                        <entry>
                                                          <string>code</string>
                                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                            <enabled>true</enabled>
                                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                                              <stringValue>&quot;JMS&quot;</stringValue>
                                                              <scriptExpression>true</scriptExpression>
                                                            </properties>
                                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                        </entry>
                                                      </properties>
                                                    </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                                  </elements>
                                                </properties>
                                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            </entry>
                                            <entry>
                                              <string>text</string>
                                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                <enabled>true</enabled>
                                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                                  <stringValue>&quot;JMS Identifier&quot;</stringValue>
                                                  <scriptExpression>true</scriptExpression>
                                                </properties>
                                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            </entry>
                                          </properties>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>value</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>$(&apos;numSequencial&apos;)</stringValue>
                                          <scriptExpression>true</scriptExpression>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                  </properties>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>display</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>$(&apos;nomeDoente&apos;)</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>context</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>reference</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>&quot;Encounter/&quot; + $(&apos;visitaIntRefExt&apos;)</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>occurrencePeriod</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>start</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>msg[&apos;ZHS&apos;][0][&apos;ZHS.8&apos;][&apos;ZHS.8.1&apos;].toString() != &quot;&quot; ? LocalDateTimeToUtc(msg[&apos;ZHS&apos;][0][&apos;ZHS.8&apos;][&apos;ZHS.8.1&apos;].toString(), &quot;UTC&quot;) : null</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>end</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>msg[&apos;ZHS&apos;][0][&apos;ZHS.9&apos;][&apos;ZHS.9.1&apos;].toString() != &quot;&quot; ? LocalDateTimeToUtc(msg[&apos;ZHS&apos;][0][&apos;ZHS.9&apos;][&apos;ZHS.9.1&apos;].toString(), &quot;UTC&quot;) : null</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>performer</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <stringValue>$(&apos;performerList&apos;)</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                  </properties>
                </model>
                <fhirVersion>R4</fhirVersion>
              </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
              <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
                <name>MessageHeader Definition</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <storeAsLocal>true</storeAsLocal>
                <mapType>CHANNEL</mapType>
                <variable>MessageHeader</variable>
                <definition>MessageHeader</definition>
                <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                  <usingBuilder>true</usingBuilder>
                  <properties class="linked-hash-map">
                    <entry>
                      <string>resourceType</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>MessageHeader</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>id</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>UUIDGenerator.getUUID()</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>eventCoding</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>system</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>$(&apos;localAddress&apos;) + &quot;/fhir/CodeSystem/FhirServerOutMessages&quot;</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>code</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>&quot;CreateChargeItem&quot;</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>destination</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>name</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>IMTHOM</stringValue>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                                <entry>
                                  <string>endpoint</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>$(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/$process-message&quot;</stringValue>
                                      <scriptExpression>true</scriptExpression>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>sender</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>identifier</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                  <usingBuilder>true</usingBuilder>
                                  <properties class="linked-hash-map">
                                    <entry>
                                      <string>use</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>official</stringValue>
                                          <usingEnum>true</usingEnum>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>system</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>&quot;https://cuf.pt/fhir/CodeSystem/Organization&quot;</stringValue>
                                          <scriptExpression>true</scriptExpression>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>value</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>$(&apos;sendingFacility&apos;)</stringValue>
                                          <scriptExpression>true</scriptExpression>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                  </properties>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>source</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>name</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>PatientCare</stringValue>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>endpoint</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>$(&apos;localAddress&apos;) + &quot;/fhir/r4/$process-message&quot;</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>focus</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <stringValue>AAAAAAAAAAAAAAA</stringValue>
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>reference</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>&quot;ChargeItem/&quot; + ChargeItem.id</stringValue>
                                      <scriptExpression>true</scriptExpression>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                  </properties>
                </model>
                <fhirVersion>R4</fhirVersion>
              </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
              <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
                <name>Bundle</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <storeAsLocal>true</storeAsLocal>
                <mapType>CHANNEL</mapType>
                <variable>BundleTecnica</variable>
                <definition>Bundle</definition>
                <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                  <usingBuilder>true</usingBuilder>
                  <properties class="linked-hash-map">
                    <entry>
                      <string>resourceType</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>Bundle</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>id</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>UUIDGenerator.getUUID()</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>type</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>message</stringValue>
                          <usingEnum>true</usingEnum>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>timestamp</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>DateUtil.getCurrentDate(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSSXXX&quot;)</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>entry</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>resource</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.OneOfModel">
                                      <usingBuilder>true</usingBuilder>
                                      <oneOfModelTitle>MessageHeader</oneOfModelTitle>
                                      <oneOfModelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                        <stringValue>consolidate(MessageHeader)</stringValue>
                                      </oneOfModelProperties>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>resource</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.OneOfModel">
                                      <usingBuilder>true</usingBuilder>
                                      <oneOfModelTitle>ChargeItem</oneOfModelTitle>
                                      <oneOfModelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                        <stringValue>consolidate(ChargeItem)</stringValue>
                                      </oneOfModelProperties>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                  </properties>
                </model>
                <fhirVersion>R4</fhirVersion>
              </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Consolidate Bundle</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;BundleTecnica&apos;, JSON.stringify(consolidate(BundleTecnica)));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfF5+XCZ8QlVDSUNhcmV8SENEfEdIfEhDRHwyMDE5MDgwMjAwMDY0MHx8T1JNXk8wMXwxNTY0NzA0NDAwOTc2NTN8UHwyLjR8fHx8fHw4ODU5LzF8ClBJRHx8fDgwMDg5MV5eXkhDRHx8U0FMXlJJQ0FSRE9efHwxOTUwMDYyNDAwMDAwMHxNfHx8fHx8fHx8fApQVjF8fFJlZy1PcGVyfEJPQ15TTzFDXlNPMUN8fDEwODIwOHx8Xl5efHx8MTR8fHx8fHx8fHwyNzQxODN8fHx8fHx8fHx8fHx8fHx8fHxFfHx8fHx8fDIwMTkwODAxMjAzMDAwfDIwMTkwODAyMDAwNjAwfHx8fHwyOTQ2MTcKT1JDfFNDfC0zMzQzNzcyOXwxMzI2Mzd8fENNfHx8fDIwMTkwODAxMTkzMTE2fDUwMDA2NzZ8fDUwMDA2NzZ8fHx8Ck9CUnwxfC0zMzMyNDkxMXwxMzE3OTV8NDEwMDAwMDNeUE9TVEVDVE9NSUEgKENJUkNVTi1DSVNcWEMzXE8pXlRIQ0R8fHwyMDE5MDgwMTEyMjA0Mnx8fHx8fHx8fHx8fHx8fHx8fHx8MXx8fHx8NTAwMDEyMiYmJiYmTUVEJkNJUnwyNDE0NTE2NzEmJiYmJkVORiZJTlN+MjI5MzY4MTgyJiYmJiZFTkYmQ0lSQ34yNjE4ODg0NTUmJiYmJkVORiZBTkVTfHx8Ck9SQ3xDQXwtMzM0Mzc3Mjl8MTMyNjM3fHx8fHx8MjAxOTA4MDExOTMxMTZ8NTAwMDY3Nnx8NTAwMDY3Nnx8fHwKT0JSfDF8LTMzNDM3NzI5fDEzMjYzN3wwXkNJUlVSR0lBIEEgREVGSU5JUl5USENEfHx8MjAxOTA4MDExOTMxMTZ8fHx8fHx8fHx8fHx8fHx8fHx8fDF8fHx8fDUwMDAwODEmJiYmJk1FRCZDSVJ8NTAwMDY3NiYmJiYmTUVEJkFORVN+MjA0NTU0MTYwJiYmJiZFTkYmQ0lSQ34yMzcxODY0MDMmJiYmJkVORiZJTlN+MjI4MTUzMTc0JiYmJiZFTkYmQU5FU3x8fApERzF8MXx8NjIyN15QT0xJUE8gTVVDT1NPIERPIENPTE8gRE8gVVRFUk9eQ0lEMTJ8fDIwMTkwNzMwMTM1MTExfEZ8fHx8fHx8fHwyfHxECkRHMXwyfHw3NTI0MV5DSVNUTyBFTUJSSU9OSUNPIERPIENPTE8gVVRFUklOTywgREEgVkFHSU5BIEUgRE9TIE9SR0FPUyBHRU5JVEFJUyBFWFQuIEZFTUlOSS1OT1NeQ0lEMTJ8fDIwMTkwNzMwMTM1MTExfEZ8fHx8fHx8fHwxfHxEClpIU3wyMDE5MDgwMTIwNTAwMHwyMDE5MDgwMTIwNTUwMHwyMDE5MDgwMjAwMDYwMHx8fDIwMTkwODAxMjEzMjAwfDIwMTkwODAxMjMwOTAwfDIwMTkwODAxMjEzMzAwfDIwMTkwODAxMjMwOTAwfDIwMTkwODAxMjE1OTAwfDIwMTkwODAxMjMwMzAwfDIwMTkwODAxMjMxNzAwfDIwMTkwODAyMDAwNjAwfHx8QUd8fHw0fE58fE58fEl8fApaU1N8MjAxOTA4MDEyMTM1MDB8U3xTfFN8MnxTfEF8U3xTfE58fE58TnwwfDIwMTkwODAxMjEzNTAwfFN8U3xTfFN8U3xBfHxBfHxTfHxTfHxTfHxTfHxTfHxTfHxBfDIwMTkwODAxMjMwMzAwfFN8U3xTfDMwLjAwfDI5LjAwfDU3LjAwfFN8U3xTfFN8fFN8fHw1MDAwMDgxfER8MXx8MjI4MTUzMTc0fHwyMjgxNTMxNzR8MjI4MTUzMTc0fDIyODE1MzE3NHx8fHx8fHx8fHx8fHx8fHx8U3xTfFN8U3x8fE58fE58fE58fE4=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;ZHS&apos;][&apos;ZHS.16&apos;][&apos;ZHS.16.1&apos;].toString()&quot; exists</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>msg[&apos;ZHS&apos;][&apos;ZHS.16&apos;][&apos;ZHS.16.1&apos;].toString()</field>
                <condition>EXISTS</condition>
                <values/>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>FHIR Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>6</metaDataId>
          <name>Send ChargeItem (Equipa cirurgica)</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>
for (var i = 0; i &lt; $(&apos;bundleList&apos;).length; i++){
	result = router.routeMessageByChannelId(&apos;98336369-69c8-4249-abb8-7479f97c4e58&apos; /* SEND_CHARGE_ITEM */, JSON.stringify($(&apos;bundleList&apos;)[i]));
}

response = Response(Status.SENT, JSON.stringify($(&apos;bundleList&apos;)));
return response;</script>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>performerList</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>false</enabled>
                <script>var performerList = [];

//OBR.32
var nome = hexMappingPreProcessor( msg[&apos;OBR&apos;][&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.3&apos;].toString() + &quot; &quot; + msg[&apos;OBR&apos;][&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.2&apos;].toString());
performerList.push( createPerformerEntry(msg[&apos;OBR&apos;][&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.1&apos;].toString(), msg[&apos;OBR&apos;][&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.7&apos;].toString(), nome) );

//OBR.33
for (var i =0; i &lt; getArrayOrXmlLength(msg[&apos;OBR&apos;][&apos;OBR.33&apos;]); i++) {
	var nome = hexMappingPreProcessor( msg[&apos;OBR&apos;][&apos;OBR.33&apos;][&apos;OBR.33.1&apos;][&apos;OBR.33.1.3&apos;].toString() + &quot; &quot; + msg[&apos;OBR&apos;][&apos;OBR.33&apos;][&apos;OBR.33.1&apos;][&apos;OBR.33.1.2&apos;].toString() );
	performerList.push( createPerformerEntry(msg[&apos;OBR&apos;][&apos;OBR.33&apos;][i][&apos;OBR.33.1&apos;][&apos;OBR.33.1.1&apos;].toString(), msg[&apos;OBR&apos;][&apos;OBR.33&apos;][i][&apos;OBR.33.1&apos;][&apos;OBR.33.1.7&apos;].toString(), nome) );
}


channelMap.put(&apos;performerList&apos;,performerList);


function createPerformerEntry(numMec, role, nome) {
	var performerObj = {};

	var functionObj = {};
	var functionCodingArray = [];
	var functionCodingObj = {};
	functionCodingObj.system = &quot;https://cuf.pt/fhir/CodeSystem/PersonFunction&quot;;
	functionCodingObj.code = role;
	functionCodingArray.push(functionCodingObj);
	functionObj.coding = functionCodingArray;
	performerObj.function = functionObj;

	var actorObj= {};
	actorObj.reference = &quot;Practitioner/&quot; + numMec;
	
	var identifierObj = new Object();
	var codingArray = [];
		var codingObj = new Object();
		codingObj.system = newStringOrUndefined(&quot;https://cuf.pt&quot; + &apos;/fhir/CodeSystem/PersonIdentifierType&apos;);
		codingObj.code = newStringOrUndefined(&quot;4&quot;);
		codingArray.push(codingObj);
	var typeObj = new Object();
		typeObj.coding = codingArray;
		typeObj.text = newStringOrUndefined(&quot;N.º mecanográfico&quot;);
	identifierObj.type = typeObj;
	identifierObj.value = numMec;
	actorObj.identifier = identifierObj;

	actorObj.display = nome;
	performerObj.actor = actorObj;
	return performerObj;
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
                <name>BaseChargeItem</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <storeAsLocal>true</storeAsLocal>
                <mapType>CHANNEL</mapType>
                <variable>BaseChargeItem</variable>
                <definition>ChargeItem</definition>
                <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                  <usingBuilder>true</usingBuilder>
                  <properties class="linked-hash-map">
                    <entry>
                      <string>resourceType</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>ChargeItem</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>id</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>channelMap.get(&apos;chargeItemId&apos;) != null ? $(&apos;chargeItemId&apos;) : UUIDGenerator.getUUID()</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>status</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>msg[&apos;ZHS&apos;][&apos;ZHS.22&apos;][&apos;ZHS.22.1&apos;].toString() == &quot;S&quot; ? &apos;aborted&apos; : &apos;billable&apos;</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>code</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <stringValue>AAAAAAAAA</stringValue>
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>coding</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                                  <usingBuilder>true</usingBuilder>
                                  <elements>
                                    <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                      <usingBuilder>true</usingBuilder>
                                      <properties class="linked-hash-map">
                                        <entry>
                                          <string>system</string>
                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            <enabled>true</enabled>
                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                              <stringValue>&quot;&quot;</stringValue>
                                            </properties>
                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        </entry>
                                        <entry>
                                          <string>code</string>
                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            <enabled>true</enabled>
                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                              <stringValue>&quot;&quot;</stringValue>
                                            </properties>
                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        </entry>
                                        <entry>
                                          <string>display</string>
                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            <enabled>true</enabled>
                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                              <stringValue>&quot;&quot;</stringValue>
                                            </properties>
                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        </entry>
                                      </properties>
                                    </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                  </elements>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>subject</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>reference</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>&quot;Patient/&quot; + $(&apos;numSequencial&apos;)</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>identifier</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                  <usingBuilder>true</usingBuilder>
                                  <properties class="linked-hash-map">
                                    <entry>
                                      <string>use</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>official</stringValue>
                                          <usingEnum>true</usingEnum>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>type</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                          <usingBuilder>true</usingBuilder>
                                          <properties class="linked-hash-map">
                                            <entry>
                                              <string>coding</string>
                                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                <enabled>true</enabled>
                                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                                                  <usingBuilder>true</usingBuilder>
                                                  <elements>
                                                    <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                                      <usingBuilder>true</usingBuilder>
                                                      <properties class="linked-hash-map">
                                                        <entry>
                                                          <string>system</string>
                                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                            <enabled>true</enabled>
                                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                                              <stringValue>$(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PatientCode&quot;</stringValue>
                                                              <scriptExpression>true</scriptExpression>
                                                            </properties>
                                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                        </entry>
                                                        <entry>
                                                          <string>code</string>
                                                          <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                            <enabled>true</enabled>
                                                            <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                                              <stringValue>&quot;JMS&quot;</stringValue>
                                                              <scriptExpression>true</scriptExpression>
                                                            </properties>
                                                          </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                        </entry>
                                                      </properties>
                                                    </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                                                  </elements>
                                                </properties>
                                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            </entry>
                                            <entry>
                                              <string>text</string>
                                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                                <enabled>true</enabled>
                                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                                  <stringValue>&quot;JMS Identifier&quot;</stringValue>
                                                  <scriptExpression>true</scriptExpression>
                                                </properties>
                                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                            </entry>
                                          </properties>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>value</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>$(&apos;numSequencial&apos;)</stringValue>
                                          <scriptExpression>true</scriptExpression>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                  </properties>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>display</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>$(&apos;nomeDoente&apos;)</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>context</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>reference</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>&quot;Encounter/&quot; + $(&apos;visitaIntRefExt&apos;)</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                  </properties>
                </model>
                <fhirVersion>R4</fhirVersion>
              </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
              <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
                <name>BaseMessageHeader Definition</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <storeAsLocal>true</storeAsLocal>
                <mapType>CHANNEL</mapType>
                <variable>BaseMessageHeader</variable>
                <definition>MessageHeader</definition>
                <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                  <usingBuilder>true</usingBuilder>
                  <properties class="linked-hash-map">
                    <entry>
                      <string>resourceType</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>MessageHeader</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>id</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>UUIDGenerator.getUUID()</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>eventCoding</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>system</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>$(&apos;localAddress&apos;) + &quot;/fhir/CodeSystem/FhirServerOutMessages&quot;</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>code</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>channelMap.get(&apos;chargeItemId&apos;) != null ? &quot;UpdateChargeItem&quot; : &quot;CreateChargeItem&quot;</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>destination</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>name</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>IMTHOM</stringValue>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                                <entry>
                                  <string>endpoint</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>$(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/$process-message&quot;</stringValue>
                                      <scriptExpression>true</scriptExpression>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>sender</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>identifier</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                  <usingBuilder>true</usingBuilder>
                                  <properties class="linked-hash-map">
                                    <entry>
                                      <string>use</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>official</stringValue>
                                          <usingEnum>true</usingEnum>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>system</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>&quot;https://cuf.pt/fhir/CodeSystem/Organization&quot;</stringValue>
                                          <scriptExpression>true</scriptExpression>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                    <entry>
                                      <string>value</string>
                                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                        <enabled>true</enabled>
                                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                          <stringValue>$(&apos;sendingFacility&apos;)</stringValue>
                                          <scriptExpression>true</scriptExpression>
                                        </properties>
                                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    </entry>
                                  </properties>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>source</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                          <usingBuilder>true</usingBuilder>
                          <properties class="linked-hash-map">
                            <entry>
                              <string>name</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>PatientCare</stringValue>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                            <entry>
                              <string>endpoint</string>
                              <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                <enabled>true</enabled>
                                <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                  <stringValue>$(&apos;localAddress&apos;) + &quot;/fhir/r4/$process-message&quot;</stringValue>
                                  <scriptExpression>true</scriptExpression>
                                </properties>
                              </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                            </entry>
                          </properties>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>focus</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <stringValue>AAAAAAAAAAAAAAA</stringValue>
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>reference</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                      <stringValue>&quot;&quot;</stringValue>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                  </properties>
                </model>
                <fhirVersion>R4</fhirVersion>
              </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Iterate ChargeItem</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>var bundleList = [];

for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;OBR&apos;]); i++) {
	
	var ChargeItem = JSON.parse(JSON.stringify(BaseChargeItem));

	ChargeItem.id =  UUIDGenerator.getUUID();
	ChargeItem.code.coding[0].system = convertToFhirCodeSystem(msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.3&apos;].toString());
	ChargeItem.code.coding[0].code = msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString();
	ChargeItem.code.coding[0].display = msg[&apos;OBR&apos;][i][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString();

	var performerList = [];
	
	//OBR.32
	var nome = hexMappingPreProcessor( msg[&apos;OBR&apos;][i][&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.3&apos;].toString() + &quot; &quot; + msg[&apos;OBR&apos;][i][&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.2&apos;].toString());
	performerList.push( createPerformerEntry(msg[&apos;OBR&apos;][i][&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.1&apos;].toString(), msg[&apos;OBR&apos;][i][&apos;OBR.32&apos;][&apos;OBR.32.1&apos;][&apos;OBR.32.1.7&apos;].toString(), nome) );

	//OBR.33
	for (var j =0; j &lt; getArrayOrXmlLength(msg[&apos;OBR&apos;][i][&apos;OBR.33&apos;]); j++) {
		var nome = hexMappingPreProcessor( msg[&apos;OBR&apos;][i][&apos;OBR.33&apos;][j][&apos;OBR.33.1&apos;][&apos;OBR.33.1.3&apos;].toString() + &quot; &quot; + msg[&apos;OBR&apos;][i][&apos;OBR.33&apos;][j][&apos;OBR.33.1&apos;][&apos;OBR.33.1.2&apos;].toString() );
		performerList.push( createPerformerEntry(msg[&apos;OBR&apos;][i][&apos;OBR.33&apos;][j][&apos;OBR.33.1&apos;][&apos;OBR.33.1.1&apos;].toString(), msg[&apos;OBR&apos;][i][&apos;OBR.33&apos;][j][&apos;OBR.33.1&apos;][&apos;OBR.33.1.7&apos;].toString(), nome) );
	}

	ChargeItem.performer = performerList;

	// MessageHeader
	var MessageHeader = JSON.parse(JSON.stringify(BaseMessageHeader));
	
     MessageHeader.id = UUIDGenerator.getUUID();
     MessageHeader.eventCoding.code = &quot;CreateChargeItem&quot;;
	MessageHeader.focus[0].reference = &quot;ChargeItem/&quot; + ChargeItem.id;

	// Bundle 
	var BundleEquipa = {
	    resourceType: newStringOrUndefined(&apos;Bundle&apos;),
	    id: newStringOrUndefined(UUIDGenerator.getUUID()),
	    type: newStringOrUndefined(&apos;message&apos;),
	    timestamp: newStringOrUndefined(DateUtil.getCurrentDate(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSSXXX&quot;)),
	    entry: [{
	            resource: consolidate(MessageHeader)
	        },
	        {
	            resource: consolidate(ChargeItem)
	        }
	    ]
	};
	
	bundleList.push(consolidate(BundleEquipa));
}


channelMap.put(&quot;bundleList&quot;, bundleList);

function createPerformerEntry(numMec, role, nome) {
	var performerObj = {};

	var functionObj = {};
	var functionCodingArray = [];
	var functionCodingObj = {};
	functionCodingObj.system = &quot;https://cuf.pt/fhir/CodeSystem/PersonFunction&quot;;
	functionCodingObj.code = role;
	functionCodingArray.push(functionCodingObj);
	functionObj.coding = functionCodingArray;
	performerObj.function = functionObj;

	var actorObj= {};
	actorObj.reference = &quot;Practitioner/&quot; + numMec;
	
	var identifierObj = new Object();
	var codingArray = [];
		var codingObj = new Object();
		codingObj.system = newStringOrUndefined(&quot;https://cuf.pt&quot; + &apos;/fhir/CodeSystem/PersonIdentifierType&apos;);
		codingObj.code = newStringOrUndefined(&quot;4&quot;);
		codingArray.push(codingObj);
	var typeObj = new Object();
		typeObj.coding = codingArray;
		typeObj.text = newStringOrUndefined(&quot;N.º mecanográfico&quot;);
	identifierObj.type = typeObj;
	identifierObj.value = numMec;
	actorObj.identifier = identifierObj;

	actorObj.display = nome;
	performerObj.actor = actorObj;
	return performerObj;
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
                <name>Bundle</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>false</enabled>
                <storeAsLocal>true</storeAsLocal>
                <mapType>CHANNEL</mapType>
                <variable>BundleEquipa</variable>
                <definition>Bundle</definition>
                <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                  <usingBuilder>true</usingBuilder>
                  <properties class="linked-hash-map">
                    <entry>
                      <string>resourceType</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>Bundle</stringValue>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>id</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>UUIDGenerator.getUUID()</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>type</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>message</stringValue>
                          <usingEnum>true</usingEnum>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>timestamp</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                          <stringValue>DateUtil.getCurrentDate(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSSXXX&quot;)</stringValue>
                          <scriptExpression>true</scriptExpression>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                    <entry>
                      <string>entry</string>
                      <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                        <enabled>true</enabled>
                        <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                          <usingBuilder>true</usingBuilder>
                          <elements>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>resource</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.OneOfModel">
                                      <usingBuilder>true</usingBuilder>
                                      <oneOfModelTitle>MessageHeader</oneOfModelTitle>
                                      <oneOfModelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                        <stringValue>consolidate(MessageHeader)</stringValue>
                                      </oneOfModelProperties>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                              <usingBuilder>true</usingBuilder>
                              <properties class="linked-hash-map">
                                <entry>
                                  <string>resource</string>
                                  <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                    <enabled>true</enabled>
                                    <properties class="com.mirth.connect.jsonbuilder.shared.models.OneOfModel">
                                      <usingBuilder>true</usingBuilder>
                                      <oneOfModelTitle>ChargeItem</oneOfModelTitle>
                                      <oneOfModelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                        <stringValue>consolidate(ChargeItem)</stringValue>
                                      </oneOfModelProperties>
                                    </properties>
                                  </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                </entry>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          </elements>
                        </properties>
                      </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                    </entry>
                  </properties>
                </model>
                <fhirVersion>R4</fhirVersion>
              </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Consolidate Bundle</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>false</enabled>
                <script>channelMap.put(&apos;BundleEquipa&apos;, JSON.stringify(consolidate(BundleEquipa)));</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfF5+XCZ8QlVDSUNhcmV8SENEfEdIfEhDRHwyMDE5MDgwMjAwMDY0MHx8T1JNXk8wMXwxNTY0NzA0NDAwOTc2NTN8UHwyLjR8fHx8fHw4ODU5LzF8ClBJRHx8fDgwMDg5MV5eXkhDRHx8U0FMXlJJQ0FSRE9efHwxOTUwMDYyNDAwMDAwMHxNfHx8fHx8fHx8fApQVjF8fFJlZy1PcGVyfEJPQ15TTzFDXlNPMUN8fDEwODIwOHx8Xl5efHx8MTR8fHx8fHx8fHwyNzQxODN8fHx8fHx8fHx8fHx8fHx8fHxFfHx8fHx8fDIwMTkwODAxMjAzMDAwfDIwMTkwODAyMDAwNjAwfHx8fHwyOTQ2MTcKT1JDfFNDfC0zMzQzNzcyOXwxMzI2Mzd8fENNfHx8fDIwMTkwODAxMTkzMTE2fDUwMDA2NzZ8fDUwMDA2NzZ8fHx8Ck9CUnwxfC0zMzMyNDkxMXwxMzE3OTV8NDEwMDAwMDNeUE9TVEVDVE9NSUEgKENJUkNVTi1DSVNcWEMzXE8pXlRIQ0R8fHwyMDE5MDgwMTEyMjA0Mnx8fHx8fHx8fHx8fHx8fHx8fHx8MXx8fHx8NTAwMDEyMiYmJiYmTUVEJkNJUnwyNDE0NTE2NzEmJiYmJkVORiZJTlN+MjI5MzY4MTgyJiYmJiZFTkYmQ0lSQ34yNjE4ODg0NTUmJiYmJkVORiZBTkVTfHx8Ck9SQ3xDQXwtMzM0Mzc3Mjl8MTMyNjM3fHx8fHx8MjAxOTA4MDExOTMxMTZ8NTAwMDY3Nnx8NTAwMDY3Nnx8fHwKT0JSfDF8LTMzNDM3NzI5fDEzMjYzN3wwXkNJUlVSR0lBIEEgREVGSU5JUl5USENEfHx8MjAxOTA4MDExOTMxMTZ8fHx8fHx8fHx8fHx8fHx8fHx8fDF8fHx8fDUwMDAwODEmJiYmJk1FRCZDSVJ8NTAwMDY3NiYmJiYmTUVEJkFORVN+MjA0NTU0MTYwJiYmJiZFTkYmQ0lSQ34yMzcxODY0MDMmJiYmJkVORiZJTlN+MjI4MTUzMTc0JiYmJiZFTkYmQU5FU3x8fApERzF8MXx8NjIyN15QT0xJUE8gTVVDT1NPIERPIENPTE8gRE8gVVRFUk9eQ0lEMTJ8fDIwMTkwNzMwMTM1MTExfEZ8fHx8fHx8fHwyfHxECkRHMXwyfHw3NTI0MV5DSVNUTyBFTUJSSU9OSUNPIERPIENPTE8gVVRFUklOTywgREEgVkFHSU5BIEUgRE9TIE9SR0FPUyBHRU5JVEFJUyBFWFQuIEZFTUlOSS1OT1NeQ0lEMTJ8fDIwMTkwNzMwMTM1MTExfEZ8fHx8fHx8fHwxfHxEClpIU3wyMDE5MDgwMTIwNTAwMHwyMDE5MDgwMTIwNTUwMHwyMDE5MDgwMjAwMDYwMHx8fDIwMTkwODAxMjEzMjAwfDIwMTkwODAxMjMwOTAwfDIwMTkwODAxMjEzMzAwfDIwMTkwODAxMjMwOTAwfDIwMTkwODAxMjE1OTAwfDIwMTkwODAxMjMwMzAwfDIwMTkwODAxMjMxNzAwfDIwMTkwODAyMDAwNjAwfHx8QUd8fHw0fE58fE58fEl8fApaU1N8MjAxOTA4MDEyMTM1MDB8U3xTfFN8MnxTfEF8U3xTfE58fE58TnwwfDIwMTkwODAxMjEzNTAwfFN8U3xTfFN8U3xBfHxBfHxTfHxTfHxTfHxTfHxTfHxTfHxBfDIwMTkwODAxMjMwMzAwfFN8U3xTfDMwLjAwfDI5LjAwfDU3LjAwfFN8U3xTfFN8fFN8fHw1MDAwMDgxfER8MXx8MjI4MTUzMTc0fHwyMjgxNTMxNzR8MjI4MTUzMTc0fDIyODE1MzE3NHx8fHx8fHx8fHx8fHx8fHx8U3xTfFN8U3x8fE58fE58fE58fE4=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>7</metaDataId>
          <name>Create CDA</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>cadea28b-3af2-4c6c-83bc-26b1b78115b7</channelId>
            <channelTemplate>${message.transformedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Generate CDA creation template</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>var episodioBlocoId = null;

for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;NTE&apos;]); i++) {
	if (msg[&apos;NTE&apos;][i][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;].toLowerCase() == &quot;episodioblocoid&quot; &amp;&amp; msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] != &quot;&quot;) {
		episodioBlocoId = msg[&apos;NTE&apos;][i][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;].toString();
		logger.info(&quot;episodioBlocoId: &quot; + episodioBlocoId);
	}
}

tmp[&apos;episodioFilhoId&apos;] = episodioBlocoId
tmp[&apos;tipoEpisodioFilhoId&apos;] = &quot;2&quot;;
tmp[&apos;doente&apos;] = {};

tmp[&apos;doente&apos;].numSequencial = msg[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;].toString();
tmp[&apos;doente&apos;].nome = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString() + &quot; &quot; + msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">TVNIfF5+XCZ8QlVDSUNhcmV8Q0hMfFNPTkhPfENITHwyMDI0MDgyMDAwMTM1NHx8T1JNXk8wMXwxNzI0MTEyODM0MjQxNDYtTy00ODU4MnxQfDIuNHx8fHxBTHx8ODg1OS8xfApQSUR8fHwzMDY1NzFeXl5DSExeTlN8fENBU1RSTyBTQU5UT15FTUlMSUEgREEgQ09OQ0VJQ0FPXl5eXl5MfHwxOTYzMDkyOTAwMDAwMHxGfHx8fHx8fHx8fDE2MjI5OV5eXkNITApQVjF8MXxJTlR8MV4xMDA5XjEwMDleU0FMQSBVQ1BBfHwyNDAxNDUwN3x8fHx8MTF8fHx8fHx8fHwyNDAxMzMzN3x8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHwyNDAxMzU2MQpERzF8MXx8TTE3MTFeQXJ0cm9zZSBwcmltXFhFMVxyaWEgdW5pbCwgam9lbGhvIERJUl5JQ0QxMHx8MjAyNDA4MTkxNjMwMDB8Rnx8fHx8fHx8fDF8fEQKT1JDfFNDfHwzODI2MHx8Q018fHx8MjAyNDA4MTkxNjMwMDB8NTkxM15JbmVzIEZpbGlwYSBNb3JvdWNvIEhlbnJpcXVlc3x8NTc0MDZeRWxpc2EgTWFyZ2FyaWRhIE1hcnRpbmhvIEZlcnJlaXJhfHx8MjAyNDA4MTkyMjQ4MDB8Ck9CUnwxfHwzODI2MHwwU1JDMEo5Xk1DPkFydGljSU5GPlN1YnN0aXR1aVxYRTdcXFhFM1xvPkFydGljIGpvZWxobyBESVI+QWJlcnRhPlN1YnN0IHNpbnQ+Q2ltZW50YWRhXklDRDEwfFB8fDIwMjQwNzI0MTE1OTQ5fHx8fHx8fHx8fHx8fHx8fHx8fHwxfHx8fHwyODMyNCZSb2RyaWd1ZXMmTnVubyYmUCZNRURJQ08mQ0lSVVJHSUFPfDE4NjEmQmF0aXN0YSZNYXJpYSBUZXJlc2EgUm9zYWRvJiZBJlRFQ05JQ08mQVVYSUxJQVJ+MjkwNDgmTUFHQUxIQUVTJjY4IEFOVE9OSU8mJkEmTUVESUNPJkNJUlVSR0lBT34zMjQwJlNhbnRpYWdvJkRpbmlzJiZBJkVORkVSTUVJUk8mQU5FU1RFU0lTVEF+NDI0MSZPbGl2ZWlyYSZKb2FvJiZBJkVORkVSTUVJUk8mSU5TVFJVTUVOVElTVEF+NDQ3MiZNYXJxdWVzJlZhbmVzc2EgU29maWEgTG9wZXMmJkEmRU5GRVJNRUlSTyZDSVJDVUxBTlRFfjY1ODQ4JkdvbWVzJkxlb25vciBBbmljZXRvJiZBJk1FRElDTyZBTkVTVEVTSVNUQXx8fApaSFN8fDIwMjQwODE5MTc1OTAwfDIwMjQwODIwMDAxMzAwfDIwMjQwODE5MTgwMDAwfHwyMDI0MDgxOTE4NTEwMHwyMDI0MDgxOTE5NTkwMHwyMDI0MDgxOTE4NTcwMHx8MjAyNDA4MTkxOTAwMDB8MjAyNDA4MTkxOTUwMDB8MjAyNDA4MTkyMDE0MDB8fE58fHxTfDF8fE58fE58fDEwMHxTZW0gbW90aXZvIHJlZ2lzdGFkb3x8MjAyNDA4MTkxODU1MDB8MjAyNDA4MTkxOTU1MDB8Ck5URXwxfHwxMjYzODMwfF5FUElTT0RJT0JMT0NPSUQKTlRFfDJ8fGY5ODkxMThiLTYwOTAtZWYxMS04ZWQ0LTAwNTA1NjlmMDAwMXxeQ2hhcmdlSXRlbS5pZApOVEV8M3x8NTRhNzQwNmItNjA5MC1lZjExLThlZDQtMDA1MDU2OWYwMDAxfF5FbmNvdW50ZXIuaWQKTlRFfDR8fFYuU1IwMDAwMDAwOTN8XkVuY291bnRlci5pZGVudGlmaWVy</inboundTemplate>
            <outboundTemplate encoding="base64">ewogICJlcGlzb2Rpb0ZpbGhvSWQiIDogbnVsbCwKICAidGlwb0VwaXNvZGlvRmlsaG9JZCIgOiBudWxsLAogICJkb2VudGUiIDoge30KfQ==</outboundTemplate>
            <inboundDataType>HL7V2</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="3.12.0">
                <handleRepetitions>true</handleRepetitions>
                <handleSubcomponents>true</handleSubcomponents>
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <stripNamespaces>false</stripNamespaces>
                <segmentDelimiter>\r</segmentDelimiter>
                <convertLineBreaks>true</convertLineBreaks>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="3.12.0">
                <useStrictParser>false</useStrictParser>
                <useStrictValidation>false</useStrictValidation>
                <segmentDelimiter>\r</segmentDelimiter>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="3.12.0">
                <splitType>MSH_Segment</splitType>
                <batchScript></batchScript>
              </batchProperties>
              <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="3.12.0">
                <segmentDelimiter>\r</segmentDelimiter>
                <successfulACKCode>AA</successfulACKCode>
                <successfulACKMessage></successfulACKMessage>
                <errorACKCode>AE</errorACKCode>
                <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
                <rejectedACKCode>AR</rejectedACKCode>
                <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
                <msh15ACKAccept>false</msh15ACKAccept>
                <dateFormat>yyyyMMddHHmmss.SSS</dateFormat>
              </responseGenerationProperties>
              <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="3.12.0">
                <successfulACKCode>AA,CA</successfulACKCode>
                <errorACKCode>AE,CE</errorACKCode>
                <rejectedACKCode>AR,CR</rejectedACKCode>
                <validateMessageControlId>true</validateMessageControlId>
                <originalMessageControlId>Destination_Encoded</originalMessageControlId>
                <originalIdMapVariable></originalIdMapVariable>
              </responseValidationProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
                <name>Accept message if &quot;msg[&apos;ZHS&apos;][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString()&quot; exists</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <field>msg[&apos;ZHS&apos;][&apos;ZHS.3&apos;][&apos;ZHS.3.1&apos;].toString()</field>
                <condition>EXISTS</condition>
                <values/>
              </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
            </elements>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>false</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
logger.info(generateLogMsg(&quot;surgical-discharge&quot;, message, null, null, null, null, null));
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>false</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>VISITAINTREFEXT</name>
            <type>STRING</type>
            <mappingName>visitaIntRefExt</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NUMSEQUENCIAL</name>
            <type>STRING</type>
            <mappingName>numSequencial</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NOMEDOENTE</name>
            <type>STRING</type>
            <mappingName>nomeDoente</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>AGENDAMENTOREFEXT</name>
            <type>STRING</type>
            <mappingName>agendamentoRefExt</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>DATAINICIO</name>
            <type>STRING</type>
            <mappingName>dataInicio</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SENDINGFACILITY</name>
            <type>STRING</type>
            <mappingName>sendingFacility</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>EVENTOID</name>
            <type>STRING</type>
            <mappingName>eventoId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ISEXAMEESPECIAL</name>
            <type>BOOLEAN</type>
            <mappingName>isExameEspecial</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>DATAFIM</name>
            <type>STRING</type>
            <mappingName>dataFim</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1730911392257</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>60</pruneMetaDataDays>
            <pruneContentDays>60</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>552e2c11-37bf-43a3-baa2-1754b361168d</id>
            <name>API Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089515</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>API functions library with utility functions for generic functions that will be invoked along the various channels, e.g. consumption of basic PatientCare services, logging of logs, etc
</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>b6d68590-ac13-4d9f-a89c-6808f98fd974</string>
              <string>7ec636a5-c259-415e-9da9-564aa4bf0672</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>070cf4a3-def7-4c23-b200-e7337ab0f153</string>
              <string>2980f7b0-4597-4f7a-a1de-4dfcd19b0540</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>4f2e8bd8-d8ce-4829-9109-17b568f1162b</string>
              <string>7fe76b86-ac84-4140-afef-92dd9ec13ae9</string>
              <string>261b007b-b999-4ecd-8998-837c62a32c27</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>18320ce6-5da5-4671-a4bc-9705e45ccdbb</string>
              <string>5e5544cd-b85e-4932-a96f-5cad28e705b8</string>
              <string>d9d6b5f5-edd1-4e0c-8ba5-c6f2a3365a5c</string>
              <string>aa608b20-43f8-49ea-8789-2a6aa784900a</string>
              <string>939c8b83-1d56-4bf4-b289-113c1b14e1b3</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>ed32950f-b0c1-47ee-931f-de451ed6a172</string>
              <string>a3530d49-3114-40a0-90cb-ce4914aca839</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>15567a1f-541e-45e3-94cb-e843e059152b</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>e678dbf5-f021-43dc-84ae-967500d5c31a</string>
              <string>545149dd-520a-4a1d-80c4-54052e6d380a</string>
              <string>362a4cf9-cb04-463b-82c5-cbbd1889ee9c</string>
              <string>ec6680ee-83f9-482c-b034-8614c6bce636</string>
              <string>a08e87c0-e56e-4f95-8f12-3b7c69eded8d</string>
              <string>7ac3f48d-16c4-4449-80d5-a8103a9ac5f8</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>3ce8e5be-dae2-4413-9c4f-15bac6049cb7</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>373e79bd-82f0-466b-9c1b-042e6e095b36</string>
              <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>e574181a-e3e1-49b6-9d71-78d846d0daae</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>34349ce2-b1e2-4bfc-992c-1f6e3cc281d9</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
              <string>99d0bf51-bb19-4bbd-adbd-4b606148e9a4</string>
              <string>0e98b91f-3169-4733-902f-118afa2d5ebc</string>
              <string>936a0f91-1bad-49d1-852a-a895c15146ae</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>77280229-7400-4c9c-b2f6-ac099d60871f</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>a1e1cf09-3c02-489d-80f4-6305b0df80ec</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>ebb78470-f376-47b6-9455-4cf2be31e2ef</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>44168b10-92fd-45f4-acef-61c9c29b8ec4</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c8bfd286-e39f-4ab4-8bc3-d5d9c95b900a</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>a5afc88e-7d8f-4743-8e9c-5389edf3e35c</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>41c81aeb-b462-4891-a0ea-673c6017218c</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>5611c4d6-0a58-4ed6-bfe2-efa1f2294f07</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>1d6b1caf-4821-4230-8745-54b5cecf2ba3</string>
              <string>89b1df84-4519-48a9-ae1f-3ae158692b3d</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>fc11ccb5-476e-485e-a5db-6ac8d460eb41</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>4cbef2bc-962d-4bdb-8d13-e7145d88621c</string>
              <string>a0b77f2b-f4b0-4ed7-9b27-fe970a0634b4</string>
              <string>c2cd049b-a261-47b5-9190-b55229521a62</string>
              <string>04596ec4-bf23-44d8-92c9-14a08643d97e</string>
              <string>615a7abb-c95b-41c1-a21e-99c9b8b05fb1</string>
              <string>5d0603d7-9d9a-409b-adf8-940a46be63a1</string>
              <string>048f2703-af21-4569-bf3b-955d189e4340</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>fab3c156-aea1-4068-800b-04a1a30b814c</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>86025761-218b-4205-99db-f5e1f4273da9</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>43882c7e-dcbb-44ec-b9e6-705cc6a4f6a9</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>38ba78b7-d9d0-4347-ac8d-0f2064c49a27</string>
              <string>ef70a082-0f5c-46b7-ae20-8ac4e5261c57</string>
              <string>d2250d91-f3ef-4154-ba78-c0bf6955b1b7</string>
              <string>607f13a0-8dc9-41e4-8e1d-623a145c8c6b</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>089d31ff-a9bb-4822-8818-e197344dca47</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>41e8684c-2279-4940-b3f9-9f1914e9cc68</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>137331af-f61f-4ec1-8296-39febdafc1d2</string>
              <string>1a8c9dcb-1052-49af-9960-c65db16e81e7</string>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>99a0314f-8ddf-4396-b39d-f54934ddfee9</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>67f8e921-4aa1-4b3f-9c36-3d55209b2099</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>400af9f5-05ef-403c-82aa-67899d791953</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>b36a2576-ce3e-4530-8bf8-375124d3eb8d</string>
              <string>e879c60d-1ea5-454c-a729-6d2184f82e24</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>276a26a4-2cfe-47ab-9f7c-ed1c3517e687</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>b7e144f5-2ed1-43c9-b29e-b21b118d0469</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>aefa6e5b-bad3-4dbf-af8a-3222f0393d1e</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>15cb318d-2648-4764-b972-2ab63d540c04</id>
                <name>apiGenerateBasicAuthHeader</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791559</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
 Generates an HTTP Basic Authentication header using the provided username and password.
 The credentials are encoded in Base64 and formatted appropriately for inclusion in HTTP request headers.
 This function is useful for creating headers for HTTP requests that require Basic Authentication.
 
 @param {String} user - The username to be included in the HTTP Basic Auth header.
 @param {String} pass - The password to be included in the HTTP Basic Auth header.
 @return {String} The HTTP Basic Authentication header, encoded in Base64 format.
**/
function apiGenerateBasicAuthHeader(user, pass) {
    var Base64 = Packages.java.util.Base64;
    var credentials = user + &quot;:&quot; + pass;
    var encodedCredentials = Base64.getEncoder().encodeToString(new java.lang.String(credentials).getBytes());
    var authHeader = &quot;Basic &quot; + encodedCredentials;
    return authHeader;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c32dc269-7c82-4fba-9d39-32a29b00ee01</id>
                <name>httpGet</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788760</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
  Envia um pedido HTTP GET para o URL especificado com autenticação Básica opcional.
  
  @param {String} url - O URL para o qual o pedido GET deve ser feito.
  @param {String|null} authHeader - Cabeçalho opcional de Autenticação Básica no formato Base64.
  @return {Object} Um objeto contendo o código de estado HTTP e o conteúdo da resposta.
                   - statusCode (Number): O código de estado HTTP.
                   - response (String): O conteúdo da resposta ou uma mensagem de erro.
  
  @example
  // Enviar um pedido GET sem autenticação
  var result = httpGet(&apos;https://example.com/api/resource&apos;, null);
  console.log(result.statusCode); // Código de estado HTTP
  console.log(result.response); // Conteúdo da resposta ou mensagem de erro
  
  @example
  // Enviar um pedido GET com Autenticação Básica
  var authHeader = generateBasicAuthHeader(&apos;username&apos;, &apos;password&apos;);
  var result = httpGet(&apos;https://example.com/api/resource&apos;, authHeader);
  console.log(result.statusCode); // Código de estado HTTP
  console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 **/
function httpGet(url, authHeader) {
    var result = {};

    var responseCode =  null;
    try {
        var URL = Packages.java.net.URL;
        var HttpURLConnection = Packages.java.net.HttpURLConnection;
        var BufferedReader = Packages.java.io.BufferedReader;
        var InputStreamReader = Packages.java.io.InputStreamReader;
        var StringBuilder = Packages.java.lang.StringBuilder;

        var urlObj = new URL(url);
        var httpConnection = urlObj.openConnection();
        httpConnection.setRequestMethod(&quot;GET&quot;);
        httpConnection.setConnectTimeout(10000);
        httpConnection.setReadTimeout(10000);

        if (authHeader) {
            httpConnection.setRequestProperty(&quot;Authorization&quot;, authHeader);
        }

        responseCode = httpConnection.getResponseCode().toString();
        var responseMessage = new StringBuilder();
        var inputStream = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
        var inputLine;
        while ((inputLine = inputStream.readLine()) != null) {
            responseMessage.append(inputLine);
        }
        inputStream.close();

        result.statusCode = responseCode;
        result.responseMessage = responseMessage.toString();
    } catch (e) {
        result.statusCode = responseCode != null ? responseCode : &quot;500&quot;; // 500 = Internal Server Error
        result.statusText = e.toString(); // antes: &quot;Internal Server Error: &quot; + e.toString()
        result.responseMessage = null;
    } /*finally {
    		if (httpConnection) httpConnection.disconnect();
    }*/

    return result;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>39bee33f-7fa8-475b-a294-eccc1ce715af</id>
                <name>httpPost</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
 Envia um pedido HTTP POST para o URL especificado com autenticação Básica opcional.
 
 @param {String} url - O URL para o qual o pedido POST deve ser feito.
 @param {String} data - Os dados a serem enviados no corpo do pedido (como uma string JSON).
 @param {String|null} authHeader - Cabeçalho opcional de Autenticação Básica no formato Base64.
 @return {Object} Um objeto contendo o código de estado HTTP e o conteúdo da resposta.
                  - statusCode (Number): O código de estado HTTP.
                  - response (String): O conteúdo da resposta ou uma mensagem de erro.
 
 @example
 // Enviar um pedido POST sem autenticação
 var result = httpPost(&apos;https://example.com/api/resource&apos;, &apos;{&quot;key&quot;: &quot;value&quot;}&apos;, null);
 console.log(result.statusCode); // Código de estado HTTP
 console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 
 @example
 // Enviar um pedido POST com Autenticação Básica
 var authHeader = generateBasicAuthHeader(&apos;username&apos;, &apos;password&apos;);
 var result = httpPost(&apos;https://example.com/api/resource&apos;, &apos;{&quot;key&quot;: &quot;value&quot;}&apos;, authHeader);
 console.log(result.statusCode); // Código de estado HTTP
 console.log(result.response); // Conteúdo da resposta ou mensagem de erro
 **/
 function httpPost(url, data, authHeader) {
    var result = {};
    var outpuStream = null;
    var inputStream = null;
    
    try {
        var URL = Packages.java.net.URL;
        var HttpURLConnection = Packages.java.net.HttpURLConnection;
        var DataOutputStream = Packages.java.io.DataOutputStream;
        var BufferedReader = Packages.java.io.BufferedReader;
        var InputStreamReader = Packages.java.io.InputStreamReader;
        var StringBuilder = Packages.java.lang.StringBuilder;

        var urlObj = new URL(url);
        var httpConnection = urlObj.openConnection();
        httpConnection.setRequestMethod(&quot;POST&quot;);
        httpConnection.setDoOutput(true);
        httpConnection.setConnectTimeout(10000);
        httpConnection.setReadTimeout(10000);
        httpConnection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);      

        if (authHeader) {
            httpConnection.setRequestProperty(&quot;Authorization&quot;, authHeader);
        }
        
        try{
        	httpConnection.setRequestProperty(&quot;Content-Length&quot;, String(data.length));
        }catch (ex3) {
		httpConnection.setRequestProperty(&quot;Content-Length&quot;, String(data.length()));
        }

        try {
            outpuStream = new DataOutputStream(httpConnection.getOutputStream());
            outpuStream.writeBytes(data);
        } catch (ex3) {
            result.statusCode = &quot;503&quot;; // Service Unavailable
		  result.statusText = &quot;URL Indisponivel&quot;
            result.responseMessage = null;
            return result;
        } finally {
            if (outpuStream) {
                outpuStream.close();
            }
        }

        var responseCode = -1;
        try {
            responseCode = httpConnection.getResponseCode().toString();
        } catch (ex4) {
            result.statusCode = &quot;500&quot;; // Internal Server Error
            result.responseMessage = &quot;Error getting response code: &quot; + ex4.toString();
            return result;
        }

        var responseMessage = new StringBuilder();
	   var inputStream;

        try {

            inputStream = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));

		} catch (e) {
			inputStream = new BufferedReader(new InputStreamReader(httpConnection.getErrorStream()));
        }

            var inputLine;
            while ((inputLine = inputStream.readLine()) != null) {
                responseMessage.append(inputLine);
            }
            inputStream.close();

            result.statusCode = responseCode;
            result.responseMessage = responseMessage.toString();
        
    } catch (e) {
        // Handle exceptions for other parts of the request
        result.statusCode = &quot;500&quot;; // Internal Server Error
	   result.statusText = &quot;Internal Server Error: &quot; + e.toString();
        result.responseMessage = null;
    }

    return result;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6c25c1fd-1f2b-40b7-9841-a884796e0414</id>
                <name>Web Service Rest API Consumption - genericApiCall</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793537</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to call a generic rest API, we can invoke the endpoint, method (GET, POST, PUT, etc), payload and authentication .
	This implementation includes Basic Auth, if the endpoint is not protected by Basic Auth the username and password fields must be set to nul

	@param {String} method - HTTP Method (GET, POST, PUT, PATCH, DELETE)
	@param {String} endpoint - API endpoint (eg: http://localhost:8008/api/v1/patient)
	@param {String} username - API Basic Auth username if necessary, otherwise set to null
	@param {String} password - API Basic Auth password if necessary, otherwise set to null
	@param {Object} payload - Request Payload or set to null if not necessary
	@return {Object} this function returns the operation code and the API requst response body
*/
function genericApiCall(method, endpoint, username, password, payload) {
	// Setting variables
	var ws = null;
	var result =  null;
	
	// Import JAVA custom code
	try{
		ws = new Packages.com.bsimple.mirth.services.RestClient();		
	}catch(err){
		logger.info(&quot;Unable to load RestClient.jar from custom-lib folder&quot;);
		return null;
	}

	// Try to consume API
	try   {
		result = ws.callService(method, endpoint, username, password, payload);
		return result;
	}  catch(err) {
		logger.info(&quot;Internbal error consuming API&quot;);
		var ret = {};
		ret.statusCode = &quot;500&quot;;
		ret.statusCodeValue = &quot;Internal error consuming API - make sure the endpoint is correctly setted&quot;;
		ret.body = null;
		return ret;
	}
	
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>f15f2324-5af5-4bb8-ad87-5c528494dfb6</id>
            <name>DateUtils</name>
            <revision>9</revision>
            <lastModified>
              <time>1730914089537</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Date Utilities for formating Dates and convert formats, Date Processing</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>3d1c4a14-5d9d-40ee-8c72-931459c94b75</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>4de0b993-bf9e-49e0-b224-3eef7e76e2b3</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>c6cdb85d-527a-45c4-bca5-1e110167cc50</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788437</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0ff87898-9f14-46b4-bc5d-f4091165b164</id>
                <name>getCurrentDateUTC</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788191</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is to get current system date in UTC+0 format - &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSS&apos;Z&apos;&quot;
	
	@return {String} return formmatted system date in UTC format
*/
function getCurrentDateUTC() {
	// Import Java classes
	var SimpleDateFormat = java.text.SimpleDateFormat;
	var Date = java.util.Date;
	var TimeZone = java.util.TimeZone;
	
	var dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSS&apos;Z&apos;&quot;);
	// Set the timezone to UTC
	dateFormat.setTimeZone(TimeZone.getTimeZone(&quot;UTC&quot;));
	// Get the current date
	var currentDate = new Date();
	// Format the date in UTC
	var formattedDate = dateFormat.format(currentDate);

	return formattedDate;
}

globalMap.put(&quot;getCurrentDateUTC&quot;, getCurrentDateUTC);</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3bb1d234-3e4f-4832-8a59-01e5388865fb</id>
                <name>LocalTimeToUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788319</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function LocalDateTimeToUtc(localDateTime, timezone) {

	var DateTimeFormatter = Packages.java.time.format.DateTimeFormatter;
	var LocalDateTime = Packages.java.time.LocalDateTime;
	var ZoneOffset = Packages.java.time.ZoneOffset;

	var cleanDateTime = localDateTime.replace(/[^\d]/g, &apos;&apos;).padEnd(14, &apos;0&apos;);

	var zone;
	if(timezone == undefined){
		zone = java.time.ZoneId.systemDefault();
	}else{
		zone = java.time.ZoneId.of(timezone);
	}
	
	var pattern = &quot;yyyyMMddHHmmss&quot;;
	
	var formatter = DateTimeFormatter.ofPattern(pattern);
	var localDateTime = LocalDateTime.parse(cleanDateTime, formatter);
	

	return localDateTime.atZone(zone).toOffsetDateTime().toInstant().toString();

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c64a2526-183c-4378-b708-c0c880f8e987</id>
                <name>OffsetDateTimeToUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790057</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function OffsetTimeToUtc(offsetDateTimeStr) {
	
	var offsetDateTime = java.time.OffsetDateTime.parse(offsetDateTimeStr);

     return offsetDateTime.toInstant().toString();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bdf25c4-c7a4-4248-bc1e-7148ebccc58b</id>
                <name>subtractDatesUTC</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790375</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to perceive the number of miliseconds/seconds/minutes/hours/days between two given (string) dates in UTC format.

	@param {String} startStr - start date in UTC format
	@param {String} endStr - end date in UTC format
	@param {String} unit - time unit used. Options: milliseconds&apos;, &apos;seconds&apos;, &apos;minutes&apos;, &apos;hours&apos;, &apos;days&apos;
	@return {String} return description
*/
function subtractDatesUTC(startStr, endStr, unit) {
    // Parse the input dates as Date objects
    const start = new Date(startStr);
    const end = new Date(endStr);

    // Get the difference in milliseconds
    const diffMilliseconds = end.getTime() - start.getTime();

    // Convert the difference to the requested unit
    var diff = null;
    switch(unit) {
        case &apos;milliseconds&apos;:
            diff = diffMilliseconds;
            break;
        case &apos;seconds&apos;:
            diff = diffMilliseconds / 1000;
            break;
        case &apos;minutes&apos;:
            diff = diffMilliseconds / (1000 * 60);
            break;
        case &apos;hours&apos;:
            diff = diffMilliseconds / (1000 * 60 * 60);
            break;
        case &apos;days&apos;:
            diff = diffMilliseconds / (1000 * 60 * 60 * 24);
            break;
        default:
            throw new Error(&apos;Invalid unit. Please use &quot;milliseconds&quot;, &quot;seconds&quot;, &quot;minutes&quot;, &quot;hours&quot;, or &quot;days&quot;.&apos;);
    }

    return diff;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2f1419d7-0352-47e8-af40-159b623aa777</id>
                <name>UtcDateTimeAdd</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788151</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to add/subtract set intervals. This is not meant to change local times between timezones!

	@param {String} UtcDateTime - UtcDateString in ISO Format &apos;YYYY-MM-DDThh:mm:ssZ&apos; (millis optional)
	@param {String} interval - interval to add (ss - seconds, mm - minutes, hh - hours, DD - days, MM - months, YY - years )
	@param {int} value - value to add (negative values will subtract from date)
	@return {String} newUTCDate
*/
function UtcDateTimeAdd(utcDateTime, interval, value) {

	var ChronoUnit = Packages.java.time.temporal.ChronoUnit;

	var inst = java.time.Instant.parse(utcDateTime);
	
	switch(interval){
		case &apos;ss&apos;:
			return inst.plusSeconds(value).toString();
			break;
		case &apos;mm&apos;:
			return inst.plus(value, ChronoUnit.MINUTES).toString();
			break;
		case &apos;hh&apos;:
			return inst.plus(value, ChronoUnit.HOURS).toString();
			break;
		case &apos;DD&apos;:
			return inst.plus(value, ChronoUnit.DAYS).toString();
			break;
		case &apos;MM&apos;:
			return inst.plus(value, ChronoUnit.MONTHS).toString();
			break;
		case &apos;YY&apos;:
			return inst.plus(value, ChronoUnit.YEARS).toString();
			break;
		default:
			return &apos;&apos; 
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bd844bee-5372-484b-a9f4-fe2f98b6bd3a</id>
                <name>utcToLocalDateCdaString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793366</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function utcToLocalDateCdaString(date) {
	
	var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
	formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	var formatter_final = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
	formatter_final.setTimeZone(java.util.TimeZone.getTimeZone(&quot;Europe/Lisbon&quot;));

	var dataFormat = date.replace(/\.\d+/, &apos;&apos;);
	var dataUTC = formatter_utc.parse(dataFormat);
	var dataLocal = formatter_final.format(dataUTC);
	
    	return dataLocal;
    
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5617deeb-09e0-4d29-a1cc-e63ac6fafb0b</id>
                <name>UtcToLocalDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790566</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function UtcToLocalDateTime(utcDate, withOffset, targetTimezone) {

	var DateTimeFormatter = Packages.java.time.format.DateTimeFormatter;
    	
    	var inst = java.time.Instant.parse(utcDate);
    	var zone;
	
	if(withOffset == undefined){
		withOffset = false;	
	}

	if(targetTimezone == undefined){

		zone = java.time.ZoneId.systemDefault();	
	}else{
		zone = java.time.ZoneId.of(targetTimezone);
	}

	var offsetDateTime = inst.atZone(zone).toOffsetDateTime();
   
    	if (withOffset) {

		return offsetDateTime.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);    		
    	}else{

    		return offsetDateTime.toLocalDateTime().toString();
    	}
    	
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>9025896a-65d0-458c-92ac-335fe985a232</id>
            <name>FHIR Helper Functions</name>
            <revision>8</revision>
            <lastModified>
              <time>1730893909853</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>General functions to help convert HL7 v2.x to FHIR resources.

These are used by the example HL7 to FHIR transformer, as well as
the &quot;HL7 v2.x to FHIR Creation Functions&quot; code template library.</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>936a0f91-1bad-49d1-852a-a895c15146ae</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>dc492b90-a61b-480b-90e1-7ba5aa490e8f</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>c3f12023-bc9f-4a80-a20a-91fddab47eda</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>c2052272-225a-43dc-bfa3-ffb8a9cdcb3d</string>
              <string>3fe6d772-4b87-435b-ab48-1a3cd74b6a18</string>
              <string>5a151c27-fc2a-4eea-ad38-68a34b8d491f</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>eabe6ed9-1f63-44c1-bd79-c22f3c8be0c4</string>
              <string>420051ed-ab84-4669-b6a6-245a7a67ce6e</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>6874134c-7e5f-496b-b8bf-f40689f2953f</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>897cc395-62c1-4ca0-be39-dc6b306e2e2f</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>40ceac90-6c0f-4841-bffc-c0ba0613985f</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>b311cb70-5b89-42e7-b3dc-479aaaeeebc9</string>
              <string>d1569963-df1f-4c3e-9c40-84bfb7ce3a8f</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>f08e1002-8784-4af2-9ac1-0f29fa50af6d</string>
              <string>a66e2585-1a81-435d-a745-d2882741026a</string>
              <string>7a38ba2c-d218-4b86-aa64-4d95b6a04516</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>3c7ae171-31fd-4162-955b-9540a5550348</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>dba002da-8747-4d96-a007-4626c848e439</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>6dd7219d-ef93-4391-a2bf-9b2dc2618c8b</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>79796989-bae1-4def-8f83-1fa2e90c266f</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>edf81a0b-0a37-4785-abd2-12cf972fab9d</string>
              <string>4206762e-7f8b-406b-b93f-0aa22164599c</string>
              <string>be018579-43e0-4056-a998-56ebcb4e09c6</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>b8a8e6ef-5fd2-42f9-af8e-29634cdfcdeb</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>3d1c4a14-5d9d-40ee-8c72-931459c94b75</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>9ab99f86-c58f-4c4a-b7ee-c8ed222a738c</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>f12fe723-2d00-4436-9e18-176f610b806e</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>befe8338-2d19-4a93-8fe3-716cdfd6b129</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>5f44062e-05f9-41db-9495-f75947e99502</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>74bd0262-9559-44ea-8a3f-356ae2f02717</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>ae7cd886-fda0-4d22-90a1-c29903e6e434</string>
              <string>4de0b993-bf9e-49e0-b224-3eef7e76e2b3</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>efd3e811-ca0d-451d-b637-a34e2b774450</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3f4f15ad-56de-4755-aede-64962cf04c67</id>
                <name>checkEncounterPriority</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792938</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to validate if the encounter priority string is according to standard value set

	@param {String} status - encounter priority
	@return {boolean} return boolean true if valid status
*/
function checkEncounterPriority(priority) {
	var arrPriority = [&apos;A&apos;, &apos;CR&apos;, &apos;CS&apos;, &apos;CSP&apos;, &apos;CSR&apos;, &apos;EL&apos;, &apos;EM&apos;, &apos;P&apos;, &apos;PRN&apos;, &apos;R&apos;, &apos;RR&apos;, &apos;S&apos;, &apos;T&apos;, &apos;UD&apos;, &apos;UR&apos;];
	return arrPriority.includes(priority.toUpperCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ed003eb4-3c4d-4336-a2ea-16efe0ce0c39</id>
                <name>checkEncounterRegime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789719</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to validate if the encounter Regime string is according to standard value set

	@param {String} status - encounter regime
	@return {boolean} return boolean true if valid regime
*/
function checkEncounterRegime(regime) {
	var arrRegime = [&apos;AMB&apos;, &apos;EMER&apos;, &apos;FLD&apos;, &apos;HH&apos;, &apos;IMP&apos;, &apos;ACUTE&apos;, &apos;NONAC&apos;, &apos;OBSENC&apos;, &apos;PRENC&apos;, &apos;SS&apos;, &apos;VR&apos;];
	return arrRegime.includes(regime.toUpperCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>891a7cdf-98d5-4575-a8d1-e519aecd3e11</id>
                <name>checkEncounterStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789175</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to validate if the encounter status string is according to standard value set


	@param {String} status - encounter status
	@return {boolean} return boolean true if valid status
*/
function checkEncounterStatus(status) {
	var arrStatus = [&apos;on-call&apos;, &apos;planned&apos;, &apos;arrived&apos;, &apos;triaged&apos;, &apos;in-progress&apos;, &apos;onleave&apos;, &apos;finished&apos;, &apos;cancelled&apos;, &apos;entered-in-error&apos;, &apos;unknown&apos;];
	return arrStatus.includes(status.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2cc062f8-aac9-48e1-947e-0567d4497e07</id>
                <name>Cleanup FHIR Patient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791102</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Removes name / telecom / address entries with no actual value.

	@param {Object} patient - The JavaScript Object representing the FHIR Patient.
	@return {Object} The same Object passed in, cleaned up.
*/
function cleanupFhirPatient(patient) {
	// Remove names with no value
	cleanupFhirNames(patient, &apos;name&apos;);
	
	// Remove telecom entries with no value
	cleanupFhirTelecoms(patient, &apos;telecom&apos;);

	// Remove address entries with no value
	cleanupFhirAddresses(patient, &apos;address&apos;);

	if (patient.contact) {
		for each (contact in patient.contact) {
			if (!isFhirNameValid(contact.name)) {
				delete contact.name;
			}
			
			cleanupFhirTelecoms(contact, &apos;telecom&apos;);

			if (!isFhirAddressValid(contact.address)) {
				delete contact.address;
			}
		}
	}

	return patient;
}

function cleanupFhirNames(parent, property) {
	cleanupArray(parent, property, isFhirNameValid);
}

function isFhirNameValid(name) {
	return name &amp;&amp; (!isValueEmpty(name.text) || !isValueEmpty(name.family) || !isValueEmpty(name.given) || !isValueEmpty(name.prefix) || !isValueEmpty(name.suffix));
}

function cleanupFhirTelecoms(parent, property) {
	cleanupArray(parent, property, function(telecom) {
		return !isValueEmpty(telecom.value);
	});
}

function cleanupFhirAddresses(parent, property) {
	cleanupArray(parent, property, isFhirAddressValid);
}

function isFhirAddressValid(address) {
	return address &amp;&amp; (!isValueEmpty(address.text) || !isValueEmpty(address.line) || !isValueEmpty(address.city) || !isValueEmpty(address.state) || !isValueEmpty(address.postalCode) || !isValueEmpty(address.country));
}

function cleanupArray(parent, property, handleFunction) {
	var arr = parent[property];

	if (arr) {
		var length = arr.length;
		for (var i = length - 1; i &gt;= 0; i--) {
			if (!handleFunction(arr[i])) {
				delete arr[i];
				length--;
			}
		}
		arr.length = length;

		// Handle Java arrays
		if (arr.length != length) {
			parent[property] = org.apache.commons.lang3.ArrayUtils.subarray(arr, 0, length);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2e62489a-423d-4471-a919-ed3f71827199</id>
                <name>Combine Arrays</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789406</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Combines two arrays into one. Works with both Java and JavaScript arrays.

	@param {Array} array1 - The first array.
	@param {Array} array2 - The second array.
	@return {Array} The combined array.
*/
function combineArrays(array1, array2) {
	var isJavaArray1 = Object.prototype.toString.call(array1) == &apos;[object JavaArray]&apos;;
	var isJavaArray2 = Object.prototype.toString.call(array2) == &apos;[object JavaArray]&apos;;

	if (isJavaArray1 &amp;&amp; isJavaArray2) {
		return org.apache.commons.lang3.ArrayUtils.addAll(array1, array2);
	} else if (isJavaArray1) {
		for (var i = array1.length - 1; i &gt;= 0; i--) {
			array2.unshift(array1[i]);
		}
		return array2;
	} else {
		for each (value in array2) {
			array1.push(value);
		}
		return array1;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6faf1e4b-d159-4d34-a07a-2fe0a3bde4cf</id>
                <name>Consolidate Empty Properties</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793027</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Removes empty strings, objects and arrays from a JavaScript object.

	@param {Object/Array} obj - The object or array to consolidate.
	@return {Object/Array} The consolidates object or array.
*/
function consolidate(obj) {
	if (typeof obj != &apos;undefined&apos; &amp;&amp; obj != null) {
		var protoToString = Object.prototype.toString.call(obj);
		
		if (obj instanceof Array || protoToString == &apos;[object Array]&apos; || protoToString == &apos;[object JavaArray]&apos;) {
			var length = obj.length;
			
			for (var i = obj.length - 1; i &gt;= 0; i--) {
				if (!doConsolidate(obj, i)) {
					length--;
				}
			}
			obj.length = length;

			// Handle Java Arrays
			if (length != obj.length) {
				obj = org.apache.commons.lang3.ArrayUtils.subarray(obj, 0, length);
			}
		} else if (protoToString == &apos;[object Object]&apos;) {
			for (var property in obj) {
				doConsolidate(obj, property);
			}
		}
	}
	return obj;
}

function doConsolidate(obj, property) {
	var value = obj[property] = consolidate(obj[property]);
	var empty = isValueEmpty(value);
	if (empty) {
		delete obj[property];
	}
	return !empty;
}

function isValueEmpty(value) {
	var protoToString = Object.prototype.toString.call(value);

	if (typeof value == &apos;undefined&apos; || value == null) {
		return true;
	} else if (value instanceof Array || protoToString == &apos;[object Array]&apos; || protoToString == &apos;[object JavaArray]&apos;) {
		if (value.length &gt; 0) {
			for each (element in value) {
				if (!isValueEmpty(element)) {
					return false;
				}
			}
		}
		return true;
	} else if (typeof value == &apos;string&apos; || protoToString == &apos;[object String]&apos;) {
		return value.length == 0;
	} else if (value instanceof java.lang.String) {
		return org.apache.commons.lang3.StringUtils.isEmpty(value);
	} else if (protoToString == &apos;[object Object]&apos;) {
		for (var property in value) {
			if (!isValueEmpty(value[property])) {
				return false;
			}
		}
		return true;
	}

	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b7bffbe4-9da5-40a8-8a35-7e3ad5a9bebf</id>
                <name>Convert Address Use</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789310</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x address type code to the corresponding FHIR address use.

	@param {String} code - The HL7 address type (Table 0190)
	@return {String} The FHIR address use code
*/
function convertAddressUse(code) {
	var fhirCode;
	
	switch ((code + &apos;&apos;).toUpperCase()) {
		case &apos;H&apos;:
		case &apos;L&apos;:
		case &apos;M&apos;:
		case &apos;P&apos;:
		case &apos;SH&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.HOME;
			break;
		case &apos;B&apos;:
		case &apos;O&apos;:
		case &apos;BI&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.WORK;
			break;
		case &apos;C&apos;:
		case &apos;V&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.TEMP;
			break;
		default:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.OLD;
	}

	return fhirCode.toCode();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>687a3eef-3155-47c8-bb12-de158d0055ac</id>
                <name>Convert Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790836</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x formatted date into the correct format for FHIR date.
	
	HL7 format expected: yyyyMMdd
	FHIR format: yyyy-MM-dd

	@param {String} date - The HL7 v2.x date string
	@return {String} The converted FHIR date string
*/
function convertToFhirDate(date) {
	return convertToFhirTimestamp(date, &quot;yyyy-MM-dd&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f338c38c-477a-4dca-8714-2e96c382716e</id>
                <name>Convert Gender</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789961</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x gender code to the corresponding FHIR code.

	@param {String} code - The HL7 gender code (Table 0001)
	@return {String} The FHIR administrative gender code
*/
function convertToFhirGender(code) {
	var fhirCode;
	
	switch ((code + &apos;&apos;).toUpperCase()) {
		case &apos;F&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.FEMALE;
			break;
		case &apos;M&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.MALE;
			break;
		case &apos;O&apos;:
		case &apos;A&apos;:
		case &apos;N&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.OTHER;
			break;
		case &apos;U&apos;:
		default:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.UNKNOWN;
	}

	return fhirCode.toCode();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0061fef8-39be-48c1-b81e-60719c97c149</id>
                <name>Convert Timestamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792059</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x formatted timestamp into the correct format for FHIR dateTime.
	
	HL7 format expected: yyyyMMddHHmmssZZ
	FHIR format: yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ

	@param {String} date - The HL7 v2.x timestamp string
	@return {String} The converted FHIR timestamp string
*/
function convertToFhirTimestamp(date) {
	if (!date) {
		return &apos;&apos;;
	}

	var patterns = [
		&quot;yyyyMMddHHmmss.SSSZZ&quot;,
		&quot;yyyyMMddHHmmss.SSSZ&quot;,
		&quot;yyyyMMddHHmmss.SSS&quot;,
		&quot;yyyyMMddHHmmssZZ&quot;,
		&quot;yyyyMMddHHmmssZ&quot;,
		&quot;yyyyMMddHHmmss&quot;,
		&quot;yyyyMMddHHmm&quot;,
		&quot;yyyyMMddHH&quot;,
		&quot;yyyyMMdd&quot;
	];

	var instant;
	for each (pattern in patterns) {
		try {
			instant = org.joda.time.format.DateTimeFormat.forPattern(pattern).parseMillis(new String(date));
			break;
		} catch(e) {}
	}

	if (instant) {
		var outpattern = arguments.length &gt;= 2 ? arguments[1] : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ&quot;;
		try {
			return org.joda.time.format.DateTimeFormat.forPattern(outpattern).print(instant);
		} catch (e) {}
	}
	
	return date;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>760658e4-f24f-4a57-bbb9-9ae847f6daf8</id>
                <name>Convert Yes/No Indicator</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787847</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x yes/no indicator code to a boolean value. If the code is null or an empty string,
	false will be returned.

	@param {String} code - The HL7 yes/no indicator (Table 0136)
	@return {Boolean} True/false
*/
function convertYesNoIndicator(code) {
	return code == &apos;Y&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>96c9798e-4e23-4374-a7ad-aafd88b8d17e</id>
                <name>convertToFhirCodeSystem</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789218</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert PatientCare code system for FHIR format system URL, ie: ICD10 to http://hl7.org/fhir/sid/icd-10

	@param {String} patientCareCodeSystem 
	@return {String} return fhir url
*/
function convertToFhirCodeSystem(patientCareCodeSystem) {

	var fhirCodeSystem = null;
	switch (patientCareCodeSystem) {
	  case &apos;ICD9&apos;:
	    fhirCodeSystem = &quot;http://hl7.org/fhir/sid/icd-9-cm&quot;
	    break;
	  case &apos;ICD10&apos;:
	    fhirCodeSystem = &quot;http://hl7.org/fhir/sid/icd-10&quot;
	    break;
	  case &apos;SNOMED&apos;:	   
	    fhirCodeSystem = &quot;http://snomed.info/sct&quot;
	    break;
	  case &apos;LOINC&apos;:	   
	    fhirCodeSystem = &quot;http://loinc.org&quot;
	    break;
	  case &apos;ACSS&apos;:
	  	fhirCodeSystem = &quot;https://www.acss.min-saude.pt&quot;
	  	break;
	  case &apos;ADSE&apos;:
	  	fhirCodeSystem = &quot;https://www.adse.pt&quot;
	  	break;  
	case &apos;TOM&apos;:
	  	fhirCodeSystem = &quot;https://cuf.pt/fhir/CodeSystem/Service&quot;
	  	break;
	case &apos;CUF&apos;:
	  	fhirCodeSystem = &quot;https://cuf.pt/fhir/CodeSystem/Service&quot;
	  	break;
	case &apos;patientcare.id&apos;:
	  	fhirCodeSystem = configurationMap.get((&apos;FhirServer_PatientCare_Namespace&apos;)) + &quot;/fhir/CodeSystem/&quot; + patientCareCodeSystem
	  	break;
	  default:
	    fhirCodeSystem = null;
	}

	return fhirCodeSystem;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ca4aadf2-7203-414a-92b5-3257db7a363a</id>
                <name>createChargeItemRequisicaoMCDT</name>
                <revision>3</revision>
                <lastModified>
                  <time>1730888277851</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função auxiliar na criação de ChargeItems. Esta função trata de construir a base de um ChargeItem referente à REQUISIÇÃO DE MCDTS (!!).

	@param {Object} infosExame - informações gerais relativas ao exame:
          {
              &quot;exameIdentificadores&quot;: null,
              &quot;identificadorSequencialUnicoExame&quot; : null,
              &quot;exameRefExt&quot;: null,
              &quot;cdExameRefExt&quot;: null,
              &quot;cdExameDescr&quot;: null,
              &quot;cdServicoExecutanteId&quot;: null,
              &quot;cdServicoExecutanteDescr&quot;: null,
              &quot;cdServicoExecutanteRefExt&quot;: null,
              &quot;cdEspecialidadeRefExt&quot;: null,
              &quot;cdEspecialidadeDescr&quot;: null,
              &quot;exameEstadoRefExt&quot;: null,
              &quot;anulado&quot;: false,
              &quot;dataCriacao&quot;: null,
              &quot;utCriacaoId&quot;: null,
              &quot;dataAlt&quot;: null,
              &quot;utAltId&quot;: null,
              &quot;dataExameEstado&quot;: null,
              &quot;prioridadeRefExt&quot;: null,
              &quot;exameObs&quot;: null,
              &quot;anatomiaPatologica&quot;: null,
              &quot;autopsia&quot;: null,
              &quot;citologiaGinecologica&quot;: null,
              &quot;citologiaNaoGinecologica&quot;: null,
              &quot;histologia&quot;: null,
              &quot;mfr&quot;: null,
              &quot;revisaoExame&quot; : null
          }

	@param {Object} utilizadores - informação dos utilizadores:
		[{
		      &quot;nome&quot; : null,
		      &quot;numMecanografico&quot; : null,
		      &quot;perfil&quot; : null
		 }]

	@param {Object} infosRequisicao - informações gerais relativas à requisição:
		{
		      &quot;criar&quot;: true,
		      &quot;requisicaoId&quot;: null,
		      &quot;requisicaoRefExt&quot;: null,
		      &quot;identificadorSequencialUnico&quot;: null,
		      &quot;estadoRefExt&quot;: null,
		      &quot;dataCriacao&quot;: null,
		      &quot;dataPretendida&quot;: null,
		      &quot;anulado&quot;: false,
		      &quot;prioridadeRefExt&quot;: null,
		      &quot;infoClinicaGeral&quot;: null,
		      &quot;obsReq&quot;: null
		}

	@param {Object} doente - informações do doente:
		{
		    &quot;numProcesso&quot; : null,
		    &quot;numSequencial&quot; : null,
		    &quot;nomeDoente&quot; : null
		}
		
	@param {String} visitaRefExt - identificador externo do episódio /Encounter 
	@param {String} theCode - código a ser colocado em ChargeItem.code 
	@return {Object} return ChargeItem
*/
function createChargeItemRequisicaoMCDT(infosExame, utilizadores, infosRequisicao, doente, visitaRefExt, theCode) {

	// Add Performers
	var Performer = [];
	var occurenceDateTime = infosRequisicao[&apos;dataCriacao&apos;]; //default
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(infosExame[&apos;accoes&apos;]); j++ ){
	
		if (infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;] == &quot;1&quot; /* Relato */){
			dataRelato = infosExame[&apos;accoes&apos;][j][&apos;data&apos;];
		} else if (infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;] == &quot;2&quot; /* Validacao */){
			dataValidacao = infosExame[&apos;accoes&apos;][j][&apos;data&apos;];
		} /*else {
			occurenceDateTime = infosRequisicao[&apos;dataCriacao&apos;];
		}*/

		Performer.push({
			function: {
				coding: [{
					system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
					code: newStringOrUndefined( infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;] == &quot;3&quot; /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadores, infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;])) : mapFuncao(infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;]) )
				}]
			},
			actor: {
				reference: newStringOrUndefined(infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadores, infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;]) ) : null),
				identifier: {
					use: newStringOrUndefined(&apos;official&apos;),
					type: {
						coding: [{
							system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
							code: newStringOrUndefined(&apos;4&apos;)
						}],
						text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
					},
					value: newStringOrUndefined(infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadores, infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;]) : null)
				}
			}
		});
	}

	chargeItemId = UUIDGenerator.getUUID();
	var ChargeItem = {
		resourceType: newStringOrUndefined(&apos;ChargeItem&apos;),
		id: newStringOrUndefined(chargeItemId),
		extension: [{
				url: newStringOrUndefined(infosRequisicao[&apos;infoClinicaGeral&apos;] != null ? $(&apos;localAddress&apos;) + &quot;/fhir/StructureDefinition/CarePlan.ClinicalInformation&quot; : null),
				valueString: newStringOrUndefined(infosRequisicao[&apos;infoClinicaGeral&apos;] != null ? infosRequisicao[&apos;infoClinicaGeral&apos;] : null)
			},
			{
				url: newStringOrUndefined(infosExame[&apos;identificadorSequencialUnicoExame&apos;] != null ? $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ServiceRequest.ExternalId&quot; : null),
				valueString: newStringOrUndefined(infosExame[&apos;identificadorSequencialUnicoExame&apos;] != null ? infosExame[&apos;identificadorSequencialUnicoExame&apos;] : null)
			
			},
			{
				extension: [{
					url: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? &apos;code&apos; : null),
					valueCoding: {
						system: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? $(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/RootFunctionalHealthUnit&quot; : null),
						code: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? infosExame[&apos;cdEspecialidadeRefExt&apos;] : null),
						display: newStringOrUndefined(infosExame[&apos;cdEspecialidadeDescr&apos;] != null ? infosExame[&apos;cdEspecialidadeDescr&apos;] : null)
					}
				}],	
				url: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ChargeItem.ExecutingFunctionalHealthUnit.WithCode&quot; : null)
			}
		],
		status: newStringOrUndefined(&apos;billable&apos;),
		identifier: [{
			use: newStringOrUndefined(&apos;official&apos;),
			type: {
				coding: [{
					system: newStringOrUndefined(&apos;http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203&apos;),
					code: newStringOrUndefined(&apos;PLAC&apos;)
				}],
				text: newStringOrUndefined(&apos;Placer Identifier&apos;)
			},
			value: newStringOrUndefined(infosExame[&apos;identificadorSequencialUnicoExame&apos;] + &apos;-&apos; + chargeItemId)
		}],
		code: {
			coding: [{
				system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/Service&quot;),
				code: newStringOrUndefined(typeof theCode != &apos;undefined&apos; ? theCode : null)
			}]
		},
		subject: {
		   	reference: newStringOrUndefined(&quot;Patient/&quot; + msg[&apos;doente&apos;][&apos;numSequencial&apos;]),
		   	identifier: {
		       	use: newStringOrUndefined(&apos;official&apos;),
		       	type: {
		           	coding: [{
		               	system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PatientCode&quot;),
		               	code: newStringOrUndefined(&apos;JMS&apos;)
		           	}],
		           	text: newStringOrUndefined(&apos;JMS Identifier&apos;)
		       	},
		       	value: newStringOrUndefined(msg[&apos;doente&apos;][&apos;numSequencial&apos;])
		   	},
		   	display: newStringOrUndefined( msg[&apos;doente&apos;][&apos;nomeDoente&apos;] != &apos;undefined&apos; ? msg[&apos;doente&apos;][&apos;nomeDoente&apos;] : null )
		},
		context: {
			reference: newStringOrUndefined( visitaRefExt != null ? &quot;Encounter/&quot; + visitaRefExt : null)
		},										
		occurrenceDateTime: newStringOrUndefined(dataRelato != null ? dataRelato : (dataValidacao!= null ? dataValidacao : occurenceDateTime)),
		performer: Performer.length != 0 ? Performer : null,
		quantity: {
			value: newNumberOrUndefined(1)
		},
		note: [{
			text: newStringOrUndefined(infosExame[&apos;exameObs&apos;] != null ? infosExame[&apos;exameObs&apos;] : null)
		}]
	}

	return ChargeItem;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>69abe225-7dba-4362-a5df-e12fe5391e07</id>
                <name>createOperationOutcome</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788391</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Creates a FHIR OperationOutcome resource and adds it to the response map with the key &quot;response&quot;.
	@param {String} severity - Indicates whether the issue indicates a variation from successful
		processing. Values: fatal | error | warning | information
	@param {String} code - Describes the type of the issue. The system that creates an
		OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may
		additional provide its own code for the error in the details element. Values: invalid | security |
		processing | transient | informational
	@param {String} details - Additional details about the error. This may be a text description of
		the error, or a system code that identifies the error.
	@param {String} fhirVersion - The FHIR version of the OperationOutcome resource. Values: DSTU2 | DSTU2_1 | 
		   DSTU_HL7ORG | STU3 | R4 | R5
	@param {int} httpStatusCode - The HTTP status code to send back with the response. Defaults to 400
		if not specified.
	@param {Error} e - If included, this will be used to build up the response status message and
		error.
	@param {Boolean} isFormatXML - If true, the resource will be formatted in XML. Otherwise, it will
		be formatted in JSON. If not specified, it will attempt to find the _format parameter in the source
		map, or return JSON.
	@return {Response} The created Response object.
*/
function createOperationOutcome(severity, code, details, fhirVersion, httpStatusCode, e, isFormatXML) {
	if (!httpStatusCode) {
		httpStatusCode = 400;
	}

	if (!isFormatXML &amp;&amp; $s(&apos;parameters&apos;) &amp;&amp; $s(&apos;parameters&apos;).contains(&apos;_format&apos;)) {
		isFormatXML = !FhirUtil.isJSON($s(&apos;parameters&apos;).getParameter(&apos;_format&apos;));
	}

	var outcome = FhirUtil.createOperationOutcome(severity, code, details, fhirVersion);
	var message = isFormatXML ? FhirUtil.toXML(outcome, fhirVersion) : FhirUtil.toJSON(outcome, fhirVersion);
	responseMap.put(&apos;response&apos;, FhirResponseFactory.getResponse(message, httpStatusCode, isFormatXML ? FhirUtil.getMIMETypeXML() : FhirUtil.getMIMETypeJSON()));
	var response = new Response(message);
	response.setStatusMessage(severity.toUpperCase() + &apos; OperationOutcome created with status &apos; + httpStatusCode + &apos;.&apos;);

	if (httpStatusCode &gt;= 400) {
		response.setStatus(Status.ERROR);

		if (e) {
			var customMessage = &apos;Channel &apos; + channelName + &apos;: &apos;;
			if (e.rhinoException) {
				customMessage += &apos;Error on line &apos; + e.rhinoException.lineNumber() + &apos;: &apos;;
			}
			customMessage += e.toString();
	
			var errorContent = com.mirth.connect.util.ErrorMessageBuilder.buildErrorMessage(&apos;FHIR Listener&apos;, customMessage, e.javaException || null);
			if (e.javaException) {
				logger.error(errorContent, e.javaException);	
			} else {
				logger.error(errorContent);
			}
			response.setError(errorContent);
		}
	}

	return response;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>244238ae-b07b-45d1-b796-4be032c44900</id>
                <name>getChargeItem</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Obtém o Id do chargeItem num bundle relacionado a um item code ou a um serviceRequest.Id

	@param {String} msg - Bundle message
	@param {String} arg1 - item code
	@param {String} arg2 - service Request Id
	@return {String} return ChargeItem.Id
*/

function getChargeItem(msg, itemCode, serviceRequestId){

	var chargeItemId = null;
	for (var i = 0; i &lt; msg[&apos;entry&apos;].length; i++){
		if (msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] == &apos;ChargeItem&apos;){

			if (typeof(msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;contained&apos;]) != &apos;undefined&apos; ){
				msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;contained&apos;].find(function(contained){
					if (contained[&apos;resourceType&apos;].includes(&apos;Procedure&apos;) ) {
						contained[&apos;basedOn&apos;].find(function(basedOn){
							if (basedOn[&apos;reference&apos;].includes(serviceRequestId)){
								chargeItemId = msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;id&apos;];
								return chargeItemId;
							}
						})
					}
				})
			}else if (typeof(msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;code&apos;][&apos;coding&apos;]) != &apos;undefined&apos; ){
				msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;code&apos;][&apos;coding&apos;].find(function(coding){
					if ( coding[&apos;system&apos;].includes(&apos;cuf&apos;) &amp;&amp;  !coding[&apos;system&apos;].includes(&apos;thom&apos;) ) {
						if (coding[&apos;code&apos;] == itemCode){
							chargeItemId = msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;id&apos;];
							return chargeItemId;
						}						
					}
				});	
			}
		}
	}

	return chargeItemId;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c06d7e5c-c77d-409b-8ae2-ca835b843794</id>
                <name>getSystemBaseURL</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790966</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito é auxiliar a construção dos campos &quot;system&quot; associados a CodeSystems aquando da análise de uma lista de identificadores. A lista de identificadores, por normal, tem um &apos;sistemaCodificador&apos; e cada
	um destes &apos;sistemaCodificador&apos; deve originar uma base de URL diferente. Por exemplo,
		caso &apos;sistemaCodificador&apos; = &apos;patientcare.id&apos;, o system correspondente ao code a ser enviado terá um system do género &quot;https://bsimple-esb-fhir (...)&quot; ($(&apos;FhirServer_PatientCare_NameSpace&apos;))
		caso &apos;sistemaCodificador&apos; = &apos;glint&apos;, o system correspondente ao code a ser enviado terá um system do género &quot;https://glintt.pt&quot;
		nos restantes caso, o sistema  ser enviado deve ser CUF, pois tratam-se de catálogos CUF: &quot;https://cuf.pt&quot;

	@param {String} sistemaCodificador - sistema Codificador em causa
	@return {String} return http base URL relativo a esse sistema codificador
*/
function getSystemBaseURL(sistemaCodificador) {
	var baseURL = &quot;&quot;;
	if (typeof sistemaCodificador == &quot;string&quot; ) {
		if (sistemaCodificador.toLowerCase().includes(&quot;patientcare&quot;)) {
			var patientcareUrl = configurationMap.get((&apos;FhirServer_PatientCare_Namespace&apos;));
			baseURL = patientcareUrl != null ? patientcareUrl : &quot;&quot;;
			if (patientcareUrl == null) {
				logger.error(&quot;Configuration map variable &apos;FhirServer_PatientCare_Namespace&apos; not defined for use in Code Template getSystemBaseURL()&quot;);
			}
		}
		else if (sistemaCodificador.includes(&quot;glintt&quot;)) {
			baseURL = &quot;https://glintt.pt&quot;;
		} else { //é catálogo cuf
			baseURL = configurationMap.get(&apos;FhirServer_CUFBUS_Namespace&apos;);
		}
	}
	return baseURL;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>1d99918a-7c7c-4886-9e18-329b73f529bc</id>
                <name>mapingAppointmentStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788279</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function allows mapping the states of the Appointment resource to the states covered in PatientCare. 

	@param {String} status - Appointment Status
	@return {String} return status to application
*/
function mapingAppointmentStatus(status) {
	
	switch(status.toLowerCase()) {
		case &quot;booked&quot;: 
			break;
		case &quot;pending&quot;:
			break;
		case &quot;cancelled&quot;:
			break;
		case &quot;proposed&quot;:
			break;
		case &quot;arrived&quot;:
			status = &quot;booked&quot;;
			break;
		case &quot;fulfilled&quot;:
			status = &quot;booked&quot;;
			break;
		case &quot;noshow&quot;:
			status = &quot;cancelled&quot;;
			break;
		case &quot;entered-in-error&quot;:
			break;
		case &quot;checked-in&quot;:
			status = &quot;booked&quot;;
			break;
		case &quot;waitlist&quot;:
			break;
		default:
			break;		
	}

	return status;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fcfb26cf-995b-455c-955a-c9e5b7832529</id>
                <name>validateDate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788118</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate Date formats: yyyy-MM-ddTHH:mm:ss and yyyy-MM-dd

	@param {String} dateString
	@return {String} return boolean true if date format is valid
*/
function validateTimestamp(dateString) {
	var ISOregex = /^(?:\d{4})-(?:\d{2})-(?:\d{2})T(?:\d{2}):(?:\d{2}):(?:\d{2}(?:\.\d*)?)(?:(?:-(?:\d{2}):(?:\d{2})|Z)?)$/;
	return ISOregex.test(dateString);
}


/**
	Validate Date format yyyy-MM-dd

	@param {String} dateString
	@return {String} return boolean true if date format is valid
*/
function validateDate(dateString) {
	var ISOregex = /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/;
	return ISOregex.test(dateString);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>eb373187-823e-4693-a2f9-b5031d95ea10</id>
                <name>validateFhirClinicalStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787978</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR clinical Status: active | recurrence | relapse | inactive | remission | resolved

	@param {String} clinical Status
	@return {String} return boolean true if FHIR clinical Status is valid
*/
function validateFhirClinicalStatus(clinicalStatus) {
	var arrClinicalStatus = [&apos;active&apos;, &apos;recurrence&apos;, &apos;relapse&apos;, &apos;inactive&apos;, &apos;remission&apos;, &apos;resolved&apos;];
	return arrClinicalStatus.includes(clinicalStatus.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>80630059-deea-4efb-92df-20ddd07a2411</id>
                <name>validateFhirDocumentStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790213</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR Document Reference Status:  current | superseded | entered-in-error

	@param {String} Document Reference Status
	@return {String} return boolean true if FHIR Document Reference Status is valid
*/
function validateFhirDocumentStatus(docStatus) {
	var arrDocStatus = [&apos;current&apos;, &apos;superseded&apos;, &apos;entered-in-error&apos;];
	return arrDocStatus.includes(docStatus.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee50fb32-fd62-485c-b9b5-03e865055502</id>
                <name>validateFhirEventStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788051</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR clinical Status: preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown

	@param {String} clinical Status
	@return {String} return boolean true if FHIR clinical Status is valid
*/
function validateFhirEventStatus(eventStatus) {
	var arrEventStatus = [&apos;preparation&apos;, &apos;in-progress&apos;, &apos;not-done&apos;, &apos;on-hold&apos;, &apos;stopped&apos;, &apos;completed&apos;, &apos;entered-in-error&apos;, &apos;unknown&apos;];
	return arrEventStatus.includes(eventStatus.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>12fb2da1-439a-4149-ae2f-adfcd6651095</id>
                <name>validateFhirGender</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788633</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR gender: male | female | other

	@param {String} genderString
	@return {String} return boolean true if FHIR gender is valid
*/
function validateFhirGender(gender) {
	var arrGender = [&apos;male&apos;, &apos;female&apos;, &apos;other&apos;];
	return arrGender.includes(gender.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6cc8a9f9-7d96-4990-96a8-0ff41be6b101</id>
            <name>Logger Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089520</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Funções auxiliares para o logging de mensagens dos canais</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>bc286d01-89d0-4a3f-916e-09a25a4e68c7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>68dfb5b9-bb8e-418d-8425-79fe31bd7538</id>
                <name>generateLogMsg</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to build and return a log msg, originating from any channel.
	Documentação função: https://b-simple.atlassian.net/wiki/x/AoACBg
	Documentação Entity e Tags: https://b-simple.atlassian.net/wiki/x/AgB_Bg

	@param theEntity {String} - string that denotes the group of messages the message belongs to, i.e appointment, document, cda, accident, etc.
	@param {Class} message - ImmutableConnectorMessage Class message containing information about all connectors that a
		message passed through
	@param tagsArr {Array} - array of user-defined and relevant tags that should be associated with the message
	@param sourceServer {String} - message&apos;s source app/entity (name of the app or entity responsible for sending the messge to the channel)
	@param destinationServerMap {Map} - Map&lt;int,string&gt; , where the key is the destination&apos;s metadataID and the value is the entity to which such destination&apos;s message was sent to
	@param {Array} sourceMetadataArr - source metadata: metadata associated with the source processing 
	@param {Array} destinationsMetadataArr - destinations metadata: metadata associated with the destinations processing
	@return {Object JSON} message log
*/
function generateLogMsg(theEntity, message, tagsArr, sourceServer, destinationServerMap, sourceMetadataArr, destinationsMetadataMap) {
	if (message == undefined || message == null) {
		logger.info(&quot;sendMsgInfoLogChannel:message --&gt; message argument is mandatory!&quot;);
	} else {
		try {
			var logMsg = new Object();
		
			// messageSummary
			var messageSummaryObj = new Object();
			//messageID
			messageSummaryObj.messageId = message.getConnectorMessages().get(0).getMessageId();
			//messageOriginalID - não funciona ...
			//messageSummaryObj.messageOriginalId = message.getOriginalId();
			//channelID
			messageSummaryObj.channelId = message.getConnectorMessages().get(0).getChannelId();
			//serverID
			messageSummaryObj.serverId = message.getConnectorMessages().get(0).getServerId();
			//channelName
			messageSummaryObj.channelName = message.getConnectorMessages().get(0).getChannelName();
			//lastDeployedDate
			try {
				var controller = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createEngineController();
				var dashboardStatus = controller.getChannelStatus(message.getConnectorMessages().get(0).getChannelId());
				messageSummaryObj.lastDeployedDate = auxCalendarParse(dashboardStatus.getDeployedDate());
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:lastDeployedDate --&gt; &quot; + error.toString());
				messageSummaryObj.lastDeployedDate = null;
			}
			//entity
			messageSummaryObj.entity = theEntity == undefined ? null : theEntity;
			//tags
			messageSummaryObj.tags = (tagsArr == undefined || tagsArr == null) ? new Array() : tagsArr;
			//logDate
			var datestr = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
			var dateUTC = DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
			messageSummaryObj.logDate = dateUTC;
			//status
			var statusObj = new Object();
			statusObj.error = false;
			statusObj.code = null;
			statusObj.message = null;
			try {
				message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName (inclui Source também)
					value = parseInt(value);
					if (value != 0) { // só as destinations é que têm Response relativamente a erros, logo não dá para ir buscar Response de erro na Source (Source =metadataId 0)
						//code - testar no que isto dá! ??
						if (message.getConnectorMessages().get(value).getStatus().toString() == &apos;ERROR&apos;) {
							statusObj.error = true;
							/*
							if (statusObj.code != null) {
								statusObj.code = statusObj.code + &quot;;&quot; + message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							} else {
								statusObj.code = message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							}
							*/
							if (statusObj.message != null) {
								statusObj.message = statusObj.message + &quot;;&quot; + auxGetStatusMessage(value);
							} else {
								statusObj.message = auxGetStatusMessage(value);
							}
						}
					}
				});
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel: messageSummary status --&gt; &quot; + error.toString());
			}
			messageSummaryObj.status = statusObj;
		
			//metaData
			//messageSummaryObj.metaData = (summMetadataArr == undefined || summMetadataArr == null) ? new Array() : summMetadataArr;
			try {
				var listMetadataCol = com.mirth.connect.server.controllers.ChannelController.getInstance().getMetaDataColumns(messageSummaryObj.channelId);
				var metadataColArr = new Array();
				for (var i = 0; i &lt; listMetadataCol.size(); i++) {
					var metaObj = new Object();
					metaObj.name = listMetadataCol.get(i).getName();
					var mappingName = listMetadataCol.get(i).getMappingName();
					metaObj.value = (message.getConnectorMessages().get(0).getChannelMap().get(mappingName) == undefined) ? null : message.getConnectorMessages().get(0).getChannelMap().get(mappingName).toString(); // para ficarem todos como string
					if (metaObj.value != null) {
						metadataColArr.push(metaObj);
					}
				}
				messageSummaryObj.metaData = metadataColArr;
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
				messageSummaryObj.metadata = null;
			}
			
			logMsg.messageSummary = messageSummaryObj;
		
			// ------------------------
			//content
			var contentObj = new Object();
			//content.source
			var sourceObj = new Object();
			//content.source.server
			sourceObj.server = sourceServer == undefined ? null : sourceServer;
			//content.source.status
			sourceObj.status = message.getConnectorMessages().get(0).getStatus().toString();
			//content.source.statusMessage
			sourceObj.statusMessage = auxGetStatusMessage(0);
			//content.source.message
			sourceObj.message = isJSON(message.getConnectorMessages().get(0).getRawData()) ? JSON.parse(message.getConnectorMessages().get(0).getRawData()) : message.getConnectorMessages().get(0).getRawData(); //msg antes de passar pelo preprocessor e antes de ser mudada no Transformer
			//content.source.dataType
			sourceObj.dataType = message.getConnectorMessages().get(0).getRaw().getDataType();
			//content.source.date
			var dateCalendar = message.getConnectorMessages().get(0).getReceivedDate();
			var dateUTC = auxCalendarParse(dateCalendar);
			sourceObj.date = dateUTC;
			//content.source.metadata
			sourceObj.metaData = (sourceMetadataArr == undefined || sourceMetadataArr == null) ? new Array() : sourceMetadataArr;
			//content.source.responseMessage
			if (message.getConnectorMessages().get(0).getResponseData() == null) { // no response
				sourceObj.responseMessage = null;
			} else if (message.getConnectorMessages().get(0).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
				sourceObj.responseMessage = null;
			} else { //houve response 
				sourceObj.responseMessage = isJSON(message.getConnectorMessages().get(0).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(0).getResponseData().getMessage()) : message.getConnectorMessages().get(0).getResponseData().getMessage();
			}
			contentObj.source = sourceObj;
		
			// -------------------------
			//content.destinations
			var destinationsArray = new Array();
			message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName
				value = parseInt(value);
				if (value != 0) { //ignorar Source (metadataId=0)
					//logger.info(&quot;value= &quot; + typeof(value) + &quot; &quot; + value + &quot;;&quot; + &quot;key= &quot; + typeof(key) + &quot; &quot; + key);
					var destinationObj = new Object();
					//content.destinations.server
					if (destinationServerMap != undefined &amp;&amp; destinationServerMap != null) {
						if (destinationServerMap.has(value)) {
							destinationObj.server = destinationServerMap.get(value);
						} else {
							destinationObj.server = null;
						}
					} else {
						destinationObj.server = null;
					}
					//content.destinations.destinationId
					destinationObj.destinationId = value;
					//content.destinations.destinationName
					destinationObj.destinationName = key;
					//content.destinations.status
					destinationObj.status = message.getConnectorMessages().get(value).getStatus().toString();
					//content.destinations.statusMessage
					destinationObj.statusMessage = auxGetStatusMessage(value);
					//content.destinations.message
					try {
						destinationObj.message = isJSON(message.getConnectorMessages().get(value).getEncodedData()) ? JSON.parse(message.getConnectorMessages().get(value).getEncodedData()) : message.getConnectorMessages().get(value).getEncodedData();
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel: destination message --&gt; &quot; + error.toString());
						destinationObj.message = null;
					}
					//logger.info(message.getConnectorMessages().get(value).getMessageContent(ContentType.SENT));
					//content.destinations.dataType
					// destinationObj.dataType = message.getConnectorMessages().get(value).getEncoded().getDataType();
					try {
						var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
						var channel = channelController.getChannelByName(message.getConnectorMessages().get(0).getChannelName().toString());
						var connectors = channel.getDestinationConnectors().toArray();
						// Iterate through the connectors
						for each (var connector in connectors) {
						    // Check if the current connector matches the desired connector name
						    if (connector.getName() == key) {
						    		destinationObj.dataType = connector.getTransformer().getOutboundDataType();
						    		break;
						    }
						}
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
						destinationObj.dataType = null;
					}
					
					//content.destinations.date
					var dateCalendar = message.getConnectorMessages().get(value).getSendDate();
					if (dateCalendar != null) { // destination QUEUED
						var dateUTC = auxCalendarParse(dateCalendar);
						destinationObj.date = dateUTC;
					} else {
						destinationObj.date = null;
					}

					//content.destinations.metaData
					if (destinationsMetadataMap != undefined &amp;&amp; destinationsMetadataMap != null) {
						if (destinationsMetadataMap.has(value)) {
							destinationObj.metaData = destinationsMetadataMap.get(value) == null ? new Array() : destinationsMetadataMap.get(value);
						} else {
							destinationObj.metaData = new Array();
						}
					} else {
						destinationObj.metaData = new Array();
					}
		
					//content.destinations.responseMessage
					if (message.getConnectorMessages().get(value).getResponseData() == null) { // no response
						destinationObj.responseMessage = null;
					} else if (message.getConnectorMessages().get(value).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
						destinationObj.responseMessage = null;
					} else { //houve response
						destinationObj.responseMessage = isJSON(message.getConnectorMessages().get(value).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(value).getResponseData().getMessage()) : message.getConnectorMessages().get(value).getResponseData().getMessage();
					}
					destinationsArray.push(destinationObj);
				}
			});
			contentObj.destinations = destinationsArray;
			
			logMsg.content = contentObj;
			//logger.info(JSON.stringify(logMsg));

			//send it
			return JSON.stringify(logMsg);

			/*
			var respLogChannel = router.routeMessage(&apos;Logs_WHS-OUT&apos;, JSON.stringify(logMsg));
			if (respLogChannel == null || respLogChannel == undefined) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			} else if (respLogChannel.getStatus() == Status.ERROR) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			}
			*/

		} catch (error) {
			logger.info(&quot;sendMsgInfoLogChannel:geral  --&gt; &quot; + error.toString());
		}
	}	
}

function auxCalendarParse(dateCalendar) {
	var theMonth = dateCalendar.get(dateCalendar.MONTH) +1;
	var theMonthStr = theMonth.toString().padStart(2,&apos;0&apos;);
	var datestr = dateCalendar.get(dateCalendar.YEAR).toString() + theMonthStr + dateCalendar.get(dateCalendar.DAY_OF_MONTH).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.HOUR_OF_DAY).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.MINUTE).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.SECOND).toString().padStart(2,&apos;0&apos;);
	return DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
}

function auxGetStatusMessage(connMetadaId) {
	connMessage = message.getConnectorMessages().get(connMetadaId);
	if (connMessage.getStatus().toString() == &quot;ERROR&quot;) {
		if (connMessage.getProcessingError() != &quot;&quot;) {
			return connMessage.getProcessingError();
		} else if (connMessage.getPostProcessorError() != &quot;&quot;) {
			return connMessage.getPostProcessorError();
		} else if (connMessage.getResponseError() != &quot;&quot;) {
			return connMessage.getResponseError();
		}
	}
	return null;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>a3267879-bfbd-4fd7-8faf-79b8ce019cef</id>
            <name>Mappers</name>
            <revision>8</revision>
            <lastModified>
              <time>1730893909840</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Mapeamentos de dados de varios sistemas externos</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>2fb4b788-fa00-4ba1-9d27-794110d1f1eb</id>
                <name>convertCodeSystems</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792624</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converte um codesystem para o campo sistemaCodificador do PatientCare, por exemplo se recebermos do sistema externo 
	&quot;https://thom-fhir.apis.sat.jmslab.pt/fhir/CodeSystem/FunctionalHealthUnit&quot; -&gt; THOM@fhir/CodeSystem/FunctionalHealthUnitForSchedule
	garantindo assim que se o URL do sistema externo mudar, a tag na BD mantém-se

	@param {String} URL do sistema codificador
	@return {String} retorna o sistema codificador com a tag que identifica o sistema codificador sem dependencia do URL
*/
function convertCodeSystems(fullUrlCodeSystem) {

	var convertedCodeSystem = null;
	if(fullUrlCodeSystem.includes($(&apos;FhirServer_IMTHOM_Host&apos;))){
		convertedCodeSystem = fullUrlCodeSystem.replace($(&apos;FhirServer_IMTHOM_Host&apos;), &quot;THOM@&quot;).replace(&quot;/&quot;, &apos;&apos;);
	}else if (fullUrlCodeSystem.includes($(&apos;FhirServer_CUFBUS_Namespace&apos;))){
		convertedCodeSystem = fullUrlCodeSystem.replace($(&apos;FhirServer_IMTHOM_Host&apos;), &quot;CUF@&quot;).replace(&quot;/&quot;, &apos;&apos;);
	}

	return convertedCodeSystem;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c97a884e-6f38-45fb-97a8-4d3cef47fa15</id>
                <name>mapCarePlanSurgicalPriority</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788677</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de prioridade da proposta cirurgica (#99034) TODO: A Ser removido quando o PatientCare enviar uma lista (#98331 e #98562)

	@param {String} arg1 - codigo codigo interno PatientCare
	@return {String} return código sistema externo
*/
function mapCarePlanSurgicalPriority(codigo){

    var priority = null;

    switch (codigo) {
        case &quot;1&quot;:
            priority = &quot;routine&quot;;
            break;
        case &quot;2&quot;:
            priority = &quot;asap&quot;;
            break;
        case &quot;5&quot;:
            priority = &quot;urgent&quot;;
            break;
        default:
            priority = &quot;routine&quot;;
    }

    return priority;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f6b5728a-80af-41e5-b1a2-e5b91e032794</id>
                <name>mapCarePlanSurgicalRegime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791228</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento do regime (Tipo de Cirurgia) da proposta cirurgica (#99034) TODO: A Ser removido quando o PatientCare enviar uma lista (#98331 e #98562)

	@param {String} arg1 - codigo PatientCare
	@return {String} return regime
*/
function mapCarePlanSurgicalRegime(codigo){

    var regime = null;

    switch (codigo) {
        case &quot;2&quot;:
            regime = &quot;2&quot;;
            break;
        case &quot;1&quot;:
            regime = &quot;3&quot;;
            break;
        case &quot;4&quot;:
            regime = &quot;2&quot;;
            break;
        default:
            regime = &quot;&quot;;
    }

    return regime;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>59f5da96-4b1e-4339-9cf7-b028307845bd</id>
                <name>mapDocumentLoinc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792141</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Esta funcao determina qual o código Loinc e respectiva descricao para um documento tendo em conta o titulo, o subtitulo e a descricao da categoria

	@param {String} titulo do docuemnto
	@param {String} subtitulo do documento
	@param {String} descricao da categoria do documento
	@return {Object} return Loinc Object com o código (loinc) e descr (descricao do código)
*/
function mapDocumentLoinc(titulo, subtitulo, categoriaDescr) {
	
	var loinc = null;
	var loincDescr = null;
	var Loinc = new Object();
	
	if (titulo.includes(&apos;Relatório de AP&apos;)){
		loinc = &apos;34878-9&apos;;
		loincDescr = &apos;Emergency medicine Note&apos;;
	}else if (titulo.includes(&apos;Internamento Geral&apos;) &amp;&amp; subtitulo.includes(&apos;Codificadores&apos;)){
		loinc = &apos;75321-0&apos;;
		loincDescr = &apos;Clinical finding&apos;;
	}else if (titulo.includes(&apos;Internamento Geral&apos;)){
		loinc = &apos;101005-7&apos;;
		loincDescr = &apos;Hospitalist Discharge summary&apos;;
	}else if (titulo.includes(&apos;Internamento Cuidados Intensivos&apos;)){
		loinc = &apos;34100-8&apos;;
		loincDescr = &apos;Intensive care unit Consult note&apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; categoriaDescr.includes(&apos;Administrativo&apos;) ){
		loinc = &apos;51851-4&apos;;
		loincDescr = &apos;Administrative note&apos;;
	}else if (titulo.includes(&apos;Atestado de Carta de Condução&apos;)){
		loinc = &apos;104990-7&apos;;
		loincDescr = &apos;Driver license medical fitness certificate&apos;;
	}else if (titulo.includes(&apos;Consentimento&apos;)){
		loinc = &apos;59284-0&apos;;
		loincDescr = &apos;Consent Document&apos;;
	}else if (titulo.includes(&apos;Relatório de Consulta&apos;) &amp;&amp; subtitulo.includes(&apos;Anestesia&apos;)){
		loinc = &apos;34751-8&apos;;
		loincDescr = &apos;Anesthesiology Preoperative evaluation and management note&apos;;
	}else if ([&apos;Relatório de Consulta&apos;, &apos;Declaração&apos;, &apos;Relatório Clínico&apos;].includes(titulo)){
		loinc = &apos;75321-0&apos;;
		loincDescr = &apos;Clinical finding&apos;;
	}else if ([&apos;Requisição de MCDT&apos;, &apos;Relatório de Pequena Cirurgia&apos;, &apos;Relatório de Proposta Cirúrgica&apos;].includes(titulo)){
		loinc = &apos;34765-8&apos;;
		loincDescr = &apos;General medicine note&apos;;
	}else if (titulo.includes(&apos;Relatório de Bloco&apos;)){
		loinc = &apos;11504-8&apos;;
		loincDescr = &apos;Surgical operation note&apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; [&apos;ADSE - Prescrições&apos;, &apos;Prescrições&apos;].includes(categoriaDescr)){
		loinc = &apos;57828-6&apos;;
		loincDescr = &apos;Prescription list document&apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; [&apos;Documentos clínicos&apos;, &apos;Documentos clínicos ADSE&apos;, &apos;Documentos gerais&apos;, &apos;Enfermagem&apos;, &apos;Imagem&apos;,  &apos;Nota de alta&apos;,  &apos;Relatório médico&apos;, &apos;Relatório de alta consulta&apos;, &apos;Requisição de exames&apos;].includes(categoriaDescr)){
		loinc = &apos;34765-8&apos;;
		loincDescr = &apos;General medicine note &apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; categoriaDescr.includes(&apos;Resultados patologia clínica&apos;)){
		loinc = &apos;102009-8&apos;;
		loincDescr = &apos;Clinical pathology Laboratory report&apos;;
	}
	else{
		loinc = &apos;34765-8&apos;;
		loincDescr = &apos;General medicine note&apos;;
	}


	Loinc.code = loinc;
	Loinc.descr = loincDescr;
	
	return Loinc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d089bae-49ee-43dc-9cc9-eeae588eacdf</id>
                <name>mapFuncao</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788812</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de função de profissional do PatientCare para o sistema externo (CUF); 
		1- Médico Relator
		2- Médico Validador
		3- Executante

	@param {String} função PatientCare
	@return {String} return map
*/
// Mapping Professional Role
function mapFuncao(funcaoPC){
	map = null;
	switch (funcaoPC){
		case 1:
			map = &apos;MR&apos;;
			break;
		case 2:
			map = &apos;MV&apos;;
			break;
		default:
			map = &apos;MED&apos;;
			break; 
	}
	return map;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83ba1284-a199-4699-84f7-96ffd17ccd24</id>
                <name>mapHospital</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790427</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de hospital do id PatientCare para o código sistema externo (CUF)

	@param {String} hospitalId
	@return {String} return map
*/
// Mapping HospitalId
function mapHospital(hospitalId){
	map = null;
	switch (hospitalId){
		case &quot;201&quot;:
			map = &apos;HCP&apos;;
			break;
		case &quot;202&quot;:
			map = &apos;HCP&apos;;
			break;
		case &quot;204&quot;:
			map = &apos;HCV&apos;;
			break;
		case &quot;214&quot;:
			map = &apos;CCS&apos;;
			break;
		case &quot;260&quot;:
			map = &apos;CCC&apos;;
			break;
		case &quot;261&quot;:
			map = &apos;OT&apos;;
			break;
		case &quot;286&quot;:
			map = &apos;HCIS&apos;;
			break;
		case &quot;287&quot;:
			map = &apos;CCTV&apos;;
			break;
		case &quot;288&quot;:
			map = &apos;CUFC&apos;;
			break;
		case &quot;289&quot;:
			map = &apos;HCS&apos;;
			break;
		case &quot;290&quot;:
			map = &apos;CCAL&apos;;
			break;
		case &quot;291&quot;:
			map = &apos;CLRA&apos;;
			break;
		case &quot;293&quot;:
			map = &apos;CMFL&apos;;
			break;
		case &quot;294&quot;:
			map = &apos;CNSB&apos;;
			break;
		case &quot;295&quot;:
			map = &apos;HACR&apos;;
			break;
		case &quot;296&quot;:
			map = &apos;CMDS&apos;;
			break;
		case &quot;297&quot;:
			map = &apos;CLAL&apos;;
			break;
		case &quot;298&quot;:
			map = &apos;CMDB&apos;;
			break;
		case &quot;299&quot;:
			map = &apos;CBRR&apos;;
			break;
		case &quot;300&quot;:
			map = &apos;CMTJ&apos;;
			break;
		case &quot;301&quot;:
			map = &apos;CMFR&apos;;
			break;
		case &quot;302&quot;:
			map = &apos;CSDR&apos;;
			break;
		case &quot;303&quot;:
			map = &apos;CUFon&apos;;
			break;
		case &quot;304&quot;:
			map = &apos;CSJM&apos;;
			break;
		case &quot;305&quot;:
			map = &apos;CBLM&apos;;
			break;
		case &quot;306&quot;:
			map = &apos;CALV&apos;;
			break;
		case &quot;307&quot;:
			map = &apos;CINS&apos;;
			break;
		case &quot;308&quot;:
			map = &apos;HCUF&apos;;
			break;
		case &quot;309&quot;:
			map = &apos;CPRD&apos;;
			break;
		default:
			map = &apos;&apos; + hospitalId;
			break; 
	}
	return map;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>01087435-3581-4899-a043-b3b766ffb459</id>
                <name>mapPerfil</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787776</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de perfil de profissional do PatientCare para o sistema externo (CUF)

	@param {String} Perfil PatientCare
	@return {String} return map
*/
// Mapping Professional Profile
function mapPerfil(perfilPC){
	map = null;
	switch (perfilPC){
		case 1:
			map = &apos;MED&apos;;
			break;
		case 2:
			map = &apos;ENF&apos;;
			break;
		case 3:
			map = &apos;TECD&apos;;
			break;
		default:
			map = &apos;MED&apos;;
			break; 
	}
	return map;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>46e363dc-757f-4f98-9492-37dca92e00dd</id>
                <name>mapSurgicalIncisionLaterality</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791847</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento da lateralidade da proposta cirurgica

	@param {String} arg1 - codigo PatientCare
	@return {String} return lateralidade do catálogo THOM
*/
function mapSurgicalIncisionLaterality(codigo){

    var laterality = null;

    switch (codigo) {
        case &quot;N&quot;:
            laterality = &quot;4&quot;;
            break;
        default:
            laterality = codigo;
    }

    return laterality;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6df54a97-f980-47f7-a86a-788d32a98a16</id>
            <name>THOM API Helper Functions</name>
            <revision>11</revision>
            <lastModified>
              <time>1730915907338</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>6bfbe323-d3b2-41f5-b831-125601788430</id>
                <name>getAccidentIncapacityTypeByCode</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função que converte, a partir da consulta à API do THOM, o código de catálogo em UUID de THOM para o catálogo AccidentIncapacityType

	@param {String} arg1 -inputCode (código de catálogo)
	@return {String} return Código UUID de THOM
*/

function getAccidentIncapacityTypeByCode(inputCode) {
	var parameters = new Object();
	var httpPostURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/$find-matches&quot;;

	parameters.resourceType = &quot;Parameters&quot;;
	parameters.parameter = [];
	
	parameterSystem = new Object();
	parameterSystem.name = &apos;system&apos;;
	parameterSystem.valueUri = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/AccidentIncapacityType&apos;;
	
	parameters.parameter.push(parameterSystem);

	parameterProperty = new Object();
	parameterProperty.name = &apos;property&apos;;
	parameterProperty.part = [];
	partCode = new Object();
	partCode.name = &apos;code&apos;;
	partCode.valueCode = &apos;code&apos;;
	parameterProperty.part.push(partCode);

	partValue = new Object();
	partValue.name = &apos;value&apos;;
	partValue.valueString = inputCode;
	parameterProperty.part.push(partValue);
	parameters.parameter.push(parameterProperty);


	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpPost(httpPostURL, JSON.stringify(parameters), authHeader);

	var accidentIncapacityType = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var resource = JSON.parse(httpResp.responseMessage);
			if (typeof(resource.parameter) != &apos;undefined&apos;){
				accidentIncapacityType = resource.parameter[0].part[0].valueCoding.code;
			}
		}
	}

	return accidentIncapacityType;	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>db5829bf-47fe-4df9-9275-98545493d366</id>
                <name>GetAccidentInfo</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790265</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dado o id externo de um EpisodeOfcare, consultar no sistema externo se essa informação é referente a um processo de sinistro. Em caso afirmativo, constrói
	a informação do processo de sinistro e faz o seu retorno.

	@param {String} episodeOfCareGUID - id externo de um EpisodeOfcare
	@return {Object} processo de sinistro
*/
function getAccidentInfo(episodeOfCareGUID) {

		var returnMessage = {};

		returnMessage.processoSinistro = {};
		returnMessage.tipoSinistro = null;
		returnMessage.statusCode = &quot;500&quot;;
		returnMessage.statusMessage = &quot;Internal Server Error&quot;;

		var processoSinistro = {};
		 
		 var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/EpisodeOfCare/&quot; + episodeOfCareGUID;
		 	 
		 httpResp = httpGet(httpGetURL,null);
		 
		 if(httpResp.statusCode === &quot;200&quot;){

			if(isJSON(httpResp.responseMessage)){
		 
				episodeOfCare = JSON.parse(httpResp.responseMessage);
				
				var tipo = &quot;&quot;;
				
				if (episodeOfCare &amp;&amp; episodeOfCare.type) {
					episodeOfCare.type.forEach(function(type) {
						if (type.coding) {
							type.coding.forEach(function(coding) {
								if (coding.system &amp;&amp; coding.system.includes(&quot;/CodeSystem/EpisodeOfCareType&quot;)) {
									tipo = coding.code; 
								}
							});
						}
					});
				}
				
				if( tipo === &quot;5&quot;){

					processoSinistro.sinistroIdentificadores = [];
					sinistroIdentificadores = {};
					sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.id&quot;;
					sinistroIdentificadores.codigo = episodeOfCareGUID;

					processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);

					if (episodeOfCare &amp;&amp; episodeOfCare.identifier) {
						sinistroIdentificadores = {};
						sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.identifier&quot;;
						sinistroIdentificadores.codigo = episodeOfCare.identifier[0].value;

						processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);
					}

					
					processoSinistro.subsistemaIntRefExt = null;
					processoSinistro.subsistemaDescr = null;
					processoSinistro.ramoDescr = null;
					processoSinistro.ramoIdentificadores = [];
					//var ramoIdentificador = {};
					//ramoIdentificador.codigo = null;
					//ramoIdentificador.sistemaCodificador = null;

					//processoSinistro.ramoIdentificadores.push(ramoIdentificador);

					processoSinistro.numProcesso = null;
					processoSinistro.nomeSegurado = null;
					processoSinistro.tipoSinistradoIdentificadores = [];
					processoSinistro.tipoSinistradoDescr = null;
					processoSinistro.dataAberturaProcesso = null;

					var sinistro  = {};

					sinistro.data = null;
					sinistro.descr = null;
					sinistro.localDescr = null;
					sinistro.transporteChegadaIdentificadores = [];
					
					if(episodeOfCare.period &amp;&amp; episodeOfCare.period.start){
						processoSinistro.dataAberturaProcesso = java.time.OffsetDateTime.parse(episodeOfCare.period.start).toInstant().toString();
					}

					if (episodeOfCare &amp;&amp; episodeOfCare.extension) {
					episodeOfCare.extension.forEach(function(extension1) {
						if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.HealthSystem&quot;)) {
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;HealthSystem&quot;) {
									if (extension2.valueReference.reference){
										var organizationId = extension2.valueReference.reference;
										var organization = getOrganization(organizationId.split(&quot;/&quot;)[1]);
										processoSinistro.subsistemaIntRefExt = organization.intRefExt;
										processoSinistro.subsistemaDescr = organization.name;
									}
									
									
								}
								else if (extension2.url &amp;&amp; extension2.url === &quot;InsuredName&quot;) {
									processoSinistro.nomeSegurado = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;PolicyNumber&quot;) {
									processoSinistro.numBeneficiario = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;ExternalCode&quot;) {
									processoSinistro.numProcesso = extension2.valueString; 
								}
							});
						}else if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.Accident&quot;)) { // ?? ir buscar aqui tipoSinistrado e tipoTransporte
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;Date&quot;) {
									sinistro.data = extension2.valueDate + &quot;T00:00:00Z&quot;; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Description&quot;) {
									sinistro.descr = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Type&quot;) {
									if(extension2.valueCoding &amp;&amp; extension2.valueCoding.system &amp;&amp; extension2.valueCoding.display ){
										var ramoIdentificador = {};
										ramoIdentificador.codigo = extension2.valueCoding.code;
										ramoIdentificador.sistemaCodificador = &quot;THOM&quot;;

										processoSinistro.ramoIdentificadores.push(ramoIdentificador);

										processoSinistro.ramoDescr = extension2.valueCoding.display;
									}
								} else if (extension2.url &amp;&amp; extension2.url === &quot;TransportType&quot;) {
									var transporteIdentificador = {};
									transporteIdentificador.codigo = extension2.valueCoding.code;
									transporteIdentificador.sistemaCodificador = &quot;THOM&quot;;
									sinistro.transporteChegadaIdentificadores.push(transporteIdentificador);

									sinistro.transporteChegadaDescr = extension2.valueCoding.display;
								
								}else if (extension2.url &amp;&amp; extension2.url === &quot;InjuredPartyType&quot;) {
									var tipoSinistradoIdentificador = {};
									tipoSinistradoIdentificador.codigo = extension2.valueCoding.code;
									tipoSinistradoIdentificador.sistemaCodificador = &quot;THOM&quot;;
									processoSinistro.tipoSinistradoIdentificadores.push(tipoSinistradoIdentificador);

									processoSinistro.tipoSinistradoDescr = extension2.valueCoding.display;
								} else if (extension2.url &amp;&amp; extension2.url === &quot;Local&quot;) {
									sinistro.localDescr = extension2.valueString ? extension2.valueString : null;
								}
							});
						}
					});
				}

					
					
					processoSinistro.sinistro = sinistro;
					returnMessage.processoSinistro = processoSinistro;
					returnMessage.tipoSinistro = true;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;OK&quot;;
				
				}else{
					// EpisodeOfCare não é do tipo Sinistro
					
					returnMessage.processoSinistro = null;
					returnMessage.tipoSinistro = false;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;episodeOfCare não é do tipo sinistro&quot;;
				}
			
		 
		 	}else{
				//resposta ao pedido API não é JSON
				returnMessage.processoSinistro = null;
				returnMessage.tipoSinistro = null;
				returnMessage.statusCode = &quot;400&quot;;
				returnMessage.statusMessage = &quot;Formato inválido devolvido pela API&quot;;
		 		
		 	}
			
		 		
		 }else{
		 	// Pedido API não retorna código 200
			returnMessage.processoSinistro = null;
			returnMessage.tipoSinistro = null;
			returnMessage.statusCode = httpResp.statusCode; // &gt;= 400
			returnMessage.statusMessage = &quot;API Error: &quot; + httpResp.statusCode + &apos; - &apos; + (typeof httpResp.statusText != &apos;undefined&apos; ? httpResp.statusText : httpResp.responseMessage) ;
			
		 
		 }

		 return returnMessage;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>1b5b099a-483d-425f-ad76-e0141c8f4237</id>
                <name>getFacility</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787810</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Facility (cama, área, local, etc)

	@param {String} - facility name
	@param {String} - isHealthCenter (0 - No; 1- Yes)
	@return {String} return facility UUID
*/
function getFacility(facilityName, isHealthCenter) {

	var boolHealthCenter = (isHealthCenter != null) ? isHealthCenter : 0;
	
	var facilityUUID = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location?name=&quot; + encodeURIComponent(facilityName) + &quot;&amp;isHealthCenter=&quot; + boolHealthCenter, authHeader);
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			resposta.entry.find(function(resource){
				resource.resource.alias.find(function(alias){
					if (alias === String(facilityName) ){
						facilityUUID = resource.resource.id;
					}
				});
			})
	    		
		}
	}

	return facilityUUID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c71850ca-03ed-4ac8-91b5-88fa6a65b6ca</id>
                <name>getFacilityDescription</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730915907351</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM the information about Location (cama, área, local, etc) and returns the description = Código Serviço

	@param {String} - facility UUID
	@return {String} return facility description
*/
function getFacilityDescription(facilityUUID) {
	
	var facilityDescription = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location/&quot; + facilityUUID);

	channelMap.put(&quot;GetLocationApi&quot;, httpResp);
	
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			facilityDescription = resposta.description;
		}
	}

	return facilityDescription;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5e48274b-22ab-4d11-94f7-1b0bc29c8b72</id>
                <name>getGeneralInfoAppointment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791695</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Appoitment Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} apppointmentRes - o Appointment Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoAppointment(apppointmentRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof apppointmentRes[&apos;supportingInformation&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; apppointmentRes[&apos;supportingInformation&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( apppointmentRes[&apos;supportingInformation&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}
	
	if (typeof apppointmentRes[&apos;extension&apos;] != &apos;undefined&apos;){
		apppointmentRes[&apos;extension&apos;].find(function(extension){
			if (extension[&apos;url&apos;].includes(&apos;Appointment.Encounter&apos;)){
				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.id&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;reference&apos;].split(&quot;/&quot;)[1];
				respObj.episodioIdentificadores.push(episodioIdentificador);

				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.identifier&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;display&apos;];
				respObj.episodioIdentificadores.push(episodioIdentificador);
			}
		})
	}
      
     ////	Dados do Doente
     for (var j = 0; j &lt; apppointmentRes[&apos;participant&apos;].length; j++){  
		if(apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;reference&apos;].includes(&quot;Patient&quot;)){
			respObj.doente.nomeDoente = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;display&apos;];
		   	respObj.doente.numSequencial = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;identifier&apos;][&apos;value&apos;]; 
		}
     }
      
	// agendamentoIdentificadores
	if (typeof apppointmentRes[&apos;id&apos;] != &quot;undefined&quot; &amp;&amp; apppointmentRes[&apos;id&apos;] != &quot;&quot;) {
		agendamentoIdentificadoresObj = new Object();
		agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
		agendamentoIdentificadoresObj.codigo = apppointmentRes[&apos;id&apos;];	// nº do agendamento
		respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
	}

	// tipoAgendamentoIdentificadores
	apppointmentRes[&apos;serviceCategory&apos;].find(function(serviceCategory){
		serviceCategory[&apos;coding&apos;].find(function(codingSC){ 
			if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; !codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;) ){
				var objCUF= {};
				objCUF.sistemaCodificador = &quot;CUF@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objCUF.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objCUF);
			} else if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;)) {
				var objTHOM = {};
				objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objTHOM.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objTHOM);
			}
		});
	});

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5df4529e-ac29-482a-a8c8-6b86c2434803</id>
                <name>getGeneralInfoEncounter</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789003</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Encounter Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} encounterRes - o Encounter Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoEncounter(encounterRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof encounterRes[&apos;episodeOfCare&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; encounterRes[&apos;episodeOfCare&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( encounterRes[&apos;episodeOfCare&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}

	respObj.doente.numSequencial = encounterRes[&apos;subject&apos;][&apos;identifier&apos;][&apos;value&apos;];
	respObj.doente.nomeDoente = encounterRes[&apos;subject&apos;][&apos;display&apos;];
	
	if (typeof encounterRes[&apos;appointment&apos;] != &apos;undefined&apos;){
    	  	encounterRes[&apos;appointment&apos;].find(function (appointment) {
    	  		// agendamentoIdentificadores
			agendamentoIdentificadoresObj = new Object();
			agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
			agendamentoIdentificadoresObj.codigo = appointment[&apos;reference&apos;].replace(&apos;Appointment/&apos;, &apos;&apos;);
			respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
    	  	})
    	}

	// episodioIdentificadores
	episodioIdentificadorObj = new Object();
	episodioIdentificadorObj.sistemaCodificador = &quot;Encounter.id&quot;;
	episodioIdentificadorObj.codigo = encounterRes[&apos;id&apos;];
	respObj.episodioIdentificadores.push(episodioIdentificadorObj);

	// Human-redable ID
    	if (typeof encounterRes[&apos;identifier&apos;] != &apos;undefined&apos;){
		episodioIdentificadorHumanRedableObj = new Object();
		episodioIdentificadorHumanRedableObj.sistemaCodificador = &quot;Encounter.identifier&quot;;
		episodioIdentificadorHumanRedableObj.codigo = encounterRes[&apos;identifier&apos;][0][&apos;value&apos;];
		respObj.episodioIdentificadores.push(episodioIdentificadorHumanRedableObj);
    	}
	
	encounterRes[&apos;extension&apos;].find( function(extension) {
		if (extension[&apos;url&apos;].includes(&quot;Encounter.OperationalHealthUnit&quot;)) {
			var objTHOM = {};
			objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
			objTHOM.codigo = extension[&apos;valueCoding&apos;][&apos;code&apos;];
			respObj.tipoAgendamentoIdentificadores.push(objTHOM);
		}
	})

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7370760c-76cd-4fa8-bb89-34738bfe7995</id>
                <name>getIdProposta</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791423</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função auxiliar genérica com o propósito de extrair o id da proposta.
	com o intuito de extrair da API do sistema externo um determinado CarePlan e extrair o id da proposta cirúrgica associado, se este dado existir

	@param {String} propostaExtId - id externo identificativo da proposta
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;idproposta111&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getIdProposta(appointmentId, appContext) {

	var contextList = [&quot;cuf&quot;]; // contextos de aplicação da função (CUF, ...)
	var respostaObj = {};

	if (contextList.includes(appContext.trim().toLowerCase()) ) {
	
		if (appContext.trim().toLowerCase() == &quot;cuf&quot;) { // CUF

			/*
			if (propostaExtId &amp;&amp; !appointmentId) { //agendamento - extrair id da proposta de PC através do id externo da proposta
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			} else if (!propostaExtId &amp;&amp; appointmentId) { //checkin - 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC através do id externo da proposta
				var propostaExtId = getPropostaExtId_CUF(appointmentId);
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			}
			*/

			// 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC, através do id externo da proposta
			var respostaExtId = getPropostaExtId_CUF(appointmentId);
			if (respostaExtId.statusCode = &quot;200&quot;) {
				respostaObj = geIdPropostaPC_CUF(respostaExtId.responseMessage);
			} else {
				respostaObj = respostaExtId;
			}
		}
	} else {
		respostaObj.statusCode = &quot;500&quot;;
		respostaObj.responseMessage = &quot;Contexto de aplicação inválido&quot;;
	}
	return respostaObj;
}


// -------------- FUNCOES AUXILIARES -----------------------

function geIdPropostaPC_CUF(propostaExtId) { // extrair id da proposta de PC através do id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;CarePlan&quot;, propostaExtId);
	if (resposta.statusCode == &quot;200&quot;) {
		carePlanRes = JSON.parse(resposta.responseMessage);
		var patientCareId = null;
		carePlanRes[&quot;identifier&quot;].find( function(identifier) {
			identifier[&quot;type&quot;][&quot;coding&quot;].find( function(coding) {
				if (coding[&quot;code&quot;] == &quot;PLAC&quot;) {
					patientCareId = identifier[&quot;value&quot;];
				}
			});
		});
		if (patientCareId !== null) {
			result.statusCode = &quot;200&quot;;
			result.responseMessage = idProposta;
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;Id não encontrado como placer identifier no CarePlan com id &quot; + propostaExtId;			
		}
		
	} else {
		result = resposta;
	}
	return result;
}

function getPropostaExtId_CUF(appointmentId) { // obter id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;Appointment&quot;, appointmentId);
	if (resposta.statusCode == &quot;200&quot;) {
		appointmentRes = JSON.parse(resposta.responseMessage);
		if (appointmentRes[&apos;supportingInformation&apos;]) {
			var propostaExtId = null;
			appointmentRes[&apos;supportingInformation&apos;].find( function(suppInfo) {
				if (suppInfo[&apos;reference&apos;].includes(&quot;CarePlan&quot;)) {
					propostaExtId = suppInfo[&apos;reference&apos;].replace(&quot;CarePlan/&quot;,&quot;&quot;);
					return ;
				}
			});
			if (propostaExtId !== null) {
				result.statusCode = &quot;200&quot;;
				result.responseMessage = propostaExtId;
			} else {
				result.statusCode = &quot;500&quot;;
				result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
			}
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
		}
	} else {
		result = resposta;
	}
	return result;
}


</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>799a6dcb-19c1-4600-8ff8-6b905747eeaa</id>
                <name>GetOrganization</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788084</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} organizationGUID - thom guid fro organization
	@return {Object} return intRefExt
*/
function getOrganization(organizationGUID) {

	var organizationObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Organization/&quot; + organizationGUID;
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			organization = JSON.parse(httpResp.responseMessage);

			organizationObj.intRefExt = organization.alias[0];
			organizationObj.name = organization.name;
			
		}
	}

	return organizationObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c1c0f8a3-571c-4066-8324-a7b7ba0966db</id>
                <name>getPcSurgicalProposalIdFromThom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792484</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} patientUuid - ID do Paciente de THOM (UUID)
	@param {String} episodOfCareUuid - ID do EpisodeOfCare de THOM (UUID)
	@return {String} return ID sequencial da proposta cirurgica do PatientCare 
*/
function getPcSurgicalProposalIdFromThom(patientUuid, episodOfCareUuid) {
	var pcSurgicalProposal = null;
	var carePlanId = null;

	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	// Get all CarePlan to specific Patient
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CarePlan?_pretty=true&amp;patient=Patient/&quot; + patientUuid + &apos;&amp;category=https://thom-fhir.apis.sat.jmslab.pt/fhir/CodeSystem/TreatmentRequestType|1&apos;;
	httpResp = httpGet(httpGetURL, authHeader);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var bundle = JSON.parse(httpResp.responseMessage);
			
			bundle.entry.find(function(bundleResource){
				if (bundleResource.resource.resourceType == &apos;CarePlan&apos; &amp;&amp; typeof(bundleResource.resource.supportingInfo) != &apos;undefined&apos;){
					bundleResource.resource.supportingInfo.find(function(supportingInfo){
						if (supportingInfo.display == episodOfCareUuid){
							carePlanId = bundleResource.resource.id;
							//return;
						}	
					});
				}
			});
		}
	}

	// Get specific CarePlan to get the placer identifier
	if (carePlanId != null){
		var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CarePlan/&apos; + carePlanId;
		httpResp = httpGet(httpGetURL, authHeader);
		//logger.info(&quot;httpResp - &quot; + JSON.stringify(httpResp));
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var carePlan = JSON.parse(httpResp.responseMessage);
				
				carePlan.identifier.find(function(identifiers){
					identifiers.type.coding.find(function(codings){
						if (codings.code == &apos;PLAC&apos;){
							pcSurgicalProposal = identifiers.value;
							return;
						}
					});
				});
			}
		}
	}

	return pcSurgicalProposal;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>82e9fc81-294a-416a-9674-857fb9e5af64</id>
                <name>GetPractitionerByNumMecanografico</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791487</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} Practitioner NumMecanografico - numero mecanográfico do médico
	@return {Object} return Practitioner GUID do THOM
*/
function getPractitionerByNumMecanografico(numMecanografico) {
	var respObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Practitioner?identifier=&quot; + numMecanografico;
	httpResp = httpGet(httpGetURL,null);
	respObj.statusCode = httpResp.statusCode;

	respObj.response = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			practitioner = JSON.parse(httpResp.responseMessage);

			if (practitioner.type  == &apos;searchset&apos; &amp;&amp; practitioner.total &gt; 0){
				practitioner.entry.find(function(practitionerResource){
					return practitionerResource.resource.identifier.find(function(identifier){
						
						return identifier.type.coding.find(function(codes){
							if (codes.code == &apos;4&apos;){
								if (numMecanografico == identifier.value){
									respObj.response = practitionerResource.resource;
									return true;
								}
							}
						})
					})
				})	
			}
		}
	} else {
		respObj.response = httpResp.responseMessage != null ? httpResp.responseMessage : httpResp.statusText;
	}
	
	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>45bbb451-aab7-4513-8107-952866fd2a95</id>
                <name>getResourceExternalAPI</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789667</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo intuito passa por ir buscar à API externa uma determinada instância de um pretendido resource type

	@param {String} resourceType - FHIR Resource Type (por exemplo, Appointment, Bundle, CarePlan, Encounter, etc.)
	@param {String} resourceExtId - id externo da instância a ser obtida
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;fullResource&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getResourceExternalAPI(resourceType, resourceExtId) {
	var respostaObj = {};
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/&quot; + resourceType + &quot;/&quot; + resourceExtId;	
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			respostaObj = httpResp;
		} else {
			respostaObj.statusCode = &quot;500&quot;;
			respostaObj.responseMessage = &quot;Resposta retornada não é JSON&quot;;
		}
	} else {
		respostaObj = httpResp;
	}
	return respostaObj;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>fe90c913-c365-44d1-b309-7c4dae7d9d9a</id>
            <name>Utils</name>
            <revision>6</revision>
            <lastModified>
              <time>1730893909835</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Utils functions for Mirth Channels</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>9d0737dd-b85f-4e05-bd6e-b83828e87bdf</id>
                <name>addIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792349</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Aidiciona um objeto relativo a um identificador (Ex: {&quot;sistemaCodificador&quot;:&quot;Appointment.id&quot;, &quot;codigo&quot;: 1111} ) a uma lista de identificadores

	@param {String} sistCodificador - nome do sistemaCodificador (ex: &quot;Appointment.id&quot; ou &quot;Encounter.identifier&quot;)
	@param {String} codigo - value relativo ao sistCodificador
	@param {String} listaAdicionar - listagem já existente (ou vazia/null/undefined) de identificadores
	@return {String} return listaIdentificadores
*/
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	var lista;
	try {
		if (listaAdicionar  &amp;&amp; Array.isArray(listaAdicionar)) {
			lista = JSON.parse( JSON.stringify(listaAdicionar));
		} else {
			logger.info(&quot;excecao1&quot;);
			lista= [];
		}
	} catch (err) {
		logger.info(&quot;excecao2&quot; + err.toString());
		lista =  [];
	}
	/*
	if (! Array.isArray(listaAdicionar)) {
		lista = [];
	} else {
		lista = JSON.parse( JSON.stringify(listaAdicionar));
	}
	*/
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			lista.push(obj);
		}
	}
    	return lista;
	
}

/*
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	if (! Array.isArray(listaAdicionar)) {
		listaAdicionar = [];
	}
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			listaAdicionar.push(obj);
		}
	}
    	return listaAdicionar;
	
}
*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83c82ac5-e364-41b2-99cc-6a4ead5eaa37</id>
                <name>callApi</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793110</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Generic code to implement API call

	@param {String} method - http method
	@param {String} url - http url
	@param {String} user - api username
	@param {String} pass - api password
	@return {Object} return api response
*/
function callApi(method, url, user, pass) {
	
	var url = new Packages.java.net.URL(url);
	var connection = url.openConnection();
	connection.setRequestMethod(method);
	
	try {
	  var responseCode = connection.getResponseCode();
	  if (responseCode === Packages.java.net.HttpURLConnection.HTTP_OK) {	//	200
	    var inputStream = connection.getInputStream();
	    var reader = new Packages.java.io.BufferedReader(new Packages.java.io.InputStreamReader(inputStream));
	    var response = &quot;&quot;; // Inicializa a variável response
	
		    while ((line = reader.readLine()) !== null) {
		      response += line;
		    }      
	        reader.close();	      
		   
		   return JSON.parse(response.toString());
	
	    } else {
	        var errorMessage = &quot;Erro na chamada ao Web Service: &quot; +  url + &quot; Código de resposta: &quot; + responseCode;
	        // Trata os casos em que a chamada ao Web Service não foi bem-sucedida        
	        throw new Error(errorMessage);
	    }
	} catch (e) {
	    // Capturar exceção e retornar status e mensagem de erro
	    var errorStatus = connection.getResponseCode();
//	    var errorMessage = e.getMessage();	    
	    throw new Error(errorStatus);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fd200634-44bd-483c-97ab-743c373d4b7a</id>
                <name>checkIfExameEspecial</name>
                <revision>2</revision>
                <lastModified>
                  <time>1730739683915</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo objetivo passa por receber um código identificativo de um exame (ou outro serviço qualquer) e retornar se o mesmo é um exame especial ou não. Para
	tal, a função vai à tabela de catálogo da BD verificar se o código lá existe. Caso haja algum problema de acesso à BD, e de forma opcional, a função tenta aceder
	ao endpoint do sistema externo para fazer a verificação de exame especial.

	@param {String} catalogCode - código de catálogo CUF a ser analisado
	@param {String} externalSysCode - código de catálogo do sistema externo a ser analisado
	@return {Object} return object
*/
function checkIfExameEspecial(catalogCode, externalSysCode) {
	var error = false;
	var errorMsg = null;
	var isExameEspecial = null;
	var resposta = new Object();
	
	// Get a database connection 
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	var selectQuery = &quot;SELECT * FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; WHERE \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; and ativo = true;&quot;;
	try {
		// Execute the SQL query
		result = dbConn.executeCachedQuery(selectQuery);
		if (result.next() ) { // true
			isExameEspecial = true;
		} else { 
			isExameEspecial = false; // false
		}
	} catch (e) {
		error = true;
		logger.info(&quot;e.toString() = &quot; + e.toString());
		errorMsg = e.toString();
	} finally {
	    // Close the database connection
	    dbConn.close();
	}

	//houve erro no acesso à BD, logo tenta aceder ao endpoint do sistema externo para obter essa informação
	if (isExameEspecial == null &amp;&amp; typeof externalSysCode != &apos;undefined&apos;) {
		var httpPostURL = $(&apos;Transactional_CUFBUS_Host&apos;) + &quot;CodeSystem/Service/$lookup&quot;;
		var body = new Object();
		body.resourceType= &quot;Parameters&quot;;
		body.parameter = [{&quot;name&quot;:&quot;code&quot;,&quot;valueCode&quot;:externalSysCode}];
		var authHeader = null
		if ($(&apos;Transactional_CUFBUS_User&apos;) != null &amp;&amp; $(&apos;Transactional_CUFBUS_Pass&apos;) != &apos;&apos;){
			authHeader = apiGenerateBasicAuthHeader($(&apos;Transactional_CUFBUS_User&apos;), $(&apos;Transactional_CUFBUS_Pass&apos;));  
		}
		httpResp = httpPost(httpPostURL,JSON.stringify(body),authHeader);
		
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var parametersRes = JSON.parse(httpResp.responseMessage);
				try {
					if (parametersRes[&apos;resourceType&apos;] == &quot;Parameters&quot;) {
						var checkExameEspecial = null;
						parametersRes[&apos;parameter&apos;].find( function(parameter) {
							if(parameter[&apos;name&apos;] == &quot;property&quot;) {
								parameter[&apos;part&apos;].find( function(part) {
									if (part[&apos;valueCoding&apos;]) {
										if (part[&apos;valueCoding&apos;][&apos;code&apos;] == $(&apos;Catalogo_ServiceCategory_ExameEspecial&apos;)) {
											isExameEspecial = true;
											checkExameEspecial = true;
											return true;
										}
									}
								})
							}
						})
						if (checkExameEspecial == null) { // não encontrou property de exame especial, logo não é exame especial
							isExameEspecial = false;
						}
					} else {
						error = true;
						errorMsg = &quot;A Parameters Resource was expected as a response&quot;;
					}
				} catch (e2) {
					error = true;
					errorMsg = &quot;Error parsing the response from the endpoint &quot; + e2.toString();
				}
			} else {
				error = true;
				errorMsg = &quot;Endpoint response was not JSON&quot;;
			}
		} else {
			error = true;
			errorMsg = httpResp.statusText ? httpResp.statusText : (httpResp.responseMessage ? httpResp.responseMessage : null);;		
		}
	}
	if (isExameEspecial == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg; //string
	} else {
		resposta.statusCode = &quot;200&quot;;
		resposta.responseMessage = isExameEspecial; // boolean
	}
	return resposta;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b53102c9-17cf-431e-b87a-40d08fe73203</id>
                <name>convertDateToTimeStamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793287</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertDateToTimeStamp(date) {

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = &apos;00&apos;;
	var min = &apos;00&apos;;
	var sec = &apos;00&apos;;
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5714586f-45b8-45cb-9af6-fdabfe1bf9b2</id>
                <name>convertTimeStampToDateStr</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787735</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and time &quot;HHmmss&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@param {String} time - time in format &quot;HHmmss&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertTimeStampToDateStr(date, time) {

	if (time.length &lt;= 5){ // left pad
		time = time.padStart(time.length + 1, &apos;0&apos;);
	}

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = time.substring(0, 2);
	var min = time.substring(2, 4);
	var sec = time.substring(4, 6);
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b4455483-c833-4b4e-adb9-c646cad7bcfe</id>
                <name>DateUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791914</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Date to UTC

	@param {String} date - Date string in format &quot;yyyy-MM-ddTHH:mm:ss+SSSS&quot;
	@return {String} return date in UTC &quot;yyyy-MM-ddTHH:mm:ss+Z&quot;
*/
function DateUtc(date, dateFormat) {

     var formatter_hl7 = new java.text.SimpleDateFormat(dateFormat != null ? dateFormat : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss+SSSS&quot;);
     formatter_hl7.setTimeZone(java.util.TimeZone.getTimeZone($(&apos;serverTimeZone&apos;)));
     var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
     formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	return formatter_utc.format(formatter_hl7.parse(date));			
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4fbdd7b8-7dd0-4ba3-ba13-0a8990b4513b</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788357</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8cb44e20-4b8a-48e6-93ae-aa905dbf2445</id>
                <name>generate_HLv2_messageId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788478</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função criadora de id de mensagem HL7 v2 (MSH.10.1) único v5

	@return {String} id unico
*/
function generate_HLv2_messageId(tipo_mensagem) {

	var timestamp = new Date().getTime().toString();
	var timestamp_length = timestamp.length;

	//random remaining characters
	remainder = 20-3-timestamp_length;
	
	// Generate a random number between 0... and 9...
	var randomNumber = Math.floor(Math.random() * Math.pow(10,remainder));
	// Convert the number to a string and pad it with leading zeros if needed
	var formattedNumber = randomNumber.toString().padStart(remainder, &apos;0&apos;);
	
	return timestamp + &quot;-&quot; + tipo_mensagem[0] +&quot;-&quot; + formattedNumber;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b4aa14b-ee5a-464f-b1c8-0917d2ea815c</id>
                <name>getArrayUniqueValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792417</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns unique values from an array

	@param {array} array - array
	@return {array} return unique values from array
*/
function getArrayUniqueValues(array) {
	var uniqueArray = [];
	for (var i = 0; i &lt; array.length; i++) {
	    if (uniqueArray.indexOf(array[i]) === -1) {
	        uniqueArray.push(array[i]);
	    }
	}

	return uniqueArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bd7561e-2fb9-41d1-a8e3-fbeabaf8099a</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793452</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4814b63d-13ac-4097-86e2-22ca3c24eda4</id>
                <name>getFirstName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns first name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getFirstName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[0];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a594fff0-deb4-4d2a-a11e-f39582b42120</id>
                <name>getIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791988</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Extrai da listagem de identificadores o &quot;codigo&quot; associado a um pretendido &quot;sistCodificador&quot;

	@param {String} listaIds - listagem de identificadores onde procurar
	@param {String} sistCodificador - sistemaCodificador a ser procurado na listagem de identificadores
	@return {String} return codigo (ou null, caso não exista)
*/
function getIdentificador(listaIds, sistCodificador) {
	var codigo = null;	
	try{  		
	    	listaIds.find(function(elemento) {
	    		if (elemento.sistemaCodificador){
	    			try { // para o caso de algum dos identificadores estar mal definido não impedir que se extraia a informação pretendida
		        		if (elemento.sistemaCodificador.toLowerCase() == sistCodificador.toLowerCase()){
		          		codigo= elemento.codigo;
		          		return true;
		        		}
	    			} catch (err) {
		        		;
		        	}
	      	}
	    });
    	} catch (ex1){
    		codigo = null;
    	}
	return codigo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f9529854-80ad-450b-ad8a-54a1b63ba9d1</id>
                <name>getLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791292</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns last name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getLastName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[(names.length -1) ];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6ff6cc61-fa90-455a-b9b4-26f12a870f91</id>
                <name>getLocationExameEspecial</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792555</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dada informação sobre o hospital, o código de catálogo de exame especial e a especialidade, retornar qual a localização no pretendido hospital predestinada para
	a ocorrência de exames especiais dessa mesma especialidade

	@param {String} hospitalINTRefExt - INTRefExt do hospital (CMFL, HTEJO, ...)
	@param {String} catalogCode - código de catálogo do exame especial (10058, 20056, ...)
	@param {String} especialidade - especialidade associada ao exame especial (Cardiologia, Oftalmologia, ...)
	@return {String} return {&quot;servico&quot;: &quot;...&quot;, &quot;area&quot;: &quot;...&quot;, &quot;sala&quot;: &quot;...&quot; &quot;cama&quot;: &quot;...&quot;}
*/
function getLocationExameEspecial(hospitalINTRefExt, catalogCode, especialidade) {
	var error = false;
	var errorMsg = null;
	var resposta = new Object();

	var cama = null;
	var sala = null;
	var area = null;
	var servico = null;
	
	if ( !hospitalINTRefExt || !catalogCode || !especialidade ) {
		error = true;
		errorMsg = &quot;Um dos parametros da função é invalido&quot;;
	} else {
	
		var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	
		/* var selectQuery = &quot;SELECT cama, sala, area FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE servico = &apos;&quot; + AAAAAAAAA + &quot;&apos; AND especialidade = &apos;&quot;+ especialidade + &quot;&apos; AND id =&quot;
						+ &quot;(SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where intRefExt = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) LIMIT 1) LIMIT 1;&quot;; */
	
		var selectIdLocalizacaoSQL = &quot;SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) ;&quot;;
	
		var listIdLocalizacao= [];
		try {
			// Execute the SQL query
			result = dbConn.executeCachedQuery(selectIdLocalizacaoSQL); // return javax.sql.rowset.CachedRowSet
			while (result.next()) {
				listIdLocalizacao.push(result.getString(&quot;idLocalizacao&quot;));
			}
		} catch (e) {
			error = true;
			logger.info(&quot;e.toString() = &quot; + e.toString());
			errorMsg = e.toString();
		} finally {
		    // Close the database connection
		    dbConn.close();
		}
		logger.info(&quot;lsita ids localizacao = &quot; +JSON.stringify(listIdLocalizacao));
		

		if (listIdLocalizacao.length == 0){ // não existem idLocalizacao configurados para o exame
			error = true;
			errorMsg = &quot;Não existem idLocalizacao para o código de catálogo &quot; + catalogCode + &quot; e hospital &quot; + hospitalINTRefExt;
		} else {
			var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
			if (listIdLocalizacao.length == 1) { //só existe 1 idLocalizacao, logo não interessa a especialidade porque a localizacao do exame especial é sempre no mesmo local
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id = &apos;&quot; + listIdLocalizacao[0] + &quot;&apos;;&quot;;
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}			
			} else { // existe mais do que uma localização, logo vai diferenceiar por especialidade
				ids = &quot;(&quot;;
				for (var i=0; i&lt; listIdLocalizacao.length; i++) {
				    ids += &quot;&apos;&quot; + listIdLocalizacao[i].toString() + &quot;&apos;,&quot;;
				}
				ids = ids.slice(0,-1) + &quot;)&quot;;
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id in &quot; + ids + &quot; and especialidade = &apos;&quot;+especialidade+ &quot;&apos;;&quot;;
				logger.info(selectInfosSQL);
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}	
			}
		}
	}


	if (error == true  ) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro interno getLocationExameEspecial()&quot;;
	} else if ( cama == null &amp;&amp; sala == null &amp;&amp; area == null  &amp;&amp; servico == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro na query à LocalizacaoExamesEspeciais&quot;;
	}else {
		resposta.statusCode = &quot;200&quot;;
		var respObj = new Object();
		respObj.cama = cama;
		respObj.area = area;
		respObj.sala = sala;
		respObj.servico = servico;
		resposta.responseMessage = respObj;
	}
	return resposta;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>903737fd-9a14-45ea-b3cf-2af18ba88142</id>
                <name>getNumMecanograficoById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791627</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getNumMecanograficoById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.numMecanografico;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6bdd892d-3953-4f68-af96-44ff89434b13</id>
                <name>getPerfilUtilizadorById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789557</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getPerfilUtilizadorById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.perfil;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee58620f-c785-44f2-a4f7-26a8808c4e16</id>
                <name>getPerformerAndDatesRequisicaoMcdts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788016</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Object} accoesList - ...
	@param {Object} dataCriacaoRequisicao - ...
	@param {Object} utilizadoresList - ...
	@return {Object} return description

	(//R = obrigatório)
	--&gt; Formato esperado acoesList: [
          {
            &quot;utilizadorId&quot; : 12284, //R
            &quot;funcao&quot; : 1, //R
            &quot;data&quot; : &quot;2024-05-08T14:41:51.089035Z&quot; //R
          },
          {
            &quot;utilizadorId&quot; : 12284,
            &quot;funcao&quot; : 3,
            &quot;data&quot; : &quot;2024-05-08T14:27:58.349313Z&quot;
          }
        ]

     --&gt; Formato esperado utilizadoresList: [
	    {
	      &quot;id&quot; : 12284,
	      &quot;login&quot; : &quot;MDPIRES&quot;,
	      &quot;nome&quot; : &quot;Marcos Pires&quot;,
	      &quot;numMecanografico&quot; : &quot;263812278&quot;,
	      &quot;numOrdem&quot; : &quot;123&quot;,
	      &quot;numFuncionario&quot; : null,
	      &quot;perfil&quot; : 1,
	      &quot;intRefExt&quot; : null
	    }
	  ]
	
*/
function getPerformerAndDatesRequisicaoMcdts(accoesList,dataCriacaoRequisicao, utilizadoresList) {

	logger.info(&quot;accoesList - &quot; +JSON.stringify(accoesList));
	logger.info(&quot;dataCriacaoRequisicao - &quot; + JSON.stringify(dataCriacaoRequisicao));
	logger.info(&quot;utilizadoresList - &quot; + JSON.stringify(accoesList));
	returnObj = new Object();
	
	var Performer = Lists.list();
	var occurenceDateTime = null;
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(accoesList); j++ ){
	
	      try {
			if (accoesList[j][&apos;funcao&apos;] == 1 /* Relato */){
				dataRelato = accoesList[j][&apos;data&apos;];
			} else if (accoesList[j][&apos;funcao&apos;] == 2 /* Validacao */){
				dataValidacao = accoesList[j][&apos;data&apos;];
			} else {
				occurenceDateTime = dataCriacaoRequisicao;
			}
	       } catch (error) {
	       	logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro nas datas - &quot; + error.toString()); 
	     }
	
		try {
			  Performer.add({
			    function: {
			        coding: [{
			          system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			          code: newStringOrUndefined( accoesList[j][&apos;funcao&apos;] == 3 /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;])) : mapFuncao(accoesList[j][&apos;funcao&apos;]) )
			        }]
			      },
			    actor: {
			      reference: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) ) : null),
			      identifier: {
			        use: newStringOrUndefined(&apos;official&apos;),
			        type: {
			          coding: [{
			            system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
			            code: newStringOrUndefined(&apos;4&apos;)
			          }],
			          text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
			        },
			        value: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) : null)
			      }
			    }
		  });
		} catch (error2) {
			logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro no performer - &quot; + error2.toString()); 
		}
	}

	returnObj.performer = Performer;
	returnObj.occurenceDateTime = occurenceDateTime;
	returnObj.dataValidacao = dataValidacao;
	returnObj.dataRelato = dataRelato;

	return returnObj;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8615c472-c47a-48aa-a6e7-45e487c4463f</id>
                <name>getRabbitMqHosts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791032</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Void}
	@return {HostsDto} return hosts
*/
function getRabbitMqHosts() {
	// Set RabbitMQ Hosts
	importPackage(com.mirth.rabbitmq.client.dto);
	hosts = [];
	addr = new HostsDto(); // Main Host
	addr.setHost($(&apos;RabbitMqHost&apos;));
	addr.setPort(parseInt($(&apos;RabbitMqPort&apos;)));
	hosts.push(addr);

	return hosts;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f331cea8-c75e-40d4-83d9-a6779b688c81</id>
                <name>isJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790116</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a string is a valid JSON

	@param {String} string to validate if is JSON
	@return {Boolean} return boolean
*/
function isJSON(str) {
  try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27f41d50-5bd7-46da-9ad9-203181a92ba9</id>
                <name>isNumeric</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789613</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a value (string or number) is numeric

	@param {String} value to validate if is numeric
	@return {Boolean} return boolean
*/
function isNumeric(num) {
  if (typeof num == &quot;string&quot;) { 
    return !isNaN(num) &amp;&amp;
           !isNaN(parseFloat(num));
  } else if (typeof num == &quot;number&quot;) {
  	return true;
  } else {
  	return false;
  }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5c27a913-629d-4605-9e85-716a84e11410</id>
                <name>MappFrequencies</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to create multiple VAR Segments according Initial Date and CD_PrescricaoFrequencias

	@param {String} freqUni - CD_PrescricaoFrequencias description code
	@param {String} dateInit - Date HL7 string: start prescription date
	@param {String} DateEnd - Date HL7 string: end prescription date
	@return {String} return VAR Segment
*/
function MappFrequencies(freqUni, dateStart, DateEnd) {

	startDate = &quot;20230227115700&quot;;
	hora = startDate.substring(10, 8);
	freqfactor = 8;
	freqUnit = &apos;Dias&apos;;
	
	if (freqUnit == &apos;Hora&apos;){ // x em x horas
	    // calc hours segments
	    if (startDate.length &gt; 0 &amp;&amp; freqfactor &gt; 1){
	        console.log(&quot;running ...&quot;);
	        for (i = 0; i &lt; (24 / freqfactor) ; i++){
	            if ( (parseInt(hora) + (freqfactor * i) - 24) &gt;= 0  ){
	                hora = parseInt(hora) + (freqfactor * i) - 24;
	                break;
	            }
	        }
	        
	        if ((24 / freqfactor) &gt;= 1){
	            for(i = 0; i &lt; (24 / freqfactor); i++){
	                console.log( (parseInt(hora) + (freqfactor * i)).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	            }
	        }else {
	            console.log( parseInt(hora).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	        }   
	    }
	} else if (freqUnit == &apos;Dias&apos;){ // x em x dias
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Dias da Semanas&apos; || freqUnit == &apos;Por Dia&apos; || freqUnit == &apos;Refeições&apos; || freqUnit == &apos;Dia/Hora&apos;){ // têm de ser criados a cada dia
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Única&apos;){ // Hora fixa^5
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;SOS&apos;){
	    console.log( null )
	}else if (freqUnit == &apos;Turno Fixo&apos;) {
	    // tenho de pedir ao bruno para ter alguma informação relacionada com os turnos
	}else if (freqUnit == &apos;Contínuo&apos; || freqUnit == &apos;Sem horário&apos;){ // Sem hor\XE1\rio^0
	    console.log( null )
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e5cc4c3f-7233-42b0-8162-b3bec0ab5c94</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792857</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fdd919fc-4700-4a8f-aafe-cc2f4653f100</id>
                <name>Unescape HL7 Characters</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790479</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function hexMappingPreProcessor(result) {
	var hexMapping = [
			[/\\x21\\/gi, &quot;!&quot;], [/\\x22\\/gi, &apos;&quot;&apos;], [/\\x23\\/gi, &quot;#&quot;], [/\\x24\\/gi, &quot;$&quot;], [/\\x25\\/gi, &quot;%&quot;], [/\\x26\\/gi, &quot;&amp;&quot;], [/\\x27\\/gi, &quot;&apos;&quot;], [/\\x28\\/gi, &quot;(&quot;], [/\\x29\\/gi, &quot;)&quot;],
			[/\\x2a\\/gi, &quot;*&quot;], [/\\x2b\\/gi, &quot;+&quot;], [/\\x2c\\/gi, &quot;,&quot;], [/\\x2d\\/gi, &quot;-&quot;], [/\\x2e\\/gi, &quot;.&quot;], [/\\x2f\\/gi, &quot;/&quot;], [/\\x30\\/gi, &quot;0&quot;], [/\\x31\\/gi, &quot;1&quot;], [/\\x32\\/gi, &quot;2&quot;],
			[/\\x33\\/gi, &quot;3&quot;], [/\\x34\\/gi, &quot;4&quot;], [/\\x35\\/gi, &quot;5&quot;], [/\\x36\\/gi, &quot;6&quot;], [/\\x37\\/gi, &quot;7&quot;], [/\\x38\\/gi, &quot;8&quot;], [/\\x39\\/gi, &quot;9&quot;], [/\\x3a\\/gi, &quot;:&quot;], [/\\x3b\\/gi, &quot;;&quot;],
			[/\\x3c\\/gi, &quot;&lt;&quot;], [/\\x3d\\/gi, &quot;=&quot;], [/\\x3e\\/gi, &quot;&gt;&quot;], [/\\x3f\\/gi, &quot;?&quot;], [/\\x40\\/gi, &quot;@&quot;], [/\\x41\\/gi, &quot;A&quot;], [/\\x42\\/gi, &quot;B&quot;], [/\\x43\\/gi, &quot;C&quot;], [/\\x44\\/gi, &quot;D&quot;],
			[/\\x45\\/gi, &quot;E&quot;], [/\\x46\\/gi, &quot;F&quot;], [/\\x47\\/gi, &quot;G&quot;], [/\\x48\\/gi, &quot;H&quot;], [/\\x49\\/gi, &quot;I&quot;], [/\\x4a\\/gi, &quot;J&quot;], [/\\x4b\\/gi, &quot;K&quot;], [/\\x4c\\/gi, &quot;L&quot;], [/\\x4d\\/gi, &quot;M&quot;],
			[/\\x4e\\/gi, &quot;N&quot;], [/\\x4f\\/gi, &quot;O&quot;], [/\\x50\\/gi, &quot;P&quot;], [/\\x51\\/gi, &quot;Q&quot;], [/\\x52\\/gi, &quot;R&quot;], [/\\x53\\/gi, &quot;S&quot;], [/\\x54\\/gi, &quot;T&quot;], [/\\x55\\/gi, &quot;U&quot;], [/\\x56\\/gi, &quot;V&quot;],
			[/\\x57\\/gi, &quot;W&quot;], [/\\x58\\/gi, &quot;X&quot;], [/\\x59\\/gi, &quot;Y&quot;], [/\\x5a\\/gi, &quot;Z&quot;], [/\\x5b\\/gi, &quot;[&quot;], [/\\x5c\\/gi, &quot;\\&quot;], [/\\x5d\\/gi, &quot;]&quot;], [/\\x5e\\/gi, &quot;^&quot;], [/\\x5f\\/gi, &quot;_&quot;],
			[/\\x60\\/gi, &quot;`&quot;], [/\\x61\\/gi, &quot;a&quot;], [/\\x62\\/gi, &quot;b&quot;], [/\\x63\\/gi, &quot;c&quot;], [/\\x64\\/gi, &quot;d&quot;], [/\\x65\\/gi, &quot;e&quot;], [/\\x66\\/gi, &quot;f&quot;], [/\\x67\\/gi, &quot;g&quot;], [/\\x68\\/gi, &quot;h&quot;],
			[/\\x69\\/gi, &quot;i&quot;], [/\\x6a\\/gi, &quot;j&quot;], [/\\x6b\\/gi, &quot;k&quot;], [/\\x6c\\/gi, &quot;l&quot;], [/\\x6d\\/gi, &quot;m&quot;], [/\\x6e\\/gi, &quot;n&quot;], [/\\x6f\\/gi, &quot;o&quot;], [/\\x70\\/gi, &quot;p&quot;], [/\\x71\\/gi, &quot;q&quot;],
			[/\\x72\\/gi, &quot;r&quot;], [/\\x73\\/gi, &quot;s&quot;], [/\\x74\\/gi, &quot;t&quot;], [/\\x75\\/gi, &quot;u&quot;], [/\\x76\\/gi, &quot;v&quot;], [/\\x77\\/gi, &quot;w&quot;], [/\\x78\\/gi, &quot;x&quot;], [/\\x79\\/gi, &quot;y&quot;], [/\\x7a\\/gi, &quot;z&quot;],
			[/\\x7b\\/gi, &quot;{&quot;], [/\\x7c\\/gi, &quot;|&quot;], [/\\x7d\\/gi, &quot;}&quot;], [/\\x7e\\/gi, &quot;~&quot;], [/\\xa1\\/gi, &quot;¡&quot;], [/\\xa2\\/gi, &quot;¢&quot;], [/\\xa3\\/gi, &quot;£&quot;], [/\\xa4\\/gi, &quot;¤&quot;], [/\\xa5\\/gi, &quot;¥&quot;],
			[/\\xa6\\/gi, &quot;¦&quot;], [/\\xa7\\/gi, &quot;§&quot;], [/\\xa8\\/gi, &quot;¨&quot;], [/\\xa9\\/gi, &quot;©&quot;], [/\\xaa\\/gi, &quot;ª&quot;], [/\\xab\\/gi, &quot;«&quot;], [/\\xac\\/gi, &quot;¬&quot;], [/\\xa0\\/gi, &quot; &quot;], [/\\xae\\/gi, &quot;®&quot;],
			[/\\xaf\\/gi, &quot;¯&quot;], [/\\xad\\/gi, &quot; &quot;], [/\\xb0\\/gi, &quot;°&quot;], [/\\xb1\\/gi, &quot;±&quot;], [/\\xb2\\/gi, &quot;²&quot;], [/\\xb3\\/gi, &quot;³&quot;], [/\\xb4\\/gi, &quot;´&quot;], [/\\xb5\\/gi, &quot;µ&quot;], [/\\xb6\\/gi, &quot;¶&quot;],
			[/\\xb7\\/gi, &quot;·&quot;], [/\\xb8\\/gi, &quot;¸&quot;], [/\\xb9\\/gi, &quot;¹&quot;], [/\\xba\\/gi, &quot;º&quot;], [/\\xbb\\/gi, &quot;»&quot;], [/\\xbc\\/gi, &quot;¼&quot;], [/\\xbd\\/gi, &quot;½&quot;], [/\\xbe\\/gi, &quot;¾&quot;], [/\\xbf\\/gi, &quot;¿&quot;],
			[/\\xc0\\/gi, &quot;À&quot;], [/\\xc1\\/gi, &quot;Á&quot;], [/\\xc2\\/gi, &quot;Â&quot;], [/\\xc3\\/gi, &quot;Ã&quot;], [/\\xc4\\/gi, &quot;Ä&quot;], [/\\xc5\\/gi, &quot;Å&quot;], [/\\xc6\\/gi, &quot;Æ&quot;], [/\\xc7\\/gi, &quot;Ç&quot;], [/\\xc8\\/gi, &quot;È&quot;],
			[/\\xc9\\/gi, &quot;É&quot;], [/\\xca\\/gi, &quot;Ê&quot;], [/\\xcb\\/gi, &quot;Ë&quot;], [/\\xcc\\/gi, &quot;Ì&quot;], [/\\xcd\\/gi, &quot;Í&quot;], [/\\xce\\/gi, &quot;Î&quot;], [/\\xcf\\/gi, &quot;Ï&quot;], [/\\xd0\\/gi, &quot;Ð&quot;], [/\\xd1\\/gi, &quot;Ñ&quot;],
			[/\\xd2\\/gi, &quot;Ò&quot;], [/\\xd3\\/gi, &quot;Ó&quot;], [/\\xd4\\/gi, &quot;Ô&quot;], [/\\xd5\\/gi, &quot;Õ&quot;], [/\\xd6\\/gi, &quot;Ö&quot;], [/\\xd7\\/gi, &quot;×&quot;], [/\\xd8\\/gi, &quot;Ø&quot;], [/\\xd9\\/gi, &quot;Ù&quot;], [/\\xda\\/gi, &quot;Ú&quot;],
			[/\\xdb\\/gi, &quot;Û&quot;], [/\\xdc\\/gi, &quot;Ü&quot;], [/\\xdd\\/gi, &quot;Ý&quot;], [/\\xde\\/gi, &quot;Þ&quot;], [/\\xdf\\/gi, &quot;ß&quot;], [/\\xe0\\/gi, &quot;à&quot;], [/\\xe1\\/gi, &quot;á&quot;], [/\\xe2\\/gi, &quot;â&quot;], [/\\xe3\\/gi, &quot;ã&quot;],
			[/\\xe4\\/gi, &quot;ä&quot;], [/\\xe5\\/gi, &quot;å&quot;], [/\\xe6\\/gi, &quot;æ&quot;], [/\\xe7\\/gi, &quot;ç&quot;], [/\\xe8\\/gi, &quot;è&quot;], [/\\xe9\\/gi, &quot;é&quot;], [/\\xea\\/gi, &quot;ê&quot;], [/\\xeb\\/gi, &quot;ë&quot;], [/\\xec\\/gi, &quot;ì&quot;],
			[/\\xed\\/gi, &quot;í&quot;], [/\\xee\\/gi, &quot;î&quot;], [/\\xef\\/gi, &quot;ï&quot;], [/\\xf0\\/gi, &quot;ð&quot;], [/\\xf1\\/gi, &quot;ñ&quot;], [/\\xf2\\/gi, &quot;ò&quot;], [/\\xf3\\/gi, &quot;ó&quot;], [/\\xf4\\/gi, &quot;ô&quot;], [/\\xf5\\/gi, &quot;õ&quot;],
			[/\\xf6\\/gi, &quot;ö&quot;], [/\\xf7\\/gi, &quot;÷&quot;], [/\\xf8\\/gi, &quot;ø&quot;], [/\\xf9\\/gi, &quot;ù&quot;], [/\\xfa\\/gi, &quot;ú&quot;], [/\\xfb\\/gi, &quot;û&quot;], [/\\xfc\\/gi, &quot;ü&quot;], [/\\xfd\\/gi, &quot;ý&quot;], [/\\xfe\\/gi, &quot;þ&quot;],
			[/\\xff\\/gi, &quot;ÿ&quot;], [/\\x91\\/gi, &quot;‘&quot;], [/\\x92\\/gi, &quot;’&quot;], [/\\x80\\/gi, &quot;€&quot;], [/\\x83\\/gi, &quot;ƒ&quot;], [/\\x85\\/gi, &quot;…&quot;], [/\\x86\\/gi, &quot;†&quot;], [/\\x87\\/gi, &quot;‡&quot;], [/\\x88\\/gi, &quot;ˆ&quot;],
			[/\\x89\\/gi, &quot;‰&quot;], [/\\x8a\\/gi, &quot;Š&quot;], [/\\x8b\\/gi, &quot;‹&quot;], [/\\x8c\\/gi, &quot;Œ&quot;], [/\\x8e\\/gi, &quot;Ž&quot;], [/\\x93\\/gi, &quot;“&quot;], [/\\x94\\/gi, &quot;”&quot;], [/\\x95\\/gi, &quot;•&quot;], [/\\x96\\/gi, &quot;–&quot;],
			[/\\x97\\/gi, &quot;—&quot;], [/\\x98\\/gi, &quot;˜&quot;], [/\\x99\\/gi, &quot;™&quot;], [/\\x9a\\/gi, &quot;š&quot;], [/\\x9b\\/gi, &quot;›&quot;], [/\\x9c\\/gi, &quot;œ&quot;], [/\\x9e\\/gi, &quot;ž&quot;], [/\\x9f\\/gi, &quot;Ÿ&quot;], [/\\x2079\\/gi, &quot;⁹&quot;],
			[/Ã¡/g, &quot;á&quot;], [/Ã³/g, &quot;ó&quot;], [/Âµ/g, &quot;µ&quot;], [/Ã£/g, &quot;ã&quot;], [/Ã§/g, &quot;ç&quot;], [/Ã©/g, &quot;é&quot;], [/Ãº/g, &quot;ú&quot;], [/Â³/g, &quot;³&quot;], [/\\.br\\/gi, &quot; &quot;], [/  +/g, &apos; &apos;], [/Âº/g, &quot;º&quot;], [/Ã&#x81;/g, &quot;Á&quot;],
			[/Ã¢/g, &quot;â&quot;], [/Ãµ/g, &quot;õ&quot;], [/Ã&#x87;Ã&#x83;/g, &quot;ÇÃ&quot;], [/Ã&#x8d;/g, &apos;Í&apos;], [/Ã&#x87;Ã&#x95;/g, &apos;ÇÕ&apos;], [/Ã&#x93;/g, &quot;Ó&quot;]
			];
	
	for(var i = 0; i &lt; hexMapping.length; i++){
		result = result.replace(hexMapping[i][0], hexMapping[i][1]);
	}

	var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
	for(var i = 0; i &lt; replaceList.length; i++){
		do{
			result = result.replace(replaceList[i][0], replaceList[i][1]);
		}while(result.indexOf(replaceList[i][0]) &gt; -1);
	}
	
	return result;
}



function encodeIsoLatin(result) {
	var hexMapping = [
			/* [&quot;\\x21\\&quot;, &quot;!&quot;], [&quot;\\x3f\\&quot;, &quot;?&quot;], [&quot;\\x2c\\&quot;, &quot;,&quot;], [&quot;\\x3a\\&quot;, &quot;:&quot;], [&quot;\\x2e\\&quot;, &quot;.&quot;], [&quot;\\xa0\\&quot;, &quot; &quot;], [&quot;\\xad\\&quot;, &quot; &quot;], [&quot;\\x2d\\&quot;, &quot;-&quot;], [&quot;\\x5b\\&quot;, &quot;[&quot;], [&quot;\\x5d\\&quot;, &quot;]&quot;], [&quot;\\x5c\\&quot;, &quot;\\&quot;]*/ 
			[&quot;\\x22\\&quot;, /&quot;/g], [&quot;\\x23\\&quot;, /#/g], [&quot;\\x24\\&quot;, /\$/g], [&quot;\\x25\\&quot;, /%/g], [&quot;\\x26\\&quot;, /&amp;/g], [&quot;\\x27\\&quot;, /&apos;/g],
			[&quot;\\x2a\\&quot;, /\*/g], [&quot;\\x2b\\&quot;, /\+/g], [&quot;\\x2f\\&quot;, /\//g], [&quot;\\x3b\\&quot;, /;/g],
			[&quot;\\x3c\\&quot;, /&lt;/g], [&quot;\\x3d\\&quot;, /=/g], [&quot;\\x3e\\&quot;, /&gt;/g], [&quot;\\x40\\&quot;, /@/g], 
			[&quot;\\x5e\\&quot;, /\^/g], [&quot;\\x5f\\&quot;, /_/g], [&quot;\\x60\\&quot;, /`/g], [&quot;\\x7b\\&quot;, /{/g], [&quot;\\x7c\\&quot;, /\|/g], [&quot;\\x7d\\&quot;, /}/g], 
			[&quot;\\x7e\\&quot;, /~/g], [&quot;\\xa1\\&quot;, /¡/g], [&quot;\\xa2\\&quot;, /¢/g], [&quot;\\xa3\\&quot;, /£/g], [&quot;\\xa4\\&quot;, /¤/g], [&quot;\\xa5\\&quot;, /¥/g],
			[&quot;\\xa6\\&quot;, /¦/g], [&quot;\\xa7\\&quot;, /§/g], [&quot;\\xa8\\&quot;, /¨/g], [&quot;\\xa9\\&quot;, /©/g], [&quot;\\xaa\\&quot;, /ª/g], [&quot;\\xab\\&quot;, /«/g], [&quot;\\xac\\&quot;, /¬/g], [&quot;\\xae\\&quot;, /®/g],
			[&quot;\\xaf\\&quot;, /¯/g], [&quot;\\xb0\\&quot;, /°/g], [&quot;\\xb1\\&quot;, /±/g], [&quot;\\xb2\\&quot;, /²/g], [&quot;\\xb3\\&quot;, /³/g], [&quot;\\xb4\\&quot;, /´/g], [&quot;\\xb5\\&quot;, /µ/g], [&quot;\\xb6\\&quot;, /¶/g],
			[&quot;\\xb7\\&quot;, /·/g], [&quot;\\xb8\\&quot;, /¸/g], [&quot;\\xb9\\&quot;, /¹/g], [&quot;\\xba\\&quot;, /º/g], [&quot;\\xbb\\&quot;, /»/g], [&quot;\\xbc\\&quot;, /¼/g], [&quot;\\xbd\\&quot;, /½/g], [&quot;\\xbe\\&quot;, /¾/g], [&quot;\\xbf\\&quot;, /¿/],
			[&quot;\\xc0\\&quot;, /À/g], [&quot;\\xc1\\&quot;, /Á/g], [&quot;\\xc2\\&quot;, /Â/g], [&quot;\\xc3\\&quot;, /Ã/g], [&quot;\\xc4\\&quot;, /Ä/g], [&quot;\\xc5\\&quot;, /Å/g], [&quot;\\xc6\\&quot;, /Æ/g], [&quot;\\xc7\\&quot;, /Ç/g], [&quot;\\xc8\\&quot;, /È/g],
			[&quot;\\xc9\\&quot;, /É/g], [&quot;\\xca\\&quot;, /Ê/g], [&quot;\\xcb\\&quot;, /Ë/g], [&quot;\\xcc\\&quot;, /Ì/g], [&quot;\\xcd\\&quot;, /Í/g], [&quot;\\xce\\&quot;, /Î/g], [&quot;\\xcf\\&quot;, /Ï/g], [&quot;\\xd0\\&quot;, /Ð/g], [&quot;\\xd1\\&quot;, /Ñ/g],
			[&quot;\\xd2\\&quot;, /Ò/g], [&quot;\\xd3\\&quot;, /Ó/g], [&quot;\\xd4\\&quot;, /Ô/g], [&quot;\\xd5\\&quot;, /Õ/g], [&quot;\\xd6\\&quot;, /Ö/g], [&quot;\\xd7\\&quot;, /×/g], [&quot;\\xd8\\&quot;, /Ø/g], [&quot;\\xd9\\&quot;, /Ù/g], [&quot;\\xda\\&quot;, /Ú/g],
			[&quot;\\xdb\\&quot;, /Û/g], [&quot;\\xdc\\&quot;, /Ü/g], [&quot;\\xdd\\&quot;, /Ý/g], [&quot;\\xde\\&quot;, /Þ/g], [&quot;\\xdf\\&quot;, /ß/g], [&quot;\\xe0\\&quot;, /à/g], [&quot;\\xe1\\&quot;, /á/g], [&quot;\\xe2\\&quot;, /â/g], [&quot;\\xe3\\&quot;, /ã/g],
			[&quot;\\xe4\\&quot;, /ä/g], [&quot;\\xe5\\&quot;, /å/g], [&quot;\\xe6\\&quot;, /æ/g], [&quot;\\xe7\\&quot;, /ç/g], [&quot;\\xe8\\&quot;, /è/g], [&quot;\\xe9\\&quot;, /é/g], [&quot;\\xea\\&quot;, /ê/g], [&quot;\\xeb\\&quot;, /ë/g], [&quot;\\xec\\&quot;, /ì/g],
			[&quot;\\xed\\&quot;, /í/g], [&quot;\\xee\\&quot;, /î/g], [&quot;\\xef\\&quot;, /ï/g], [&quot;\\xf0\\&quot;, /ð/g], [&quot;\\xf1\\&quot;, /ñ/g], [&quot;\\xf2\\&quot;, /ò/g], [&quot;\\xf3\\&quot;, /ó/g], [&quot;\\xf4\\&quot;, /ô/g], [&quot;\\xf5\\&quot;, /õ/g],
			[&quot;\\xf6\\&quot;, /ö/g], [&quot;\\xf7\\&quot;, /÷/g], [&quot;\\xf8\\&quot;, /ø/g], [&quot;\\xf9\\&quot;, /ù/g], [&quot;\\xfa\\&quot;, /ú/g], [&quot;\\xfb\\&quot;, /û/g], [&quot;\\xfc\\&quot;, /ü/g], [&quot;\\xfd\\&quot;, /ý/g], [&quot;\\xfe\\&quot;, /þ/g],
			[&quot;\\xff\\&quot;, /ÿ/g], [&quot;\\x91\\&quot;, /‘/g], [&quot;\\x92\\&quot;, /’/g], [&quot;\\x80\\&quot;, /€/g], [&quot;\\x83\\&quot;, /ƒ/g], [&quot;\\x85\\&quot;, /…/g], [&quot;\\x86\\&quot;, /†/g], [&quot;\\x87\\&quot;, /‡/g], [&quot;\\x88\\&quot;, /ˆ/g],
			[&quot;\\x89\\&quot;, /‰/g], [&quot;\\x8a\\&quot;, /Š/g], [&quot;\\x8b\\&quot;, /‹/g], [&quot;\\x8c\\&quot;, /Œ/g], [&quot;\\x8e\\&quot;, /Ž/g], [&quot;\\x93\\&quot;, /“/g], [&quot;\\x94\\&quot;, /”/g], [&quot;\\x95\\&quot;, /•/g], [&quot;\\x96\\&quot;, /–/g],
			[&quot;\\x97\\&quot;, /—/g], [&quot;\\x98\\&quot;, /˜/g], [&quot;\\x99\\&quot;, /™/g], [&quot;\\x9a\\&quot;, /š/g], [&quot;\\x9b\\&quot;, /›/g], [&quot;\\x9c\\&quot;, /œ/g], [&quot;\\x9e\\&quot;, /ž/g], [&quot;\\x9f\\&quot;, /Ÿ/g], [&quot;\\x2079\\&quot;, /⁹/g],
			[&quot;\\x0a\\&quot;, /\n/g], [&quot;\\x0d\\&quot;, /\r/g]
			];
	
	if (result != null){
		for(var i = 0; i &lt; hexMapping.length; i++){
			result = result.replace(hexMapping[i][1], hexMapping[i][0]);
		}		

		var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
		for(var i = 0; i &lt; replaceList.length; i++){
			do{
				result = result.replace(replaceList[i][1], replaceList[i][0]);
			}while(result.indexOf(replaceList[i][0]) &gt; -1);
		}
	}
	
	return result;
}


function hexMappingReservatedChars(result) {
	var pattern = [[/\\T\\/g, &quot;&amp;&quot; ], [/\\R\\/g, &apos;~&apos;], [/\\E\\/g, &apos;\\&apos;], [/\\F\\/g, &apos;|&apos;], [/\\S\\/g, &apos;^&apos;]];
	
	for(var i = 0; i &lt; pattern.length; i++){
		result = result.replace(pattern[i][0], pattern[i][1]);
	}
	
	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fde5f48b-6860-49be-a9ab-dfb0e4ba3b97</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790008</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
  </channels>
</channelGroup>