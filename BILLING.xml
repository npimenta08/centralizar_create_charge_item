<channelGroup version="3.12.0">
  <id>9808dee1-402d-4606-acad-475174c4619d</id>
  <name>BILLING</name>
  <revision>2</revision>
  <lastModified>
    <time>1730893892662</time>
    <timezone>Europe/Lisbon</timezone>
  </lastModified>
  <description></description>
  <channels>
    <channel version="3.12.0">
      <id>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</id>
      <nextMetaDataId>16</nextMetaDataId>
      <name>CREATE_MEDICAL_VISIT_CHARGE_ITEM_OUT</name>
      <description>Descrição:&#xd;
Pedidos de Visita (?)&#xd;
&#xd;
Documentação:&#xd;
https://b-simple.atlassian.net/wiki/spaces/IE/pages/237404161/Pedidos+de+Visita&#xd;
https://b-simple.atlassian.net/wiki/x/BYBXEQ&#xd;
&#xd;
Versão:&#xd;
2.0.0&#xd;
	ChangeLog:&#xd;
	1.0.0 - #94689: Envio de mensagem para o sistema externo quando visita de especialidade é concluída (Primeiro versionamento)&#xd;
	2.0.0 - #98303: reestruturação do canal para centralizar a lógica de construção do ChargeItem no canal FUNC_CREATE_CHARGE_ITEM&#xd;
&#xd;
Dependências:&#xd;
- queueDeclareRMQ()&#xd;
- readQueueRMQ()&#xd;
- generateLogMsg()&#xd;
- DateUtc()&#xd;
- getIdentificador()&#xd;
&#xd;
Canais interligados:&#xd;
- FUNC_CREATE_CHARGE_ITEM&#xd;
&#xd;
Variáveis de ambiente:&#xd;
- RabbitMqHost&#xd;
- RabbitMqPort&#xd;
- RabbitMqUsername&#xd;
- RabbitMqPassword&#xd;
- RabbitMqVirtualHost&#xd;
- RabbitMqExchange_PedidoVisitaMedico&#xd;
- FhirServer_IMTHOM_Host&#xd;
- localAddress</description>
      <revision>2</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <pollConnectorProperties version="3.12.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>false</pollOnStart>
            <pollingFrequency>1000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <script>var inExchangeName = $(&apos;RabbitMqExchange_PedidoVisitaMedico&apos;);
var inAutoAck = false;
var inCommit = true;
result = readQueueRMQ(inExchangeName, inAutoAck, inCommit);
return result;</script>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>numSequencial</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>numSequencial</variable>
              <mapping>msg[&apos;doente&apos;][&apos;numSequencial&apos;]</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>visita</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>var mappingVisita = getIdentificador(msg[&apos;episodioIdentificadores&apos;], &quot;encounter.id&quot;);

channelMap.put(&apos;visita&apos;, validate(mappingVisita, &apos;&apos;, new Array()));</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>chargeItemId</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <variable>chargeItemId</variable>
              <mapping>msg[&apos;id&apos;]</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>anulado</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <variable>anulado</variable>
              <mapping>msg[&apos;anulado&apos;]</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>concluido</name>
              <sequenceNumber>4</sequenceNumber>
              <enabled>true</enabled>
              <variable>concluido</variable>
              <mapping>msg[&apos;concluido&apos;]</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>dataInicio</name>
              <sequenceNumber>5</sequenceNumber>
              <enabled>true</enabled>
              <variable>dataInicio</variable>
              <mapping>msg[&apos;dataInicio&apos;]</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>dataFim</name>
              <sequenceNumber>6</sequenceNumber>
              <enabled>true</enabled>
              <variable>dataFim</variable>
              <mapping>msg[&apos;dataFim&apos;]</mapping>
              <defaultValue></defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Set destinations</name>
              <sequenceNumber>7</sequenceNumber>
              <enabled>false</enabled>
              <script>var activeDestinations = []

if(msg[&apos;concluido&apos;] == true){

	activeDestinations = [&quot;CreateChargeItem - Pedido de Visita&quot;];
}else{
	activeDestinations = [&quot;CreateChargeItem - Pedido de Visita&quot;];
}

destinationSet.removeAllExcept(activeDestinations);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">ewogICAgICAgICJpZCI6ICIwNDM2ODE5Ny1hNTlhLTQ1YWEtYjdhYy00NjE0NmRjN2FlYmYiLAogICAgICAgICJlcGlzb2Rpb0lkIjogMTc0Nzg2LAogICAgICAgICJlcGlzb2Rpb0lkZW50aWZpY2Fkb3JlcyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNpc3RlbWFDb2RpZmljYWRvciI6ICJWSVNJVEEtUkVGRVhUIiwKICAgICAgICAgICAgICAgICJjb2RpZ28iOiAidGVzdGUtdGlhZ28iCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjb25jbHVpZG8iOiB0cnVlLAogICAgICAgICJhbnVsYWRvIjogZmFsc2UsCiAgICAgICAgImRhdGFJbmljaW8iOiAiMjAyNC0wOC0wNlQxMzowMTowMFoiLAogICAgICAgICJkYXRhRmltIjogIjIwMjQtMDgtMDZUMTc6MDE6MDBaIiwKICAgICAgICAib2JzZXJ2YWNvZXMiOiBudWxsLAogICAgICAgICJkb2VudGVJZCI6IDEyOTYyMjE4LAogICAgICAgICJkb2VudGUiOiB7CiAgICAgICAgICAgICJudW1Qcm9jZXNzbyI6IG51bGwsCiAgICAgICAgICAgICJudW1TZXF1ZW5jaWFsIjogIjM1NzY0NTkxIiwKICAgICAgICAgICAgInRpcG9Eb2VudGUiOiBudWxsLAogICAgICAgICAgICAibm9tZURvZW50ZSI6ICJNQVJJQSBURVJFU0EgTEVJVMODTyBERSBDQVJWQUxITyBHT1VWRUlBIFRFSVhFSVJBIiwKICAgICAgICAgICAgImRhdGFOYXNjaW1lbnRvIjogIjE5ODctMDctMjVUMDA6MDA6MDAiLAogICAgICAgICAgICAic2V4b1JlZkV4dCI6ICJGIiwKICAgICAgICAgICAgImNvbnRhY3RvVGVsZWZvbmUiOiBudWxsLAogICAgICAgICAgICAiY29udGFjdG9UZWxlbW92ZWwiOiAiOTE2NTI0NTkzIiwKICAgICAgICAgICAgImNvbnRhY3RvRW1haWwiOiAibXRlcmVzYWNmcGNlQGhvdG1haWwuY29tIiwKICAgICAgICAgICAgIm5hY2lvbmFsaWRhZGVSZWZFeHQiOiAiNjIwIiwKICAgICAgICAgICAgIm1vcmFkYVJ1YSI6ICJSVUEgSk9SR0UgQkFSUkFEQVMgTsK6IDMyIDfCuiBDIiwKICAgICAgICAgICAgIm1vcmFkYUNpZGFkZSI6IG51bGwsCiAgICAgICAgICAgICJtb3JhZGFMb2NhbGlkYWRlIjogbnVsbCwKICAgICAgICAgICAgIm1vcmFkYUNvZGlnb1Bvc3RhbCI6IG51bGwKICAgICAgICB9LAogICAgICAgICJ1dGlsaXphZG9yZXMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IC02MywKICAgICAgICAgICAgICAgICJsb2dpbiI6ICJiLWxmYXJpYSIsCiAgICAgICAgICAgICAgICAibm9tZSI6ICJCU19MdcOtcyBGYXJpYSIsCiAgICAgICAgICAgICAgICAibnVtTWVjYW5vZ3JhZmljbyI6ICJCU19OdW1NZWNfLTYzIiwKICAgICAgICAgICAgICAgICJudW1PcmRlbSI6ICIyODEyMTk4OCIsCiAgICAgICAgICAgICAgICAibnVtRnVuY2lvbmFyaW8iOiAiQlNfRnVuY18tNjMiLAogICAgICAgICAgICAgICAgInBlcmZpbCI6IDEsCiAgICAgICAgICAgICAgICAiaW50UmVmRXh0IjogIkJTX051bU1lY18tNjMiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.12.0">
              <name>Accept message if &quot;msg[&apos;concluido&apos;]&quot; equals true</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <field>msg[&apos;concluido&apos;]</field>
              <condition>EQUALS</condition>
              <values>
                <string>true</string>
              </values>
            </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
          </elements>
        </filter>
        <transportName>JavaScript Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>15</metaDataId>
          <name>Send FUNC_CREATE_CHARGE_ITEM</name>
          <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <channelId>74dbb502-8da5-45ee-90ed-3ccc48afe44c</channelId>
            <channelTemplate>${message.encodedData}</channelTemplate>
            <mapVariables/>
          </properties>
          <transformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Adaptar p/ FUNC_CREATE_CHARGE_ITEM</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// falta codigoIdentificadores, codigoDescr e submissaoSistExterno
msg[&apos;codigoIdentificadores&apos;] = [];
var obj = {};
obj.sistemaCodificador = &quot;INTRefExt&quot;;
obj.codigo = &quot;1000621&quot;;
msg[&apos;codigoIdentificadores&apos;].push(obj);

msg[&apos;codigoDescr&apos;] = &quot;Urgência Geral com chamada de especialista&quot;;

msg[&apos;submissaoSistExterno&apos;] = true; //sempre faturado

msg[&apos;obs&apos;] = msg[&apos;observacoes&apos;];

msg[&apos;data&apos;] = msg[&apos;dataInicio&apos;];</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICAgICAgICJpZCI6ICIwNDM2ODE5Ny1hNTlhLTQ1YWEtYjdhYy00NjE0NmRjN2FlYmYiLAogICAgICAgICJlcGlzb2Rpb0lkIjogMTc0Nzg2LAogICAgICAgICJlcGlzb2Rpb0lkZW50aWZpY2Fkb3JlcyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNpc3RlbWFDb2RpZmljYWRvciI6ICJWSVNJVEEtUkVGRVhUIiwKICAgICAgICAgICAgICAgICJjb2RpZ28iOiAidGVzdGUtdGlhZ28iCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjb25jbHVpZG8iOiB0cnVlLAogICAgICAgICJhbnVsYWRvIjogZmFsc2UsCiAgICAgICAgImRhdGFJbmljaW8iOiAiMjAyNC0wOC0wNlQxMzowMTowMFoiLAogICAgICAgICJkYXRhRmltIjogIjIwMjQtMDgtMDZUMTc6MDE6MDBaIiwKICAgICAgICAib2JzZXJ2YWNvZXMiOiBudWxsLAogICAgICAgICJkb2VudGVJZCI6IDEyOTYyMjE4LAogICAgICAgICJkb2VudGUiOiB7CiAgICAgICAgICAgICJudW1Qcm9jZXNzbyI6IG51bGwsCiAgICAgICAgICAgICJudW1TZXF1ZW5jaWFsIjogIjM1NzY0NTkxIiwKICAgICAgICAgICAgInRpcG9Eb2VudGUiOiBudWxsLAogICAgICAgICAgICAibm9tZURvZW50ZSI6ICJNQVJJQSBURVJFU0EgTEVJVMODTyBERSBDQVJWQUxITyBHT1VWRUlBIFRFSVhFSVJBIiwKICAgICAgICAgICAgImRhdGFOYXNjaW1lbnRvIjogIjE5ODctMDctMjVUMDA6MDA6MDAiLAogICAgICAgICAgICAic2V4b1JlZkV4dCI6ICJGIiwKICAgICAgICAgICAgImNvbnRhY3RvVGVsZWZvbmUiOiBudWxsLAogICAgICAgICAgICAiY29udGFjdG9UZWxlbW92ZWwiOiAiOTE2NTI0NTkzIiwKICAgICAgICAgICAgImNvbnRhY3RvRW1haWwiOiAibXRlcmVzYWNmcGNlQGhvdG1haWwuY29tIiwKICAgICAgICAgICAgIm5hY2lvbmFsaWRhZGVSZWZFeHQiOiAiNjIwIiwKICAgICAgICAgICAgIm1vcmFkYVJ1YSI6ICJSVUEgSk9SR0UgQkFSUkFEQVMgTsK6IDMyIDfCuiBDIiwKICAgICAgICAgICAgIm1vcmFkYUNpZGFkZSI6IG51bGwsCiAgICAgICAgICAgICJtb3JhZGFMb2NhbGlkYWRlIjogbnVsbCwKICAgICAgICAgICAgIm1vcmFkYUNvZGlnb1Bvc3RhbCI6IG51bGwKICAgICAgICB9LAogICAgICAgICJ1dGlsaXphZG9yZXMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IC02MywKICAgICAgICAgICAgICAgICJsb2dpbiI6ICJiLWxmYXJpYSIsCiAgICAgICAgICAgICAgICAibm9tZSI6ICJCU19MdcOtcyBGYXJpYSIsCiAgICAgICAgICAgICAgICAibnVtTWVjYW5vZ3JhZmljbyI6ICJCU19OdW1NZWNfLTYzIiwKICAgICAgICAgICAgICAgICJudW1PcmRlbSI6ICIyODEyMTk4OCIsCiAgICAgICAgICAgICAgICAibnVtRnVuY2lvbmFyaW8iOiAiQlNfRnVuY18tNjMiLAogICAgICAgICAgICAgICAgInBlcmZpbCI6IDEsCiAgICAgICAgICAgICAgICAiaW50UmVmRXh0IjogIkJTX051bU1lY18tNjMiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Custom metadata</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>// ter em atenção que resource é uma lista (resource:[]) na entrada relativa ao ChargeItem!

try {
	channelMap.put(&apos;bundleId&apos;, msg[&apos;id&apos;]);
	channelMap.put(&apos;chargeItemId&apos;, msg[&apos;entry&apos;][0][&apos;resource&apos;][&apos;focus&apos;][0][&apos;reference&apos;].replace(&quot;ChargeItem/&quot;, &quot;&quot;)); //só vem um ChargeItem
	
} catch (error) {
	channelMap.put(&apos;erroCustomMetadata&apos;, error.toString());
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICAgInJlc291cmNlVHlwZSI6ICJCdW5kbGUiLAogICAgImlkIjogImQ2YzU5ODM1LTVlYjktNDkxZi04YTY4LTI3NDhkY2U4ODUyMyIsCiAgICAidHlwZSI6ICJtZXNzYWdlIiwKICAgICJ0aW1lc3RhbXAiOiAiMjAyNC0xMC0yM1QxNDoxNTozNy4wMDAwMzA4KzAxOjAwIiwKICAgICJlbnRyeSI6CiAgICBbCiAgICAgICAgewogICAgICAgICAgICAicmVzb3VyY2UiOgogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicmVzb3VyY2VUeXBlIjogIk1lc3NhZ2VIZWFkZXIiLAogICAgICAgICAgICAgICAgImlkIjogImQ2YzU5ODM1LTVlYjktNDkxZi04YTY4LTI3NDhkY2U4ODUyMyIsCiAgICAgICAgICAgICAgICAiZXZlbnRDb2RpbmciOgogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0cHM6Ly9ic2ltcGxlLWVzYi1zYXQtYS5pLmptc2xhYi5wdC9maGlyL0NvZGVTeXN0ZW0vRmhpclNlcnZlck91dE1lc3NhZ2VzIiwKICAgICAgICAgICAgICAgICAgICAiY29kZSI6ICJDcmVhdGVDaGFyZ2VJdGVtIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJkZXN0aW5hdGlvbiI6CiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJJTVRIT00iLAogICAgICAgICAgICAgICAgICAgICAgICAiZW5kcG9pbnQiOiAiaHR0cHM6Ly90aG9tLWZoaXIuYXBpcy5zYXQuam1zbGFiLnB0L2ZoaXIvJHByb2Nlc3MtbWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgInNvdXJjZSI6CiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiUGF0aWVudENhcmUiLAogICAgICAgICAgICAgICAgICAgICJlbmRwb2ludCI6ICJodHRwczovL2JzaW1wbGUtZXNiLXNhdC1hLmkuam1zbGFiLnB0L2ZoaXIvcjQvJHByb2Nlc3MtbWVzc2FnZSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiZm9jdXMiOgogICAgICAgICAgICAgICAgW3sKICAgICAgICAgICAgICAgICAgICAicmVmZXJlbmNlIjogIkNoYXJnZUl0ZW0vM2RhN2MzMmQtZjNlNy00MDI1LWI1ODItMjgxMWY1YmU5ZTZhIgogICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAicmVzb3VyY2UiOgogICAgICAgICAgICBbewogICAgICAgICAgICAgICAgInJlc291cmNlVHlwZSI6ICJDaGFyZ2VJdGVtIiwKICAgICAgICAgICAgICAgICJpZCI6ICIzZGE3YzMyZC1mM2U3LTQwMjUtYjU4Mi0yODExZjViZTllNmEiLAogICAgICAgICAgICAgICAgImlkZW50aWZpZXIiOgogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgInVzZSI6ICJvZmZpY2lhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjoKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGluZyI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3lzdGVtIjogImh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdjItMDIwMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2RlIjogIlBMQUMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGlzcGxheSI6ICJQbGFjZXIgSWRlbnRpZmllciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0cHM6Ly9ic2ltcGxlLWVzYi1zYXQtYS5pLmptc2xhYi5wdC9maGlyL3I0L0NoYXJnZUl0ZW0uSWQiLAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiM2RhN2MzMmQtZjNlNy00MDI1LWI1ODItMjgxMWY1YmU5ZTZhIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAic3RhdHVzIjogImJpbGxhYmxlIiwKICAgICAgICAgICAgICAgICJjb2RlIjoKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAiY29kaW5nIjoKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzeXN0ZW0iOiAiaHR0cHM6Ly9ic2ltcGxlLWVzYi1zYXQtYS5pLmptc2xhYi5wdC9maGlyL0NvZGVTeXN0ZW0vUHJvZHVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29kZSI6ICI0OTM2OCIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInN5c3RlbSI6ICJodHRwczovL2N1Zi5wdC9maGlyL0NvZGVTeXN0ZW0vUHJvZHVjdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29kZSI6ICIxMDAwMDAyODciCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIlBBUkFDRVRBTU9MIDUwMCBNRyBDT01QIE9SIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdWJqZWN0IjoKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAicmVmZXJlbmNlIjogIlBhdGllbnQvNDA1NjUxMDQiLAogICAgICAgICAgICAgICAgICAgICJpZGVudGlmaWVyIjoKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJ1c2UiOiAib2ZmaWNpYWwiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6CiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb2RpbmciOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN5c3RlbSI6ICJodHRwczovL2N1Zi5wdC9maGlyL0NvZGVTeXN0ZW0vUGF0aWVudENvZGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY29kZSI6ICJKTVMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IjogIkpNUyBJZGVudGlmaWVyIgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiNDA1NjUxMDQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJjb250ZXh0IjoKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAicmVmZXJlbmNlIjogIkVuY291bnRlci9mODBjY2RiMy0yZDkxLWVmMTEtOGVkNC0wMDUwNTY5ZjAwMDEiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm9jY3VycmVuY2VEYXRlVGltZSI6ICIyMDI0LTEwLTIzVDEzOjE1OjAwWiIsCiAgICAgICAgICAgICAgICAicGVyZm9ybWVyIjoKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJhY3RvciI6CiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZWZlcmVuY2UiOiAiUHJhY3RpdGlvbmVyLzIwNzI5MTM1NyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaWRlbnRpZmllciI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVzZSI6ICJvZmZpY2lhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGluZyI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3lzdGVtIjogImh0dHBzOi8vY3VmLnB0L2ZoaXIvQ29kZVN5c3RlbS9QZXJzb25JZGVudGlmaWVyVHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvZGUiOiAiNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiTi7CuiBtZWNhbm9ncsOhZmljbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIyMDcyOTEzNTciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgInF1YW50aXR5IjoKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dCiAgICAgICAgfQogICAgXQp9</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>Channel Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
logger.info(generateLogMsg(&quot;billing&quot;, message, null, null, null, null, null));
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

// Criar queue na exchange
var inExchangeName = $(&apos;RabbitMqExchange_PedidoVisitaMedico&apos;);
var inExchangeType = &quot;fanout&quot;;
var inQueueName = $(&apos;RabbitMqExchange_PedidoVisitaMedico&apos;);
var inRoutingKey = null;
queueDeclareRMQ(inExchangeName, inExchangeType, inQueueName, inRoutingKey);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>false</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>NUMSEQUENCIAL</name>
            <type>STRING</type>
            <mappingName>numSequencial</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISITA</name>
            <type>STRING</type>
            <mappingName>visita</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>ANULADO</name>
            <type>STRING</type>
            <mappingName>anulado</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CONCLUIDO</name>
            <type>STRING</type>
            <mappingName>concluido</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>DATAINICIO</name>
            <type>STRING</type>
            <mappingName>dataInicio</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>DATAFIM</name>
            <type>STRING</type>
            <mappingName>dataFim</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>BUNDLEID</name>
            <type>STRING</type>
            <mappingName>bundleId</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>CHARGEITEMID</name>
            <type>STRING</type>
            <mappingName>chargeItemId</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1730138339075</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>60</pruneMetaDataDays>
            <pruneContentDays>60</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>6cc8a9f9-7d96-4990-96a8-0ff41be6b101</id>
            <name>Logger Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089520</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Funções auxiliares para o logging de mensagens dos canais</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>bc286d01-89d0-4a3f-916e-09a25a4e68c7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>68dfb5b9-bb8e-418d-8425-79fe31bd7538</id>
                <name>generateLogMsg</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to build and return a log msg, originating from any channel.
	Documentação função: https://b-simple.atlassian.net/wiki/x/AoACBg
	Documentação Entity e Tags: https://b-simple.atlassian.net/wiki/x/AgB_Bg

	@param theEntity {String} - string that denotes the group of messages the message belongs to, i.e appointment, document, cda, accident, etc.
	@param {Class} message - ImmutableConnectorMessage Class message containing information about all connectors that a
		message passed through
	@param tagsArr {Array} - array of user-defined and relevant tags that should be associated with the message
	@param sourceServer {String} - message&apos;s source app/entity (name of the app or entity responsible for sending the messge to the channel)
	@param destinationServerMap {Map} - Map&lt;int,string&gt; , where the key is the destination&apos;s metadataID and the value is the entity to which such destination&apos;s message was sent to
	@param {Array} sourceMetadataArr - source metadata: metadata associated with the source processing 
	@param {Array} destinationsMetadataArr - destinations metadata: metadata associated with the destinations processing
	@return {Object JSON} message log
*/
function generateLogMsg(theEntity, message, tagsArr, sourceServer, destinationServerMap, sourceMetadataArr, destinationsMetadataMap) {
	if (message == undefined || message == null) {
		logger.info(&quot;sendMsgInfoLogChannel:message --&gt; message argument is mandatory!&quot;);
	} else {
		try {
			var logMsg = new Object();
		
			// messageSummary
			var messageSummaryObj = new Object();
			//messageID
			messageSummaryObj.messageId = message.getConnectorMessages().get(0).getMessageId();
			//messageOriginalID - não funciona ...
			//messageSummaryObj.messageOriginalId = message.getOriginalId();
			//channelID
			messageSummaryObj.channelId = message.getConnectorMessages().get(0).getChannelId();
			//serverID
			messageSummaryObj.serverId = message.getConnectorMessages().get(0).getServerId();
			//channelName
			messageSummaryObj.channelName = message.getConnectorMessages().get(0).getChannelName();
			//lastDeployedDate
			try {
				var controller = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createEngineController();
				var dashboardStatus = controller.getChannelStatus(message.getConnectorMessages().get(0).getChannelId());
				messageSummaryObj.lastDeployedDate = auxCalendarParse(dashboardStatus.getDeployedDate());
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:lastDeployedDate --&gt; &quot; + error.toString());
				messageSummaryObj.lastDeployedDate = null;
			}
			//entity
			messageSummaryObj.entity = theEntity == undefined ? null : theEntity;
			//tags
			messageSummaryObj.tags = (tagsArr == undefined || tagsArr == null) ? new Array() : tagsArr;
			//logDate
			var datestr = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
			var dateUTC = DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
			messageSummaryObj.logDate = dateUTC;
			//status
			var statusObj = new Object();
			statusObj.error = false;
			statusObj.code = null;
			statusObj.message = null;
			try {
				message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName (inclui Source também)
					value = parseInt(value);
					if (value != 0) { // só as destinations é que têm Response relativamente a erros, logo não dá para ir buscar Response de erro na Source (Source =metadataId 0)
						//code - testar no que isto dá! ??
						if (message.getConnectorMessages().get(value).getStatus().toString() == &apos;ERROR&apos;) {
							statusObj.error = true;
							/*
							if (statusObj.code != null) {
								statusObj.code = statusObj.code + &quot;;&quot; + message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							} else {
								statusObj.code = message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							}
							*/
							if (statusObj.message != null) {
								statusObj.message = statusObj.message + &quot;;&quot; + auxGetStatusMessage(value);
							} else {
								statusObj.message = auxGetStatusMessage(value);
							}
						}
					}
				});
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel: messageSummary status --&gt; &quot; + error.toString());
			}
			messageSummaryObj.status = statusObj;
		
			//metaData
			//messageSummaryObj.metaData = (summMetadataArr == undefined || summMetadataArr == null) ? new Array() : summMetadataArr;
			try {
				var listMetadataCol = com.mirth.connect.server.controllers.ChannelController.getInstance().getMetaDataColumns(messageSummaryObj.channelId);
				var metadataColArr = new Array();
				for (var i = 0; i &lt; listMetadataCol.size(); i++) {
					var metaObj = new Object();
					metaObj.name = listMetadataCol.get(i).getName();
					var mappingName = listMetadataCol.get(i).getMappingName();
					metaObj.value = (message.getConnectorMessages().get(0).getChannelMap().get(mappingName) == undefined) ? null : message.getConnectorMessages().get(0).getChannelMap().get(mappingName).toString(); // para ficarem todos como string
					if (metaObj.value != null) {
						metadataColArr.push(metaObj);
					}
				}
				messageSummaryObj.metaData = metadataColArr;
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
				messageSummaryObj.metadata = null;
			}
			
			logMsg.messageSummary = messageSummaryObj;
		
			// ------------------------
			//content
			var contentObj = new Object();
			//content.source
			var sourceObj = new Object();
			//content.source.server
			sourceObj.server = sourceServer == undefined ? null : sourceServer;
			//content.source.status
			sourceObj.status = message.getConnectorMessages().get(0).getStatus().toString();
			//content.source.statusMessage
			sourceObj.statusMessage = auxGetStatusMessage(0);
			//content.source.message
			sourceObj.message = isJSON(message.getConnectorMessages().get(0).getRawData()) ? JSON.parse(message.getConnectorMessages().get(0).getRawData()) : message.getConnectorMessages().get(0).getRawData(); //msg antes de passar pelo preprocessor e antes de ser mudada no Transformer
			//content.source.dataType
			sourceObj.dataType = message.getConnectorMessages().get(0).getRaw().getDataType();
			//content.source.date
			var dateCalendar = message.getConnectorMessages().get(0).getReceivedDate();
			var dateUTC = auxCalendarParse(dateCalendar);
			sourceObj.date = dateUTC;
			//content.source.metadata
			sourceObj.metaData = (sourceMetadataArr == undefined || sourceMetadataArr == null) ? new Array() : sourceMetadataArr;
			//content.source.responseMessage
			if (message.getConnectorMessages().get(0).getResponseData() == null) { // no response
				sourceObj.responseMessage = null;
			} else if (message.getConnectorMessages().get(0).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
				sourceObj.responseMessage = null;
			} else { //houve response 
				sourceObj.responseMessage = isJSON(message.getConnectorMessages().get(0).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(0).getResponseData().getMessage()) : message.getConnectorMessages().get(0).getResponseData().getMessage();
			}
			contentObj.source = sourceObj;
		
			// -------------------------
			//content.destinations
			var destinationsArray = new Array();
			message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName
				value = parseInt(value);
				if (value != 0) { //ignorar Source (metadataId=0)
					//logger.info(&quot;value= &quot; + typeof(value) + &quot; &quot; + value + &quot;;&quot; + &quot;key= &quot; + typeof(key) + &quot; &quot; + key);
					var destinationObj = new Object();
					//content.destinations.server
					if (destinationServerMap != undefined &amp;&amp; destinationServerMap != null) {
						if (destinationServerMap.has(value)) {
							destinationObj.server = destinationServerMap.get(value);
						} else {
							destinationObj.server = null;
						}
					} else {
						destinationObj.server = null;
					}
					//content.destinations.destinationId
					destinationObj.destinationId = value;
					//content.destinations.destinationName
					destinationObj.destinationName = key;
					//content.destinations.status
					destinationObj.status = message.getConnectorMessages().get(value).getStatus().toString();
					//content.destinations.statusMessage
					destinationObj.statusMessage = auxGetStatusMessage(value);
					//content.destinations.message
					try {
						destinationObj.message = isJSON(message.getConnectorMessages().get(value).getEncodedData()) ? JSON.parse(message.getConnectorMessages().get(value).getEncodedData()) : message.getConnectorMessages().get(value).getEncodedData();
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel: destination message --&gt; &quot; + error.toString());
						destinationObj.message = null;
					}
					//logger.info(message.getConnectorMessages().get(value).getMessageContent(ContentType.SENT));
					//content.destinations.dataType
					// destinationObj.dataType = message.getConnectorMessages().get(value).getEncoded().getDataType();
					try {
						var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
						var channel = channelController.getChannelByName(message.getConnectorMessages().get(0).getChannelName().toString());
						var connectors = channel.getDestinationConnectors().toArray();
						// Iterate through the connectors
						for each (var connector in connectors) {
						    // Check if the current connector matches the desired connector name
						    if (connector.getName() == key) {
						    		destinationObj.dataType = connector.getTransformer().getOutboundDataType();
						    		break;
						    }
						}
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
						destinationObj.dataType = null;
					}
					
					//content.destinations.date
					var dateCalendar = message.getConnectorMessages().get(value).getSendDate();
					if (dateCalendar != null) { // destination QUEUED
						var dateUTC = auxCalendarParse(dateCalendar);
						destinationObj.date = dateUTC;
					} else {
						destinationObj.date = null;
					}

					//content.destinations.metaData
					if (destinationsMetadataMap != undefined &amp;&amp; destinationsMetadataMap != null) {
						if (destinationsMetadataMap.has(value)) {
							destinationObj.metaData = destinationsMetadataMap.get(value) == null ? new Array() : destinationsMetadataMap.get(value);
						} else {
							destinationObj.metaData = new Array();
						}
					} else {
						destinationObj.metaData = new Array();
					}
		
					//content.destinations.responseMessage
					if (message.getConnectorMessages().get(value).getResponseData() == null) { // no response
						destinationObj.responseMessage = null;
					} else if (message.getConnectorMessages().get(value).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
						destinationObj.responseMessage = null;
					} else { //houve response
						destinationObj.responseMessage = isJSON(message.getConnectorMessages().get(value).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(value).getResponseData().getMessage()) : message.getConnectorMessages().get(value).getResponseData().getMessage();
					}
					destinationsArray.push(destinationObj);
				}
			});
			contentObj.destinations = destinationsArray;
			
			logMsg.content = contentObj;
			//logger.info(JSON.stringify(logMsg));

			//send it
			return JSON.stringify(logMsg);

			/*
			var respLogChannel = router.routeMessage(&apos;Logs_WHS-OUT&apos;, JSON.stringify(logMsg));
			if (respLogChannel == null || respLogChannel == undefined) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			} else if (respLogChannel.getStatus() == Status.ERROR) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			}
			*/

		} catch (error) {
			logger.info(&quot;sendMsgInfoLogChannel:geral  --&gt; &quot; + error.toString());
		}
	}	
}

function auxCalendarParse(dateCalendar) {
	var theMonth = dateCalendar.get(dateCalendar.MONTH) +1;
	var theMonthStr = theMonth.toString().padStart(2,&apos;0&apos;);
	var datestr = dateCalendar.get(dateCalendar.YEAR).toString() + theMonthStr + dateCalendar.get(dateCalendar.DAY_OF_MONTH).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.HOUR_OF_DAY).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.MINUTE).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.SECOND).toString().padStart(2,&apos;0&apos;);
	return DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
}

function auxGetStatusMessage(connMetadaId) {
	connMessage = message.getConnectorMessages().get(connMetadaId);
	if (connMessage.getStatus().toString() == &quot;ERROR&quot;) {
		if (connMessage.getProcessingError() != &quot;&quot;) {
			return connMessage.getProcessingError();
		} else if (connMessage.getPostProcessorError() != &quot;&quot;) {
			return connMessage.getPostProcessorError();
		} else if (connMessage.getResponseError() != &quot;&quot;) {
			return connMessage.getResponseError();
		}
	}
	return null;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>09ed46d2-0cff-406e-a532-a7a3f76a3e0b</id>
            <name>RabbitMQ Helper Function</name>
            <revision>4</revision>
            <lastModified>
              <time>1730914089529</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Functions defined in order to assist reading and writing into a RabbitMQ queue</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>e1072519-3eb3-465f-8465-c45d5ef958a5</id>
                <name>queueDeclareRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790901</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to make a queue declaration

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {String} inExchangeType - RabbitMQ exchange&apos;s type
	@param {String} inQueueName - RabbitMQ queue&apos;s name
	@param {String} inRoutingKey - exchange&apos;s routing key
	@return no return 
*/
function queueDeclareRMQ(inExchangeName, inExchangeType, inQueueName, inRoutingKey) {
	//if (!inExchangeName || !inExchangeType || !inQueueName) {
		importPackage(com.mirth.basicproducer);
		broker = new BasicConsumer();
		broker.queueDeclare($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inExchangeType, inQueueName, inRoutingKey);
	//}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>17d1585c-595a-495f-bc6d-7f6667b0279c</id>
                <name>readQueueRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789866</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function built for helping to read messages from a RabbitMQ&apos;s exchange

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {Boolean} inAutoAck - boolean for automatic ackowledgment
	@param {Boolean} inCommit - boolean for commiting
	@return {String} return RabbitMQ message&apos;s content
*/
function readQueueRMQ(inExchangeName, inAutoAck, inCommit) {
	//if (!inExchangeName || typeof inAutoAck != &quot;boolean&quot; || typeof inCommit != &quot;boolean&quot;) {
		importPackage(com.mirth.basicproducer);
		
		broker = new BasicConsumer();
		jsonString = broker.getMessage($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inAutoAck, inCommit);
	
		if (jsonString != null){
			mensagem = JSON.parse(jsonString);
			JSON.stringify(mensagem[&apos;message&apos;]);
			return JSON.stringify(mensagem[&apos;message&apos;]);
		}
	//}
	return null;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0689aac9-a462-4b03-ac79-5cfd1824b5e4</id>
                <name>writeQueueRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789047</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function built for helping to write messages to a RabbitMQ&apos;s exchange

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {String} inMessageType - custom message type
	@param {String} inMessagePayload - payload to be sent
	@return {Object} return operation result (w/ statusCode and statusText)
*/
function writeQueueRMQ(inExchangeName, inMessageType, inMessagePayload, inRoutingKey) {
	importPackage(com.mirth.basicproducer);
	// Import internal code template
	var getCurrentDateUTC = globalMap.get(&quot;getCurrentDateUTC&quot;);
	
	result = new Object();

	if (!inExchangeName || !inMessageType || !inMessagePayload) {
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;At least one input parameter is a falsy value.&quot;;
		return result;
	} else if (!isJSON(inMessagePayload)) { // ?? confirmar se é sempre JSON que vai ou se pode ir outra coisa
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;Message payload to be sent is not a string in JSON format.&quot;;
		return result;
	}
	
	try{
			
		envelop = new Object();
		
		envelop.MessageId = UUIDGenerator.getUUID();
		envelop.DestinationAddress = &quot;rabbitmq://&quot; + $(&apos;RabbitMqHost&apos;) + &quot;:&quot; + $(&apos;RabbitMqPort&apos;) + &quot;/&quot; + inExchangeName;
		messageType = [&quot;urn:message:&quot; + inMessageType];
		envelop.MessageType = messageType;
		
		envelop.Message = JSON.parse(inMessagePayload);
		
		envelop.SentTime = getCurrentDateUTC();
		
		host = new Object();
		host.MachineName = $(&apos;localAddress&apos;);
		host.ProcessName = channelName;
		
		envelop.Host = host;
	
		try{
			producer = new BasicProducer();
			if (typeof inRoutingKey == &quot;undefined&quot; || inRoutingKey == null) {
				producer.produce($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, JSON.stringify(envelop));	
			} else {
				producer.produceToRoutingKey($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inRoutingKey, JSON.stringify(envelop));
			}
			result.statusCode = &quot;200&quot;;
			result.statusText = JSON.stringify(envelop);
			return result;
		}catch(e){
			result.statusCode = &quot;400&quot;;
			result.statusText = &quot;Fail to produce to rabbitMQ, message will be reprocessed | &quot; + e;
			return result;
		}
		
	}catch(exception) {
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;Fail to build and communicate message to rabbitMQ (internal error) | &quot; + exception;
		return result;	
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>fe90c913-c365-44d1-b309-7c4dae7d9d9a</id>
            <name>Utils</name>
            <revision>6</revision>
            <lastModified>
              <time>1730893909835</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Utils functions for Mirth Channels</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>9d0737dd-b85f-4e05-bd6e-b83828e87bdf</id>
                <name>addIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792349</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Aidiciona um objeto relativo a um identificador (Ex: {&quot;sistemaCodificador&quot;:&quot;Appointment.id&quot;, &quot;codigo&quot;: 1111} ) a uma lista de identificadores

	@param {String} sistCodificador - nome do sistemaCodificador (ex: &quot;Appointment.id&quot; ou &quot;Encounter.identifier&quot;)
	@param {String} codigo - value relativo ao sistCodificador
	@param {String} listaAdicionar - listagem já existente (ou vazia/null/undefined) de identificadores
	@return {String} return listaIdentificadores
*/
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	var lista;
	try {
		if (listaAdicionar  &amp;&amp; Array.isArray(listaAdicionar)) {
			lista = JSON.parse( JSON.stringify(listaAdicionar));
		} else {
			logger.info(&quot;excecao1&quot;);
			lista= [];
		}
	} catch (err) {
		logger.info(&quot;excecao2&quot; + err.toString());
		lista =  [];
	}
	/*
	if (! Array.isArray(listaAdicionar)) {
		lista = [];
	} else {
		lista = JSON.parse( JSON.stringify(listaAdicionar));
	}
	*/
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			lista.push(obj);
		}
	}
    	return lista;
	
}

/*
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	if (! Array.isArray(listaAdicionar)) {
		listaAdicionar = [];
	}
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			listaAdicionar.push(obj);
		}
	}
    	return listaAdicionar;
	
}
*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83c82ac5-e364-41b2-99cc-6a4ead5eaa37</id>
                <name>callApi</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793110</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Generic code to implement API call

	@param {String} method - http method
	@param {String} url - http url
	@param {String} user - api username
	@param {String} pass - api password
	@return {Object} return api response
*/
function callApi(method, url, user, pass) {
	
	var url = new Packages.java.net.URL(url);
	var connection = url.openConnection();
	connection.setRequestMethod(method);
	
	try {
	  var responseCode = connection.getResponseCode();
	  if (responseCode === Packages.java.net.HttpURLConnection.HTTP_OK) {	//	200
	    var inputStream = connection.getInputStream();
	    var reader = new Packages.java.io.BufferedReader(new Packages.java.io.InputStreamReader(inputStream));
	    var response = &quot;&quot;; // Inicializa a variável response
	
		    while ((line = reader.readLine()) !== null) {
		      response += line;
		    }      
	        reader.close();	      
		   
		   return JSON.parse(response.toString());
	
	    } else {
	        var errorMessage = &quot;Erro na chamada ao Web Service: &quot; +  url + &quot; Código de resposta: &quot; + responseCode;
	        // Trata os casos em que a chamada ao Web Service não foi bem-sucedida        
	        throw new Error(errorMessage);
	    }
	} catch (e) {
	    // Capturar exceção e retornar status e mensagem de erro
	    var errorStatus = connection.getResponseCode();
//	    var errorMessage = e.getMessage();	    
	    throw new Error(errorStatus);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fd200634-44bd-483c-97ab-743c373d4b7a</id>
                <name>checkIfExameEspecial</name>
                <revision>2</revision>
                <lastModified>
                  <time>1730739683915</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo objetivo passa por receber um código identificativo de um exame (ou outro serviço qualquer) e retornar se o mesmo é um exame especial ou não. Para
	tal, a função vai à tabela de catálogo da BD verificar se o código lá existe. Caso haja algum problema de acesso à BD, e de forma opcional, a função tenta aceder
	ao endpoint do sistema externo para fazer a verificação de exame especial.

	@param {String} catalogCode - código de catálogo CUF a ser analisado
	@param {String} externalSysCode - código de catálogo do sistema externo a ser analisado
	@return {Object} return object
*/
function checkIfExameEspecial(catalogCode, externalSysCode) {
	var error = false;
	var errorMsg = null;
	var isExameEspecial = null;
	var resposta = new Object();
	
	// Get a database connection 
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	var selectQuery = &quot;SELECT * FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; WHERE \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; and ativo = true;&quot;;
	try {
		// Execute the SQL query
		result = dbConn.executeCachedQuery(selectQuery);
		if (result.next() ) { // true
			isExameEspecial = true;
		} else { 
			isExameEspecial = false; // false
		}
	} catch (e) {
		error = true;
		logger.info(&quot;e.toString() = &quot; + e.toString());
		errorMsg = e.toString();
	} finally {
	    // Close the database connection
	    dbConn.close();
	}

	//houve erro no acesso à BD, logo tenta aceder ao endpoint do sistema externo para obter essa informação
	if (isExameEspecial == null &amp;&amp; typeof externalSysCode != &apos;undefined&apos;) {
		var httpPostURL = $(&apos;Transactional_CUFBUS_Host&apos;) + &quot;CodeSystem/Service/$lookup&quot;;
		var body = new Object();
		body.resourceType= &quot;Parameters&quot;;
		body.parameter = [{&quot;name&quot;:&quot;code&quot;,&quot;valueCode&quot;:externalSysCode}];
		var authHeader = null
		if ($(&apos;Transactional_CUFBUS_User&apos;) != null &amp;&amp; $(&apos;Transactional_CUFBUS_Pass&apos;) != &apos;&apos;){
			authHeader = apiGenerateBasicAuthHeader($(&apos;Transactional_CUFBUS_User&apos;), $(&apos;Transactional_CUFBUS_Pass&apos;));  
		}
		httpResp = httpPost(httpPostURL,JSON.stringify(body),authHeader);
		
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var parametersRes = JSON.parse(httpResp.responseMessage);
				try {
					if (parametersRes[&apos;resourceType&apos;] == &quot;Parameters&quot;) {
						var checkExameEspecial = null;
						parametersRes[&apos;parameter&apos;].find( function(parameter) {
							if(parameter[&apos;name&apos;] == &quot;property&quot;) {
								parameter[&apos;part&apos;].find( function(part) {
									if (part[&apos;valueCoding&apos;]) {
										if (part[&apos;valueCoding&apos;][&apos;code&apos;] == $(&apos;Catalogo_ServiceCategory_ExameEspecial&apos;)) {
											isExameEspecial = true;
											checkExameEspecial = true;
											return true;
										}
									}
								})
							}
						})
						if (checkExameEspecial == null) { // não encontrou property de exame especial, logo não é exame especial
							isExameEspecial = false;
						}
					} else {
						error = true;
						errorMsg = &quot;A Parameters Resource was expected as a response&quot;;
					}
				} catch (e2) {
					error = true;
					errorMsg = &quot;Error parsing the response from the endpoint &quot; + e2.toString();
				}
			} else {
				error = true;
				errorMsg = &quot;Endpoint response was not JSON&quot;;
			}
		} else {
			error = true;
			errorMsg = httpResp.statusText ? httpResp.statusText : (httpResp.responseMessage ? httpResp.responseMessage : null);;		
		}
	}
	if (isExameEspecial == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg; //string
	} else {
		resposta.statusCode = &quot;200&quot;;
		resposta.responseMessage = isExameEspecial; // boolean
	}
	return resposta;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b53102c9-17cf-431e-b87a-40d08fe73203</id>
                <name>convertDateToTimeStamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793287</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertDateToTimeStamp(date) {

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = &apos;00&apos;;
	var min = &apos;00&apos;;
	var sec = &apos;00&apos;;
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5714586f-45b8-45cb-9af6-fdabfe1bf9b2</id>
                <name>convertTimeStampToDateStr</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787735</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and time &quot;HHmmss&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@param {String} time - time in format &quot;HHmmss&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertTimeStampToDateStr(date, time) {

	if (time.length &lt;= 5){ // left pad
		time = time.padStart(time.length + 1, &apos;0&apos;);
	}

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = time.substring(0, 2);
	var min = time.substring(2, 4);
	var sec = time.substring(4, 6);
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b4455483-c833-4b4e-adb9-c646cad7bcfe</id>
                <name>DateUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791914</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Date to UTC

	@param {String} date - Date string in format &quot;yyyy-MM-ddTHH:mm:ss+SSSS&quot;
	@return {String} return date in UTC &quot;yyyy-MM-ddTHH:mm:ss+Z&quot;
*/
function DateUtc(date, dateFormat) {

     var formatter_hl7 = new java.text.SimpleDateFormat(dateFormat != null ? dateFormat : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss+SSSS&quot;);
     formatter_hl7.setTimeZone(java.util.TimeZone.getTimeZone($(&apos;serverTimeZone&apos;)));
     var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
     formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	return formatter_utc.format(formatter_hl7.parse(date));			
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4fbdd7b8-7dd0-4ba3-ba13-0a8990b4513b</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788357</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8cb44e20-4b8a-48e6-93ae-aa905dbf2445</id>
                <name>generate_HLv2_messageId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788478</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função criadora de id de mensagem HL7 v2 (MSH.10.1) único v5

	@return {String} id unico
*/
function generate_HLv2_messageId(tipo_mensagem) {

	var timestamp = new Date().getTime().toString();
	var timestamp_length = timestamp.length;

	//random remaining characters
	remainder = 20-3-timestamp_length;
	
	// Generate a random number between 0... and 9...
	var randomNumber = Math.floor(Math.random() * Math.pow(10,remainder));
	// Convert the number to a string and pad it with leading zeros if needed
	var formattedNumber = randomNumber.toString().padStart(remainder, &apos;0&apos;);
	
	return timestamp + &quot;-&quot; + tipo_mensagem[0] +&quot;-&quot; + formattedNumber;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b4aa14b-ee5a-464f-b1c8-0917d2ea815c</id>
                <name>getArrayUniqueValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792417</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns unique values from an array

	@param {array} array - array
	@return {array} return unique values from array
*/
function getArrayUniqueValues(array) {
	var uniqueArray = [];
	for (var i = 0; i &lt; array.length; i++) {
	    if (uniqueArray.indexOf(array[i]) === -1) {
	        uniqueArray.push(array[i]);
	    }
	}

	return uniqueArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bd7561e-2fb9-41d1-a8e3-fbeabaf8099a</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793452</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4814b63d-13ac-4097-86e2-22ca3c24eda4</id>
                <name>getFirstName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns first name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getFirstName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[0];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a594fff0-deb4-4d2a-a11e-f39582b42120</id>
                <name>getIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791988</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Extrai da listagem de identificadores o &quot;codigo&quot; associado a um pretendido &quot;sistCodificador&quot;

	@param {String} listaIds - listagem de identificadores onde procurar
	@param {String} sistCodificador - sistemaCodificador a ser procurado na listagem de identificadores
	@return {String} return codigo (ou null, caso não exista)
*/
function getIdentificador(listaIds, sistCodificador) {
	var codigo = null;	
	try{  		
	    	listaIds.find(function(elemento) {
	    		if (elemento.sistemaCodificador){
	    			try { // para o caso de algum dos identificadores estar mal definido não impedir que se extraia a informação pretendida
		        		if (elemento.sistemaCodificador.toLowerCase() == sistCodificador.toLowerCase()){
		          		codigo= elemento.codigo;
		          		return true;
		        		}
	    			} catch (err) {
		        		;
		        	}
	      	}
	    });
    	} catch (ex1){
    		codigo = null;
    	}
	return codigo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f9529854-80ad-450b-ad8a-54a1b63ba9d1</id>
                <name>getLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791292</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns last name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getLastName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[(names.length -1) ];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6ff6cc61-fa90-455a-b9b4-26f12a870f91</id>
                <name>getLocationExameEspecial</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792555</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dada informação sobre o hospital, o código de catálogo de exame especial e a especialidade, retornar qual a localização no pretendido hospital predestinada para
	a ocorrência de exames especiais dessa mesma especialidade

	@param {String} hospitalINTRefExt - INTRefExt do hospital (CMFL, HTEJO, ...)
	@param {String} catalogCode - código de catálogo do exame especial (10058, 20056, ...)
	@param {String} especialidade - especialidade associada ao exame especial (Cardiologia, Oftalmologia, ...)
	@return {String} return {&quot;servico&quot;: &quot;...&quot;, &quot;area&quot;: &quot;...&quot;, &quot;sala&quot;: &quot;...&quot; &quot;cama&quot;: &quot;...&quot;}
*/
function getLocationExameEspecial(hospitalINTRefExt, catalogCode, especialidade) {
	var error = false;
	var errorMsg = null;
	var resposta = new Object();

	var cama = null;
	var sala = null;
	var area = null;
	var servico = null;
	
	if ( !hospitalINTRefExt || !catalogCode || !especialidade ) {
		error = true;
		errorMsg = &quot;Um dos parametros da função é invalido&quot;;
	} else {
	
		var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	
		/* var selectQuery = &quot;SELECT cama, sala, area FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE servico = &apos;&quot; + AAAAAAAAA + &quot;&apos; AND especialidade = &apos;&quot;+ especialidade + &quot;&apos; AND id =&quot;
						+ &quot;(SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where intRefExt = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) LIMIT 1) LIMIT 1;&quot;; */
	
		var selectIdLocalizacaoSQL = &quot;SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) ;&quot;;
	
		var listIdLocalizacao= [];
		try {
			// Execute the SQL query
			result = dbConn.executeCachedQuery(selectIdLocalizacaoSQL); // return javax.sql.rowset.CachedRowSet
			while (result.next()) {
				listIdLocalizacao.push(result.getString(&quot;idLocalizacao&quot;));
			}
		} catch (e) {
			error = true;
			logger.info(&quot;e.toString() = &quot; + e.toString());
			errorMsg = e.toString();
		} finally {
		    // Close the database connection
		    dbConn.close();
		}
		logger.info(&quot;lsita ids localizacao = &quot; +JSON.stringify(listIdLocalizacao));
		

		if (listIdLocalizacao.length == 0){ // não existem idLocalizacao configurados para o exame
			error = true;
			errorMsg = &quot;Não existem idLocalizacao para o código de catálogo &quot; + catalogCode + &quot; e hospital &quot; + hospitalINTRefExt;
		} else {
			var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
			if (listIdLocalizacao.length == 1) { //só existe 1 idLocalizacao, logo não interessa a especialidade porque a localizacao do exame especial é sempre no mesmo local
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id = &apos;&quot; + listIdLocalizacao[0] + &quot;&apos;;&quot;;
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}			
			} else { // existe mais do que uma localização, logo vai diferenceiar por especialidade
				ids = &quot;(&quot;;
				for (var i=0; i&lt; listIdLocalizacao.length; i++) {
				    ids += &quot;&apos;&quot; + listIdLocalizacao[i].toString() + &quot;&apos;,&quot;;
				}
				ids = ids.slice(0,-1) + &quot;)&quot;;
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id in &quot; + ids + &quot; and especialidade = &apos;&quot;+especialidade+ &quot;&apos;;&quot;;
				logger.info(selectInfosSQL);
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}	
			}
		}
	}


	if (error == true  ) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro interno getLocationExameEspecial()&quot;;
	} else if ( cama == null &amp;&amp; sala == null &amp;&amp; area == null  &amp;&amp; servico == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro na query à LocalizacaoExamesEspeciais&quot;;
	}else {
		resposta.statusCode = &quot;200&quot;;
		var respObj = new Object();
		respObj.cama = cama;
		respObj.area = area;
		respObj.sala = sala;
		respObj.servico = servico;
		resposta.responseMessage = respObj;
	}
	return resposta;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>903737fd-9a14-45ea-b3cf-2af18ba88142</id>
                <name>getNumMecanograficoById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791627</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getNumMecanograficoById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.numMecanografico;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6bdd892d-3953-4f68-af96-44ff89434b13</id>
                <name>getPerfilUtilizadorById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789557</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getPerfilUtilizadorById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.perfil;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee58620f-c785-44f2-a4f7-26a8808c4e16</id>
                <name>getPerformerAndDatesRequisicaoMcdts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788016</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Object} accoesList - ...
	@param {Object} dataCriacaoRequisicao - ...
	@param {Object} utilizadoresList - ...
	@return {Object} return description

	(//R = obrigatório)
	--&gt; Formato esperado acoesList: [
          {
            &quot;utilizadorId&quot; : 12284, //R
            &quot;funcao&quot; : 1, //R
            &quot;data&quot; : &quot;2024-05-08T14:41:51.089035Z&quot; //R
          },
          {
            &quot;utilizadorId&quot; : 12284,
            &quot;funcao&quot; : 3,
            &quot;data&quot; : &quot;2024-05-08T14:27:58.349313Z&quot;
          }
        ]

     --&gt; Formato esperado utilizadoresList: [
	    {
	      &quot;id&quot; : 12284,
	      &quot;login&quot; : &quot;MDPIRES&quot;,
	      &quot;nome&quot; : &quot;Marcos Pires&quot;,
	      &quot;numMecanografico&quot; : &quot;263812278&quot;,
	      &quot;numOrdem&quot; : &quot;123&quot;,
	      &quot;numFuncionario&quot; : null,
	      &quot;perfil&quot; : 1,
	      &quot;intRefExt&quot; : null
	    }
	  ]
	
*/
function getPerformerAndDatesRequisicaoMcdts(accoesList,dataCriacaoRequisicao, utilizadoresList) {

	logger.info(&quot;accoesList - &quot; +JSON.stringify(accoesList));
	logger.info(&quot;dataCriacaoRequisicao - &quot; + JSON.stringify(dataCriacaoRequisicao));
	logger.info(&quot;utilizadoresList - &quot; + JSON.stringify(accoesList));
	returnObj = new Object();
	
	var Performer = Lists.list();
	var occurenceDateTime = null;
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(accoesList); j++ ){
	
	      try {
			if (accoesList[j][&apos;funcao&apos;] == 1 /* Relato */){
				dataRelato = accoesList[j][&apos;data&apos;];
			} else if (accoesList[j][&apos;funcao&apos;] == 2 /* Validacao */){
				dataValidacao = accoesList[j][&apos;data&apos;];
			} else {
				occurenceDateTime = dataCriacaoRequisicao;
			}
	       } catch (error) {
	       	logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro nas datas - &quot; + error.toString()); 
	     }
	
		try {
			  Performer.add({
			    function: {
			        coding: [{
			          system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			          code: newStringOrUndefined( accoesList[j][&apos;funcao&apos;] == 3 /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;])) : mapFuncao(accoesList[j][&apos;funcao&apos;]) )
			        }]
			      },
			    actor: {
			      reference: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) ) : null),
			      identifier: {
			        use: newStringOrUndefined(&apos;official&apos;),
			        type: {
			          coding: [{
			            system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
			            code: newStringOrUndefined(&apos;4&apos;)
			          }],
			          text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
			        },
			        value: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) : null)
			      }
			    }
		  });
		} catch (error2) {
			logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro no performer - &quot; + error2.toString()); 
		}
	}

	returnObj.performer = Performer;
	returnObj.occurenceDateTime = occurenceDateTime;
	returnObj.dataValidacao = dataValidacao;
	returnObj.dataRelato = dataRelato;

	return returnObj;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8615c472-c47a-48aa-a6e7-45e487c4463f</id>
                <name>getRabbitMqHosts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791032</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Void}
	@return {HostsDto} return hosts
*/
function getRabbitMqHosts() {
	// Set RabbitMQ Hosts
	importPackage(com.mirth.rabbitmq.client.dto);
	hosts = [];
	addr = new HostsDto(); // Main Host
	addr.setHost($(&apos;RabbitMqHost&apos;));
	addr.setPort(parseInt($(&apos;RabbitMqPort&apos;)));
	hosts.push(addr);

	return hosts;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f331cea8-c75e-40d4-83d9-a6779b688c81</id>
                <name>isJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790116</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a string is a valid JSON

	@param {String} string to validate if is JSON
	@return {Boolean} return boolean
*/
function isJSON(str) {
  try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27f41d50-5bd7-46da-9ad9-203181a92ba9</id>
                <name>isNumeric</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789613</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a value (string or number) is numeric

	@param {String} value to validate if is numeric
	@return {Boolean} return boolean
*/
function isNumeric(num) {
  if (typeof num == &quot;string&quot;) { 
    return !isNaN(num) &amp;&amp;
           !isNaN(parseFloat(num));
  } else if (typeof num == &quot;number&quot;) {
  	return true;
  } else {
  	return false;
  }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5c27a913-629d-4605-9e85-716a84e11410</id>
                <name>MappFrequencies</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to create multiple VAR Segments according Initial Date and CD_PrescricaoFrequencias

	@param {String} freqUni - CD_PrescricaoFrequencias description code
	@param {String} dateInit - Date HL7 string: start prescription date
	@param {String} DateEnd - Date HL7 string: end prescription date
	@return {String} return VAR Segment
*/
function MappFrequencies(freqUni, dateStart, DateEnd) {

	startDate = &quot;20230227115700&quot;;
	hora = startDate.substring(10, 8);
	freqfactor = 8;
	freqUnit = &apos;Dias&apos;;
	
	if (freqUnit == &apos;Hora&apos;){ // x em x horas
	    // calc hours segments
	    if (startDate.length &gt; 0 &amp;&amp; freqfactor &gt; 1){
	        console.log(&quot;running ...&quot;);
	        for (i = 0; i &lt; (24 / freqfactor) ; i++){
	            if ( (parseInt(hora) + (freqfactor * i) - 24) &gt;= 0  ){
	                hora = parseInt(hora) + (freqfactor * i) - 24;
	                break;
	            }
	        }
	        
	        if ((24 / freqfactor) &gt;= 1){
	            for(i = 0; i &lt; (24 / freqfactor); i++){
	                console.log( (parseInt(hora) + (freqfactor * i)).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	            }
	        }else {
	            console.log( parseInt(hora).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	        }   
	    }
	} else if (freqUnit == &apos;Dias&apos;){ // x em x dias
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Dias da Semanas&apos; || freqUnit == &apos;Por Dia&apos; || freqUnit == &apos;Refeições&apos; || freqUnit == &apos;Dia/Hora&apos;){ // têm de ser criados a cada dia
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Única&apos;){ // Hora fixa^5
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;SOS&apos;){
	    console.log( null )
	}else if (freqUnit == &apos;Turno Fixo&apos;) {
	    // tenho de pedir ao bruno para ter alguma informação relacionada com os turnos
	}else if (freqUnit == &apos;Contínuo&apos; || freqUnit == &apos;Sem horário&apos;){ // Sem hor\XE1\rio^0
	    console.log( null )
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e5cc4c3f-7233-42b0-8162-b3bec0ab5c94</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792857</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fdd919fc-4700-4a8f-aafe-cc2f4653f100</id>
                <name>Unescape HL7 Characters</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790479</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function hexMappingPreProcessor(result) {
	var hexMapping = [
			[/\\x21\\/gi, &quot;!&quot;], [/\\x22\\/gi, &apos;&quot;&apos;], [/\\x23\\/gi, &quot;#&quot;], [/\\x24\\/gi, &quot;$&quot;], [/\\x25\\/gi, &quot;%&quot;], [/\\x26\\/gi, &quot;&amp;&quot;], [/\\x27\\/gi, &quot;&apos;&quot;], [/\\x28\\/gi, &quot;(&quot;], [/\\x29\\/gi, &quot;)&quot;],
			[/\\x2a\\/gi, &quot;*&quot;], [/\\x2b\\/gi, &quot;+&quot;], [/\\x2c\\/gi, &quot;,&quot;], [/\\x2d\\/gi, &quot;-&quot;], [/\\x2e\\/gi, &quot;.&quot;], [/\\x2f\\/gi, &quot;/&quot;], [/\\x30\\/gi, &quot;0&quot;], [/\\x31\\/gi, &quot;1&quot;], [/\\x32\\/gi, &quot;2&quot;],
			[/\\x33\\/gi, &quot;3&quot;], [/\\x34\\/gi, &quot;4&quot;], [/\\x35\\/gi, &quot;5&quot;], [/\\x36\\/gi, &quot;6&quot;], [/\\x37\\/gi, &quot;7&quot;], [/\\x38\\/gi, &quot;8&quot;], [/\\x39\\/gi, &quot;9&quot;], [/\\x3a\\/gi, &quot;:&quot;], [/\\x3b\\/gi, &quot;;&quot;],
			[/\\x3c\\/gi, &quot;&lt;&quot;], [/\\x3d\\/gi, &quot;=&quot;], [/\\x3e\\/gi, &quot;&gt;&quot;], [/\\x3f\\/gi, &quot;?&quot;], [/\\x40\\/gi, &quot;@&quot;], [/\\x41\\/gi, &quot;A&quot;], [/\\x42\\/gi, &quot;B&quot;], [/\\x43\\/gi, &quot;C&quot;], [/\\x44\\/gi, &quot;D&quot;],
			[/\\x45\\/gi, &quot;E&quot;], [/\\x46\\/gi, &quot;F&quot;], [/\\x47\\/gi, &quot;G&quot;], [/\\x48\\/gi, &quot;H&quot;], [/\\x49\\/gi, &quot;I&quot;], [/\\x4a\\/gi, &quot;J&quot;], [/\\x4b\\/gi, &quot;K&quot;], [/\\x4c\\/gi, &quot;L&quot;], [/\\x4d\\/gi, &quot;M&quot;],
			[/\\x4e\\/gi, &quot;N&quot;], [/\\x4f\\/gi, &quot;O&quot;], [/\\x50\\/gi, &quot;P&quot;], [/\\x51\\/gi, &quot;Q&quot;], [/\\x52\\/gi, &quot;R&quot;], [/\\x53\\/gi, &quot;S&quot;], [/\\x54\\/gi, &quot;T&quot;], [/\\x55\\/gi, &quot;U&quot;], [/\\x56\\/gi, &quot;V&quot;],
			[/\\x57\\/gi, &quot;W&quot;], [/\\x58\\/gi, &quot;X&quot;], [/\\x59\\/gi, &quot;Y&quot;], [/\\x5a\\/gi, &quot;Z&quot;], [/\\x5b\\/gi, &quot;[&quot;], [/\\x5c\\/gi, &quot;\\&quot;], [/\\x5d\\/gi, &quot;]&quot;], [/\\x5e\\/gi, &quot;^&quot;], [/\\x5f\\/gi, &quot;_&quot;],
			[/\\x60\\/gi, &quot;`&quot;], [/\\x61\\/gi, &quot;a&quot;], [/\\x62\\/gi, &quot;b&quot;], [/\\x63\\/gi, &quot;c&quot;], [/\\x64\\/gi, &quot;d&quot;], [/\\x65\\/gi, &quot;e&quot;], [/\\x66\\/gi, &quot;f&quot;], [/\\x67\\/gi, &quot;g&quot;], [/\\x68\\/gi, &quot;h&quot;],
			[/\\x69\\/gi, &quot;i&quot;], [/\\x6a\\/gi, &quot;j&quot;], [/\\x6b\\/gi, &quot;k&quot;], [/\\x6c\\/gi, &quot;l&quot;], [/\\x6d\\/gi, &quot;m&quot;], [/\\x6e\\/gi, &quot;n&quot;], [/\\x6f\\/gi, &quot;o&quot;], [/\\x70\\/gi, &quot;p&quot;], [/\\x71\\/gi, &quot;q&quot;],
			[/\\x72\\/gi, &quot;r&quot;], [/\\x73\\/gi, &quot;s&quot;], [/\\x74\\/gi, &quot;t&quot;], [/\\x75\\/gi, &quot;u&quot;], [/\\x76\\/gi, &quot;v&quot;], [/\\x77\\/gi, &quot;w&quot;], [/\\x78\\/gi, &quot;x&quot;], [/\\x79\\/gi, &quot;y&quot;], [/\\x7a\\/gi, &quot;z&quot;],
			[/\\x7b\\/gi, &quot;{&quot;], [/\\x7c\\/gi, &quot;|&quot;], [/\\x7d\\/gi, &quot;}&quot;], [/\\x7e\\/gi, &quot;~&quot;], [/\\xa1\\/gi, &quot;¡&quot;], [/\\xa2\\/gi, &quot;¢&quot;], [/\\xa3\\/gi, &quot;£&quot;], [/\\xa4\\/gi, &quot;¤&quot;], [/\\xa5\\/gi, &quot;¥&quot;],
			[/\\xa6\\/gi, &quot;¦&quot;], [/\\xa7\\/gi, &quot;§&quot;], [/\\xa8\\/gi, &quot;¨&quot;], [/\\xa9\\/gi, &quot;©&quot;], [/\\xaa\\/gi, &quot;ª&quot;], [/\\xab\\/gi, &quot;«&quot;], [/\\xac\\/gi, &quot;¬&quot;], [/\\xa0\\/gi, &quot; &quot;], [/\\xae\\/gi, &quot;®&quot;],
			[/\\xaf\\/gi, &quot;¯&quot;], [/\\xad\\/gi, &quot; &quot;], [/\\xb0\\/gi, &quot;°&quot;], [/\\xb1\\/gi, &quot;±&quot;], [/\\xb2\\/gi, &quot;²&quot;], [/\\xb3\\/gi, &quot;³&quot;], [/\\xb4\\/gi, &quot;´&quot;], [/\\xb5\\/gi, &quot;µ&quot;], [/\\xb6\\/gi, &quot;¶&quot;],
			[/\\xb7\\/gi, &quot;·&quot;], [/\\xb8\\/gi, &quot;¸&quot;], [/\\xb9\\/gi, &quot;¹&quot;], [/\\xba\\/gi, &quot;º&quot;], [/\\xbb\\/gi, &quot;»&quot;], [/\\xbc\\/gi, &quot;¼&quot;], [/\\xbd\\/gi, &quot;½&quot;], [/\\xbe\\/gi, &quot;¾&quot;], [/\\xbf\\/gi, &quot;¿&quot;],
			[/\\xc0\\/gi, &quot;À&quot;], [/\\xc1\\/gi, &quot;Á&quot;], [/\\xc2\\/gi, &quot;Â&quot;], [/\\xc3\\/gi, &quot;Ã&quot;], [/\\xc4\\/gi, &quot;Ä&quot;], [/\\xc5\\/gi, &quot;Å&quot;], [/\\xc6\\/gi, &quot;Æ&quot;], [/\\xc7\\/gi, &quot;Ç&quot;], [/\\xc8\\/gi, &quot;È&quot;],
			[/\\xc9\\/gi, &quot;É&quot;], [/\\xca\\/gi, &quot;Ê&quot;], [/\\xcb\\/gi, &quot;Ë&quot;], [/\\xcc\\/gi, &quot;Ì&quot;], [/\\xcd\\/gi, &quot;Í&quot;], [/\\xce\\/gi, &quot;Î&quot;], [/\\xcf\\/gi, &quot;Ï&quot;], [/\\xd0\\/gi, &quot;Ð&quot;], [/\\xd1\\/gi, &quot;Ñ&quot;],
			[/\\xd2\\/gi, &quot;Ò&quot;], [/\\xd3\\/gi, &quot;Ó&quot;], [/\\xd4\\/gi, &quot;Ô&quot;], [/\\xd5\\/gi, &quot;Õ&quot;], [/\\xd6\\/gi, &quot;Ö&quot;], [/\\xd7\\/gi, &quot;×&quot;], [/\\xd8\\/gi, &quot;Ø&quot;], [/\\xd9\\/gi, &quot;Ù&quot;], [/\\xda\\/gi, &quot;Ú&quot;],
			[/\\xdb\\/gi, &quot;Û&quot;], [/\\xdc\\/gi, &quot;Ü&quot;], [/\\xdd\\/gi, &quot;Ý&quot;], [/\\xde\\/gi, &quot;Þ&quot;], [/\\xdf\\/gi, &quot;ß&quot;], [/\\xe0\\/gi, &quot;à&quot;], [/\\xe1\\/gi, &quot;á&quot;], [/\\xe2\\/gi, &quot;â&quot;], [/\\xe3\\/gi, &quot;ã&quot;],
			[/\\xe4\\/gi, &quot;ä&quot;], [/\\xe5\\/gi, &quot;å&quot;], [/\\xe6\\/gi, &quot;æ&quot;], [/\\xe7\\/gi, &quot;ç&quot;], [/\\xe8\\/gi, &quot;è&quot;], [/\\xe9\\/gi, &quot;é&quot;], [/\\xea\\/gi, &quot;ê&quot;], [/\\xeb\\/gi, &quot;ë&quot;], [/\\xec\\/gi, &quot;ì&quot;],
			[/\\xed\\/gi, &quot;í&quot;], [/\\xee\\/gi, &quot;î&quot;], [/\\xef\\/gi, &quot;ï&quot;], [/\\xf0\\/gi, &quot;ð&quot;], [/\\xf1\\/gi, &quot;ñ&quot;], [/\\xf2\\/gi, &quot;ò&quot;], [/\\xf3\\/gi, &quot;ó&quot;], [/\\xf4\\/gi, &quot;ô&quot;], [/\\xf5\\/gi, &quot;õ&quot;],
			[/\\xf6\\/gi, &quot;ö&quot;], [/\\xf7\\/gi, &quot;÷&quot;], [/\\xf8\\/gi, &quot;ø&quot;], [/\\xf9\\/gi, &quot;ù&quot;], [/\\xfa\\/gi, &quot;ú&quot;], [/\\xfb\\/gi, &quot;û&quot;], [/\\xfc\\/gi, &quot;ü&quot;], [/\\xfd\\/gi, &quot;ý&quot;], [/\\xfe\\/gi, &quot;þ&quot;],
			[/\\xff\\/gi, &quot;ÿ&quot;], [/\\x91\\/gi, &quot;‘&quot;], [/\\x92\\/gi, &quot;’&quot;], [/\\x80\\/gi, &quot;€&quot;], [/\\x83\\/gi, &quot;ƒ&quot;], [/\\x85\\/gi, &quot;…&quot;], [/\\x86\\/gi, &quot;†&quot;], [/\\x87\\/gi, &quot;‡&quot;], [/\\x88\\/gi, &quot;ˆ&quot;],
			[/\\x89\\/gi, &quot;‰&quot;], [/\\x8a\\/gi, &quot;Š&quot;], [/\\x8b\\/gi, &quot;‹&quot;], [/\\x8c\\/gi, &quot;Œ&quot;], [/\\x8e\\/gi, &quot;Ž&quot;], [/\\x93\\/gi, &quot;“&quot;], [/\\x94\\/gi, &quot;”&quot;], [/\\x95\\/gi, &quot;•&quot;], [/\\x96\\/gi, &quot;–&quot;],
			[/\\x97\\/gi, &quot;—&quot;], [/\\x98\\/gi, &quot;˜&quot;], [/\\x99\\/gi, &quot;™&quot;], [/\\x9a\\/gi, &quot;š&quot;], [/\\x9b\\/gi, &quot;›&quot;], [/\\x9c\\/gi, &quot;œ&quot;], [/\\x9e\\/gi, &quot;ž&quot;], [/\\x9f\\/gi, &quot;Ÿ&quot;], [/\\x2079\\/gi, &quot;⁹&quot;],
			[/Ã¡/g, &quot;á&quot;], [/Ã³/g, &quot;ó&quot;], [/Âµ/g, &quot;µ&quot;], [/Ã£/g, &quot;ã&quot;], [/Ã§/g, &quot;ç&quot;], [/Ã©/g, &quot;é&quot;], [/Ãº/g, &quot;ú&quot;], [/Â³/g, &quot;³&quot;], [/\\.br\\/gi, &quot; &quot;], [/  +/g, &apos; &apos;], [/Âº/g, &quot;º&quot;], [/Ã&#x81;/g, &quot;Á&quot;],
			[/Ã¢/g, &quot;â&quot;], [/Ãµ/g, &quot;õ&quot;], [/Ã&#x87;Ã&#x83;/g, &quot;ÇÃ&quot;], [/Ã&#x8d;/g, &apos;Í&apos;], [/Ã&#x87;Ã&#x95;/g, &apos;ÇÕ&apos;], [/Ã&#x93;/g, &quot;Ó&quot;]
			];
	
	for(var i = 0; i &lt; hexMapping.length; i++){
		result = result.replace(hexMapping[i][0], hexMapping[i][1]);
	}

	var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
	for(var i = 0; i &lt; replaceList.length; i++){
		do{
			result = result.replace(replaceList[i][0], replaceList[i][1]);
		}while(result.indexOf(replaceList[i][0]) &gt; -1);
	}
	
	return result;
}



function encodeIsoLatin(result) {
	var hexMapping = [
			/* [&quot;\\x21\\&quot;, &quot;!&quot;], [&quot;\\x3f\\&quot;, &quot;?&quot;], [&quot;\\x2c\\&quot;, &quot;,&quot;], [&quot;\\x3a\\&quot;, &quot;:&quot;], [&quot;\\x2e\\&quot;, &quot;.&quot;], [&quot;\\xa0\\&quot;, &quot; &quot;], [&quot;\\xad\\&quot;, &quot; &quot;], [&quot;\\x2d\\&quot;, &quot;-&quot;], [&quot;\\x5b\\&quot;, &quot;[&quot;], [&quot;\\x5d\\&quot;, &quot;]&quot;], [&quot;\\x5c\\&quot;, &quot;\\&quot;]*/ 
			[&quot;\\x22\\&quot;, /&quot;/g], [&quot;\\x23\\&quot;, /#/g], [&quot;\\x24\\&quot;, /\$/g], [&quot;\\x25\\&quot;, /%/g], [&quot;\\x26\\&quot;, /&amp;/g], [&quot;\\x27\\&quot;, /&apos;/g],
			[&quot;\\x2a\\&quot;, /\*/g], [&quot;\\x2b\\&quot;, /\+/g], [&quot;\\x2f\\&quot;, /\//g], [&quot;\\x3b\\&quot;, /;/g],
			[&quot;\\x3c\\&quot;, /&lt;/g], [&quot;\\x3d\\&quot;, /=/g], [&quot;\\x3e\\&quot;, /&gt;/g], [&quot;\\x40\\&quot;, /@/g], 
			[&quot;\\x5e\\&quot;, /\^/g], [&quot;\\x5f\\&quot;, /_/g], [&quot;\\x60\\&quot;, /`/g], [&quot;\\x7b\\&quot;, /{/g], [&quot;\\x7c\\&quot;, /\|/g], [&quot;\\x7d\\&quot;, /}/g], 
			[&quot;\\x7e\\&quot;, /~/g], [&quot;\\xa1\\&quot;, /¡/g], [&quot;\\xa2\\&quot;, /¢/g], [&quot;\\xa3\\&quot;, /£/g], [&quot;\\xa4\\&quot;, /¤/g], [&quot;\\xa5\\&quot;, /¥/g],
			[&quot;\\xa6\\&quot;, /¦/g], [&quot;\\xa7\\&quot;, /§/g], [&quot;\\xa8\\&quot;, /¨/g], [&quot;\\xa9\\&quot;, /©/g], [&quot;\\xaa\\&quot;, /ª/g], [&quot;\\xab\\&quot;, /«/g], [&quot;\\xac\\&quot;, /¬/g], [&quot;\\xae\\&quot;, /®/g],
			[&quot;\\xaf\\&quot;, /¯/g], [&quot;\\xb0\\&quot;, /°/g], [&quot;\\xb1\\&quot;, /±/g], [&quot;\\xb2\\&quot;, /²/g], [&quot;\\xb3\\&quot;, /³/g], [&quot;\\xb4\\&quot;, /´/g], [&quot;\\xb5\\&quot;, /µ/g], [&quot;\\xb6\\&quot;, /¶/g],
			[&quot;\\xb7\\&quot;, /·/g], [&quot;\\xb8\\&quot;, /¸/g], [&quot;\\xb9\\&quot;, /¹/g], [&quot;\\xba\\&quot;, /º/g], [&quot;\\xbb\\&quot;, /»/g], [&quot;\\xbc\\&quot;, /¼/g], [&quot;\\xbd\\&quot;, /½/g], [&quot;\\xbe\\&quot;, /¾/g], [&quot;\\xbf\\&quot;, /¿/],
			[&quot;\\xc0\\&quot;, /À/g], [&quot;\\xc1\\&quot;, /Á/g], [&quot;\\xc2\\&quot;, /Â/g], [&quot;\\xc3\\&quot;, /Ã/g], [&quot;\\xc4\\&quot;, /Ä/g], [&quot;\\xc5\\&quot;, /Å/g], [&quot;\\xc6\\&quot;, /Æ/g], [&quot;\\xc7\\&quot;, /Ç/g], [&quot;\\xc8\\&quot;, /È/g],
			[&quot;\\xc9\\&quot;, /É/g], [&quot;\\xca\\&quot;, /Ê/g], [&quot;\\xcb\\&quot;, /Ë/g], [&quot;\\xcc\\&quot;, /Ì/g], [&quot;\\xcd\\&quot;, /Í/g], [&quot;\\xce\\&quot;, /Î/g], [&quot;\\xcf\\&quot;, /Ï/g], [&quot;\\xd0\\&quot;, /Ð/g], [&quot;\\xd1\\&quot;, /Ñ/g],
			[&quot;\\xd2\\&quot;, /Ò/g], [&quot;\\xd3\\&quot;, /Ó/g], [&quot;\\xd4\\&quot;, /Ô/g], [&quot;\\xd5\\&quot;, /Õ/g], [&quot;\\xd6\\&quot;, /Ö/g], [&quot;\\xd7\\&quot;, /×/g], [&quot;\\xd8\\&quot;, /Ø/g], [&quot;\\xd9\\&quot;, /Ù/g], [&quot;\\xda\\&quot;, /Ú/g],
			[&quot;\\xdb\\&quot;, /Û/g], [&quot;\\xdc\\&quot;, /Ü/g], [&quot;\\xdd\\&quot;, /Ý/g], [&quot;\\xde\\&quot;, /Þ/g], [&quot;\\xdf\\&quot;, /ß/g], [&quot;\\xe0\\&quot;, /à/g], [&quot;\\xe1\\&quot;, /á/g], [&quot;\\xe2\\&quot;, /â/g], [&quot;\\xe3\\&quot;, /ã/g],
			[&quot;\\xe4\\&quot;, /ä/g], [&quot;\\xe5\\&quot;, /å/g], [&quot;\\xe6\\&quot;, /æ/g], [&quot;\\xe7\\&quot;, /ç/g], [&quot;\\xe8\\&quot;, /è/g], [&quot;\\xe9\\&quot;, /é/g], [&quot;\\xea\\&quot;, /ê/g], [&quot;\\xeb\\&quot;, /ë/g], [&quot;\\xec\\&quot;, /ì/g],
			[&quot;\\xed\\&quot;, /í/g], [&quot;\\xee\\&quot;, /î/g], [&quot;\\xef\\&quot;, /ï/g], [&quot;\\xf0\\&quot;, /ð/g], [&quot;\\xf1\\&quot;, /ñ/g], [&quot;\\xf2\\&quot;, /ò/g], [&quot;\\xf3\\&quot;, /ó/g], [&quot;\\xf4\\&quot;, /ô/g], [&quot;\\xf5\\&quot;, /õ/g],
			[&quot;\\xf6\\&quot;, /ö/g], [&quot;\\xf7\\&quot;, /÷/g], [&quot;\\xf8\\&quot;, /ø/g], [&quot;\\xf9\\&quot;, /ù/g], [&quot;\\xfa\\&quot;, /ú/g], [&quot;\\xfb\\&quot;, /û/g], [&quot;\\xfc\\&quot;, /ü/g], [&quot;\\xfd\\&quot;, /ý/g], [&quot;\\xfe\\&quot;, /þ/g],
			[&quot;\\xff\\&quot;, /ÿ/g], [&quot;\\x91\\&quot;, /‘/g], [&quot;\\x92\\&quot;, /’/g], [&quot;\\x80\\&quot;, /€/g], [&quot;\\x83\\&quot;, /ƒ/g], [&quot;\\x85\\&quot;, /…/g], [&quot;\\x86\\&quot;, /†/g], [&quot;\\x87\\&quot;, /‡/g], [&quot;\\x88\\&quot;, /ˆ/g],
			[&quot;\\x89\\&quot;, /‰/g], [&quot;\\x8a\\&quot;, /Š/g], [&quot;\\x8b\\&quot;, /‹/g], [&quot;\\x8c\\&quot;, /Œ/g], [&quot;\\x8e\\&quot;, /Ž/g], [&quot;\\x93\\&quot;, /“/g], [&quot;\\x94\\&quot;, /”/g], [&quot;\\x95\\&quot;, /•/g], [&quot;\\x96\\&quot;, /–/g],
			[&quot;\\x97\\&quot;, /—/g], [&quot;\\x98\\&quot;, /˜/g], [&quot;\\x99\\&quot;, /™/g], [&quot;\\x9a\\&quot;, /š/g], [&quot;\\x9b\\&quot;, /›/g], [&quot;\\x9c\\&quot;, /œ/g], [&quot;\\x9e\\&quot;, /ž/g], [&quot;\\x9f\\&quot;, /Ÿ/g], [&quot;\\x2079\\&quot;, /⁹/g],
			[&quot;\\x0a\\&quot;, /\n/g], [&quot;\\x0d\\&quot;, /\r/g]
			];
	
	if (result != null){
		for(var i = 0; i &lt; hexMapping.length; i++){
			result = result.replace(hexMapping[i][1], hexMapping[i][0]);
		}		

		var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
		for(var i = 0; i &lt; replaceList.length; i++){
			do{
				result = result.replace(replaceList[i][1], replaceList[i][0]);
			}while(result.indexOf(replaceList[i][0]) &gt; -1);
		}
	}
	
	return result;
}


function hexMappingReservatedChars(result) {
	var pattern = [[/\\T\\/g, &quot;&amp;&quot; ], [/\\R\\/g, &apos;~&apos;], [/\\E\\/g, &apos;\\&apos;], [/\\F\\/g, &apos;|&apos;], [/\\S\\/g, &apos;^&apos;]];
	
	for(var i = 0; i &lt; pattern.length; i++){
		result = result.replace(pattern[i][0], pattern[i][1]);
	}
	
	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fde5f48b-6860-49be-a9ab-dfb0e4ba3b97</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790008</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>74dbb502-8da5-45ee-90ed-3ccc48afe44c</id>
      <nextMetaDataId>3</nextMetaDataId>
      <name>FUNC_CREATE_CHARGE_ITEM</name>
      <description>Descrição:
Canal responsável por criar ChargeItems de prescrição e execução de MCDTs, enviando de seguida para o canal SEND_CAHRGE_ITEM. Este canal devolve também à aplicação os exameIdentificadores dos ChargeItems criados.

Documentação:
- Canal:
- Contrato Interno entrada: https://b-simple.atlassian.net/wiki/x/BYBXEQ
- Contrato Interno saída (SEND_CHARGE_ITEM):
- Contrato Interno saída (App): https://b-simple.atlassian.net/wiki/x/AYA7DQ

Versão:
0.0.1

Dependências:
- getIdentificador()
- mapPerfil()
- generateLogMsg()
- DateUtc()
- UtcToLocalDateTime()
- createChargeItemRequisicao()
- getPerfilUtilizadorById()
- mapFuncao()
- getNumMecanograficoById()
- writeQueueRMQ()

Canais interligados:
- SEND_CAHRGE_ITEM
- CONSUMOS_OUT
- URGENCY_UPDATE_LOCATION_OUT
- DELIVERS_INTERVENCOES_OUT
- CREATE_MCDT_PRESCRIPTION_OUT
- BUS_CREATE_MCDT_PRESCRIPTION_OUT
- CREATE_MEDICAL_VISIT_CHARGE_ITEM_OUT

Variáveis de ambiente:
- localAddress
- FhirServer_CUFBUS_Namespace
- FhirServer_IMTHOM_Namespace
- FhirServer_IMTHOM_Host
- serverTimeZone
- RabbitmqExchange_ExamesIdentificadores
- MessageType_ExamesIdentificadores</description>
      <revision>5</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>BundleResponse</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Setting variables</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>var ChargeItemList = []; // lista de todos os ChargeItems criados

if (typeof msg[&apos;episodioIdentificadores&apos;] != &apos;undefined&apos; &amp;&amp; msg[&apos;episodioIdentificadores&apos;].length != 0) {
	var visitaIntRefExt = getIdentificador( msg[&apos;episodioIdentificadores&apos;], &apos;Encounter.id&apos;);
	channelMap.put(&apos;visitaIntRefExt&apos;, visitaIntRefExt);
}

// mensagem de origem (id da mensagem no canal anterior)
channelMap.put(&apos;idMsg_canalAnterior&apos;, sourceMap.get(&apos;sourceMessageId&apos;));

// canal de origem
var idCanalOrigem = sourceMap.get(&apos;sourceChannelId&apos;)
if (idCanalOrigem == &apos;c694edba-a184-4970-a5a5-b296092b53a0&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;CONSUMOS_OUT&apos;);

} else if (idCanalOrigem == &apos;0fac608a-4239-45eb-9822-e5d714d7d5db&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;URGENCY_UPDATE_LOCATION_OUT&apos;);

} else if (idCanalOrigem == &apos;a3596087-6fb3-4fa8-b94c-a589692fe2b0&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;DELIVERS_INTERVENCOES_OUT&apos;);

} else if (idCanalOrigem == &apos;3fe6d772-4b87-435b-ab48-1a3cd74b6a18&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;CREATE_MCDT_PRESCRIPTION_OUT&apos;);

} else if (idCanalOrigem == &apos;06a5f02f-49cc-47d7-ad4d-a0da403d4d8a&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;BUS_CREATE_MCDT_PRESCRIPTION_OUT&apos;);

} else if (idCanalOrigem == &apos;70552e1b-f45c-4b0c-a5aa-857417d1ffd8&apos;) {
	channelMap.put(&apos;canalOrigem&apos;, &apos;CREATE_MEDICAL_VISIT_CHARGE_ITEM_OUT&apos;);
} else {
	channelMap.put(&apos;canalOrigem&apos;, &apos;BUS_CREATE_MCDT_PRESCRIPTION_OUT&apos;); // como este canal envia msgs por VMRouter e não por ChannelWriter, variaveis do sourceMap &apos;sourceChannelId&apos; e &apos;sourceMessageId&apos; não existem
}


channelMap.put(&apos;numSequencial&apos;, msg[&apos;doente&apos;][&apos;numSequencial&apos;]);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>BaseChargeItem</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>/* base comum aos vários ChargeItems criados nos seus casos NÃO REFERENTES a requisição de exames:
	CONSUMOS_OUT, URGENCY_UPDATE_LOCATION_OUT e DELIVERS_INTERVENCOES_OUT
sendo que cada step seguinte (steps 2 a 4) vai alterar e/ou acrescentar para o seu caso específico.
*/

//ChargeItem.code
var codeCI = {};
if (typeof msg[&apos;codigoIdentificadores&apos;] != &apos;undefined&apos; &amp;&amp; msg[&apos;codigoIdentificadores&apos;].length != 0) {
	var codingArray = [];
	for (var cod=0; cod &lt; msg[&apos;codigoIdentificadores&apos;].length; cod++) {
		var codingObj = {}
		if (msg[&apos;codigoIdentificadores&apos;][cod][&apos;sistemaCodificador&apos;].toString().toLowerCase() === &quot;patientcare.id&quot; &amp;&amp; msg[&apos;codigoIdentificadores&apos;][cod][&apos;codigo&apos;] != &quot;&quot;) {
			codingObj.system = $(&apos;localAddress&apos;) + &quot;/fhir/CodeSystem/Service&quot;;
			codingObj.code = msg[&apos;codigoIdentificadores&apos;][cod][&apos;codigo&apos;];
			codingArray.push(codingObj);
		} else if (msg[&apos;codigoIdentificadores&apos;][cod][&apos;sistemaCodificador&apos;].toString().toLowerCase() === &quot;intrefext&quot; &amp;&amp; msg[&apos;codigoIdentificadores&apos;][cod][&apos;codigo&apos;] != &quot;&quot;) {
			codingObj.system = &quot;https://cuf.pt/fhir/CodeSystem/Service&quot;;
			codingObj.code = msg[&apos;codigoIdentificadores&apos;][cod][&apos;codigo&apos;];
			codingArray.push(codingObj);
		}
	}
	codeCI.coding = codingArray;
	codeCI.text = (typeof msg[&apos;codigoDescr&apos;] != &apos;undefined&apos; &amp;&amp; msg[&apos;codigoDescr&apos;] != null) ? msg[&apos;codigoDescr&apos;] : null;
}

//ChargeItem.performer
var performerCI = [];
if (typeof msg[&apos;utilizadores&apos;] != &apos;undefined&apos; &amp;&amp; msg[&apos;utilizadores&apos;].length != 0) {
	for (var p=0; p &lt; msg[&apos;utilizadores&apos;].length; p++) {
		if (msg[&apos;utilizadores&apos;][p][&apos;numMecanografico&apos;] != null) {

			channelMap.put(&apos;numMecanografico&apos;, msg[&apos;utilizadores&apos;][p][&apos;numMecanografico&apos;]);
			var performerObj = {
			   function: {
			       coding: [{
			           system: newStringOrUndefined( $(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			           code: newStringOrUndefined( mapPerfil(msg[&apos;utilizadores&apos;][p][&apos;perfil&apos;]) )
			       }]
			   },
			   actor: {
			       reference: newStringOrUndefined(&quot;Practitioner/&quot; + msg[&apos;utilizadores&apos;][p][&apos;numMecanografico&apos;]),
			       identifier: {
		           	use: newStringOrUndefined(&apos;official&apos;),
		          	 type: {
		               	coding: [{
		                   		system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
		                   		code: newStringOrUndefined(&apos;4&apos;)
		               	}],
		               	text: newStringOrUndefined(&apos;N.º mecanográfico&apos;)
		           	},
		           	value: newStringOrUndefined(msg[&apos;utilizadores&apos;][p][&apos;numMecanografico&apos;])
			       },
			       display: msg[&apos;utilizadores&apos;][p][&apos;nome&apos;]
			   }
			}
			performerCI.push(performerObj);
		}
	}
}


//ChargeItem base para todos os casos (baseado no canal DELVIERS_INTERVNECOES_OUT)
var BaseChargeItem = {
    resourceType: newStringOrUndefined(&apos;ChargeItem&apos;),
    id: newStringOrUndefined(typeof msg[&apos;id&apos;] != &apos;undefined&apos; ? msg[&apos;id&apos;] : UUIDGenerator.getUUID() ),
    extension: [{
        url: newStringOrUndefined((typeof msg[&apos;anulado&apos;] != &apos;undefined&apos; &amp;&amp; msg[&apos;anulado&apos;]== true) ? $(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/StructureDefinition/ReasonId&quot; : null),
        valueCoding: {
            system: newStringOrUndefined((typeof msg[&apos;anulado&apos;] != &apos;undefined&apos; &amp;&amp; msg[&apos;anulado&apos;]== true) ? $(&apos;FhirServer_IMTHOM_Namespace&apos;) + &quot;/fhir/CodeSystem/ChargeItemCancelReason&quot; : null),
            code: newStringOrUndefined((typeof msg[&apos;anulado&apos;] != &apos;undefined&apos; &amp;&amp; msg[&apos;anulado&apos;]== true) ? &quot;1&quot; : null)
        }
    }],
    identifier: [{
        use: newStringOrUndefined(typeof msg[&apos;id&apos;] != &apos;undefined&apos; ? &apos;official&apos; : null),
        type: {
            coding: [{
                system: newStringOrUndefined(typeof msg[&apos;id&apos;] != &apos;undefined&apos; ? &apos;http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203&apos; : null),
                code: newStringOrUndefined(typeof msg[&apos;id&apos;] != &apos;undefined&apos; ? &apos;PLAC&apos; : null)
            }],
            text: newStringOrUndefined(typeof msg[&apos;id&apos;] != &apos;undefined&apos; ? &apos;Placer Identifier&apos; : null)
        },
        system: newStringOrUndefined(typeof msg[&apos;id&apos;] != &apos;undefined&apos; ? $(&apos;localAddress&apos;) + &quot;/fhir/r4/ChargeItem.Id&quot; : null),
        value: newStringOrUndefined(typeof msg[&apos;id&apos;] != &apos;undefined&apos; ? msg[&apos;id&apos;] : null)
    }],
    code: codeCI,
    subject: {
        reference: newStringOrUndefined(&quot;Patient/&quot; + msg[&apos;doente&apos;][&apos;numSequencial&apos;]),
        identifier: {
            use: newStringOrUndefined(&apos;official&apos;),
            type: {
                coding: [{
                    system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PatientCode&quot;),
                    code: newStringOrUndefined(&apos;JMS&apos;)
                }],
                text: newStringOrUndefined(&apos;JMS Identifier&apos;)
            },
            value: newStringOrUndefined(msg[&apos;doente&apos;][&apos;numSequencial&apos;])
        },
        display: newStringOrUndefined( msg[&apos;doente&apos;][&apos;nomeDoente&apos;] != &apos;undefined&apos; ? msg[&apos;doente&apos;][&apos;nomeDoente&apos;] : null )
    },
    context: {
        reference: newStringOrUndefined(channelMap.get(&apos;visitaIntRefExt&apos;) != null ? &quot;Encounter/&quot; + $(&apos;visitaIntRefExt&apos;) : null)
    },
    occurrenceDateTime: msg[&apos;data&apos;] != null ? newStringOrUndefined( UtcToLocalDateTime(msg[&apos;data&apos;], true, $(&apos;serverTimeZone&apos;)) ) : null,
    performer: performerCI,
    quantity: {
        value: newNumberOrUndefined( (typeof msg[&apos;quantidade&apos;] != &apos;undefined&apos; &amp;&amp; msg[&apos;quantidade&apos;] != null) ? msg[&apos;quantidade&apos;] : 1)
    },
    note: [{
        text: newStringOrUndefined( (typeof msg[&apos;obs&apos;] != &apos;undefined&apos; &amp;&amp; msg[&apos;obs&apos;] != null) ? msg[&apos;obs&apos;] : null)
    }]
};

//channelMap.put(&apos;BaseChargeItem&apos;, BaseChargeItem);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>CONSUMOS_OUT</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>/* Contrato esperado/necessário
 {
	&quot;id&quot; : &quot;031e03ac-d683-48e3-b17d-ad05abde2b6f&quot;,
	&quot;anulado&quot; : false,
	&quot;criar&quot; : true,
	  &quot;codigoIdentificadores&quot; : [
	    {
	      &quot;sistemaCodificador&quot;: &quot;patientcare.id&quot;,
	      &quot;codigo&quot;: &quot;&quot;
	    },
	    {
	      &quot;sistemaCodificador&quot;: &quot;IntRefExt&quot;, 
	      &quot;codigo&quot;: &quot;&quot;
	    }
	  ],
	  &quot;codigoDescr&quot;: null,
	&quot;doente&quot; : {
		&quot;numSequencial&quot; : &quot;260&quot;,
		&quot;nomeDoente&quot;: null
	},
	  &quot;episodioIdentificadores&quot; : [
	    {
	      &quot;sistemaCodificador&quot; : null,
	      &quot;codigo&quot; : null
	    }
	  ],
	&quot;data&quot; : &quot;2023-07-17T15:50:00Z&quot;,
	  &quot;utilizadores&quot; : [{
	      &quot;nome&quot; : null,
	      &quot;numMecanografico&quot; : null,
	      &quot;perfil&quot; : null
	  }],
	&quot;quantidade&quot; : null
}
*/
if ( $(&apos;canalOrigem&apos;) == &apos;CONSUMOS_OUT&apos;) {

	//extension
	var extensionCO = [{
		url: newStringOrUndefined(msg[&apos;anulado&apos;] == true ? ($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/StructureDefinition/ReasonId&quot;) : ((msg[&apos;criar&apos;] == false &amp;&amp; msg[&apos;anulado&apos;] == false) ? ($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/StructureDefinition/ReasonId&quot;) : null)),
		valueCoding: {
			system: newStringOrUndefined(msg[&apos;anulado&apos;] == true ? ($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/ChargeItemCancelReason&quot;) : ((msg[&apos;criar&apos;] == false &amp;&amp; msg[&apos;anulado&apos;] == false) ? ($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/ChargeItemChangeQtyReason&quot;) : null)),
			code: newStringOrUndefined(msg[&apos;anulado&apos;] == true ? (&quot;5&quot;) : ((msg[&apos;criar&apos;] == false &amp;&amp; msg[&apos;anulado&apos;] == false) ? &quot;2&quot; : null))
		}
	}];
	BaseChargeItem.extension = extensionCO;

	//status
	BaseChargeItem.status = newStringOrUndefined(msg[&apos;criar&apos;] == true ? &quot;billable&quot; : (msg[&apos;anulado&apos;] == true ? &quot;aborted&quot; : &quot;billable&quot;));

	//code (replace Service --&gt; Product)
	for (var x=0; x &lt; BaseChargeItem[&apos;code&apos;][&apos;coding&apos;].length; x++) {
		if (BaseChargeItem[&apos;code&apos;][&apos;coding&apos;][x][&apos;system&apos;].includes(&quot;/Service&quot;)) {
			BaseChargeItem[&apos;code&apos;][&apos;coding&apos;][x][&apos;system&apos;] = BaseChargeItem[&apos;code&apos;][&apos;coding&apos;][x][&apos;system&apos;].replace(&quot;/Service&quot;, &quot;/Product&quot;);
		}
	}

	var eventCoding = msg[&apos;criar&apos;] == true ? &quot;CreateChargeItem&quot; : (msg[&apos;anulado&apos;] == true ? &quot;CancelChargeItem&quot; : &quot;UpdateChargeItem&quot;);
	channelMap.put(&apos;eventCoding&apos;,eventCoding);
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>URGENCY_UPDATE_LOCATION_OUT</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <script>/* Contrato esperado/necessário
{
	&quot;localizacaoAnterior&quot;: { 
		&quot;id&quot; : &quot;79055244-6329-4b79-9cf8-2ab986b124a8&quot;,
		&quot;isServicoObservacoes&quot;:false,
		&quot;dataHoraInicio&quot; : &quot;UTC&quot;,
	},
	&quot;utilizadores&quot; : [{
			&quot;numMecanografico&quot; : &quot;196660475&quot;,
			&quot;perfil&quot; : 2, 
		}],
	&quot;doente&quot; : {
		&quot;numSequencial&quot; : &quot;7&quot;,
		&quot;nomeDoente&quot; : &quot;S&quot;,
	},
	  &quot;episodioIdentificadores&quot; : [
	    {
	      &quot;sistemaCodificador&quot; : null,
	      &quot;codigo&quot; : null
	    }
	  ],
}

*/

if ( $(&apos;canalOrigem&apos;) == &apos;URGENCY_UPDATE_LOCATION_OUT&apos;) {
	BaseChargeItem.id = newStringOrUndefined(msg[&apos;localizacaoAnterior&apos;][&apos;id&apos;]);
	
	//extension
	var extensionUULO = [
		/*{
			extension: [{
		          url: newStringOrUndefined(&apos;code&apos;),
				valueCoding: {
					system: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdServicoExecutanteRefExt&apos;] != null ? $(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/RootFunctionalHealthUnit&quot; : null),
					code: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdServicoExecutanteRefExt&apos;] != null ? msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdServicoExecutanteRefExt&apos;] : null),
					display: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdServicoExecutanteDescr&apos;] != null ? msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdServicoExecutanteDescr&apos;] : null)
				}
		      }],	
		      url: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdServicoExecutanteRefExt&apos;] != null ? $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ChargeItem.ExecutingFunctionalHealthUnit.WithCode&quot; : null)
		},*/
		{
			url: newStringOrUndefined($(&apos;localAddress&apos;) + &quot;/fhir/StructureDefinition/CarePlan.ClinicalInformation&quot;),
			valueString: newStringOrUndefined(&quot;teste&quot;) //??
		},
		{
			url: newStringOrUndefined( $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ServiceRequest.ExternalId&quot;),
			valueString: newStringOrUndefined(msg[&apos;localizacaoAnterior&apos;][&apos;id&apos;])
			
		}
	];
	BaseChargeItem.extension = extensionUULO;

	//identifier
	var identifierUULO = [{
        use: newStringOrUndefined(&apos;official&apos;),
        type: {
            coding: [{
                system: newStringOrUndefined(&apos;http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203&apos;),
                code: newStringOrUndefined(&apos;PLAC&apos;)
            }],
            text: newStringOrUndefined(&apos;Placer Identifier&apos;)
        },
        value: newStringOrUndefined(msg[&apos;localizacaoAnterior&apos;][&apos;id&apos;])
    }];
	BaseChargeItem.identifier = identifierUULO;

	BaseChargeItem.status = newStringOrUndefined(&apos;billable&apos;);
		
	//code
	var codeUULO = {
		coding: [{
				system: newStringOrUndefined($(&apos;localAddress&apos;) + &quot;/fhir/CodeSystem/Service&quot;),
				code: newStringOrUndefined(msg[&apos;localizacaoAnterior&apos;][&apos;id&apos;])
			},
			{
				system: newStringOrUndefined(&quot;https://cuf.pt/fhir/CodeSystem/Service&quot;),
				code: newStringOrUndefined(&quot;1000620&quot;)
			}
		],
		text: newStringOrUndefined(&quot;Diárias de S.O.&quot;)
	};
	BaseChargeItem.code = codeUULO;

	BaseChargeItem.occurrenceDateTime= msg[&apos;localizacaoAnterior&apos;][&apos;dataHoraInicio&apos;] != null ? newStringOrUndefined( UtcToLocalDateTime(msg[&apos;localizacaoAnterior&apos;][&apos;dataHoraInicio&apos;], true, $(&apos;serverTimeZone&apos;)) ) : null;

	var eventCoding = msg[&apos;criar&apos;] == true ? &quot;CreateChargeItem&quot; : (msg[&apos;anulado&apos;] == true ? &quot;CancelChargeItem&quot; : &quot;UpdateChargeItem&quot;);
	channelMap.put(&apos;eventCoding&apos;,&quot;CreateChargeItem&quot;);
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>DELIVERS_INTERVENCOES_OUT</name>
              <sequenceNumber>4</sequenceNumber>
              <enabled>true</enabled>
              <script>/* Contrato esperado/necessário
{
	&quot;id&quot; : &quot;031e03ac-d683-48e3-b17d-ad05abde2b6f&quot;,
	&quot;anulado&quot; : false,
	&quot;criar&quot; : true,
  &quot;codigoIdentificadores&quot; : [ -- passar id + cdIntervencaoIntRefExtServicoclinico
    {
      &quot;sistemaCodificador&quot;: &quot;patientcare.id&quot;,
      &quot;codigo&quot;: &quot;&quot;
    },
    {
      &quot;sistemaCodificador&quot;: &quot;IntRefExt&quot;, 
      &quot;codigo&quot;: &quot;&quot;
    }
  ],
	&quot;doente&quot; : {
		&quot;numSequencial&quot; : &quot;260&quot;,
		&quot;nomeDoente&quot;: null
	},
  &quot;episodioIdentificadores&quot; : [
    {
      &quot;sistemaCodificador&quot; : null,
      &quot;codigo&quot; : null
    }
  ],
	&quot;data&quot;: null,
	&quot;utilizador&quot; : {
		&quot;numMecanografico&quot; : &quot;123456789&quot;,
		&quot;perfil&quot;: null
	},
	&quot;obs&quot;: null
}
*/

if ( $(&apos;canalOrigem&apos;) == &apos;DELIVERS_INTERVENCOES_OUT&apos;) {
	BaseChargeItem.status =  newStringOrUndefined(msg[&apos;criar&apos;] != true ? &quot;aborted&quot; : &quot;billable&quot;);
	
	var eventCoding = msg[&apos;criar&apos;] == true ? &quot;CreateChargeItem&quot; : (msg[&apos;anulado&apos;] == true ? &quot;CancelChargeItem&quot; : &quot;UpdateChargeItem&quot;);
	channelMap.put(&apos;eventCoding&apos;,eventCoding);
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>CREATE_MEDICAL_VISIT_CHARGE_ITEM_OUT</name>
              <sequenceNumber>5</sequenceNumber>
              <enabled>true</enabled>
              <script>/* Contrato esperado/necessário
 {
	&quot;id&quot; : &quot;031e03ac-d683-48e3-b17d-ad05abde2b6f&quot;,
	&quot;anulado&quot; : false,
	  &quot;codigoIdentificadores&quot; : [
	    {
	      &quot;sistemaCodificador&quot;: &quot;patientcare.id&quot;,
	      &quot;codigo&quot;: &quot;&quot;
	    },
	    {
	      &quot;sistemaCodificador&quot;: &quot;IntRefExt&quot;, 
	      &quot;codigo&quot;: &quot;&quot;
	    }
	  ],
	  &quot;codigoDescr&quot;: null,
	&quot;doente&quot; : {
		&quot;numSequencial&quot; : &quot;260&quot;,
		&quot;nomeDoente&quot;: null
	},
	  &quot;episodioIdentificadores&quot; : [
	    {
	      &quot;sistemaCodificador&quot; : null,
	      &quot;codigo&quot; : null
	    }
	  ],
	&quot;data&quot; : &quot;2023-07-17T15:50:00Z&quot;,
	  &quot;utilizadores&quot; : [{
	      &quot;nome&quot; : null,
	      &quot;numMecanografico&quot; : null,
	      &quot;perfil&quot; : null
	  }],
	&quot;quantidade&quot; : null,
	obs: null
}
*/
if ( $(&apos;canalOrigem&apos;) == &apos;CREATE_MEDICAL_VISIT_CHARGE_ITEM_OUT&apos;) {

	//extension
	var extensionCMV = [{
		url: newStringOrUndefined(msg[&apos;obs&apos;] != null &amp;&amp; msg [&apos;obs&apos;] != &apos;&apos; ? $(&apos;localAddress&apos;) + &quot;/fhir/StructureDefinition/Careplan.ClinicalInformation&quot; : null),
		valueString: newStringOrUndefined(msg[&apos;obs&apos;] != null &amp;&amp; msg [&apos;obs&apos;] != &apos;&apos; ? msg [&apos;obs&apos;] : null)
	}];
	BaseChargeItem.extension = extensionCMV;

	//status
	BaseChargeItem.status = newStringOrUndefined(msg[&apos;anulado&apos;] == true ? &quot;aborted&quot; : &quot;billable&quot;);

	var eventCoding = msg[&apos;anulado&apos;] == true ? &quot;UpdateChargeItem&quot; : &quot;CreateChargeItem&quot;;
	channelMap.put(&apos;eventCoding&apos;,eventCoding);
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>--------------------------------------------------------------</name>
              <sequenceNumber>6</sequenceNumber>
              <enabled>true</enabled>
              <script>// Separação entre casos em que: - existe (ou pode existir) fichas adicionais - steps abaixo
//							- outros casos - steps acima</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Setting Variables</name>
              <sequenceNumber>7</sequenceNumber>
              <enabled>true</enabled>
              <script>// Setting Variables

var ChargeItemList = []; // lista de todos os ChargeItems criados
var executionStatus = [&quot;D&quot;, &quot;DR&quot;, &quot;V&quot;, &quot;PV&quot;, &quot;PR&quot;];</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>BaseCIRequisicaoExames</name>
              <sequenceNumber>8</sequenceNumber>
              <enabled>false</enabled>
              <script>/*	Contrato esperado/necessário
{
	&quot;requisicao&quot; : ...,
	&quot;doente&quot;: ...
	&quot;utilizadores&quot;: ...
*/

if ( $(&apos;canalOrigem&apos;) == &apos;CREATE_MCT_PRESCRIPTION_OUT&apos; || $(&apos;canalOrigem&apos;) == &apos;BUS_CREATE_MCT_PRESCRIPTION_OUT&apos;) {

	chargeItemId = UUIDGenerator.getUUID();
	
	var BaseCIRequisicaoExames = {
         resourceType: newStringOrUndefined(&apos;ChargeItem&apos;),
         /* específico de cada Ficha Adicional
		id: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ? chargeItemId : null),
		*/
         extension: [
			{
				url: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;infoClinicaGeral&apos;] != null ? $(&apos;localAddress&apos;) + &quot;/fhir/StructureDefinition/CarePlan.ClinicalInformation&quot; : null),
				valueString: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;infoClinicaGeral&apos;] != null ? msg[&apos;requisicao&apos;][&apos;infoClinicaGeral&apos;] : null)
			},
			/* específico de cada Ficha Adicional
			{
				url: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;identificadorSequencialUnicoExame&apos;] != null ? $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ServiceRequest.ExternalId&quot; : null),
				valueString: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;identificadorSequencialUnicoExame&apos;] != null ? msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;identificadorSequencialUnicoExame&apos;] : null)
				
			},*/
			/* específico de cada Ficha Adicional
			{
				extension: [{
			          url: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdEspecialidadeRefExt&apos;] != null ? &apos;code&apos; : null),
					valueCoding: {
						system: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdEspecialidadeRefExt&apos;] != null ? $(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/RootFunctionalHealthUnit&quot; : null),
						code: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdEspecialidadeRefExt&apos;] != null ? msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdEspecialidadeRefExt&apos;] : null),
						display: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdEspecialidadeDescr&apos;] != null ? msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdEspecialidadeDescr&apos;] : null)
					}
			      }],	
			      url: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdEspecialidadeRefExt&apos;] != null ? $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ChargeItem.ExecutingFunctionalHealthUnit.WithCode&quot; : null)
			}*/
	    ],
         status: newStringOrUndefined(&apos;billable&apos;),
         	/* específico de cada Ficha Adicional
		identifier: [{
	        use: newStringOrUndefined(&apos;official&apos;),
	        type: {
	            coding: [{
	                system: newStringOrUndefined(&apos;http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203&apos;),
	                code: newStringOrUndefined(&apos;PLAC&apos;)
	            }],
	            text: newStringOrUndefined(&apos;Placer Identifier&apos;)
	        },
	        value: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;identificadorSequencialUnicoExame&apos;] + &apos;-&apos; + chargeItemId)
	    }],*/
         /* específico de cada Ficha Adicional
		code: {
             coding: [{
                 system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/Service&quot;),
                 code: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;examesAdicionais&apos;][j][&apos;rubricas&apos;][k])
             }]
         },*/
         subject: BaseChargeItem.subject,
         /*subject: { 
             reference: newStringOrUndefined(&quot;Patient/&quot; + msg[&apos;doente&apos;][&apos;numSequencial&apos;]),
             identifier: {
                 use: newStringOrUndefined(&apos;official&apos;),
                 type: {
                     coding: [{
                         system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PatientCode&quot;)
                     }],
                     text: newStringOrUndefined(&apos;Patient Code&apos;) //?? Colocar assim ou colocar como está no BaseChargeItem.subject? (está diferente e THOM só deve olhar para o system ... uniformizar para a forma como está o BaseChargeItem.subject??
                 },
                 value: newStringOrUndefined(msg[&apos;doente&apos;][&apos;numSequencial&apos;])
             }
         },*/
         context: BaseChargeItem.context,
	    /* específico de cada Ficha Adicional
		occurrenceDateTime: newStringOrUndefined(dataRelato != null ? dataRelato : (dataValidacao!= null ? dataValidacao : occurenceDateTime)),
	    */
	    /* específico de cada Ficha Adicional
	    performer: Performer,
	    */
		quantity: {
			value: newNumberOrUndefined(1)
		},
		/* específico de cada Ficha Adicional
		note: [{
			text: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ? (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameObs&apos;] != null ? msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameObs&apos;] : null) : null)
		}]*/
     }
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Fichas Adicionais - Revisao de Exames</name>
              <sequenceNumber>9</sequenceNumber>
              <enabled>true</enabled>
              <script>// ****************** Anatomia Patologica::Revisao de Exames ****************** 
if ( typeof msg[&apos;requisicao&apos;] != &apos;undefined&apos;) {
	
	if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ){
	    	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;]); i++) {
	    	 	if (executionStatus.includes(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameEstadoRefExt&apos;]) || 
				$(&apos;canalOrigem&apos;) == &quot;BUS_CREATE_MCDT_PRESCRIPTION_OUT&quot;	){ // Ver *Nota 1) { // exame executável/com criação de ChargeItem
	    	 	
		        	if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;] != null &amp;&amp;  msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;] != &apos;&apos; ){
					var baseCI = createChargeItemRequisicaoMCDT(msg[&apos;requisicao&apos;][&apos;exames&apos;][i], msg[&apos;utlizadores&apos;], msg[&apos;requisicao&apos;], msg[&apos;doente&apos;], $(&apos;visitaIntRefExt&apos;), null);
		
			          // ****************** Outros Exames Pretendidos::Rubricas ******************  
			          if ( msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;examesAdicionais&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;examesAdicionais&apos;] != [] ){
						for (var j = 0; j &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;examesAdicionais&apos;]); j++) {
			
							if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;examesAdicionais&apos;][j][&apos;rubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;examesAdicionais&apos;][j][&apos;rubricas&apos;] != [] ){
								for (var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;examesAdicionais&apos;][j][&apos;rubricas&apos;]); k++) {
									
							        	var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
							        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
							        	theChargeItem.id = UUIDGenerator.getUUID();
							        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;examesAdicionais&apos;][j][&apos;rubricas&apos;][k];
					                    ChargeItemList.push(theChargeItem);		
								}
							}
					    }
			          }
			
					if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;cdExamePretendidoRubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;cdExamePretendidoRubricas&apos;] != [] ){
					  	for (var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;cdExamePretendidoRubricas&apos;]); k++){
					        	var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
					        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
					        	theChargeItem.id = UUIDGenerator.getUUID();
					        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;revisaoExame&apos;][&apos;cdExamePretendidoRubricas&apos;][k];
			                    ChargeItemList.push(theChargeItem);	
					  	}
					}
		         	}
	    	 	}
	    	} 	
	}
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Fichas Adicionais - MCDTs em Anatomia Patologica</name>
              <sequenceNumber>10</sequenceNumber>
              <enabled>true</enabled>
              <script>// ****************** Anatomia Patologica::MCDTs em ANatomia Patologica ****************** 
if ( typeof msg[&apos;requisicao&apos;] != &apos;undefined&apos;) {
	
	if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ){
	    	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;]); i++) {
	    	 	if (executionStatus.includes(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameEstadoRefExt&apos;]) || 
				$(&apos;canalOrigem&apos;) == &quot;BUS_CREATE_MCDT_PRESCRIPTION_OUT&quot;	){ // Ver *Nota 1) { // exame executável/com criação de ChargeItem
	        		if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;anatomiaPatologica&apos;] != null &amp;&amp;  msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;anatomiaPatologica&apos;] != &apos;&apos; ){
	
					var baseCI = createChargeItemRequisicaoMCDT(msg[&apos;requisicao&apos;][&apos;exames&apos;][i], msg[&apos;utlizadores&apos;], msg[&apos;requisicao&apos;], msg[&apos;doente&apos;], $(&apos;visitaIntRefExt&apos;), null);
		            
					// ****************** Outros Exames Pretendidos::Rubricas ******************  
			          if ( msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;anatomiaPatologica&apos;][&apos;examesAdicionais&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;anatomiaPatologica&apos;][&apos;examesAdicionais&apos;] != [] ){
						for (var j = 0; j &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;anatomiaPatologica&apos;][&apos;examesAdicionais&apos;]); j++) {
							if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;anatomiaPatologica&apos;][&apos;examesAdicionais&apos;][j][&apos;rubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;anatomiaPatologica&apos;][&apos;examesAdicionais&apos;][j][&apos;rubricas&apos;] != []){
								for (var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;anatomiaPatologica&apos;][&apos;examesAdicionais&apos;][j][&apos;rubricas&apos;]); k++ ){
									
									var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
							        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
							        	theChargeItem.id = UUIDGenerator.getUUID();
							        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;anatomiaPatologica&apos;][&apos;examesAdicionais&apos;][j][&apos;rubricas&apos;][k];
					                    ChargeItemList.push(theChargeItem);			
								}
							}
					    	}
					}
	         		}
	    	  	}
	    	} 	
	}
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Fichas Adicionais - Citologia Ginecológica</name>
              <sequenceNumber>11</sequenceNumber>
              <enabled>true</enabled>
              <script>/* TODO: AmostraId não vem no contrato */
// ****************** Citologia Ginecológica ****************** 
if ( typeof msg[&apos;requisicao&apos;] != &apos;undefined&apos;) {
	
	if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ){
	    	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;]); i++) {
	    		if (executionStatus.includes(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameEstadoRefExt&apos;]) || 
				$(&apos;canalOrigem&apos;) == &quot;BUS_CREATE_MCDT_PRESCRIPTION_OUT&quot;	){ // Ver *Nota 1) {// exame executável/com criação de ChargeItem
	    			
	        		if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;] != null &amp;&amp;  msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;] != &apos;&apos; ){		  
					
					var baseCI = createChargeItemRequisicaoMCDT(msg[&apos;requisicao&apos;][&apos;exames&apos;][i], msg[&apos;utlizadores&apos;], msg[&apos;requisicao&apos;], msg[&apos;doente&apos;], $(&apos;visitaIntRefExt&apos;), null);
	
			          // ****************** Outros Exames Pretendidos::Rubricas ******************  
			          if ( msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;examesAdicionais&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;examesAdicionais&apos;] != [] ){            		
						for (var j = 0; j &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;examesAdicionais&apos;]); j++) {
			
							// ****************** Outros Exames Pretendidos::Rubricas ******************  
						     if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;examesAdicionais&apos;][j][&apos;cdExameCitologiaGinecologicaRubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;examesAdicionais&apos;][j][&apos;cdExameCitologiaGinecologicaRubricas&apos;] != []){
						        	for (var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;examesAdicionais&apos;][j][&apos;cdExameCitologiaGinecologicaRubricas&apos;]); k++){
						        		
						        		var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
							        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
							        	theChargeItem.id = UUIDGenerator.getUUID();
							        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;examesAdicionais&apos;][j][&apos;cdExameCitologiaGinecologicaRubricas&apos;][k];
					                    ChargeItemList.push(theChargeItem);		
						        	}
						     }
						}
					}	       
			
			          // ******************** Rubricas ****************** 
					if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;cdExamePretendidoRubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;cdExamePretendidoRubricas&apos;] != []){
						for (var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;cdExamePretendidoRubricas&apos;]); k++ ){
				        		var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
					        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
					        	theChargeItem.id = UUIDGenerator.getUUID();
					        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;cdExamePretendidoRubricas&apos;][k];
			                    ChargeItemList.push(theChargeItem);	
						}
					}
			
					if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;cdClasseExameRubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;cdClasseExameRubricas&apos;] != []){
					  	for (var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;cdClasseExameRubricas&apos;]); k++ ){
			        			var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
					        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
					        	theChargeItem.id = UUIDGenerator.getUUID();
					        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaGinecologica&apos;][&apos;cdClasseExameRubricas&apos;][k];
			                    ChargeItemList.push(theChargeItem);	
					  	}
					}
	       		}   
	    		}
	   	}
	}
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Fichas Adicionais - Citologia não Ginecológica</name>
              <sequenceNumber>12</sequenceNumber>
              <enabled>true</enabled>
              <script>/* TODO: os campos &quot;cdClasseExameRefExt&quot; e &quot;cdClasseExameRubrica&quot; na amostra não estão definidos no contrato */
// ****************** Citologia Ginecológica ****************** 
if ( typeof msg[&apos;requisicao&apos;] != &apos;undefined&apos;) {
	
	if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ){
	    	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;]); i++) {
	    		if (executionStatus.includes(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameEstadoRefExt&apos;]) || 
				$(&apos;canalOrigem&apos;) == &quot;BUS_CREATE_MCDT_PRESCRIPTION_OUT&quot;	){ // Ver *Nota 1) { // exame executável/com criação de ChargeItem
	        		
	        		if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;] != null &amp;&amp;  msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;] != &apos;&apos; ){
	
					var baseCI = createChargeItemRequisicaoMCDT(msg[&apos;requisicao&apos;][&apos;exames&apos;][i], msg[&apos;utlizadores&apos;], msg[&apos;requisicao&apos;], msg[&apos;doente&apos;], $(&apos;visitaIntRefExt&apos;), null);

					// ******************** Amostra ****************** 
					if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;] != []){
					  	for (var j = 0; j &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;]); j++) {
			          
				            	// ****************** Outros Exames Pretendidos******************  
						     if ( msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;] != [] ){             
								for (var m = 0; m &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;]); m++) {
				            		
					            		// ****************** Outros Exames Pretendidos::Rubricas ******************
					                    if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;][m][&apos;cdExameCitologiaNaoGinecologicaRubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;][m][&apos;cdExameCitologiaNaoGinecologicaRubricas&apos;] != []){
					                    	for(var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;][m][&apos;cdExameCitologiaNaoGinecologicaRubricas&apos;]); k++){
				
								        		var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
									        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
									        	theChargeItem.id = UUIDGenerator.getUUID();
									        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;][m][&apos;cdExameCitologiaNaoGinecologicaRubricas&apos;][k];
							                    ChargeItemList.push(theChargeItem);						                    		 	
					                     	}
					                    }
								}
						     }
					
							// ****************** Classe de Exame Rubricas ****************** 
							if ( msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;cdClasseExameRubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;cdClasseExameRubricas&apos;] != [] ){            		
								for (var n = 0; n &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;cdClasseExameRubricas&apos;]); n++) {	                    

						        		var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
							        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
							        	theChargeItem.id = UUIDGenerator.getUUID();
							        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;amostras&apos;][j][&apos;cdClasseExameRubricas&apos;][n];
					                    ChargeItemList.push(theChargeItem);		
								}
							}			
						}
					}	       
			    
				     // ******************** Rubricas ****************** 
				  	if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;cdExamePretendidoRubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;cdExamePretendidoRubricas&apos;] != &apos;&apos;){
				  		for(var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;cdExamePretendidoRubricas&apos;]); k++){
				        		var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
					        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
					        	theChargeItem.id = UUIDGenerator.getUUID();
					        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;citologiaNaoGinecologica&apos;][&apos;cdExamePretendidoRubricas&apos;][k];
			                    ChargeItemList.push(theChargeItem);	
				  		}
				  	}
				}   
	    		}
	   	}
	}
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Fichas Adicionais - Histologia</name>
              <sequenceNumber>13</sequenceNumber>
              <enabled>true</enabled>
              <script>// ****************** Histologia ****************** 

if ( typeof msg[&apos;requisicao&apos;] != &apos;undefined&apos;) {
	
	if (msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ){
	    	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;]); i++) {
	    		if (executionStatus.includes(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameEstadoRefExt&apos;]) || 
				$(&apos;canalOrigem&apos;) == &quot;BUS_CREATE_MCDT_PRESCRIPTION_OUT&quot;	){ // Ver *Nota 1) { // exame executável/com criação de ChargeItem
	        		if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;] != null &amp;&amp;  msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;] != &apos;&apos; ){
	
					var baseCI = createChargeItemRequisicaoMCDT(msg[&apos;requisicao&apos;][&apos;exames&apos;][i], msg[&apos;utlizadores&apos;], msg[&apos;requisicao&apos;], msg[&apos;doente&apos;], $(&apos;visitaIntRefExt&apos;), null);
	
					// ******************** Amostra ****************** 
					if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;] != []){
						for (var j = 0; j &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;]); j++) {
		
							// ******************** Exames pretendido Rubricas ******************  
							if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;cdExamePretendidoRubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;cdExamePretendidoRubricas&apos;] != []){
								for (var x = 0; x &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;cdExamePretendidoRubricas&apos;]); x++) {
									
						        		var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
							        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
							        	theChargeItem.id = UUIDGenerator.getUUID();
							        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;cdExamePretendidoRubricas&apos;][x];
					                    ChargeItemList.push(theChargeItem);
								}
							}
		
							// ******************** Exames adicionais Rubricas ****************** 
							if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;cdClasseExameRubricas&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;cdClasseExameRubricas&apos;] != []){
								for (var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;cdClasseExameRubricas&apos;]); k++) {
									
						        		var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
							        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
							        	theChargeItem.id = UUIDGenerator.getUUID();
							        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;cdExamePretendidoRubricas&apos;][k];
					                    ChargeItemList.push(theChargeItem);
								}
							}
		
							// ****************** Outros Exames Pretendidos ****************** 
							if ( msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;] != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;] != [] ){            		
								for (var n = 0; n &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;]); n++) {
					
									if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;][n][&apos;histologiaExameAdicionalRubricas&apos;]  != null &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;][n][&apos;histologiaExameAdicionalRubricas&apos;] != []){
										for (var k = 0; k &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;][n][&apos;histologiaExameAdicionalRubricas&apos;]); k++) {
												
								        		var theChargeItem = JSON.parse(JSON.stringify(baseCI)); // deepcopy do ChargeItem base
									        	// só necessita de modificar o ChargeItem.id e o ChargeItem.code
									        	theChargeItem.id = UUIDGenerator.getUUID();
									        	theChargeItem[&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;histologia&apos;][&apos;amostras&apos;][j][&apos;examesAdicionais&apos;][n][&apos;histologiaExameAdicionalRubricas&apos;][k];
							                    ChargeItemList.push(theChargeItem);
										}
						
									}
								}
							}
						}	  	  		  	  
					}
	        		} 
	    		}  
	   	}
	}
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>ChargeItemDeliveries</name>
              <sequenceNumber>14</sequenceNumber>
              <enabled>true</enabled>
              <script>/* * Nota 1 -&gt; existem 2 cenários possíveis no caso de o ChargeItem ser para faturação/execução: 
				Cenário 1: caso a mensagem seja do canal Bus, significa que se trata de um chargeitem obrigatoriamente a faturar, logo não se valida &apos;exameEstadoRefExt&apos; e &apos;faturavel&apos;
				Cenário 2: caso a mensagem seja de outro canal, é necessário validar se é para faturar através do &apos;exameEstadoRefExt&apos; e &apos;faturavel&apos;
*/

if (msg[&apos;submissaoSistExterno&apos;] != false) { // quando se pretende apenas os ChargeItems das fichas adicionais para adicionar à prescrição, i.e, este ChargeItem não deve ser criado (apenas interessa na execução)
	
	var chargeItemResponseList = [];
	if ( typeof msg[&apos;requisicao&apos;] != &apos;undefined&apos;) {
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;]); i++) {
		
			if ( (executionStatus.includes(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameEstadoRefExt&apos;]) &amp;&amp; msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;faturavel&apos;] != false ) || 
				$(&apos;canalOrigem&apos;) == &quot;BUS_CREATE_MCDT_PRESCRIPTION_OUT&quot;	){ // Ver *Nota 1
					
					if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdExameRefExt&apos;] != null &amp;&amp;  msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdExameRefExt&apos;] != &apos;&apos; ){
						
						var chargeItemId = null;
						var fillerId = null;
						var eventCoding = &apos;&apos;;
						if (msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;examesRefExts&apos;] != null &amp;&amp; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;examesRefExts&apos;]) &gt; 0){
							msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;examesRefExts&apos;].find(function(exameIdentificadores){
								if (exameIdentificadores[&apos;sistemaCodificador&apos;].toLowerCase().includes(&apos;chargeitem.id&apos;)){						
									chargeItemId = exameIdentificadores[&apos;codigo&apos;];
								}
								if (exameIdentificadores[&apos;sistemaCodificador&apos;].toLowerCase().includes(&apos;filler.id&apos;)){						
									fillerId = exameIdentificadores[&apos;codigo&apos;];
								}
								
							})
							eventCoding = &quot;UpdateChargeItem&quot;;
						} else if(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameIdentificadores&apos;] != null &amp;&amp; getArrayOrXmlLength(msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameIdentificadores&apos;]) &gt; 0) {
							msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;exameIdentificadores&apos;].find(function(exameIdentificadores){
								if (exameIdentificadores[&apos;sistemaCodificador&apos;].toLowerCase().includes(&apos;chargeitem.id&apos;)){						
									chargeItemId = exameIdentificadores[&apos;codigo&apos;];
								}
								if (exameIdentificadores[&apos;sistemaCodificador&apos;].toLowerCase().includes(&apos;filler.id&apos;)){						
									fillerId = exameIdentificadores[&apos;codigo&apos;];
								}
								
							})
							eventCoding = &quot;UpdateChargeItem&quot;;
						} else {
							chargeItemId = UUIDGenerator.getUUID();
							eventCoding = &quot;CreateChargeItem&quot;;
						}
						channelMap.put(&apos;eventCoding&apos;, eventCoding);
			
						if (eventCoding == &apos;CreateChargeItem&apos;){ // existem identificadores de exame a comunicar à app
							chargeItemResponseObj = new Object();
							chargeItemResponseObj.id = chargeItemId;
							chargeItemResponseObj.identificadorSequencialUnicoExame = msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;identificadorSequencialUnicoExame&apos;];
							chargeItemResponseList.push(chargeItemResponseObj);
							//channelMap.put(&apos;chargeItemResponseObj&apos;, chargeItemResponseObj);
						}
						var baseCI = createChargeItemRequisicaoMCDT(msg[&apos;requisicao&apos;][&apos;exames&apos;][i], msg[&apos;utilizadores&apos;], msg[&apos;requisicao&apos;], msg[&apos;doente&apos;], $(&apos;visitaIntRefExt&apos;), null);
				        	// necessita de modificar o ChargeItem.id, ChargeItem.identifier e o ChargeItem.code
				        	baseCI.id = chargeItemId;
		                    if (eventCoding != &quot;UpdateChargeItem&quot;) {
		                    	delete baseCI.identifier;
		                    }		        	
			        		var theCode = {
							coding: [{
									system: newStringOrUndefined($(&apos;localAddress&apos;) + &quot;/fhir/CodeSystem/Service&quot;),
									code: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ? msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;identificadorSequencialUnicoExame&apos;] : null)
								},
								{
									system: newStringOrUndefined(&quot;https://cuf.pt/fhir/CodeSystem/Service&quot;),
									code: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ? ( msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdExameRefExt&apos;] != null ? msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdExameRefExt&apos;].split(&apos;@&apos;)[0] : null) : null)
								}
							],
							text: newStringOrUndefined(msg[&apos;requisicao&apos;][&apos;exames&apos;].length &gt; 0 ? msg[&apos;requisicao&apos;][&apos;exames&apos;][i][&apos;cdExameDescr&apos;] : null)
						};
				        	baseCI.code = theCode;
		                    ChargeItemList.push(baseCI);
					}
			}
		}
	}
	 
	if (chargeItemResponseList.length != 0){ // não existem identificadores de exame a comunicar à app
		channelMap.put(&apos;chargeItemResponseList&apos;,JSON.stringify(chargeItemResponseList));
	}
	
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>MessageHeader.focus</name>
              <sequenceNumber>15</sequenceNumber>
              <enabled>true</enabled>
              <script>if ( typeof msg[&apos;requisicao&apos;] != &apos;undefined&apos;) { // CREATE_MCDT_PRESCRIPTION_OUT e BUS_CREATE_MCDT_PRESCRIPTION_OUT
	var MsgHeaderFocus = [];
	for (var c=0; c &lt; ChargeItemList.length; c++) {
		MsgHeaderFocus.push({
			reference: newStringOrUndefined(&quot;ChargeItem/&quot; + ChargeItemList[c][&apos;id&apos;])
		});
	}
	channelMap.put(&apos;MsgHeaderFocus&apos;, MsgHeaderFocus);
	
} else { // restantes canais
	var MsgHeaderFocus = [];
	MsgHeaderFocus.push({
		reference: newStringOrUndefined(&quot;ChargeItem/&quot; + BaseChargeItem.id)
	});
	channelMap.put(&apos;MsgHeaderFocus&apos;, MsgHeaderFocus)
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
              <name>MessageHeader Definition</name>
              <sequenceNumber>16</sequenceNumber>
              <enabled>true</enabled>
              <storeAsLocal>true</storeAsLocal>
              <mapType>CHANNEL</mapType>
              <variable>MessageHeader</variable>
              <definition>MessageHeader</definition>
              <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                <usingBuilder>true</usingBuilder>
                <properties class="linked-hash-map">
                  <entry>
                    <string>resourceType</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                        <stringValue>MessageHeader</stringValue>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                  <entry>
                    <string>id</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                        <stringValue>UUIDGenerator.getUUID()</stringValue>
                        <scriptExpression>true</scriptExpression>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                  <entry>
                    <string>eventCoding</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                        <usingBuilder>true</usingBuilder>
                        <properties class="linked-hash-map">
                          <entry>
                            <string>system</string>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                              <enabled>true</enabled>
                              <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                <stringValue>$(&apos;localAddress&apos;) + &quot;/fhir/CodeSystem/FhirServerOutMessages&quot;</stringValue>
                                <scriptExpression>true</scriptExpression>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                          </entry>
                          <entry>
                            <string>code</string>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                              <enabled>true</enabled>
                              <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                <stringValue>$(&apos;eventCoding&apos;)</stringValue>
                                <scriptExpression>true</scriptExpression>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                          </entry>
                        </properties>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                  <entry>
                    <string>destination</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                        <usingBuilder>true</usingBuilder>
                        <elements>
                          <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                            <usingBuilder>true</usingBuilder>
                            <properties class="linked-hash-map">
                              <entry>
                                <string>name</string>
                                <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                  <enabled>true</enabled>
                                  <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                    <stringValue>IMTHOM</stringValue>
                                  </properties>
                                </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                              </entry>
                              <entry>
                                <string>endpoint</string>
                                <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                  <enabled>true</enabled>
                                  <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                    <stringValue>$(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/$process-message&quot;</stringValue>
                                    <scriptExpression>true</scriptExpression>
                                  </properties>
                                </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                              </entry>
                            </properties>
                          </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                        </elements>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                  <entry>
                    <string>source</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                        <usingBuilder>true</usingBuilder>
                        <properties class="linked-hash-map">
                          <entry>
                            <string>name</string>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                              <enabled>true</enabled>
                              <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                <stringValue>PatientCare</stringValue>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                          </entry>
                          <entry>
                            <string>endpoint</string>
                            <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                              <enabled>true</enabled>
                              <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                                <stringValue>$(&apos;localAddress&apos;) + &quot;/fhir/r4/$process-message&quot;</stringValue>
                                <scriptExpression>true</scriptExpression>
                              </properties>
                            </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                          </entry>
                        </properties>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                  <entry>
                    <string>focus</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                        <stringValue>$(&apos;MsgHeaderFocus&apos;)</stringValue>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                </properties>
              </model>
              <fhirVersion>R4</fhirVersion>
            </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
            <com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep version="3.12.0">
              <name>theBundle</name>
              <sequenceNumber>17</sequenceNumber>
              <enabled>true</enabled>
              <storeAsLocal>true</storeAsLocal>
              <mapType>CHANNEL</mapType>
              <variable>theBundle</variable>
              <definition>Bundle</definition>
              <model class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                <usingBuilder>true</usingBuilder>
                <properties class="linked-hash-map">
                  <entry>
                    <string>resourceType</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                        <stringValue>Bundle</stringValue>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                  <entry>
                    <string>id</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                        <stringValue>UUIDGenerator.getUUID()</stringValue>
                        <scriptExpression>true</scriptExpression>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                  <entry>
                    <string>type</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                        <stringValue>message</stringValue>
                        <usingEnum>true</usingEnum>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                  <entry>
                    <string>timestamp</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.StringModel">
                        <stringValue>DateUtil.getCurrentDate(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSSSXXX&quot;)</stringValue>
                        <scriptExpression>true</scriptExpression>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                  <entry>
                    <string>entry</string>
                    <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                      <enabled>true</enabled>
                      <properties class="com.mirth.connect.jsonbuilder.shared.models.ArrayModel">
                        <usingBuilder>true</usingBuilder>
                        <elements>
                          <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                            <usingBuilder>true</usingBuilder>
                            <properties class="linked-hash-map">
                              <entry>
                                <string>resource</string>
                                <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                  <enabled>true</enabled>
                                  <properties class="com.mirth.connect.jsonbuilder.shared.models.OneOfModel">
                                    <usingBuilder>true</usingBuilder>
                                    <oneOfModelTitle>MessageHeader</oneOfModelTitle>
                                    <oneOfModelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                      <stringValue>consolidate(MessageHeader)</stringValue>
                                    </oneOfModelProperties>
                                  </properties>
                                </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                              </entry>
                            </properties>
                          </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                          <com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                            <usingBuilder>true</usingBuilder>
                            <properties class="linked-hash-map">
                              <entry>
                                <string>resource</string>
                                <com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                                  <enabled>true</enabled>
                                  <properties class="com.mirth.connect.jsonbuilder.shared.models.OneOfModel">
                                    <usingBuilder>true</usingBuilder>
                                    <oneOfModelTitle>ChargeItem</oneOfModelTitle>
                                    <oneOfModelProperties class="com.mirth.connect.jsonbuilder.shared.models.ObjectModel">
                                      <stringValue>typeof msg[&apos;requisicao&apos;] != &apos;undefined&apos; ? ChargeItemList : [consolidate(BaseChargeItem)]</stringValue>
                                    </oneOfModelProperties>
                                  </properties>
                                </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                              </entry>
                            </properties>
                          </com.mirth.connect.jsonbuilder.shared.models.ObjectModel>
                        </elements>
                      </properties>
                    </com.mirth.connect.jsonbuilder.shared.models.ObjectProperty>
                  </entry>
                </properties>
              </model>
              <fhirVersion>R4</fhirVersion>
            </com.mirth.connect.plugins.fhir.shared.FhirModelBuilderTransformerStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Consolidate theBundle + responseMap</name>
              <sequenceNumber>18</sequenceNumber>
              <enabled>true</enabled>
              <script>channelMap.put(&apos;theBundle&apos;, JSON.stringify(consolidate(theBundle)));
responseMap.put(&apos;BundleResponse&apos;, JSON.stringify(consolidate(theBundle)) );</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Filtering destinations</name>
              <sequenceNumber>19</sequenceNumber>
              <enabled>true</enabled>
              <script>if ( !msg[&apos;submissaoSistExterno&apos;]) { 
	destinationSet.removeAll(); // quando se pretende apenas os ChargeItems das fichas adicionais para adicionar à prescrição, i.e,  não enviar como execução para o sistema externo (canal SEND_CHARGE_ITEM); apenas é para devolver ao canal que enviou a msg
	
} else if (channelMap.get(&apos;chargeItemResponseList&apos;) == null){ // não existem identificadores de exame a comunicar à app
	destinationSet.remove(&quot;Send exameIdentificadores (App)&quot;);
}

channelMap.put(&apos;submissaoSistExterno&apos;, msg[&apos;submissaoSistExterno&apos;]);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64">ewogICJzdWJtaXNzYW9TaXN0RXh0ZXJubyI6ICJmYWxzZXx0cnVlIiwKICAiaWQiOiBudWxsLAogICJjcmlhciI6IHRydWUsCiAgImFudWxhZG8iOiBmYWxzZSwKICAiY29kaWdvSWRlbnRpZmljYWRvcmVzIiA6IFsKICAgIHsKICAgICAgInNpc3RlbWFDb2RpZmljYWRvciI6ICJwYXRpZW50Y2FyZS5pZCIsCiAgICAgICJjb2RpZ28iOiAiIgogICAgfSwKICAgIHsKICAgICAgInNpc3RlbWFDb2RpZmljYWRvciI6ICJJbnRSZWZFeHQiLCAKICAgICAgImNvZGlnbyI6ICIiCiAgICB9CiAgXSwKICAiY29kaWdvRGVzY3IiOiBudWxsLAogICJkYXRhIjogbnVsbCwKICAib2JzIjogbnVsbCwKICAiZXBpc29kaW9JZGVudGlmaWNhZG9yZXMiIDogWwogICAgewogICAgICAic2lzdGVtYUNvZGlmaWNhZG9yIiA6IG51bGwsCiAgICAgICJjb2RpZ28iIDogbnVsbAogICAgfQogIF0sCiAgInF1YW50aWRhZGUiOiBudWxsLAogICJ1dGlsaXphZG9yZXMiIDogW3sKICAgICAgIm5vbWUiIDogbnVsbCwKICAgICAgIm51bU1lY2Fub2dyYWZpY28iIDogbnVsbCwKICAgICAgInBlcmZpbCIgOiBudWxsCiAgfV0sCiAgImxvY2FsaXphY2FvQW50ZXJpb3IiOiB7IAogICAgICAiaWQiIDogbnVsbCwgCiAgICAgICJkYXRhSG9yYUluaWNpbyIgOiBudWxsCiAgfSwKICAiZG9lbnRlIiA6IHsKICAgICJudW1Qcm9jZXNzbyIgOiBudWxsLAogICAgIm51bVNlcXVlbmNpYWwiIDogbnVsbCwKICAgICJub21lRG9lbnRlIiA6IG51bGwKICB9LAogICJyZXF1aXNpY2FvIjogewogICAgICAiY3JpYXIiOiB0cnVlLAogICAgICAicmVxdWlzaWNhb0lkIjogbnVsbCwKICAgICAgInJlcXVpc2ljYW9SZWZFeHQiOiBudWxsLAogICAgICAiaWRlbnRpZmljYWRvclNlcXVlbmNpYWxVbmljbyI6IG51bGwsCiAgICAgICJlc3RhZG9SZWZFeHQiOiBudWxsLAogICAgICAiZGF0YUNyaWFjYW8iOiBudWxsLAogICAgICAiZGF0YVByZXRlbmRpZGEiOiBudWxsLAogICAgICAiYW51bGFkbyI6IGZhbHNlLAogICAgICAicHJpb3JpZGFkZVJlZkV4dCI6IG51bGwsCiAgICAgICJpbmZvQ2xpbmljYUdlcmFsIjogbnVsbCwKICAgICAgIm9ic1JlcSI6IG51bGwsCiAgICAgICJleGFtZXMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICAgImV4YW1lSWRlbnRpZmljYWRvcmVzIjogbnVsbCwKICAgICAgICAgICAgICAiaWRlbnRpZmljYWRvclNlcXVlbmNpYWxVbmljb0V4YW1lIiA6IG51bGwsCiAgICAgICAgICAgICAgImV4YW1lUmVmRXh0IjogbnVsbCwKICAgICAgICAgICAgICAiY2RFeGFtZVJlZkV4dCI6IG51bGwsCiAgICAgICAgICAgICAgImNkRXhhbWVEZXNjciI6IG51bGwsCiAgICAgICAgICAgICAgImNkU2Vydmljb0V4ZWN1dGFudGVJZCI6IG51bGwsCiAgICAgICAgICAgICAgImNkU2Vydmljb0V4ZWN1dGFudGVEZXNjciI6IG51bGwsCiAgICAgICAgICAgICAgImNkU2Vydmljb0V4ZWN1dGFudGVSZWZFeHQiOiBudWxsLAogICAgICAgICAgICAgICJjZEVzcGVjaWFsaWRhZGVSZWZFeHQiOiBudWxsLAogICAgICAgICAgICAgICJjZEVzcGVjaWFsaWRhZGVEZXNjciI6IG51bGwsCiAgICAgICAgICAgICAgImV4YW1lRXN0YWRvUmVmRXh0IjogbnVsbCwKICAgICAgICAgICAgICAiYW51bGFkbyI6IGZhbHNlLAogICAgICAgICAgICAgICJkYXRhQ3JpYWNhbyI6IG51bGwsCiAgICAgICAgICAgICAgInV0Q3JpYWNhb0lkIjogbnVsbCwKICAgICAgICAgICAgICAiZGF0YUFsdCI6IG51bGwsCiAgICAgICAgICAgICAgInV0QWx0SWQiOiBudWxsLAogICAgICAgICAgICAgICJkYXRhRXhhbWVFc3RhZG8iOiBudWxsLAogICAgICAgICAgICAgICJwcmlvcmlkYWRlUmVmRXh0IjogbnVsbCwKICAgICAgICAgICAgICAiZXhhbWVPYnMiOiBudWxsLAogICAgICAgICAgICAgICJhbmF0b21pYVBhdG9sb2dpY2EiOiBudWxsLAogICAgICAgICAgICAgICJhdXRvcHNpYSI6IG51bGwsCiAgICAgICAgICAgICAgImNpdG9sb2dpYUdpbmVjb2xvZ2ljYSI6IG51bGwsCiAgICAgICAgICAgICAgImNpdG9sb2dpYU5hb0dpbmVjb2xvZ2ljYSI6IG51bGwsCiAgICAgICAgICAgICAgImhpc3RvbG9naWEiOiBudWxsLAogICAgICAgICAgICAgICJtZnIiOiBudWxsLAogICAgICAgICAgICAgICJyZXZpc2FvRXhhbWUiIDogbnVsbAogICAgICAgICAgfQogICAgICBdCiAgfQp9</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>1</metaDataId>
          <name>Send to SEND_CHARGE_ITEM</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>true</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <script>theBundle = JSON.parse($(&apos;theBundle&apos;));

if (typeof (theBundle[&apos;entry&apos;][1] ) != &apos;undefined&apos;){
	for (var i = 0; i &lt; theBundle[&apos;entry&apos;][1][&apos;resource&apos;].length; i++ ){ // lista de ChargeItems criados (ou apenas uma lista com um CI)

		//var chargeItemList = [];
		if (theBundle[&apos;entry&apos;][1][&apos;resource&apos;][i][&apos;resourceType&apos;] == &apos;ChargeItem&apos;){
			var newBundle = JSON.parse(JSON.stringify(theBundle)); // deepcopy do theBundle
			newBundle.id = UUIDGenerator.getUUID();
			newBundle.entry = [];

			// MessageHeader
			var newMsgheader = JSON.parse(JSON.stringify(theBundle[&apos;entry&apos;][0])); // deepcopy do MessageHeader p/ corrigir MessageHeader.focus
			var focusList = [];
			var focusObj = {};
			focusObj.reference = &quot;ChargeItem/&quot; + theBundle[&apos;entry&apos;][1][&apos;resource&apos;][i][&apos;id&apos;];
			focusList.push(focusObj);
			newMsgheader.resource.focus = focusList;
			newBundle.entry.push(newMsgheader);

			// ChargeItem
			var node = {};
			node.resource = theBundle[&apos;entry&apos;][1][&apos;resource&apos;][i]; // ChargeItem atual em analise da lista
			newBundle.entry.push(node);

			//router.routeMessage(&apos;SEND_CHARGE_ITEM&apos;, new RawMessage(JSON.stringify(newBundle), null, {msgId: $(&apos;msgId&apos;)}) );
			var result = router.routeMessageByChannelId(&apos;98336369-69c8-4249-abb8-7479f97c4e58&apos;, JSON.stringify(newBundle));
			if (result.getStatus() == Status.valueOf(&quot;ERROR&quot;) ) { // ?? verificar se funciona!!
				var errorMsg = result.getError() != &quot;&quot; ? result.getError() : result.getMessage();
				response = Response(Status.ERROR, &quot;Erro = &quot; + errorMsg);
				return response;
			}
		}
	}	
}
response = Response(Status.SENT, $(&apos;theBundle&apos;));
return response;

</script>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>FHIR</inboundDataType>
            <outboundDataType>FHIR</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.12.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
                <fhirVersion>R4</fhirVersion>
              </serializationProperties>
              <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.12.0">
                <serializationType>JSON</serializationType>
              </deserializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.12.0">
          <metaDataId>2</metaDataId>
          <name>Send exameIdentificadores (App)</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>true</queueEnabled>
              <sendFirst>true</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>false</reattachAttachments>
            </destinationConnectorProperties>
            <script>var chargeItemResponseList = JSON.parse($(&apos;chargeItemResponseList&apos;));

for (var i=0; i &lt; chargeItemResponseList.length; i++) {

	var inExchangeName = $(&apos;RabbitmqExchange_ExamesIdentificadores&apos;);
	var inMessageType = $(&apos;MessageType_ExamesIdentificadores&apos;);
	
	var exameObj = new Object();
	var exameList = [];
	
	var exame = new Object();
	var exameIdentificadoresList = [];
	var exameIdentificadores = new Object();
	exameIdentificadores.sistemaCodificador = &quot;ChargeItem.id&quot;;
	exameIdentificadores.codigo = chargeItemResponseList[i].id;
	exameIdentificadoresList.push(exameIdentificadores);
	exame.exameIdentificadores = exameIdentificadoresList;
	exame.identificadorSequencialUnicoExame = chargeItemResponseList[i].identificadorSequencialUnicoExame;
	exameList.push(exame);
	exameObj.exames = exameList;
	
	var inMessagePayload = JSON.stringify(exameObj);
	result = writeQueueRMQ(inExchangeName, inMessageType, inMessagePayload);
	
	//channelMap.put(&apos;examesIdentificadores&apos;, inMessagePayload);
	//channelMap.put(&apos;examesIdentificadoresCommunication&apos;, JSON.stringify(result));
	
	if (result.statusCode == &quot;200&quot;) {
		response = Response(Status.SENT,  result.statusText);	
	} else if (result.statusCode == &quot;400&quot;) {
		response = Response(Status.QUEUED,  result.statusText);
	} else {
		response = Response(Status.ERROR,  result.statusText);
	}
}
return response;

</script>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="3.12.0">
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>//filtrado na Source, quando não se trata de uma criação de ChargeItem de Deliveries
// step 13 &quot;ChargeItemDeliveries&quot;
return true;</script>
              </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
            </elements>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

logger.info(generateLogMsg(&quot;create-chargeitem&quot;, message, null, null, null, null, null));
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>false</clearGlobalChannelMap>
        <messageStorageMode>PRODUCTION</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>false</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>CANALORIGEM</name>
            <type>STRING</type>
            <mappingName>canalOrigem</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>IDMSG_CANALANTERIOR</name>
            <type>STRING</type>
            <mappingName>idMsg_canalAnterior</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VISITAINTREFEXT</name>
            <type>STRING</type>
            <mappingName>visitaIntRefExt</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NUMSEQUENCIAL</name>
            <type>STRING</type>
            <mappingName>numSequencial</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>NUMMECANOGRAFICO</name>
            <type>STRING</type>
            <mappingName>numMecanografico</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>SUBMISSAOSISTEXTERNO</name>
            <type>STRING</type>
            <mappingName>submissaoSistExterno</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1730903368327</time>
            <timezone>Europe/London</timezone>
          </lastModified>
          <pruningSettings>
            <pruneMetaDataDays>60</pruneMetaDataDays>
            <pruneContentDays>60</pruneContentDays>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>f15f2324-5af5-4bb8-ad87-5c528494dfb6</id>
            <name>DateUtils</name>
            <revision>9</revision>
            <lastModified>
              <time>1730914089537</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Date Utilities for formating Dates and convert formats, Date Processing</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>3d1c4a14-5d9d-40ee-8c72-931459c94b75</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>4de0b993-bf9e-49e0-b224-3eef7e76e2b3</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>c6cdb85d-527a-45c4-bca5-1e110167cc50</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788437</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0ff87898-9f14-46b4-bc5d-f4091165b164</id>
                <name>getCurrentDateUTC</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788191</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is to get current system date in UTC+0 format - &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSS&apos;Z&apos;&quot;
	
	@return {String} return formmatted system date in UTC format
*/
function getCurrentDateUTC() {
	// Import Java classes
	var SimpleDateFormat = java.text.SimpleDateFormat;
	var Date = java.util.Date;
	var TimeZone = java.util.TimeZone;
	
	var dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSSSS&apos;Z&apos;&quot;);
	// Set the timezone to UTC
	dateFormat.setTimeZone(TimeZone.getTimeZone(&quot;UTC&quot;));
	// Get the current date
	var currentDate = new Date();
	// Format the date in UTC
	var formattedDate = dateFormat.format(currentDate);

	return formattedDate;
}

globalMap.put(&quot;getCurrentDateUTC&quot;, getCurrentDateUTC);</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>3bb1d234-3e4f-4832-8a59-01e5388865fb</id>
                <name>LocalTimeToUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788319</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function LocalDateTimeToUtc(localDateTime, timezone) {

	var DateTimeFormatter = Packages.java.time.format.DateTimeFormatter;
	var LocalDateTime = Packages.java.time.LocalDateTime;
	var ZoneOffset = Packages.java.time.ZoneOffset;

	var cleanDateTime = localDateTime.replace(/[^\d]/g, &apos;&apos;).padEnd(14, &apos;0&apos;);

	var zone;
	if(timezone == undefined){
		zone = java.time.ZoneId.systemDefault();
	}else{
		zone = java.time.ZoneId.of(timezone);
	}
	
	var pattern = &quot;yyyyMMddHHmmss&quot;;
	
	var formatter = DateTimeFormatter.ofPattern(pattern);
	var localDateTime = LocalDateTime.parse(cleanDateTime, formatter);
	

	return localDateTime.atZone(zone).toOffsetDateTime().toInstant().toString();

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c64a2526-183c-4378-b708-c0c880f8e987</id>
                <name>OffsetDateTimeToUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790057</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function OffsetTimeToUtc(offsetDateTimeStr) {
	
	var offsetDateTime = java.time.OffsetDateTime.parse(offsetDateTimeStr);

     return offsetDateTime.toInstant().toString();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bdf25c4-c7a4-4248-bc1e-7148ebccc58b</id>
                <name>subtractDatesUTC</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790375</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to perceive the number of miliseconds/seconds/minutes/hours/days between two given (string) dates in UTC format.

	@param {String} startStr - start date in UTC format
	@param {String} endStr - end date in UTC format
	@param {String} unit - time unit used. Options: milliseconds&apos;, &apos;seconds&apos;, &apos;minutes&apos;, &apos;hours&apos;, &apos;days&apos;
	@return {String} return description
*/
function subtractDatesUTC(startStr, endStr, unit) {
    // Parse the input dates as Date objects
    const start = new Date(startStr);
    const end = new Date(endStr);

    // Get the difference in milliseconds
    const diffMilliseconds = end.getTime() - start.getTime();

    // Convert the difference to the requested unit
    var diff = null;
    switch(unit) {
        case &apos;milliseconds&apos;:
            diff = diffMilliseconds;
            break;
        case &apos;seconds&apos;:
            diff = diffMilliseconds / 1000;
            break;
        case &apos;minutes&apos;:
            diff = diffMilliseconds / (1000 * 60);
            break;
        case &apos;hours&apos;:
            diff = diffMilliseconds / (1000 * 60 * 60);
            break;
        case &apos;days&apos;:
            diff = diffMilliseconds / (1000 * 60 * 60 * 24);
            break;
        default:
            throw new Error(&apos;Invalid unit. Please use &quot;milliseconds&quot;, &quot;seconds&quot;, &quot;minutes&quot;, &quot;hours&quot;, or &quot;days&quot;.&apos;);
    }

    return diff;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2f1419d7-0352-47e8-af40-159b623aa777</id>
                <name>UtcDateTimeAdd</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788151</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to add/subtract set intervals. This is not meant to change local times between timezones!

	@param {String} UtcDateTime - UtcDateString in ISO Format &apos;YYYY-MM-DDThh:mm:ssZ&apos; (millis optional)
	@param {String} interval - interval to add (ss - seconds, mm - minutes, hh - hours, DD - days, MM - months, YY - years )
	@param {int} value - value to add (negative values will subtract from date)
	@return {String} newUTCDate
*/
function UtcDateTimeAdd(utcDateTime, interval, value) {

	var ChronoUnit = Packages.java.time.temporal.ChronoUnit;

	var inst = java.time.Instant.parse(utcDateTime);
	
	switch(interval){
		case &apos;ss&apos;:
			return inst.plusSeconds(value).toString();
			break;
		case &apos;mm&apos;:
			return inst.plus(value, ChronoUnit.MINUTES).toString();
			break;
		case &apos;hh&apos;:
			return inst.plus(value, ChronoUnit.HOURS).toString();
			break;
		case &apos;DD&apos;:
			return inst.plus(value, ChronoUnit.DAYS).toString();
			break;
		case &apos;MM&apos;:
			return inst.plus(value, ChronoUnit.MONTHS).toString();
			break;
		case &apos;YY&apos;:
			return inst.plus(value, ChronoUnit.YEARS).toString();
			break;
		default:
			return &apos;&apos; 
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>bd844bee-5372-484b-a9f4-fe2f98b6bd3a</id>
                <name>utcToLocalDateCdaString</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793366</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function utcToLocalDateCdaString(date) {
	
	var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
	formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	var formatter_final = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
	formatter_final.setTimeZone(java.util.TimeZone.getTimeZone(&quot;Europe/Lisbon&quot;));

	var dataFormat = date.replace(/\.\d+/, &apos;&apos;);
	var dataUTC = formatter_utc.parse(dataFormat);
	var dataLocal = formatter_final.format(dataUTC);
	
    	return dataLocal;
    
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5617deeb-09e0-4d29-a1cc-e63ac6fafb0b</id>
                <name>UtcToLocalDateTime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790566</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function UtcToLocalDateTime(utcDate, withOffset, targetTimezone) {

	var DateTimeFormatter = Packages.java.time.format.DateTimeFormatter;
    	
    	var inst = java.time.Instant.parse(utcDate);
    	var zone;
	
	if(withOffset == undefined){
		withOffset = false;	
	}

	if(targetTimezone == undefined){

		zone = java.time.ZoneId.systemDefault();	
	}else{
		zone = java.time.ZoneId.of(targetTimezone);
	}

	var offsetDateTime = inst.atZone(zone).toOffsetDateTime();
   
    	if (withOffset) {

		return offsetDateTime.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);    		
    	}else{

    		return offsetDateTime.toLocalDateTime().toString();
    	}
    	
}
</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>9025896a-65d0-458c-92ac-335fe985a232</id>
            <name>FHIR Helper Functions</name>
            <revision>8</revision>
            <lastModified>
              <time>1730893909853</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>General functions to help convert HL7 v2.x to FHIR resources.

These are used by the example HL7 to FHIR transformer, as well as
the &quot;HL7 v2.x to FHIR Creation Functions&quot; code template library.</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>936a0f91-1bad-49d1-852a-a895c15146ae</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>dc492b90-a61b-480b-90e1-7ba5aa490e8f</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>c3f12023-bc9f-4a80-a20a-91fddab47eda</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>c2052272-225a-43dc-bfa3-ffb8a9cdcb3d</string>
              <string>3fe6d772-4b87-435b-ab48-1a3cd74b6a18</string>
              <string>5a151c27-fc2a-4eea-ad38-68a34b8d491f</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>eabe6ed9-1f63-44c1-bd79-c22f3c8be0c4</string>
              <string>420051ed-ab84-4669-b6a6-245a7a67ce6e</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>6874134c-7e5f-496b-b8bf-f40689f2953f</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>897cc395-62c1-4ca0-be39-dc6b306e2e2f</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>40ceac90-6c0f-4841-bffc-c0ba0613985f</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>b311cb70-5b89-42e7-b3dc-479aaaeeebc9</string>
              <string>d1569963-df1f-4c3e-9c40-84bfb7ce3a8f</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>f08e1002-8784-4af2-9ac1-0f29fa50af6d</string>
              <string>a66e2585-1a81-435d-a745-d2882741026a</string>
              <string>7a38ba2c-d218-4b86-aa64-4d95b6a04516</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>3c7ae171-31fd-4162-955b-9540a5550348</string>
              <string>6f10cd1f-3faa-45e7-9d7a-afd8def03312</string>
              <string>dba002da-8747-4d96-a007-4626c848e439</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>6dd7219d-ef93-4391-a2bf-9b2dc2618c8b</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>79796989-bae1-4def-8f83-1fa2e90c266f</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>edf81a0b-0a37-4785-abd2-12cf972fab9d</string>
              <string>4206762e-7f8b-406b-b93f-0aa22164599c</string>
              <string>be018579-43e0-4056-a998-56ebcb4e09c6</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>b8a8e6ef-5fd2-42f9-af8e-29634cdfcdeb</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>3d1c4a14-5d9d-40ee-8c72-931459c94b75</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>9ab99f86-c58f-4c4a-b7ee-c8ed222a738c</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>f12fe723-2d00-4436-9e18-176f610b806e</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>befe8338-2d19-4a93-8fe3-716cdfd6b129</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>5f44062e-05f9-41db-9495-f75947e99502</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>74bd0262-9559-44ea-8a3f-356ae2f02717</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>ae7cd886-fda0-4d22-90a1-c29903e6e434</string>
              <string>4de0b993-bf9e-49e0-b224-3eef7e76e2b3</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>efd3e811-ca0d-451d-b637-a34e2b774450</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>3f4f15ad-56de-4755-aede-64962cf04c67</id>
                <name>checkEncounterPriority</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792938</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to validate if the encounter priority string is according to standard value set

	@param {String} status - encounter priority
	@return {boolean} return boolean true if valid status
*/
function checkEncounterPriority(priority) {
	var arrPriority = [&apos;A&apos;, &apos;CR&apos;, &apos;CS&apos;, &apos;CSP&apos;, &apos;CSR&apos;, &apos;EL&apos;, &apos;EM&apos;, &apos;P&apos;, &apos;PRN&apos;, &apos;R&apos;, &apos;RR&apos;, &apos;S&apos;, &apos;T&apos;, &apos;UD&apos;, &apos;UR&apos;];
	return arrPriority.includes(priority.toUpperCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ed003eb4-3c4d-4336-a2ea-16efe0ce0c39</id>
                <name>checkEncounterRegime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789719</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to validate if the encounter Regime string is according to standard value set

	@param {String} status - encounter regime
	@return {boolean} return boolean true if valid regime
*/
function checkEncounterRegime(regime) {
	var arrRegime = [&apos;AMB&apos;, &apos;EMER&apos;, &apos;FLD&apos;, &apos;HH&apos;, &apos;IMP&apos;, &apos;ACUTE&apos;, &apos;NONAC&apos;, &apos;OBSENC&apos;, &apos;PRENC&apos;, &apos;SS&apos;, &apos;VR&apos;];
	return arrRegime.includes(regime.toUpperCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>891a7cdf-98d5-4575-a8d1-e519aecd3e11</id>
                <name>checkEncounterStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789175</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function to validate if the encounter status string is according to standard value set


	@param {String} status - encounter status
	@return {boolean} return boolean true if valid status
*/
function checkEncounterStatus(status) {
	var arrStatus = [&apos;on-call&apos;, &apos;planned&apos;, &apos;arrived&apos;, &apos;triaged&apos;, &apos;in-progress&apos;, &apos;onleave&apos;, &apos;finished&apos;, &apos;cancelled&apos;, &apos;entered-in-error&apos;, &apos;unknown&apos;];
	return arrStatus.includes(status.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2cc062f8-aac9-48e1-947e-0567d4497e07</id>
                <name>Cleanup FHIR Patient</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791102</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Removes name / telecom / address entries with no actual value.

	@param {Object} patient - The JavaScript Object representing the FHIR Patient.
	@return {Object} The same Object passed in, cleaned up.
*/
function cleanupFhirPatient(patient) {
	// Remove names with no value
	cleanupFhirNames(patient, &apos;name&apos;);
	
	// Remove telecom entries with no value
	cleanupFhirTelecoms(patient, &apos;telecom&apos;);

	// Remove address entries with no value
	cleanupFhirAddresses(patient, &apos;address&apos;);

	if (patient.contact) {
		for each (contact in patient.contact) {
			if (!isFhirNameValid(contact.name)) {
				delete contact.name;
			}
			
			cleanupFhirTelecoms(contact, &apos;telecom&apos;);

			if (!isFhirAddressValid(contact.address)) {
				delete contact.address;
			}
		}
	}

	return patient;
}

function cleanupFhirNames(parent, property) {
	cleanupArray(parent, property, isFhirNameValid);
}

function isFhirNameValid(name) {
	return name &amp;&amp; (!isValueEmpty(name.text) || !isValueEmpty(name.family) || !isValueEmpty(name.given) || !isValueEmpty(name.prefix) || !isValueEmpty(name.suffix));
}

function cleanupFhirTelecoms(parent, property) {
	cleanupArray(parent, property, function(telecom) {
		return !isValueEmpty(telecom.value);
	});
}

function cleanupFhirAddresses(parent, property) {
	cleanupArray(parent, property, isFhirAddressValid);
}

function isFhirAddressValid(address) {
	return address &amp;&amp; (!isValueEmpty(address.text) || !isValueEmpty(address.line) || !isValueEmpty(address.city) || !isValueEmpty(address.state) || !isValueEmpty(address.postalCode) || !isValueEmpty(address.country));
}

function cleanupArray(parent, property, handleFunction) {
	var arr = parent[property];

	if (arr) {
		var length = arr.length;
		for (var i = length - 1; i &gt;= 0; i--) {
			if (!handleFunction(arr[i])) {
				delete arr[i];
				length--;
			}
		}
		arr.length = length;

		// Handle Java arrays
		if (arr.length != length) {
			parent[property] = org.apache.commons.lang3.ArrayUtils.subarray(arr, 0, length);
		}
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>2e62489a-423d-4471-a919-ed3f71827199</id>
                <name>Combine Arrays</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789406</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Combines two arrays into one. Works with both Java and JavaScript arrays.

	@param {Array} array1 - The first array.
	@param {Array} array2 - The second array.
	@return {Array} The combined array.
*/
function combineArrays(array1, array2) {
	var isJavaArray1 = Object.prototype.toString.call(array1) == &apos;[object JavaArray]&apos;;
	var isJavaArray2 = Object.prototype.toString.call(array2) == &apos;[object JavaArray]&apos;;

	if (isJavaArray1 &amp;&amp; isJavaArray2) {
		return org.apache.commons.lang3.ArrayUtils.addAll(array1, array2);
	} else if (isJavaArray1) {
		for (var i = array1.length - 1; i &gt;= 0; i--) {
			array2.unshift(array1[i]);
		}
		return array2;
	} else {
		for each (value in array2) {
			array1.push(value);
		}
		return array1;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6faf1e4b-d159-4d34-a07a-2fe0a3bde4cf</id>
                <name>Consolidate Empty Properties</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793027</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Removes empty strings, objects and arrays from a JavaScript object.

	@param {Object/Array} obj - The object or array to consolidate.
	@return {Object/Array} The consolidates object or array.
*/
function consolidate(obj) {
	if (typeof obj != &apos;undefined&apos; &amp;&amp; obj != null) {
		var protoToString = Object.prototype.toString.call(obj);
		
		if (obj instanceof Array || protoToString == &apos;[object Array]&apos; || protoToString == &apos;[object JavaArray]&apos;) {
			var length = obj.length;
			
			for (var i = obj.length - 1; i &gt;= 0; i--) {
				if (!doConsolidate(obj, i)) {
					length--;
				}
			}
			obj.length = length;

			// Handle Java Arrays
			if (length != obj.length) {
				obj = org.apache.commons.lang3.ArrayUtils.subarray(obj, 0, length);
			}
		} else if (protoToString == &apos;[object Object]&apos;) {
			for (var property in obj) {
				doConsolidate(obj, property);
			}
		}
	}
	return obj;
}

function doConsolidate(obj, property) {
	var value = obj[property] = consolidate(obj[property]);
	var empty = isValueEmpty(value);
	if (empty) {
		delete obj[property];
	}
	return !empty;
}

function isValueEmpty(value) {
	var protoToString = Object.prototype.toString.call(value);

	if (typeof value == &apos;undefined&apos; || value == null) {
		return true;
	} else if (value instanceof Array || protoToString == &apos;[object Array]&apos; || protoToString == &apos;[object JavaArray]&apos;) {
		if (value.length &gt; 0) {
			for each (element in value) {
				if (!isValueEmpty(element)) {
					return false;
				}
			}
		}
		return true;
	} else if (typeof value == &apos;string&apos; || protoToString == &apos;[object String]&apos;) {
		return value.length == 0;
	} else if (value instanceof java.lang.String) {
		return org.apache.commons.lang3.StringUtils.isEmpty(value);
	} else if (protoToString == &apos;[object Object]&apos;) {
		for (var property in value) {
			if (!isValueEmpty(value[property])) {
				return false;
			}
		}
		return true;
	}

	return false;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b7bffbe4-9da5-40a8-8a35-7e3ad5a9bebf</id>
                <name>Convert Address Use</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789310</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x address type code to the corresponding FHIR address use.

	@param {String} code - The HL7 address type (Table 0190)
	@return {String} The FHIR address use code
*/
function convertAddressUse(code) {
	var fhirCode;
	
	switch ((code + &apos;&apos;).toUpperCase()) {
		case &apos;H&apos;:
		case &apos;L&apos;:
		case &apos;M&apos;:
		case &apos;P&apos;:
		case &apos;SH&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.HOME;
			break;
		case &apos;B&apos;:
		case &apos;O&apos;:
		case &apos;BI&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.WORK;
			break;
		case &apos;C&apos;:
		case &apos;V&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.TEMP;
			break;
		default:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AddressUse.OLD;
	}

	return fhirCode.toCode();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>687a3eef-3155-47c8-bb12-de158d0055ac</id>
                <name>Convert Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790836</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x formatted date into the correct format for FHIR date.
	
	HL7 format expected: yyyyMMdd
	FHIR format: yyyy-MM-dd

	@param {String} date - The HL7 v2.x date string
	@return {String} The converted FHIR date string
*/
function convertToFhirDate(date) {
	return convertToFhirTimestamp(date, &quot;yyyy-MM-dd&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f338c38c-477a-4dca-8714-2e96c382716e</id>
                <name>Convert Gender</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789961</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x gender code to the corresponding FHIR code.

	@param {String} code - The HL7 gender code (Table 0001)
	@return {String} The FHIR administrative gender code
*/
function convertToFhirGender(code) {
	var fhirCode;
	
	switch ((code + &apos;&apos;).toUpperCase()) {
		case &apos;F&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.FEMALE;
			break;
		case &apos;M&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.MALE;
			break;
		case &apos;O&apos;:
		case &apos;A&apos;:
		case &apos;N&apos;:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.OTHER;
			break;
		case &apos;U&apos;:
		default:
			fhirCode = org.hl7.fhir.r4.model.codesystems.AdministrativeGender.UNKNOWN;
	}

	return fhirCode.toCode();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0061fef8-39be-48c1-b81e-60719c97c149</id>
                <name>Convert Timestamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792059</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x formatted timestamp into the correct format for FHIR dateTime.
	
	HL7 format expected: yyyyMMddHHmmssZZ
	FHIR format: yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ

	@param {String} date - The HL7 v2.x timestamp string
	@return {String} The converted FHIR timestamp string
*/
function convertToFhirTimestamp(date) {
	if (!date) {
		return &apos;&apos;;
	}

	var patterns = [
		&quot;yyyyMMddHHmmss.SSSZZ&quot;,
		&quot;yyyyMMddHHmmss.SSSZ&quot;,
		&quot;yyyyMMddHHmmss.SSS&quot;,
		&quot;yyyyMMddHHmmssZZ&quot;,
		&quot;yyyyMMddHHmmssZ&quot;,
		&quot;yyyyMMddHHmmss&quot;,
		&quot;yyyyMMddHHmm&quot;,
		&quot;yyyyMMddHH&quot;,
		&quot;yyyyMMdd&quot;
	];

	var instant;
	for each (pattern in patterns) {
		try {
			instant = org.joda.time.format.DateTimeFormat.forPattern(pattern).parseMillis(new String(date));
			break;
		} catch(e) {}
	}

	if (instant) {
		var outpattern = arguments.length &gt;= 2 ? arguments[1] : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ&quot;;
		try {
			return org.joda.time.format.DateTimeFormat.forPattern(outpattern).print(instant);
		} catch (e) {}
	}
	
	return date;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>760658e4-f24f-4a57-bbb9-9ae847f6daf8</id>
                <name>Convert Yes/No Indicator</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787847</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converts an HL7 v2.x yes/no indicator code to a boolean value. If the code is null or an empty string,
	false will be returned.

	@param {String} code - The HL7 yes/no indicator (Table 0136)
	@return {Boolean} True/false
*/
function convertYesNoIndicator(code) {
	return code == &apos;Y&apos;;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>96c9798e-4e23-4374-a7ad-aafd88b8d17e</id>
                <name>convertToFhirCodeSystem</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789218</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert PatientCare code system for FHIR format system URL, ie: ICD10 to http://hl7.org/fhir/sid/icd-10

	@param {String} patientCareCodeSystem 
	@return {String} return fhir url
*/
function convertToFhirCodeSystem(patientCareCodeSystem) {

	var fhirCodeSystem = null;
	switch (patientCareCodeSystem) {
	  case &apos;ICD9&apos;:
	    fhirCodeSystem = &quot;http://hl7.org/fhir/sid/icd-9-cm&quot;
	    break;
	  case &apos;ICD10&apos;:
	    fhirCodeSystem = &quot;http://hl7.org/fhir/sid/icd-10&quot;
	    break;
	  case &apos;SNOMED&apos;:	   
	    fhirCodeSystem = &quot;http://snomed.info/sct&quot;
	    break;
	  case &apos;LOINC&apos;:	   
	    fhirCodeSystem = &quot;http://loinc.org&quot;
	    break;
	  case &apos;ACSS&apos;:
	  	fhirCodeSystem = &quot;https://www.acss.min-saude.pt&quot;
	  	break;
	  case &apos;ADSE&apos;:
	  	fhirCodeSystem = &quot;https://www.adse.pt&quot;
	  	break;  
	case &apos;TOM&apos;:
	  	fhirCodeSystem = &quot;https://cuf.pt/fhir/CodeSystem/Service&quot;
	  	break;
	case &apos;CUF&apos;:
	  	fhirCodeSystem = &quot;https://cuf.pt/fhir/CodeSystem/Service&quot;
	  	break;
	case &apos;patientcare.id&apos;:
	  	fhirCodeSystem = configurationMap.get((&apos;FhirServer_PatientCare_Namespace&apos;)) + &quot;/fhir/CodeSystem/&quot; + patientCareCodeSystem
	  	break;
	  default:
	    fhirCodeSystem = null;
	}

	return fhirCodeSystem;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ca4aadf2-7203-414a-92b5-3257db7a363a</id>
                <name>createChargeItemRequisicaoMCDT</name>
                <revision>3</revision>
                <lastModified>
                  <time>1730888277851</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função auxiliar na criação de ChargeItems. Esta função trata de construir a base de um ChargeItem referente à REQUISIÇÃO DE MCDTS (!!).

	@param {Object} infosExame - informações gerais relativas ao exame:
          {
              &quot;exameIdentificadores&quot;: null,
              &quot;identificadorSequencialUnicoExame&quot; : null,
              &quot;exameRefExt&quot;: null,
              &quot;cdExameRefExt&quot;: null,
              &quot;cdExameDescr&quot;: null,
              &quot;cdServicoExecutanteId&quot;: null,
              &quot;cdServicoExecutanteDescr&quot;: null,
              &quot;cdServicoExecutanteRefExt&quot;: null,
              &quot;cdEspecialidadeRefExt&quot;: null,
              &quot;cdEspecialidadeDescr&quot;: null,
              &quot;exameEstadoRefExt&quot;: null,
              &quot;anulado&quot;: false,
              &quot;dataCriacao&quot;: null,
              &quot;utCriacaoId&quot;: null,
              &quot;dataAlt&quot;: null,
              &quot;utAltId&quot;: null,
              &quot;dataExameEstado&quot;: null,
              &quot;prioridadeRefExt&quot;: null,
              &quot;exameObs&quot;: null,
              &quot;anatomiaPatologica&quot;: null,
              &quot;autopsia&quot;: null,
              &quot;citologiaGinecologica&quot;: null,
              &quot;citologiaNaoGinecologica&quot;: null,
              &quot;histologia&quot;: null,
              &quot;mfr&quot;: null,
              &quot;revisaoExame&quot; : null
          }

	@param {Object} utilizadores - informação dos utilizadores:
		[{
		      &quot;nome&quot; : null,
		      &quot;numMecanografico&quot; : null,
		      &quot;perfil&quot; : null
		 }]

	@param {Object} infosRequisicao - informações gerais relativas à requisição:
		{
		      &quot;criar&quot;: true,
		      &quot;requisicaoId&quot;: null,
		      &quot;requisicaoRefExt&quot;: null,
		      &quot;identificadorSequencialUnico&quot;: null,
		      &quot;estadoRefExt&quot;: null,
		      &quot;dataCriacao&quot;: null,
		      &quot;dataPretendida&quot;: null,
		      &quot;anulado&quot;: false,
		      &quot;prioridadeRefExt&quot;: null,
		      &quot;infoClinicaGeral&quot;: null,
		      &quot;obsReq&quot;: null
		}

	@param {Object} doente - informações do doente:
		{
		    &quot;numProcesso&quot; : null,
		    &quot;numSequencial&quot; : null,
		    &quot;nomeDoente&quot; : null
		}
		
	@param {String} visitaRefExt - identificador externo do episódio /Encounter 
	@param {String} theCode - código a ser colocado em ChargeItem.code 
	@return {Object} return ChargeItem
*/
function createChargeItemRequisicaoMCDT(infosExame, utilizadores, infosRequisicao, doente, visitaRefExt, theCode) {

	// Add Performers
	var Performer = [];
	var occurenceDateTime = infosRequisicao[&apos;dataCriacao&apos;]; //default
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(infosExame[&apos;accoes&apos;]); j++ ){
	
		if (infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;] == &quot;1&quot; /* Relato */){
			dataRelato = infosExame[&apos;accoes&apos;][j][&apos;data&apos;];
		} else if (infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;] == &quot;2&quot; /* Validacao */){
			dataValidacao = infosExame[&apos;accoes&apos;][j][&apos;data&apos;];
		} /*else {
			occurenceDateTime = infosRequisicao[&apos;dataCriacao&apos;];
		}*/

		Performer.push({
			function: {
				coding: [{
					system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
					code: newStringOrUndefined( infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;] == &quot;3&quot; /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadores, infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;])) : mapFuncao(infosExame[&apos;accoes&apos;][j][&apos;funcao&apos;]) )
				}]
			},
			actor: {
				reference: newStringOrUndefined(infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadores, infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;]) ) : null),
				identifier: {
					use: newStringOrUndefined(&apos;official&apos;),
					type: {
						coding: [{
							system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
							code: newStringOrUndefined(&apos;4&apos;)
						}],
						text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
					},
					value: newStringOrUndefined(infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadores, infosExame[&apos;accoes&apos;][j][&apos;utilizadorId&apos;]) : null)
				}
			}
		});
	}

	chargeItemId = UUIDGenerator.getUUID();
	var ChargeItem = {
		resourceType: newStringOrUndefined(&apos;ChargeItem&apos;),
		id: newStringOrUndefined(chargeItemId),
		extension: [{
				url: newStringOrUndefined(infosRequisicao[&apos;infoClinicaGeral&apos;] != null ? $(&apos;localAddress&apos;) + &quot;/fhir/StructureDefinition/CarePlan.ClinicalInformation&quot; : null),
				valueString: newStringOrUndefined(infosRequisicao[&apos;infoClinicaGeral&apos;] != null ? infosRequisicao[&apos;infoClinicaGeral&apos;] : null)
			},
			{
				url: newStringOrUndefined(infosExame[&apos;identificadorSequencialUnicoExame&apos;] != null ? $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ServiceRequest.ExternalId&quot; : null),
				valueString: newStringOrUndefined(infosExame[&apos;identificadorSequencialUnicoExame&apos;] != null ? infosExame[&apos;identificadorSequencialUnicoExame&apos;] : null)
			
			},
			{
				extension: [{
					url: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? &apos;code&apos; : null),
					valueCoding: {
						system: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? $(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/RootFunctionalHealthUnit&quot; : null),
						code: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? infosExame[&apos;cdEspecialidadeRefExt&apos;] : null),
						display: newStringOrUndefined(infosExame[&apos;cdEspecialidadeDescr&apos;] != null ? infosExame[&apos;cdEspecialidadeDescr&apos;] : null)
					}
				}],	
				url: newStringOrUndefined(infosExame[&apos;cdEspecialidadeRefExt&apos;] != null ? $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/StructureDefinition/ChargeItem.ExecutingFunctionalHealthUnit.WithCode&quot; : null)
			}
		],
		status: newStringOrUndefined(&apos;billable&apos;),
		identifier: [{
			use: newStringOrUndefined(&apos;official&apos;),
			type: {
				coding: [{
					system: newStringOrUndefined(&apos;http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203&apos;),
					code: newStringOrUndefined(&apos;PLAC&apos;)
				}],
				text: newStringOrUndefined(&apos;Placer Identifier&apos;)
			},
			value: newStringOrUndefined(infosExame[&apos;identificadorSequencialUnicoExame&apos;] + &apos;-&apos; + chargeItemId)
		}],
		code: {
			coding: [{
				system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/Service&quot;),
				code: newStringOrUndefined(typeof theCode != &apos;undefined&apos; ? theCode : null)
			}]
		},
		subject: {
		   	reference: newStringOrUndefined(&quot;Patient/&quot; + msg[&apos;doente&apos;][&apos;numSequencial&apos;]),
		   	identifier: {
		       	use: newStringOrUndefined(&apos;official&apos;),
		       	type: {
		           	coding: [{
		               	system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PatientCode&quot;),
		               	code: newStringOrUndefined(&apos;JMS&apos;)
		           	}],
		           	text: newStringOrUndefined(&apos;JMS Identifier&apos;)
		       	},
		       	value: newStringOrUndefined(msg[&apos;doente&apos;][&apos;numSequencial&apos;])
		   	},
		   	display: newStringOrUndefined( msg[&apos;doente&apos;][&apos;nomeDoente&apos;] != &apos;undefined&apos; ? msg[&apos;doente&apos;][&apos;nomeDoente&apos;] : null )
		},
		context: {
			reference: newStringOrUndefined( visitaRefExt != null ? &quot;Encounter/&quot; + visitaRefExt : null)
		},										
		occurrenceDateTime: newStringOrUndefined(dataRelato != null ? dataRelato : (dataValidacao!= null ? dataValidacao : occurenceDateTime)),
		performer: Performer.length != 0 ? Performer : null,
		quantity: {
			value: newNumberOrUndefined(1)
		},
		note: [{
			text: newStringOrUndefined(infosExame[&apos;exameObs&apos;] != null ? infosExame[&apos;exameObs&apos;] : null)
		}]
	}

	return ChargeItem;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>69abe225-7dba-4362-a5df-e12fe5391e07</id>
                <name>createOperationOutcome</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788391</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Creates a FHIR OperationOutcome resource and adds it to the response map with the key &quot;response&quot;.
	@param {String} severity - Indicates whether the issue indicates a variation from successful
		processing. Values: fatal | error | warning | information
	@param {String} code - Describes the type of the issue. The system that creates an
		OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may
		additional provide its own code for the error in the details element. Values: invalid | security |
		processing | transient | informational
	@param {String} details - Additional details about the error. This may be a text description of
		the error, or a system code that identifies the error.
	@param {String} fhirVersion - The FHIR version of the OperationOutcome resource. Values: DSTU2 | DSTU2_1 | 
		   DSTU_HL7ORG | STU3 | R4 | R5
	@param {int} httpStatusCode - The HTTP status code to send back with the response. Defaults to 400
		if not specified.
	@param {Error} e - If included, this will be used to build up the response status message and
		error.
	@param {Boolean} isFormatXML - If true, the resource will be formatted in XML. Otherwise, it will
		be formatted in JSON. If not specified, it will attempt to find the _format parameter in the source
		map, or return JSON.
	@return {Response} The created Response object.
*/
function createOperationOutcome(severity, code, details, fhirVersion, httpStatusCode, e, isFormatXML) {
	if (!httpStatusCode) {
		httpStatusCode = 400;
	}

	if (!isFormatXML &amp;&amp; $s(&apos;parameters&apos;) &amp;&amp; $s(&apos;parameters&apos;).contains(&apos;_format&apos;)) {
		isFormatXML = !FhirUtil.isJSON($s(&apos;parameters&apos;).getParameter(&apos;_format&apos;));
	}

	var outcome = FhirUtil.createOperationOutcome(severity, code, details, fhirVersion);
	var message = isFormatXML ? FhirUtil.toXML(outcome, fhirVersion) : FhirUtil.toJSON(outcome, fhirVersion);
	responseMap.put(&apos;response&apos;, FhirResponseFactory.getResponse(message, httpStatusCode, isFormatXML ? FhirUtil.getMIMETypeXML() : FhirUtil.getMIMETypeJSON()));
	var response = new Response(message);
	response.setStatusMessage(severity.toUpperCase() + &apos; OperationOutcome created with status &apos; + httpStatusCode + &apos;.&apos;);

	if (httpStatusCode &gt;= 400) {
		response.setStatus(Status.ERROR);

		if (e) {
			var customMessage = &apos;Channel &apos; + channelName + &apos;: &apos;;
			if (e.rhinoException) {
				customMessage += &apos;Error on line &apos; + e.rhinoException.lineNumber() + &apos;: &apos;;
			}
			customMessage += e.toString();
	
			var errorContent = com.mirth.connect.util.ErrorMessageBuilder.buildErrorMessage(&apos;FHIR Listener&apos;, customMessage, e.javaException || null);
			if (e.javaException) {
				logger.error(errorContent, e.javaException);	
			} else {
				logger.error(errorContent);
			}
			response.setError(errorContent);
		}
	}

	return response;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>244238ae-b07b-45d1-b796-4be032c44900</id>
                <name>getChargeItem</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Obtém o Id do chargeItem num bundle relacionado a um item code ou a um serviceRequest.Id

	@param {String} msg - Bundle message
	@param {String} arg1 - item code
	@param {String} arg2 - service Request Id
	@return {String} return ChargeItem.Id
*/

function getChargeItem(msg, itemCode, serviceRequestId){

	var chargeItemId = null;
	for (var i = 0; i &lt; msg[&apos;entry&apos;].length; i++){
		if (msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;resourceType&apos;] == &apos;ChargeItem&apos;){

			if (typeof(msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;contained&apos;]) != &apos;undefined&apos; ){
				msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;contained&apos;].find(function(contained){
					if (contained[&apos;resourceType&apos;].includes(&apos;Procedure&apos;) ) {
						contained[&apos;basedOn&apos;].find(function(basedOn){
							if (basedOn[&apos;reference&apos;].includes(serviceRequestId)){
								chargeItemId = msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;id&apos;];
								return chargeItemId;
							}
						})
					}
				})
			}else if (typeof(msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;code&apos;][&apos;coding&apos;]) != &apos;undefined&apos; ){
				msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;code&apos;][&apos;coding&apos;].find(function(coding){
					if ( coding[&apos;system&apos;].includes(&apos;cuf&apos;) &amp;&amp;  !coding[&apos;system&apos;].includes(&apos;thom&apos;) ) {
						if (coding[&apos;code&apos;] == itemCode){
							chargeItemId = msg[&apos;entry&apos;][i][&apos;resource&apos;][&apos;id&apos;];
							return chargeItemId;
						}						
					}
				});	
			}
		}
	}

	return chargeItemId;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c06d7e5c-c77d-409b-8ae2-ca835b843794</id>
                <name>getSystemBaseURL</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790966</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito é auxiliar a construção dos campos &quot;system&quot; associados a CodeSystems aquando da análise de uma lista de identificadores. A lista de identificadores, por normal, tem um &apos;sistemaCodificador&apos; e cada
	um destes &apos;sistemaCodificador&apos; deve originar uma base de URL diferente. Por exemplo,
		caso &apos;sistemaCodificador&apos; = &apos;patientcare.id&apos;, o system correspondente ao code a ser enviado terá um system do género &quot;https://bsimple-esb-fhir (...)&quot; ($(&apos;FhirServer_PatientCare_NameSpace&apos;))
		caso &apos;sistemaCodificador&apos; = &apos;glint&apos;, o system correspondente ao code a ser enviado terá um system do género &quot;https://glintt.pt&quot;
		nos restantes caso, o sistema  ser enviado deve ser CUF, pois tratam-se de catálogos CUF: &quot;https://cuf.pt&quot;

	@param {String} sistemaCodificador - sistema Codificador em causa
	@return {String} return http base URL relativo a esse sistema codificador
*/
function getSystemBaseURL(sistemaCodificador) {
	var baseURL = &quot;&quot;;
	if (typeof sistemaCodificador == &quot;string&quot; ) {
		if (sistemaCodificador.toLowerCase().includes(&quot;patientcare&quot;)) {
			var patientcareUrl = configurationMap.get((&apos;FhirServer_PatientCare_Namespace&apos;));
			baseURL = patientcareUrl != null ? patientcareUrl : &quot;&quot;;
			if (patientcareUrl == null) {
				logger.error(&quot;Configuration map variable &apos;FhirServer_PatientCare_Namespace&apos; not defined for use in Code Template getSystemBaseURL()&quot;);
			}
		}
		else if (sistemaCodificador.includes(&quot;glintt&quot;)) {
			baseURL = &quot;https://glintt.pt&quot;;
		} else { //é catálogo cuf
			baseURL = configurationMap.get(&apos;FhirServer_CUFBUS_Namespace&apos;);
		}
	}
	return baseURL;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>1d99918a-7c7c-4886-9e18-329b73f529bc</id>
                <name>mapingAppointmentStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788279</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function allows mapping the states of the Appointment resource to the states covered in PatientCare. 

	@param {String} status - Appointment Status
	@return {String} return status to application
*/
function mapingAppointmentStatus(status) {
	
	switch(status.toLowerCase()) {
		case &quot;booked&quot;: 
			break;
		case &quot;pending&quot;:
			break;
		case &quot;cancelled&quot;:
			break;
		case &quot;proposed&quot;:
			break;
		case &quot;arrived&quot;:
			status = &quot;booked&quot;;
			break;
		case &quot;fulfilled&quot;:
			status = &quot;booked&quot;;
			break;
		case &quot;noshow&quot;:
			status = &quot;cancelled&quot;;
			break;
		case &quot;entered-in-error&quot;:
			break;
		case &quot;checked-in&quot;:
			status = &quot;booked&quot;;
			break;
		case &quot;waitlist&quot;:
			break;
		default:
			break;		
	}

	return status;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fcfb26cf-995b-455c-955a-c9e5b7832529</id>
                <name>validateDate</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788118</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate Date formats: yyyy-MM-ddTHH:mm:ss and yyyy-MM-dd

	@param {String} dateString
	@return {String} return boolean true if date format is valid
*/
function validateTimestamp(dateString) {
	var ISOregex = /^(?:\d{4})-(?:\d{2})-(?:\d{2})T(?:\d{2}):(?:\d{2}):(?:\d{2}(?:\.\d*)?)(?:(?:-(?:\d{2}):(?:\d{2})|Z)?)$/;
	return ISOregex.test(dateString);
}


/**
	Validate Date format yyyy-MM-dd

	@param {String} dateString
	@return {String} return boolean true if date format is valid
*/
function validateDate(dateString) {
	var ISOregex = /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/;
	return ISOregex.test(dateString);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>eb373187-823e-4693-a2f9-b5031d95ea10</id>
                <name>validateFhirClinicalStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787978</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR clinical Status: active | recurrence | relapse | inactive | remission | resolved

	@param {String} clinical Status
	@return {String} return boolean true if FHIR clinical Status is valid
*/
function validateFhirClinicalStatus(clinicalStatus) {
	var arrClinicalStatus = [&apos;active&apos;, &apos;recurrence&apos;, &apos;relapse&apos;, &apos;inactive&apos;, &apos;remission&apos;, &apos;resolved&apos;];
	return arrClinicalStatus.includes(clinicalStatus.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>80630059-deea-4efb-92df-20ddd07a2411</id>
                <name>validateFhirDocumentStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790213</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR Document Reference Status:  current | superseded | entered-in-error

	@param {String} Document Reference Status
	@return {String} return boolean true if FHIR Document Reference Status is valid
*/
function validateFhirDocumentStatus(docStatus) {
	var arrDocStatus = [&apos;current&apos;, &apos;superseded&apos;, &apos;entered-in-error&apos;];
	return arrDocStatus.includes(docStatus.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee50fb32-fd62-485c-b9b5-03e865055502</id>
                <name>validateFhirEventStatus</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788051</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR clinical Status: preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown

	@param {String} clinical Status
	@return {String} return boolean true if FHIR clinical Status is valid
*/
function validateFhirEventStatus(eventStatus) {
	var arrEventStatus = [&apos;preparation&apos;, &apos;in-progress&apos;, &apos;not-done&apos;, &apos;on-hold&apos;, &apos;stopped&apos;, &apos;completed&apos;, &apos;entered-in-error&apos;, &apos;unknown&apos;];
	return arrEventStatus.includes(eventStatus.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>12fb2da1-439a-4149-ae2f-adfcd6651095</id>
                <name>validateFhirGender</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788633</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Validate FHIR gender: male | female | other

	@param {String} genderString
	@return {String} return boolean true if FHIR gender is valid
*/
function validateFhirGender(gender) {
	var arrGender = [&apos;male&apos;, &apos;female&apos;, &apos;other&apos;];
	return arrGender.includes(gender.toLowerCase());
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6cc8a9f9-7d96-4990-96a8-0ff41be6b101</id>
            <name>Logger Functions</name>
            <revision>5</revision>
            <lastModified>
              <time>1730914089520</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Funções auxiliares para o logging de mensagens dos canais</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>6c6fbaa8-b1c1-4653-9834-54ba66fdcce3</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>6e11a1dd-47ad-4dd9-b99b-1625287fd7c0</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>bc286d01-89d0-4a3f-916e-09a25a4e68c7</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>bfaf9a30-3242-45d9-a792-baa4bd281483</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>1d5cd1b4-033c-463a-bca6-86865478f610</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>e014f7b2-1a80-4be4-a275-2578ad24e6dd</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>68dfb5b9-bb8e-418d-8425-79fe31bd7538</id>
                <name>generateLogMsg</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792698</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to build and return a log msg, originating from any channel.
	Documentação função: https://b-simple.atlassian.net/wiki/x/AoACBg
	Documentação Entity e Tags: https://b-simple.atlassian.net/wiki/x/AgB_Bg

	@param theEntity {String} - string that denotes the group of messages the message belongs to, i.e appointment, document, cda, accident, etc.
	@param {Class} message - ImmutableConnectorMessage Class message containing information about all connectors that a
		message passed through
	@param tagsArr {Array} - array of user-defined and relevant tags that should be associated with the message
	@param sourceServer {String} - message&apos;s source app/entity (name of the app or entity responsible for sending the messge to the channel)
	@param destinationServerMap {Map} - Map&lt;int,string&gt; , where the key is the destination&apos;s metadataID and the value is the entity to which such destination&apos;s message was sent to
	@param {Array} sourceMetadataArr - source metadata: metadata associated with the source processing 
	@param {Array} destinationsMetadataArr - destinations metadata: metadata associated with the destinations processing
	@return {Object JSON} message log
*/
function generateLogMsg(theEntity, message, tagsArr, sourceServer, destinationServerMap, sourceMetadataArr, destinationsMetadataMap) {
	if (message == undefined || message == null) {
		logger.info(&quot;sendMsgInfoLogChannel:message --&gt; message argument is mandatory!&quot;);
	} else {
		try {
			var logMsg = new Object();
		
			// messageSummary
			var messageSummaryObj = new Object();
			//messageID
			messageSummaryObj.messageId = message.getConnectorMessages().get(0).getMessageId();
			//messageOriginalID - não funciona ...
			//messageSummaryObj.messageOriginalId = message.getOriginalId();
			//channelID
			messageSummaryObj.channelId = message.getConnectorMessages().get(0).getChannelId();
			//serverID
			messageSummaryObj.serverId = message.getConnectorMessages().get(0).getServerId();
			//channelName
			messageSummaryObj.channelName = message.getConnectorMessages().get(0).getChannelName();
			//lastDeployedDate
			try {
				var controller = com.mirth.connect.server.controllers.ControllerFactory.getFactory().createEngineController();
				var dashboardStatus = controller.getChannelStatus(message.getConnectorMessages().get(0).getChannelId());
				messageSummaryObj.lastDeployedDate = auxCalendarParse(dashboardStatus.getDeployedDate());
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:lastDeployedDate --&gt; &quot; + error.toString());
				messageSummaryObj.lastDeployedDate = null;
			}
			//entity
			messageSummaryObj.entity = theEntity == undefined ? null : theEntity;
			//tags
			messageSummaryObj.tags = (tagsArr == undefined || tagsArr == null) ? new Array() : tagsArr;
			//logDate
			var datestr = DateUtil.getCurrentDate(&apos;yyyyMMddHHmmss&apos;).toString();
			var dateUTC = DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
			messageSummaryObj.logDate = dateUTC;
			//status
			var statusObj = new Object();
			statusObj.error = false;
			statusObj.code = null;
			statusObj.message = null;
			try {
				message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName (inclui Source também)
					value = parseInt(value);
					if (value != 0) { // só as destinations é que têm Response relativamente a erros, logo não dá para ir buscar Response de erro na Source (Source =metadataId 0)
						//code - testar no que isto dá! ??
						if (message.getConnectorMessages().get(value).getStatus().toString() == &apos;ERROR&apos;) {
							statusObj.error = true;
							/*
							if (statusObj.code != null) {
								statusObj.code = statusObj.code + &quot;;&quot; + message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							} else {
								statusObj.code = message.getConnectorMessages().get(value).getResponseData().getStatusMessage();
							}
							*/
							if (statusObj.message != null) {
								statusObj.message = statusObj.message + &quot;;&quot; + auxGetStatusMessage(value);
							} else {
								statusObj.message = auxGetStatusMessage(value);
							}
						}
					}
				});
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel: messageSummary status --&gt; &quot; + error.toString());
			}
			messageSummaryObj.status = statusObj;
		
			//metaData
			//messageSummaryObj.metaData = (summMetadataArr == undefined || summMetadataArr == null) ? new Array() : summMetadataArr;
			try {
				var listMetadataCol = com.mirth.connect.server.controllers.ChannelController.getInstance().getMetaDataColumns(messageSummaryObj.channelId);
				var metadataColArr = new Array();
				for (var i = 0; i &lt; listMetadataCol.size(); i++) {
					var metaObj = new Object();
					metaObj.name = listMetadataCol.get(i).getName();
					var mappingName = listMetadataCol.get(i).getMappingName();
					metaObj.value = (message.getConnectorMessages().get(0).getChannelMap().get(mappingName) == undefined) ? null : message.getConnectorMessages().get(0).getChannelMap().get(mappingName).toString(); // para ficarem todos como string
					if (metaObj.value != null) {
						metadataColArr.push(metaObj);
					}
				}
				messageSummaryObj.metaData = metadataColArr;
			} catch (error) {
				logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
				messageSummaryObj.metadata = null;
			}
			
			logMsg.messageSummary = messageSummaryObj;
		
			// ------------------------
			//content
			var contentObj = new Object();
			//content.source
			var sourceObj = new Object();
			//content.source.server
			sourceObj.server = sourceServer == undefined ? null : sourceServer;
			//content.source.status
			sourceObj.status = message.getConnectorMessages().get(0).getStatus().toString();
			//content.source.statusMessage
			sourceObj.statusMessage = auxGetStatusMessage(0);
			//content.source.message
			sourceObj.message = isJSON(message.getConnectorMessages().get(0).getRawData()) ? JSON.parse(message.getConnectorMessages().get(0).getRawData()) : message.getConnectorMessages().get(0).getRawData(); //msg antes de passar pelo preprocessor e antes de ser mudada no Transformer
			//content.source.dataType
			sourceObj.dataType = message.getConnectorMessages().get(0).getRaw().getDataType();
			//content.source.date
			var dateCalendar = message.getConnectorMessages().get(0).getReceivedDate();
			var dateUTC = auxCalendarParse(dateCalendar);
			sourceObj.date = dateUTC;
			//content.source.metadata
			sourceObj.metaData = (sourceMetadataArr == undefined || sourceMetadataArr == null) ? new Array() : sourceMetadataArr;
			//content.source.responseMessage
			if (message.getConnectorMessages().get(0).getResponseData() == null) { // no response
				sourceObj.responseMessage = null;
			} else if (message.getConnectorMessages().get(0).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
				sourceObj.responseMessage = null;
			} else { //houve response 
				sourceObj.responseMessage = isJSON(message.getConnectorMessages().get(0).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(0).getResponseData().getMessage()) : message.getConnectorMessages().get(0).getResponseData().getMessage();
			}
			contentObj.source = sourceObj;
		
			// -------------------------
			//content.destinations
			var destinationsArray = new Array();
			message.getConnectorMessages().get(0).getDestinationIdMap().forEach( (key,value) =&gt; { // value = destinationID, key = destinationName
				value = parseInt(value);
				if (value != 0) { //ignorar Source (metadataId=0)
					//logger.info(&quot;value= &quot; + typeof(value) + &quot; &quot; + value + &quot;;&quot; + &quot;key= &quot; + typeof(key) + &quot; &quot; + key);
					var destinationObj = new Object();
					//content.destinations.server
					if (destinationServerMap != undefined &amp;&amp; destinationServerMap != null) {
						if (destinationServerMap.has(value)) {
							destinationObj.server = destinationServerMap.get(value);
						} else {
							destinationObj.server = null;
						}
					} else {
						destinationObj.server = null;
					}
					//content.destinations.destinationId
					destinationObj.destinationId = value;
					//content.destinations.destinationName
					destinationObj.destinationName = key;
					//content.destinations.status
					destinationObj.status = message.getConnectorMessages().get(value).getStatus().toString();
					//content.destinations.statusMessage
					destinationObj.statusMessage = auxGetStatusMessage(value);
					//content.destinations.message
					try {
						destinationObj.message = isJSON(message.getConnectorMessages().get(value).getEncodedData()) ? JSON.parse(message.getConnectorMessages().get(value).getEncodedData()) : message.getConnectorMessages().get(value).getEncodedData();
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel: destination message --&gt; &quot; + error.toString());
						destinationObj.message = null;
					}
					//logger.info(message.getConnectorMessages().get(value).getMessageContent(ContentType.SENT));
					//content.destinations.dataType
					// destinationObj.dataType = message.getConnectorMessages().get(value).getEncoded().getDataType();
					try {
						var channelController = Packages.com.mirth.connect.server.controllers.ChannelController.getInstance();
						var channel = channelController.getChannelByName(message.getConnectorMessages().get(0).getChannelName().toString());
						var connectors = channel.getDestinationConnectors().toArray();
						// Iterate through the connectors
						for each (var connector in connectors) {
						    // Check if the current connector matches the desired connector name
						    if (connector.getName() == key) {
						    		destinationObj.dataType = connector.getTransformer().getOutboundDataType();
						    		break;
						    }
						}
					} catch (error) {
						logger.info(&quot;sendMsgInfoLogChannel:summary metaData --&gt; &quot; + error.toString());
						destinationObj.dataType = null;
					}
					
					//content.destinations.date
					var dateCalendar = message.getConnectorMessages().get(value).getSendDate();
					if (dateCalendar != null) { // destination QUEUED
						var dateUTC = auxCalendarParse(dateCalendar);
						destinationObj.date = dateUTC;
					} else {
						destinationObj.date = null;
					}

					//content.destinations.metaData
					if (destinationsMetadataMap != undefined &amp;&amp; destinationsMetadataMap != null) {
						if (destinationsMetadataMap.has(value)) {
							destinationObj.metaData = destinationsMetadataMap.get(value) == null ? new Array() : destinationsMetadataMap.get(value);
						} else {
							destinationObj.metaData = new Array();
						}
					} else {
						destinationObj.metaData = new Array();
					}
		
					//content.destinations.responseMessage
					if (message.getConnectorMessages().get(value).getResponseData() == null) { // no response
						destinationObj.responseMessage = null;
					} else if (message.getConnectorMessages().get(value).getResponseData().getMessage() == &quot;&quot;) { // blank response or other not important (like &quot;SENT:message sent successfully)
						destinationObj.responseMessage = null;
					} else { //houve response
						destinationObj.responseMessage = isJSON(message.getConnectorMessages().get(value).getResponseData().getMessage()) ? JSON.parse(message.getConnectorMessages().get(value).getResponseData().getMessage()) : message.getConnectorMessages().get(value).getResponseData().getMessage();
					}
					destinationsArray.push(destinationObj);
				}
			});
			contentObj.destinations = destinationsArray;
			
			logMsg.content = contentObj;
			//logger.info(JSON.stringify(logMsg));

			//send it
			return JSON.stringify(logMsg);

			/*
			var respLogChannel = router.routeMessage(&apos;Logs_WHS-OUT&apos;, JSON.stringify(logMsg));
			if (respLogChannel == null || respLogChannel == undefined) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			} else if (respLogChannel.getStatus() == Status.ERROR) {
				router.routeMessage(&apos;Logs_QUEUE&apos;, JSON.stringify(logMsg));
			}
			*/

		} catch (error) {
			logger.info(&quot;sendMsgInfoLogChannel:geral  --&gt; &quot; + error.toString());
		}
	}	
}

function auxCalendarParse(dateCalendar) {
	var theMonth = dateCalendar.get(dateCalendar.MONTH) +1;
	var theMonthStr = theMonth.toString().padStart(2,&apos;0&apos;);
	var datestr = dateCalendar.get(dateCalendar.YEAR).toString() + theMonthStr + dateCalendar.get(dateCalendar.DAY_OF_MONTH).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.HOUR_OF_DAY).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.MINUTE).toString().padStart(2,&apos;0&apos;) + dateCalendar.get(dateCalendar.SECOND).toString().padStart(2,&apos;0&apos;);
	return DateUtc(datestr,&quot;yyyyMMddHHmmss&quot;);
}

function auxGetStatusMessage(connMetadaId) {
	connMessage = message.getConnectorMessages().get(connMetadaId);
	if (connMessage.getStatus().toString() == &quot;ERROR&quot;) {
		if (connMessage.getProcessingError() != &quot;&quot;) {
			return connMessage.getProcessingError();
		} else if (connMessage.getPostProcessorError() != &quot;&quot;) {
			return connMessage.getPostProcessorError();
		} else if (connMessage.getResponseError() != &quot;&quot;) {
			return connMessage.getResponseError();
		}
	}
	return null;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>a3267879-bfbd-4fd7-8faf-79b8ce019cef</id>
            <name>Mappers</name>
            <revision>8</revision>
            <lastModified>
              <time>1730893909840</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Mapeamentos de dados de varios sistemas externos</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>2fb4b788-fa00-4ba1-9d27-794110d1f1eb</id>
                <name>convertCodeSystems</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792624</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Converte um codesystem para o campo sistemaCodificador do PatientCare, por exemplo se recebermos do sistema externo 
	&quot;https://thom-fhir.apis.sat.jmslab.pt/fhir/CodeSystem/FunctionalHealthUnit&quot; -&gt; THOM@fhir/CodeSystem/FunctionalHealthUnitForSchedule
	garantindo assim que se o URL do sistema externo mudar, a tag na BD mantém-se

	@param {String} URL do sistema codificador
	@return {String} retorna o sistema codificador com a tag que identifica o sistema codificador sem dependencia do URL
*/
function convertCodeSystems(fullUrlCodeSystem) {

	var convertedCodeSystem = null;
	if(fullUrlCodeSystem.includes($(&apos;FhirServer_IMTHOM_Host&apos;))){
		convertedCodeSystem = fullUrlCodeSystem.replace($(&apos;FhirServer_IMTHOM_Host&apos;), &quot;THOM@&quot;).replace(&quot;/&quot;, &apos;&apos;);
	}else if (fullUrlCodeSystem.includes($(&apos;FhirServer_CUFBUS_Namespace&apos;))){
		convertedCodeSystem = fullUrlCodeSystem.replace($(&apos;FhirServer_IMTHOM_Host&apos;), &quot;CUF@&quot;).replace(&quot;/&quot;, &apos;&apos;);
	}

	return convertedCodeSystem;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c97a884e-6f38-45fb-97a8-4d3cef47fa15</id>
                <name>mapCarePlanSurgicalPriority</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788677</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de prioridade da proposta cirurgica (#99034) TODO: A Ser removido quando o PatientCare enviar uma lista (#98331 e #98562)

	@param {String} arg1 - codigo codigo interno PatientCare
	@return {String} return código sistema externo
*/
function mapCarePlanSurgicalPriority(codigo){

    var priority = null;

    switch (codigo) {
        case &quot;1&quot;:
            priority = &quot;routine&quot;;
            break;
        case &quot;2&quot;:
            priority = &quot;asap&quot;;
            break;
        case &quot;5&quot;:
            priority = &quot;urgent&quot;;
            break;
        default:
            priority = &quot;routine&quot;;
    }

    return priority;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f6b5728a-80af-41e5-b1a2-e5b91e032794</id>
                <name>mapCarePlanSurgicalRegime</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791228</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento do regime (Tipo de Cirurgia) da proposta cirurgica (#99034) TODO: A Ser removido quando o PatientCare enviar uma lista (#98331 e #98562)

	@param {String} arg1 - codigo PatientCare
	@return {String} return regime
*/
function mapCarePlanSurgicalRegime(codigo){

    var regime = null;

    switch (codigo) {
        case &quot;2&quot;:
            regime = &quot;2&quot;;
            break;
        case &quot;1&quot;:
            regime = &quot;3&quot;;
            break;
        case &quot;4&quot;:
            regime = &quot;2&quot;;
            break;
        default:
            regime = &quot;&quot;;
    }

    return regime;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>59f5da96-4b1e-4339-9cf7-b028307845bd</id>
                <name>mapDocumentLoinc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792141</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Esta funcao determina qual o código Loinc e respectiva descricao para um documento tendo em conta o titulo, o subtitulo e a descricao da categoria

	@param {String} titulo do docuemnto
	@param {String} subtitulo do documento
	@param {String} descricao da categoria do documento
	@return {Object} return Loinc Object com o código (loinc) e descr (descricao do código)
*/
function mapDocumentLoinc(titulo, subtitulo, categoriaDescr) {
	
	var loinc = null;
	var loincDescr = null;
	var Loinc = new Object();
	
	if (titulo.includes(&apos;Relatório de AP&apos;)){
		loinc = &apos;34878-9&apos;;
		loincDescr = &apos;Emergency medicine Note&apos;;
	}else if (titulo.includes(&apos;Internamento Geral&apos;) &amp;&amp; subtitulo.includes(&apos;Codificadores&apos;)){
		loinc = &apos;75321-0&apos;;
		loincDescr = &apos;Clinical finding&apos;;
	}else if (titulo.includes(&apos;Internamento Geral&apos;)){
		loinc = &apos;101005-7&apos;;
		loincDescr = &apos;Hospitalist Discharge summary&apos;;
	}else if (titulo.includes(&apos;Internamento Cuidados Intensivos&apos;)){
		loinc = &apos;34100-8&apos;;
		loincDescr = &apos;Intensive care unit Consult note&apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; categoriaDescr.includes(&apos;Administrativo&apos;) ){
		loinc = &apos;51851-4&apos;;
		loincDescr = &apos;Administrative note&apos;;
	}else if (titulo.includes(&apos;Atestado de Carta de Condução&apos;)){
		loinc = &apos;104990-7&apos;;
		loincDescr = &apos;Driver license medical fitness certificate&apos;;
	}else if (titulo.includes(&apos;Consentimento&apos;)){
		loinc = &apos;59284-0&apos;;
		loincDescr = &apos;Consent Document&apos;;
	}else if (titulo.includes(&apos;Relatório de Consulta&apos;) &amp;&amp; subtitulo.includes(&apos;Anestesia&apos;)){
		loinc = &apos;34751-8&apos;;
		loincDescr = &apos;Anesthesiology Preoperative evaluation and management note&apos;;
	}else if ([&apos;Relatório de Consulta&apos;, &apos;Declaração&apos;, &apos;Relatório Clínico&apos;].includes(titulo)){
		loinc = &apos;75321-0&apos;;
		loincDescr = &apos;Clinical finding&apos;;
	}else if ([&apos;Requisição de MCDT&apos;, &apos;Relatório de Pequena Cirurgia&apos;, &apos;Relatório de Proposta Cirúrgica&apos;].includes(titulo)){
		loinc = &apos;34765-8&apos;;
		loincDescr = &apos;General medicine note&apos;;
	}else if (titulo.includes(&apos;Relatório de Bloco&apos;)){
		loinc = &apos;11504-8&apos;;
		loincDescr = &apos;Surgical operation note&apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; [&apos;ADSE - Prescrições&apos;, &apos;Prescrições&apos;].includes(categoriaDescr)){
		loinc = &apos;57828-6&apos;;
		loincDescr = &apos;Prescription list document&apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; [&apos;Documentos clínicos&apos;, &apos;Documentos clínicos ADSE&apos;, &apos;Documentos gerais&apos;, &apos;Enfermagem&apos;, &apos;Imagem&apos;,  &apos;Nota de alta&apos;,  &apos;Relatório médico&apos;, &apos;Relatório de alta consulta&apos;, &apos;Requisição de exames&apos;].includes(categoriaDescr)){
		loinc = &apos;34765-8&apos;;
		loincDescr = &apos;General medicine note &apos;;
	}else if (titulo.includes(&apos;Documento digitalizado&apos;) &amp;&amp; categoriaDescr.includes(&apos;Resultados patologia clínica&apos;)){
		loinc = &apos;102009-8&apos;;
		loincDescr = &apos;Clinical pathology Laboratory report&apos;;
	}
	else{
		loinc = &apos;34765-8&apos;;
		loincDescr = &apos;General medicine note&apos;;
	}


	Loinc.code = loinc;
	Loinc.descr = loincDescr;
	
	return Loinc;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>9d089bae-49ee-43dc-9cc9-eeae588eacdf</id>
                <name>mapFuncao</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788812</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de função de profissional do PatientCare para o sistema externo (CUF); 
		1- Médico Relator
		2- Médico Validador
		3- Executante

	@param {String} função PatientCare
	@return {String} return map
*/
// Mapping Professional Role
function mapFuncao(funcaoPC){
	map = null;
	switch (funcaoPC){
		case 1:
			map = &apos;MR&apos;;
			break;
		case 2:
			map = &apos;MV&apos;;
			break;
		default:
			map = &apos;MED&apos;;
			break; 
	}
	return map;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83ba1284-a199-4699-84f7-96ffd17ccd24</id>
                <name>mapHospital</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790427</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de hospital do id PatientCare para o código sistema externo (CUF)

	@param {String} hospitalId
	@return {String} return map
*/
// Mapping HospitalId
function mapHospital(hospitalId){
	map = null;
	switch (hospitalId){
		case &quot;201&quot;:
			map = &apos;HCP&apos;;
			break;
		case &quot;202&quot;:
			map = &apos;HCP&apos;;
			break;
		case &quot;204&quot;:
			map = &apos;HCV&apos;;
			break;
		case &quot;214&quot;:
			map = &apos;CCS&apos;;
			break;
		case &quot;260&quot;:
			map = &apos;CCC&apos;;
			break;
		case &quot;261&quot;:
			map = &apos;OT&apos;;
			break;
		case &quot;286&quot;:
			map = &apos;HCIS&apos;;
			break;
		case &quot;287&quot;:
			map = &apos;CCTV&apos;;
			break;
		case &quot;288&quot;:
			map = &apos;CUFC&apos;;
			break;
		case &quot;289&quot;:
			map = &apos;HCS&apos;;
			break;
		case &quot;290&quot;:
			map = &apos;CCAL&apos;;
			break;
		case &quot;291&quot;:
			map = &apos;CLRA&apos;;
			break;
		case &quot;293&quot;:
			map = &apos;CMFL&apos;;
			break;
		case &quot;294&quot;:
			map = &apos;CNSB&apos;;
			break;
		case &quot;295&quot;:
			map = &apos;HACR&apos;;
			break;
		case &quot;296&quot;:
			map = &apos;CMDS&apos;;
			break;
		case &quot;297&quot;:
			map = &apos;CLAL&apos;;
			break;
		case &quot;298&quot;:
			map = &apos;CMDB&apos;;
			break;
		case &quot;299&quot;:
			map = &apos;CBRR&apos;;
			break;
		case &quot;300&quot;:
			map = &apos;CMTJ&apos;;
			break;
		case &quot;301&quot;:
			map = &apos;CMFR&apos;;
			break;
		case &quot;302&quot;:
			map = &apos;CSDR&apos;;
			break;
		case &quot;303&quot;:
			map = &apos;CUFon&apos;;
			break;
		case &quot;304&quot;:
			map = &apos;CSJM&apos;;
			break;
		case &quot;305&quot;:
			map = &apos;CBLM&apos;;
			break;
		case &quot;306&quot;:
			map = &apos;CALV&apos;;
			break;
		case &quot;307&quot;:
			map = &apos;CINS&apos;;
			break;
		case &quot;308&quot;:
			map = &apos;HCUF&apos;;
			break;
		case &quot;309&quot;:
			map = &apos;CPRD&apos;;
			break;
		default:
			map = &apos;&apos; + hospitalId;
			break; 
	}
	return map;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>01087435-3581-4899-a043-b3b766ffb459</id>
                <name>mapPerfil</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787776</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento de perfil de profissional do PatientCare para o sistema externo (CUF)

	@param {String} Perfil PatientCare
	@return {String} return map
*/
// Mapping Professional Profile
function mapPerfil(perfilPC){
	map = null;
	switch (perfilPC){
		case 1:
			map = &apos;MED&apos;;
			break;
		case 2:
			map = &apos;ENF&apos;;
			break;
		case 3:
			map = &apos;TECD&apos;;
			break;
		default:
			map = &apos;MED&apos;;
			break; 
	}
	return map;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>46e363dc-757f-4f98-9492-37dca92e00dd</id>
                <name>mapSurgicalIncisionLaterality</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791847</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Mapeamento da lateralidade da proposta cirurgica

	@param {String} arg1 - codigo PatientCare
	@return {String} return lateralidade do catálogo THOM
*/
function mapSurgicalIncisionLaterality(codigo){

    var laterality = null;

    switch (codigo) {
        case &quot;N&quot;:
            laterality = &quot;4&quot;;
            break;
        default:
            laterality = codigo;
    }

    return laterality;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>09ed46d2-0cff-406e-a532-a7a3f76a3e0b</id>
            <name>RabbitMQ Helper Function</name>
            <revision>4</revision>
            <lastModified>
              <time>1730914089529</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Functions defined in order to assist reading and writing into a RabbitMQ queue</description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>2f6c45c1-4af0-4466-9ee0-5e23a5a865d9</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>6658ba76-fd79-4ead-8da3-0312e95b66bf</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>f30d9ae9-2ac9-468d-98cc-0a628d90d337</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>04b04fb1-65ea-4e54-b456-d8771882ef84</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>e1072519-3eb3-465f-8465-c45d5ef958a5</id>
                <name>queueDeclareRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790901</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function whose purpose is to make a queue declaration

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {String} inExchangeType - RabbitMQ exchange&apos;s type
	@param {String} inQueueName - RabbitMQ queue&apos;s name
	@param {String} inRoutingKey - exchange&apos;s routing key
	@return no return 
*/
function queueDeclareRMQ(inExchangeName, inExchangeType, inQueueName, inRoutingKey) {
	//if (!inExchangeName || !inExchangeType || !inQueueName) {
		importPackage(com.mirth.basicproducer);
		broker = new BasicConsumer();
		broker.queueDeclare($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inExchangeType, inQueueName, inRoutingKey);
	//}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>17d1585c-595a-495f-bc6d-7f6667b0279c</id>
                <name>readQueueRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789866</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function built for helping to read messages from a RabbitMQ&apos;s exchange

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {Boolean} inAutoAck - boolean for automatic ackowledgment
	@param {Boolean} inCommit - boolean for commiting
	@return {String} return RabbitMQ message&apos;s content
*/
function readQueueRMQ(inExchangeName, inAutoAck, inCommit) {
	//if (!inExchangeName || typeof inAutoAck != &quot;boolean&quot; || typeof inCommit != &quot;boolean&quot;) {
		importPackage(com.mirth.basicproducer);
		
		broker = new BasicConsumer();
		jsonString = broker.getMessage($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inAutoAck, inCommit);
	
		if (jsonString != null){
			mensagem = JSON.parse(jsonString);
			JSON.stringify(mensagem[&apos;message&apos;]);
			return JSON.stringify(mensagem[&apos;message&apos;]);
		}
	//}
	return null;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>0689aac9-a462-4b03-ac79-5cfd1824b5e4</id>
                <name>writeQueueRMQ</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789047</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Function built for helping to write messages to a RabbitMQ&apos;s exchange

	@param {String} inExchangeName - RabbitMQ exchange&apos;s name
	@param {String} inMessageType - custom message type
	@param {String} inMessagePayload - payload to be sent
	@return {Object} return operation result (w/ statusCode and statusText)
*/
function writeQueueRMQ(inExchangeName, inMessageType, inMessagePayload, inRoutingKey) {
	importPackage(com.mirth.basicproducer);
	// Import internal code template
	var getCurrentDateUTC = globalMap.get(&quot;getCurrentDateUTC&quot;);
	
	result = new Object();

	if (!inExchangeName || !inMessageType || !inMessagePayload) {
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;At least one input parameter is a falsy value.&quot;;
		return result;
	} else if (!isJSON(inMessagePayload)) { // ?? confirmar se é sempre JSON que vai ou se pode ir outra coisa
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;Message payload to be sent is not a string in JSON format.&quot;;
		return result;
	}
	
	try{
			
		envelop = new Object();
		
		envelop.MessageId = UUIDGenerator.getUUID();
		envelop.DestinationAddress = &quot;rabbitmq://&quot; + $(&apos;RabbitMqHost&apos;) + &quot;:&quot; + $(&apos;RabbitMqPort&apos;) + &quot;/&quot; + inExchangeName;
		messageType = [&quot;urn:message:&quot; + inMessageType];
		envelop.MessageType = messageType;
		
		envelop.Message = JSON.parse(inMessagePayload);
		
		envelop.SentTime = getCurrentDateUTC();
		
		host = new Object();
		host.MachineName = $(&apos;localAddress&apos;);
		host.ProcessName = channelName;
		
		envelop.Host = host;
	
		try{
			producer = new BasicProducer();
			if (typeof inRoutingKey == &quot;undefined&quot; || inRoutingKey == null) {
				producer.produce($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, JSON.stringify(envelop));	
			} else {
				producer.produceToRoutingKey($(&apos;RabbitMqHost&apos;), parseInt($(&apos;RabbitMqPort&apos;)), $(&apos;RabbitMqUsername&apos;), $(&apos;RabbitMqPassword&apos;), $(&apos;RabbitMqVirtualHost&apos;), inExchangeName, inRoutingKey, JSON.stringify(envelop));
			}
			result.statusCode = &quot;200&quot;;
			result.statusText = JSON.stringify(envelop);
			return result;
		}catch(e){
			result.statusCode = &quot;400&quot;;
			result.statusText = &quot;Fail to produce to rabbitMQ, message will be reprocessed | &quot; + e;
			return result;
		}
		
	}catch(exception) {
		result.statusCode = &quot;500&quot;;
		result.statusText = &quot;Fail to build and communicate message to rabbitMQ (internal error) | &quot; + exception;
		return result;	
	}
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>6df54a97-f980-47f7-a86a-788d32a98a16</id>
            <name>THOM API Helper Functions</name>
            <revision>11</revision>
            <lastModified>
              <time>1730915907338</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>2495fa09-c804-460f-ab9c-4bc5e84b2c1d</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>eaf5aed5-5bf6-4b2e-a2ad-30bc433f0b24</string>
              <string>d30845cb-18c4-490f-ab92-7e9ba3db12e7</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>62c5e1ea-f24b-45d0-af15-a880692d6cef</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>055ba22d-4ed1-40e7-a9a8-a0705d4deb3f</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>d0682251-f226-4caf-9d45-862eb1d78ef0</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>6bfbe323-d3b2-41f5-b831-125601788430</id>
                <name>getAccidentIncapacityTypeByCode</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função que converte, a partir da consulta à API do THOM, o código de catálogo em UUID de THOM para o catálogo AccidentIncapacityType

	@param {String} arg1 -inputCode (código de catálogo)
	@return {String} return Código UUID de THOM
*/

function getAccidentIncapacityTypeByCode(inputCode) {
	var parameters = new Object();
	var httpPostURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CodeSystem/$find-matches&quot;;

	parameters.resourceType = &quot;Parameters&quot;;
	parameters.parameter = [];
	
	parameterSystem = new Object();
	parameterSystem.name = &apos;system&apos;;
	parameterSystem.valueUri = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CodeSystem/AccidentIncapacityType&apos;;
	
	parameters.parameter.push(parameterSystem);

	parameterProperty = new Object();
	parameterProperty.name = &apos;property&apos;;
	parameterProperty.part = [];
	partCode = new Object();
	partCode.name = &apos;code&apos;;
	partCode.valueCode = &apos;code&apos;;
	parameterProperty.part.push(partCode);

	partValue = new Object();
	partValue.name = &apos;value&apos;;
	partValue.valueString = inputCode;
	parameterProperty.part.push(partValue);
	parameters.parameter.push(parameterProperty);


	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpPost(httpPostURL, JSON.stringify(parameters), authHeader);

	var accidentIncapacityType = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var resource = JSON.parse(httpResp.responseMessage);
			if (typeof(resource.parameter) != &apos;undefined&apos;){
				accidentIncapacityType = resource.parameter[0].part[0].valueCoding.code;
			}
		}
	}

	return accidentIncapacityType;	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>db5829bf-47fe-4df9-9275-98545493d366</id>
                <name>GetAccidentInfo</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790265</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dado o id externo de um EpisodeOfcare, consultar no sistema externo se essa informação é referente a um processo de sinistro. Em caso afirmativo, constrói
	a informação do processo de sinistro e faz o seu retorno.

	@param {String} episodeOfCareGUID - id externo de um EpisodeOfcare
	@return {Object} processo de sinistro
*/
function getAccidentInfo(episodeOfCareGUID) {

		var returnMessage = {};

		returnMessage.processoSinistro = {};
		returnMessage.tipoSinistro = null;
		returnMessage.statusCode = &quot;500&quot;;
		returnMessage.statusMessage = &quot;Internal Server Error&quot;;

		var processoSinistro = {};
		 
		 var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/EpisodeOfCare/&quot; + episodeOfCareGUID;
		 	 
		 httpResp = httpGet(httpGetURL,null);
		 
		 if(httpResp.statusCode === &quot;200&quot;){

			if(isJSON(httpResp.responseMessage)){
		 
				episodeOfCare = JSON.parse(httpResp.responseMessage);
				
				var tipo = &quot;&quot;;
				
				if (episodeOfCare &amp;&amp; episodeOfCare.type) {
					episodeOfCare.type.forEach(function(type) {
						if (type.coding) {
							type.coding.forEach(function(coding) {
								if (coding.system &amp;&amp; coding.system.includes(&quot;/CodeSystem/EpisodeOfCareType&quot;)) {
									tipo = coding.code; 
								}
							});
						}
					});
				}
				
				if( tipo === &quot;5&quot;){

					processoSinistro.sinistroIdentificadores = [];
					sinistroIdentificadores = {};
					sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.id&quot;;
					sinistroIdentificadores.codigo = episodeOfCareGUID;

					processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);

					if (episodeOfCare &amp;&amp; episodeOfCare.identifier) {
						sinistroIdentificadores = {};
						sinistroIdentificadores.sistemaCodificador = &quot;EpisodeOfCare.identifier&quot;;
						sinistroIdentificadores.codigo = episodeOfCare.identifier[0].value;

						processoSinistro.sinistroIdentificadores.push(sinistroIdentificadores);
					}

					
					processoSinistro.subsistemaIntRefExt = null;
					processoSinistro.subsistemaDescr = null;
					processoSinistro.ramoDescr = null;
					processoSinistro.ramoIdentificadores = [];
					//var ramoIdentificador = {};
					//ramoIdentificador.codigo = null;
					//ramoIdentificador.sistemaCodificador = null;

					//processoSinistro.ramoIdentificadores.push(ramoIdentificador);

					processoSinistro.numProcesso = null;
					processoSinistro.nomeSegurado = null;
					processoSinistro.tipoSinistradoIdentificadores = [];
					processoSinistro.tipoSinistradoDescr = null;
					processoSinistro.dataAberturaProcesso = null;

					var sinistro  = {};

					sinistro.data = null;
					sinistro.descr = null;
					sinistro.localDescr = null;
					sinistro.transporteChegadaIdentificadores = [];
					
					if(episodeOfCare.period &amp;&amp; episodeOfCare.period.start){
						processoSinistro.dataAberturaProcesso = java.time.OffsetDateTime.parse(episodeOfCare.period.start).toInstant().toString();
					}

					if (episodeOfCare &amp;&amp; episodeOfCare.extension) {
					episodeOfCare.extension.forEach(function(extension1) {
						if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.HealthSystem&quot;)) {
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;HealthSystem&quot;) {
									if (extension2.valueReference.reference){
										var organizationId = extension2.valueReference.reference;
										var organization = getOrganization(organizationId.split(&quot;/&quot;)[1]);
										processoSinistro.subsistemaIntRefExt = organization.intRefExt;
										processoSinistro.subsistemaDescr = organization.name;
									}
									
									
								}
								else if (extension2.url &amp;&amp; extension2.url === &quot;InsuredName&quot;) {
									processoSinistro.nomeSegurado = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;PolicyNumber&quot;) {
									processoSinistro.numBeneficiario = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;ExternalCode&quot;) {
									processoSinistro.numProcesso = extension2.valueString; 
								}
							});
						}else if (extension1.url.includes(&quot;StructureDefinition/EpisodeOfCare.Accident&quot;)) { // ?? ir buscar aqui tipoSinistrado e tipoTransporte
							extension1.extension.forEach(function(extension2) {
								if (extension2.url &amp;&amp; extension2.url === &quot;Date&quot;) {
									sinistro.data = extension2.valueDate + &quot;T00:00:00Z&quot;; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Description&quot;) {
									sinistro.descr = extension2.valueString; 
								}else if (extension2.url &amp;&amp; extension2.url === &quot;Type&quot;) {
									if(extension2.valueCoding &amp;&amp; extension2.valueCoding.system &amp;&amp; extension2.valueCoding.display ){
										var ramoIdentificador = {};
										ramoIdentificador.codigo = extension2.valueCoding.code;
										ramoIdentificador.sistemaCodificador = &quot;THOM&quot;;

										processoSinistro.ramoIdentificadores.push(ramoIdentificador);

										processoSinistro.ramoDescr = extension2.valueCoding.display;
									}
								} else if (extension2.url &amp;&amp; extension2.url === &quot;TransportType&quot;) {
									var transporteIdentificador = {};
									transporteIdentificador.codigo = extension2.valueCoding.code;
									transporteIdentificador.sistemaCodificador = &quot;THOM&quot;;
									sinistro.transporteChegadaIdentificadores.push(transporteIdentificador);

									sinistro.transporteChegadaDescr = extension2.valueCoding.display;
								
								}else if (extension2.url &amp;&amp; extension2.url === &quot;InjuredPartyType&quot;) {
									var tipoSinistradoIdentificador = {};
									tipoSinistradoIdentificador.codigo = extension2.valueCoding.code;
									tipoSinistradoIdentificador.sistemaCodificador = &quot;THOM&quot;;
									processoSinistro.tipoSinistradoIdentificadores.push(tipoSinistradoIdentificador);

									processoSinistro.tipoSinistradoDescr = extension2.valueCoding.display;
								} else if (extension2.url &amp;&amp; extension2.url === &quot;Local&quot;) {
									sinistro.localDescr = extension2.valueString ? extension2.valueString : null;
								}
							});
						}
					});
				}

					
					
					processoSinistro.sinistro = sinistro;
					returnMessage.processoSinistro = processoSinistro;
					returnMessage.tipoSinistro = true;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;OK&quot;;
				
				}else{
					// EpisodeOfCare não é do tipo Sinistro
					
					returnMessage.processoSinistro = null;
					returnMessage.tipoSinistro = false;
					returnMessage.statusCode = &quot;200&quot;;
					returnMessage.statusMessage = &quot;episodeOfCare não é do tipo sinistro&quot;;
				}
			
		 
		 	}else{
				//resposta ao pedido API não é JSON
				returnMessage.processoSinistro = null;
				returnMessage.tipoSinistro = null;
				returnMessage.statusCode = &quot;400&quot;;
				returnMessage.statusMessage = &quot;Formato inválido devolvido pela API&quot;;
		 		
		 	}
			
		 		
		 }else{
		 	// Pedido API não retorna código 200
			returnMessage.processoSinistro = null;
			returnMessage.tipoSinistro = null;
			returnMessage.statusCode = httpResp.statusCode; // &gt;= 400
			returnMessage.statusMessage = &quot;API Error: &quot; + httpResp.statusCode + &apos; - &apos; + (typeof httpResp.statusText != &apos;undefined&apos; ? httpResp.statusText : httpResp.responseMessage) ;
			
		 
		 }

		 return returnMessage;

}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>1b5b099a-483d-425f-ad76-e0141c8f4237</id>
                <name>getFacility</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787810</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Facility (cama, área, local, etc)

	@param {String} - facility name
	@param {String} - isHealthCenter (0 - No; 1- Yes)
	@return {String} return facility UUID
*/
function getFacility(facilityName, isHealthCenter) {

	var boolHealthCenter = (isHealthCenter != null) ? isHealthCenter : 0;
	
	var facilityUUID = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location?name=&quot; + encodeURIComponent(facilityName) + &quot;&amp;isHealthCenter=&quot; + boolHealthCenter, authHeader);
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			resposta.entry.find(function(resource){
				resource.resource.alias.find(function(alias){
					if (alias === String(facilityName) ){
						facilityUUID = resource.resource.id;
					}
				});
			})
	    		
		}
	}

	return facilityUUID;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c71850ca-03ed-4ac8-91b5-88fa6a65b6ca</id>
                <name>getFacilityDescription</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730915907351</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM the information about Location (cama, área, local, etc) and returns the description = Código Serviço

	@param {String} - facility UUID
	@return {String} return facility description
*/
function getFacilityDescription(facilityUUID) {
	
	var facilityDescription = null;
	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	var httpResp = httpGet($(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Location/&quot; + facilityUUID);

	channelMap.put(&quot;GetLocationApi&quot;, httpResp);
	
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			resposta = JSON.parse(httpResp.responseMessage);
			
			facilityDescription = resposta.description;
		}
	}

	return facilityDescription;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5e48274b-22ab-4d11-94f7-1b0bc29c8b72</id>
                <name>getGeneralInfoAppointment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791695</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Appoitment Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} apppointmentRes - o Appointment Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoAppointment(apppointmentRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof apppointmentRes[&apos;supportingInformation&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; apppointmentRes[&apos;supportingInformation&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( apppointmentRes[&apos;supportingInformation&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}
	
	if (typeof apppointmentRes[&apos;extension&apos;] != &apos;undefined&apos;){
		apppointmentRes[&apos;extension&apos;].find(function(extension){
			if (extension[&apos;url&apos;].includes(&apos;Appointment.Encounter&apos;)){
				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.id&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;reference&apos;].split(&quot;/&quot;)[1];
				respObj.episodioIdentificadores.push(episodioIdentificador);

				var episodioIdentificador = {};
				episodioIdentificador.sistemaCodificador = &apos;Encounter.identifier&apos;;
				episodioIdentificador.codigo = extension[&apos;valueReference&apos;][&apos;display&apos;];
				respObj.episodioIdentificadores.push(episodioIdentificador);
			}
		})
	}
      
     ////	Dados do Doente
     for (var j = 0; j &lt; apppointmentRes[&apos;participant&apos;].length; j++){  
		if(apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;reference&apos;].includes(&quot;Patient&quot;)){
			respObj.doente.nomeDoente = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;display&apos;];
		   	respObj.doente.numSequencial = apppointmentRes[&apos;participant&apos;][j][&apos;actor&apos;][&apos;identifier&apos;][&apos;value&apos;]; 
		}
     }
      
	// agendamentoIdentificadores
	if (typeof apppointmentRes[&apos;id&apos;] != &quot;undefined&quot; &amp;&amp; apppointmentRes[&apos;id&apos;] != &quot;&quot;) {
		agendamentoIdentificadoresObj = new Object();
		agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
		agendamentoIdentificadoresObj.codigo = apppointmentRes[&apos;id&apos;];	// nº do agendamento
		respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
	}

	// tipoAgendamentoIdentificadores
	apppointmentRes[&apos;serviceCategory&apos;].find(function(serviceCategory){
		serviceCategory[&apos;coding&apos;].find(function(codingSC){ 
			if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; !codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;) ){
				var objCUF= {};
				objCUF.sistemaCodificador = &quot;CUF@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objCUF.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objCUF);
			} else if (codingSC[&apos;system&apos;].includes(&apos;OperationalHealthUnit&apos;) &amp;&amp; codingSC[&apos;system&apos;].toLowerCase().includes(&apos;thom&apos;)) {
				var objTHOM = {};
				objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
				objTHOM.codigo = codingSC[&apos;code&apos;];
				respObj.tipoAgendamentoIdentificadores.push(objTHOM);
			}
		});
	});

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5df4529e-ac29-482a-a8c8-6b86c2434803</id>
                <name>getGeneralInfoEncounter</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789003</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Code template que tem como objetivo processar um Encounter Resource (FHIR R4) e retirar do mesmo os principais dados relevantes do mesmo - doente, 
	tipoAgendamentoIdentificadores, agendamentoIdentificadores e episodioIdentificadores. A função foi desenvolvida tendo em conta o contrato &quot;Processo Sinistro
	(Interno)&quot;, mas poderá ser igualmente utilizada noutras situações.

	@param {Object} encounterRes - o Encounter Resource (FHIR R4)
	@return {Obj} return contrato &quot;Processo Sinistro (Interno)&quot;
*/
function getGeneralInfoEncounter(encounterRes) {

	var respObj = {};
	respObj.listaIdsEpisodeOfCare = [];
	respObj.doente = {};
	respObj.doente.numProcesso = null;
	respObj.doente.id = null;
	respObj.tipoAgendamentoIdentificadores = [];
	respObj.agendamentoIdentificadores = [];
	respObj.episodioIdentificadores = [];

	if (typeof encounterRes[&apos;episodeOfCare&apos;] != &apos;undefined&apos;){
		for (var s=0; s &lt; encounterRes[&apos;episodeOfCare&apos;].length; s++) {
			respObj.listaIdsEpisodeOfCare.push( encounterRes[&apos;episodeOfCare&apos;][s][&apos;reference&apos;].split(&quot;/&quot;)[1] );
		}
	}

	respObj.doente.numSequencial = encounterRes[&apos;subject&apos;][&apos;identifier&apos;][&apos;value&apos;];
	respObj.doente.nomeDoente = encounterRes[&apos;subject&apos;][&apos;display&apos;];
	
	if (typeof encounterRes[&apos;appointment&apos;] != &apos;undefined&apos;){
    	  	encounterRes[&apos;appointment&apos;].find(function (appointment) {
    	  		// agendamentoIdentificadores
			agendamentoIdentificadoresObj = new Object();
			agendamentoIdentificadoresObj.sistemaCodificador = &quot;Appointment.id&quot;;
			agendamentoIdentificadoresObj.codigo = appointment[&apos;reference&apos;].replace(&apos;Appointment/&apos;, &apos;&apos;);
			respObj.agendamentoIdentificadores.push(agendamentoIdentificadoresObj);
    	  	})
    	}

	// episodioIdentificadores
	episodioIdentificadorObj = new Object();
	episodioIdentificadorObj.sistemaCodificador = &quot;Encounter.id&quot;;
	episodioIdentificadorObj.codigo = encounterRes[&apos;id&apos;];
	respObj.episodioIdentificadores.push(episodioIdentificadorObj);

	// Human-redable ID
    	if (typeof encounterRes[&apos;identifier&apos;] != &apos;undefined&apos;){
		episodioIdentificadorHumanRedableObj = new Object();
		episodioIdentificadorHumanRedableObj.sistemaCodificador = &quot;Encounter.identifier&quot;;
		episodioIdentificadorHumanRedableObj.codigo = encounterRes[&apos;identifier&apos;][0][&apos;value&apos;];
		respObj.episodioIdentificadores.push(episodioIdentificadorHumanRedableObj);
    	}
	
	encounterRes[&apos;extension&apos;].find( function(extension) {
		if (extension[&apos;url&apos;].includes(&quot;Encounter.OperationalHealthUnit&quot;)) {
			var objTHOM = {};
			objTHOM.sistemaCodificador = &quot;THOM@fhir/CodeSystem/OperationalHealthUnit&quot;;
			objTHOM.codigo = extension[&apos;valueCoding&apos;][&apos;code&apos;];
			respObj.tipoAgendamentoIdentificadores.push(objTHOM);
		}
	})

	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7370760c-76cd-4fa8-bb89-34738bfe7995</id>
                <name>getIdProposta</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791423</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função auxiliar genérica com o propósito de extrair o id da proposta.
	com o intuito de extrair da API do sistema externo um determinado CarePlan e extrair o id da proposta cirúrgica associado, se este dado existir

	@param {String} propostaExtId - id externo identificativo da proposta
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;idproposta111&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getIdProposta(appointmentId, appContext) {

	var contextList = [&quot;cuf&quot;]; // contextos de aplicação da função (CUF, ...)
	var respostaObj = {};

	if (contextList.includes(appContext.trim().toLowerCase()) ) {
	
		if (appContext.trim().toLowerCase() == &quot;cuf&quot;) { // CUF

			/*
			if (propostaExtId &amp;&amp; !appointmentId) { //agendamento - extrair id da proposta de PC através do id externo da proposta
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			} else if (!propostaExtId &amp;&amp; appointmentId) { //checkin - 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC através do id externo da proposta
				var propostaExtId = getPropostaExtId_CUF(appointmentId);
				respostaObj = geIdPropostaPC_CUF(propostaExtId);
			}
			*/

			// 1) obter id externo da proposta do Appointment; 2) extrair id da proposta de PC, através do id externo da proposta
			var respostaExtId = getPropostaExtId_CUF(appointmentId);
			if (respostaExtId.statusCode = &quot;200&quot;) {
				respostaObj = geIdPropostaPC_CUF(respostaExtId.responseMessage);
			} else {
				respostaObj = respostaExtId;
			}
		}
	} else {
		respostaObj.statusCode = &quot;500&quot;;
		respostaObj.responseMessage = &quot;Contexto de aplicação inválido&quot;;
	}
	return respostaObj;
}


// -------------- FUNCOES AUXILIARES -----------------------

function geIdPropostaPC_CUF(propostaExtId) { // extrair id da proposta de PC através do id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;CarePlan&quot;, propostaExtId);
	if (resposta.statusCode == &quot;200&quot;) {
		carePlanRes = JSON.parse(resposta.responseMessage);
		var patientCareId = null;
		carePlanRes[&quot;identifier&quot;].find( function(identifier) {
			identifier[&quot;type&quot;][&quot;coding&quot;].find( function(coding) {
				if (coding[&quot;code&quot;] == &quot;PLAC&quot;) {
					patientCareId = identifier[&quot;value&quot;];
				}
			});
		});
		if (patientCareId !== null) {
			result.statusCode = &quot;200&quot;;
			result.responseMessage = idProposta;
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;Id não encontrado como placer identifier no CarePlan com id &quot; + propostaExtId;			
		}
		
	} else {
		result = resposta;
	}
	return result;
}

function getPropostaExtId_CUF(appointmentId) { // obter id externo da proposta
	var result = {};
	resposta = getResourceExternalAPI(&quot;Appointment&quot;, appointmentId);
	if (resposta.statusCode == &quot;200&quot;) {
		appointmentRes = JSON.parse(resposta.responseMessage);
		if (appointmentRes[&apos;supportingInformation&apos;]) {
			var propostaExtId = null;
			appointmentRes[&apos;supportingInformation&apos;].find( function(suppInfo) {
				if (suppInfo[&apos;reference&apos;].includes(&quot;CarePlan&quot;)) {
					propostaExtId = suppInfo[&apos;reference&apos;].replace(&quot;CarePlan/&quot;,&quot;&quot;);
					return ;
				}
			});
			if (propostaExtId !== null) {
				result.statusCode = &quot;200&quot;;
				result.responseMessage = propostaExtId;
			} else {
				result.statusCode = &quot;500&quot;;
				result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
			}
		} else {
			result.statusCode = &quot;500&quot;;
			result.responseMessage = &quot;PropostaExtId não encontrado&quot;;
		}
	} else {
		result = resposta;
	}
	return result;
}


</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>799a6dcb-19c1-4600-8ff8-6b905747eeaa</id>
                <name>GetOrganization</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788084</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} organizationGUID - thom guid fro organization
	@return {Object} return intRefExt
*/
function getOrganization(organizationGUID) {

	var organizationObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Organization/&quot; + organizationGUID;
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			organization = JSON.parse(httpResp.responseMessage);

			organizationObj.intRefExt = organization.alias[0];
			organizationObj.name = organization.name;
			
		}
	}

	return organizationObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>c1c0f8a3-571c-4066-8324-a7b7ba0966db</id>
                <name>getPcSurgicalProposalIdFromThom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792484</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} patientUuid - ID do Paciente de THOM (UUID)
	@param {String} episodOfCareUuid - ID do EpisodeOfCare de THOM (UUID)
	@return {String} return ID sequencial da proposta cirurgica do PatientCare 
*/
function getPcSurgicalProposalIdFromThom(patientUuid, episodOfCareUuid) {
	var pcSurgicalProposal = null;
	var carePlanId = null;

	var authHeader = null
	if ($(&apos;FhirServer_IMTHOM_User&apos;) != null &amp;&amp; $(&apos;FhirServer_IMTHOM_User&apos;) != &apos;&apos;){
		authHeader = apiGenerateBasicAuthHeader($(&apos;FhirServer_IMTHOM_User&apos;), $(&apos;FhirServer_IMTHOM_Pass&apos;));	
	}

	// Get all CarePlan to specific Patient
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/CarePlan?_pretty=true&amp;patient=Patient/&quot; + patientUuid + &apos;&amp;category=https://thom-fhir.apis.sat.jmslab.pt/fhir/CodeSystem/TreatmentRequestType|1&apos;;
	httpResp = httpGet(httpGetURL, authHeader);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			var bundle = JSON.parse(httpResp.responseMessage);
			
			bundle.entry.find(function(bundleResource){
				if (bundleResource.resource.resourceType == &apos;CarePlan&apos; &amp;&amp; typeof(bundleResource.resource.supportingInfo) != &apos;undefined&apos;){
					bundleResource.resource.supportingInfo.find(function(supportingInfo){
						if (supportingInfo.display == episodOfCareUuid){
							carePlanId = bundleResource.resource.id;
							//return;
						}	
					});
				}
			});
		}
	}

	// Get specific CarePlan to get the placer identifier
	if (carePlanId != null){
		var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &apos;/fhir/CarePlan/&apos; + carePlanId;
		httpResp = httpGet(httpGetURL, authHeader);
		//logger.info(&quot;httpResp - &quot; + JSON.stringify(httpResp));
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var carePlan = JSON.parse(httpResp.responseMessage);
				
				carePlan.identifier.find(function(identifiers){
					identifiers.type.coding.find(function(codings){
						if (codings.code == &apos;PLAC&apos;){
							pcSurgicalProposal = identifiers.value;
							return;
						}
					});
				});
			}
		}
	}

	return pcSurgicalProposal;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>82e9fc81-294a-416a-9674-857fb9e5af64</id>
                <name>GetPractitionerByNumMecanografico</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791487</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function get from THOM GUID the information about Organization (HealthCare Subsystem plan)

	@param {String} Practitioner NumMecanografico - numero mecanográfico do médico
	@return {Object} return Practitioner GUID do THOM
*/
function getPractitionerByNumMecanografico(numMecanografico) {
	var respObj = {};
	
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/Practitioner?identifier=&quot; + numMecanografico;
	httpResp = httpGet(httpGetURL,null);
	respObj.statusCode = httpResp.statusCode;

	respObj.response = null;
	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			practitioner = JSON.parse(httpResp.responseMessage);

			if (practitioner.type  == &apos;searchset&apos; &amp;&amp; practitioner.total &gt; 0){
				practitioner.entry.find(function(practitionerResource){
					return practitionerResource.resource.identifier.find(function(identifier){
						
						return identifier.type.coding.find(function(codes){
							if (codes.code == &apos;4&apos;){
								if (numMecanografico == identifier.value){
									respObj.response = practitionerResource.resource;
									return true;
								}
							}
						})
					})
				})	
			}
		}
	} else {
		respObj.response = httpResp.responseMessage != null ? httpResp.responseMessage : httpResp.statusText;
	}
	
	return respObj;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>45bbb451-aab7-4513-8107-952866fd2a95</id>
                <name>getResourceExternalAPI</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789667</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo intuito passa por ir buscar à API externa uma determinada instância de um pretendido resource type

	@param {String} resourceType - FHIR Resource Type (por exemplo, Appointment, Bundle, CarePlan, Encounter, etc.)
	@param {String} resourceExtId - id externo da instância a ser obtida
	@return {Object} return object: sucesso = {&quot;statusCode&quot; : &quot;200&quot;, &quot;responseMessage&quot; : &quot;fullResource&quot;}; erro = {&quot;statusCode&quot; : &quot;500&quot;, &quot;responseMessage&quot; : &quot;error message&quot;}
*/
function getResourceExternalAPI(resourceType, resourceExtId) {
	var respostaObj = {};
	var httpGetURL = $(&apos;FhirServer_IMTHOM_Host&apos;) + &quot;/fhir/&quot; + resourceType + &quot;/&quot; + resourceExtId;	
	httpResp = httpGet(httpGetURL,null);

	if(httpResp.statusCode === &quot;200&quot;){
		if(isJSON(httpResp.responseMessage)){
			respostaObj = httpResp;
		} else {
			respostaObj.statusCode = &quot;500&quot;;
			respostaObj.responseMessage = &quot;Resposta retornada não é JSON&quot;;
		}
	} else {
		respostaObj = httpResp;
	}
	return respostaObj;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.12.0">
            <id>fe90c913-c365-44d1-b309-7c4dae7d9d9a</id>
            <name>Utils</name>
            <revision>6</revision>
            <lastModified>
              <time>1730893909835</time>
              <timezone>Europe/Lisbon</timezone>
            </lastModified>
            <description>Utils functions for Mirth Channels</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>b5023607-041a-48a3-85eb-9b752f389c94</string>
              <string>528a7047-21fa-4282-95e2-763986e9707a</string>
              <string>cadea28b-3af2-4c6c-83bc-26b1b78115b7</string>
              <string>f096ceb5-e1a5-49ae-9f47-5ac4ed19b691</string>
              <string>44158a93-87bc-439e-8847-435216504b85</string>
              <string>e72a98a7-b567-4481-b0c7-331e15894819</string>
              <string>fb4cecdc-4c96-49e2-87f9-a7bf4737e658</string>
              <string>15e9f810-1097-4fd9-a278-2907fd1278d1</string>
              <string>34eedbcf-3e1e-4d80-9693-5ba878b14d32</string>
              <string>1ca5dfdd-e499-4429-8acb-d3a13ec6dba6</string>
              <string>efcbf39d-8190-4a79-afa8-b5d72d557c1b</string>
              <string>71fe6e21-3819-479e-8a05-279eab11254f</string>
              <string>43dbafee-1284-4c70-a98f-4125fc58703d</string>
              <string>f2cdb235-ad9d-4022-8a6d-eaf9be3c4a21</string>
              <string>907c7b06-589b-4058-9e9f-b14f2b505b17</string>
              <string>d4882e77-c72e-482a-9198-62986aa4b5b6</string>
              <string>c694edba-a184-4970-a5a5-b296092b53a0</string>
              <string>a56ad453-99fa-411f-9199-e4997d4321c0</string>
              <string>9ada73e2-b375-4189-ab41-297a0c41d8d8</string>
              <string>f1b1621b-fa2c-4536-b1fc-8dbdfce37640</string>
              <string>b7d8f644-dbb7-437b-a185-15e8be87b837</string>
              <string>3b0d9cc8-67ef-401e-8c00-5b4b31e38735</string>
              <string>3202c7fc-9e15-438e-bcc5-2b93d8894106</string>
              <string>c2f1a32e-c805-48f8-a8bb-1a10e8090869</string>
              <string>157cbb3c-890d-4538-91fb-4ed095d7d911</string>
              <string>91a86f19-1bdf-4293-893a-b9286161df57</string>
              <string>65926965-2044-4d3d-8801-8446e793f27e</string>
              <string>73655e89-5ed7-400e-b7e1-f347b68b5674</string>
              <string>4d2c60b6-7565-4a79-be39-963f7a8ce5de</string>
              <string>06686d9a-5d57-4866-9a32-bc5171e21b65</string>
              <string>a3596087-6fb3-4fa8-b94c-a589692fe2b0</string>
              <string>56bbe97c-e39b-4df1-97aa-43ac53067469</string>
              <string>9288d40b-110a-4c7d-b2cd-cc0e75ec6ba9</string>
              <string>cedb6c14-3928-4e3d-90a3-5afb48e555b8</string>
              <string>14959bcf-b048-4861-90cb-55291df4f6d9</string>
              <string>6e6609bc-c030-4a48-b330-4b9013f03964</string>
              <string>ac03ae37-1f08-43aa-9415-4e2765ab383f</string>
              <string>06a5f02f-49cc-47d7-ad4d-a0da403d4d8a</string>
              <string>0fac608a-4239-45eb-9822-e5d714d7d5db</string>
              <string>33ec9aa4-b0e3-40bc-ab30-c147c53a5ef3</string>
              <string>994d8788-50ee-405b-8352-df158aa18a7b</string>
              <string>b659bd12-2e0f-4999-9361-fd5a1ac040f3</string>
              <string>06d6a876-8422-48fd-9457-247e615c6495</string>
              <string>2348d5d5-6890-4d01-a7e1-669ce57a634a</string>
              <string>ff0c7120-ba45-4697-b9ed-b7021d39ceb5</string>
              <string>8c4173fa-9afe-433f-9198-edfb0915cc4e</string>
              <string>81841764-1ad1-41c7-8592-bd43ef467327</string>
              <string>65e15490-f00e-481d-9154-a1c96a20ea7c</string>
              <string>6f54cabd-6b8d-4abb-a267-e9e3a87e478d</string>
              <string>98336369-69c8-4249-abb8-7479f97c4e58</string>
              <string>da3d8ca9-0818-4b33-aa2a-c8e44f0f2faf</string>
              <string>20796442-06d5-4ea0-bf5a-878bb5ed78f4</string>
              <string>0a822f42-9aee-4b32-a94a-e2b03c1b11d6</string>
              <string>74dbb502-8da5-45ee-90ed-3ccc48afe44c</string>
              <string>76daddc6-2627-46e3-ba2c-94ad896b4afa</string>
              <string>70552e1b-f45c-4b0c-a5aa-857417d1ffd8</string>
              <string>1444a73c-dc51-4920-aa7f-a61429c61356</string>
              <string>e54f794e-b0ff-426a-96fd-414b96c6045b</string>
              <string>f0a28984-fadc-43c2-86ea-170ba882cb7e</string>
              <string>71c369ca-88fd-44ee-bdbb-3cd87932cbfe</string>
              <string>55db65e1-e1c9-4a3b-bc4e-5e0b90a0428a</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>9d0737dd-b85f-4e05-bd6e-b83828e87bdf</id>
                <name>addIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792349</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Aidiciona um objeto relativo a um identificador (Ex: {&quot;sistemaCodificador&quot;:&quot;Appointment.id&quot;, &quot;codigo&quot;: 1111} ) a uma lista de identificadores

	@param {String} sistCodificador - nome do sistemaCodificador (ex: &quot;Appointment.id&quot; ou &quot;Encounter.identifier&quot;)
	@param {String} codigo - value relativo ao sistCodificador
	@param {String} listaAdicionar - listagem já existente (ou vazia/null/undefined) de identificadores
	@return {String} return listaIdentificadores
*/
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	var lista;
	try {
		if (listaAdicionar  &amp;&amp; Array.isArray(listaAdicionar)) {
			lista = JSON.parse( JSON.stringify(listaAdicionar));
		} else {
			logger.info(&quot;excecao1&quot;);
			lista= [];
		}
	} catch (err) {
		logger.info(&quot;excecao2&quot; + err.toString());
		lista =  [];
	}
	/*
	if (! Array.isArray(listaAdicionar)) {
		lista = [];
	} else {
		lista = JSON.parse( JSON.stringify(listaAdicionar));
	}
	*/
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			lista.push(obj);
		}
	}
    	return lista;
	
}

/*
function addIdentificador(sistCodificador, codigo, listaAdicionar) {
	if (! Array.isArray(listaAdicionar)) {
		listaAdicionar = [];
	}
	if (typeof(sistCodificador) == &quot;string&quot; &amp;&amp; sistCodificador != &quot;&quot;) {
		obj = new Object();
		obj.sistemaCodificador = sistCodificador;
		try {
			obj.codigo = codigo.toString();
		} catch (ex1) {
			obj.codigo = &quot;&quot;;
		}
		if (obj.codigo != &quot;&quot;) {
			listaAdicionar.push(obj);
		}
	}
    	return listaAdicionar;
	
}
*/</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>83c82ac5-e364-41b2-99cc-6a4ead5eaa37</id>
                <name>callApi</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793110</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Generic code to implement API call

	@param {String} method - http method
	@param {String} url - http url
	@param {String} user - api username
	@param {String} pass - api password
	@return {Object} return api response
*/
function callApi(method, url, user, pass) {
	
	var url = new Packages.java.net.URL(url);
	var connection = url.openConnection();
	connection.setRequestMethod(method);
	
	try {
	  var responseCode = connection.getResponseCode();
	  if (responseCode === Packages.java.net.HttpURLConnection.HTTP_OK) {	//	200
	    var inputStream = connection.getInputStream();
	    var reader = new Packages.java.io.BufferedReader(new Packages.java.io.InputStreamReader(inputStream));
	    var response = &quot;&quot;; // Inicializa a variável response
	
		    while ((line = reader.readLine()) !== null) {
		      response += line;
		    }      
	        reader.close();	      
		   
		   return JSON.parse(response.toString());
	
	    } else {
	        var errorMessage = &quot;Erro na chamada ao Web Service: &quot; +  url + &quot; Código de resposta: &quot; + responseCode;
	        // Trata os casos em que a chamada ao Web Service não foi bem-sucedida        
	        throw new Error(errorMessage);
	    }
	} catch (e) {
	    // Capturar exceção e retornar status e mensagem de erro
	    var errorStatus = connection.getResponseCode();
//	    var errorMessage = e.getMessage();	    
	    throw new Error(errorStatus);
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fd200634-44bd-483c-97ab-743c373d4b7a</id>
                <name>checkIfExameEspecial</name>
                <revision>2</revision>
                <lastModified>
                  <time>1730739683915</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo objetivo passa por receber um código identificativo de um exame (ou outro serviço qualquer) e retornar se o mesmo é um exame especial ou não. Para
	tal, a função vai à tabela de catálogo da BD verificar se o código lá existe. Caso haja algum problema de acesso à BD, e de forma opcional, a função tenta aceder
	ao endpoint do sistema externo para fazer a verificação de exame especial.

	@param {String} catalogCode - código de catálogo CUF a ser analisado
	@param {String} externalSysCode - código de catálogo do sistema externo a ser analisado
	@return {Object} return object
*/
function checkIfExameEspecial(catalogCode, externalSysCode) {
	var error = false;
	var errorMsg = null;
	var isExameEspecial = null;
	var resposta = new Object();
	
	// Get a database connection 
	var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	var selectQuery = &quot;SELECT * FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; WHERE \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; and ativo = true;&quot;;
	try {
		// Execute the SQL query
		result = dbConn.executeCachedQuery(selectQuery);
		if (result.next() ) { // true
			isExameEspecial = true;
		} else { 
			isExameEspecial = false; // false
		}
	} catch (e) {
		error = true;
		logger.info(&quot;e.toString() = &quot; + e.toString());
		errorMsg = e.toString();
	} finally {
	    // Close the database connection
	    dbConn.close();
	}

	//houve erro no acesso à BD, logo tenta aceder ao endpoint do sistema externo para obter essa informação
	if (isExameEspecial == null &amp;&amp; typeof externalSysCode != &apos;undefined&apos;) {
		var httpPostURL = $(&apos;Transactional_CUFBUS_Host&apos;) + &quot;CodeSystem/Service/$lookup&quot;;
		var body = new Object();
		body.resourceType= &quot;Parameters&quot;;
		body.parameter = [{&quot;name&quot;:&quot;code&quot;,&quot;valueCode&quot;:externalSysCode}];
		var authHeader = null
		if ($(&apos;Transactional_CUFBUS_User&apos;) != null &amp;&amp; $(&apos;Transactional_CUFBUS_Pass&apos;) != &apos;&apos;){
			authHeader = apiGenerateBasicAuthHeader($(&apos;Transactional_CUFBUS_User&apos;), $(&apos;Transactional_CUFBUS_Pass&apos;));  
		}
		httpResp = httpPost(httpPostURL,JSON.stringify(body),authHeader);
		
		if(httpResp.statusCode === &quot;200&quot;){
			if(isJSON(httpResp.responseMessage)){
				var parametersRes = JSON.parse(httpResp.responseMessage);
				try {
					if (parametersRes[&apos;resourceType&apos;] == &quot;Parameters&quot;) {
						var checkExameEspecial = null;
						parametersRes[&apos;parameter&apos;].find( function(parameter) {
							if(parameter[&apos;name&apos;] == &quot;property&quot;) {
								parameter[&apos;part&apos;].find( function(part) {
									if (part[&apos;valueCoding&apos;]) {
										if (part[&apos;valueCoding&apos;][&apos;code&apos;] == $(&apos;Catalogo_ServiceCategory_ExameEspecial&apos;)) {
											isExameEspecial = true;
											checkExameEspecial = true;
											return true;
										}
									}
								})
							}
						})
						if (checkExameEspecial == null) { // não encontrou property de exame especial, logo não é exame especial
							isExameEspecial = false;
						}
					} else {
						error = true;
						errorMsg = &quot;A Parameters Resource was expected as a response&quot;;
					}
				} catch (e2) {
					error = true;
					errorMsg = &quot;Error parsing the response from the endpoint &quot; + e2.toString();
				}
			} else {
				error = true;
				errorMsg = &quot;Endpoint response was not JSON&quot;;
			}
		} else {
			error = true;
			errorMsg = httpResp.statusText ? httpResp.statusText : (httpResp.responseMessage ? httpResp.responseMessage : null);;		
		}
	}
	if (isExameEspecial == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg; //string
	} else {
		resposta.statusCode = &quot;200&quot;;
		resposta.responseMessage = isExameEspecial; // boolean
	}
	return resposta;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b53102c9-17cf-431e-b87a-40d08fe73203</id>
                <name>convertDateToTimeStamp</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793287</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertDateToTimeStamp(date) {

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = &apos;00&apos;;
	var min = &apos;00&apos;;
	var sec = &apos;00&apos;;
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5714586f-45b8-45cb-9af6-fdabfe1bf9b2</id>
                <name>convertTimeStampToDateStr</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398787735</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function receive a date in format &quot;yyyyMMdd&quot; and time &quot;HHmmss&quot; and return a date string in formart &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;

	@param {String} date - date in format &quot;yyyyMMdd&quot;
	@param {String} time - time in format &quot;HHmmss&quot;
	@return {String} return datetime string in format &quot;yyyy-MM-ddTHH:mm:ss.sssZ&quot;
*/
function convertTimeStampToDateStr(date, time) {

	if (time.length &lt;= 5){ // left pad
		time = time.padStart(time.length + 1, &apos;0&apos;);
	}

	var dateYear = date.substring(0, 4);
	var dateMonth = date.substring(4, 6);
	var dateDay = date.substring(6, 8);

	var hour = time.substring(0, 2);
	var min = time.substring(2, 4);
	var sec = time.substring(4, 6);
	
	return dateYear.concat(&apos;-&apos;).concat(dateMonth).concat(&apos;-&apos;).concat(dateDay).concat(&apos;T&apos;).concat(hour).concat(&quot;:&quot;).concat(min).concat(&quot;:&quot;).concat(sec).concat(&quot;.&quot;).concat(&quot;000Z&quot;);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>b4455483-c833-4b4e-adb9-c646cad7bcfe</id>
                <name>DateUtc</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791914</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Convert Date to UTC

	@param {String} date - Date string in format &quot;yyyy-MM-ddTHH:mm:ss+SSSS&quot;
	@return {String} return date in UTC &quot;yyyy-MM-ddTHH:mm:ss+Z&quot;
*/
function DateUtc(date, dateFormat) {

     var formatter_hl7 = new java.text.SimpleDateFormat(dateFormat != null ? dateFormat : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss+SSSS&quot;);
     formatter_hl7.setTimeZone(java.util.TimeZone.getTimeZone($(&apos;serverTimeZone&apos;)));
     var formatter_utc = new java.text.SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&apos;Z&apos;&quot;);
     formatter_utc.setTimeZone(java.util.TimeZone.getTimeZone(&quot;UTC&quot;));
	return formatter_utc.format(formatter_hl7.parse(date));			
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4fbdd7b8-7dd0-4ba3-ba13-0a8990b4513b</id>
                <name>formatDateByMask</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788357</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Formata uma data string num formato pretendido independentemente do formato do input do date string

	@param {String} dateString
	@param {String} mask
	@return {String} return date formarted by mask
*/
function formatDateByMask(dateString, mask) {
    var parts = dateString.split(/[-T:.Z+]/);
    
    var year = parts[0];
    var month = parts[1];
    var day = parts[2];
    var hours = parts[3];
    var minutes = parts[4];
    var seconds = parts[5];
    
    return mask.replace(/yyyy|MM|dd|HH|mm|ss/g, function (match) {
        switch (match) {
            case &quot;yyyy&quot;:
                return year;
            case &quot;MM&quot;:
                return month;
            case &quot;dd&quot;:
                return day;
            case &quot;HH&quot;:
                return hours;
            case &quot;mm&quot;:
                return minutes;
            case &quot;ss&quot;:
                return seconds;
            default:
                return match;
        }
    });
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8cb44e20-4b8a-48e6-93ae-aa905dbf2445</id>
                <name>generate_HLv2_messageId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788478</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função criadora de id de mensagem HL7 v2 (MSH.10.1) único v5

	@return {String} id unico
*/
function generate_HLv2_messageId(tipo_mensagem) {

	var timestamp = new Date().getTime().toString();
	var timestamp_length = timestamp.length;

	//random remaining characters
	remainder = 20-3-timestamp_length;
	
	// Generate a random number between 0... and 9...
	var randomNumber = Math.floor(Math.random() * Math.pow(10,remainder));
	// Convert the number to a string and pad it with leading zeros if needed
	var formattedNumber = randomNumber.toString().padStart(remainder, &apos;0&apos;);
	
	return timestamp + &quot;-&quot; + tipo_mensagem[0] +&quot;-&quot; + formattedNumber;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5b4aa14b-ee5a-464f-b1c8-0917d2ea815c</id>
                <name>getArrayUniqueValues</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792417</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns unique values from an array

	@param {array} array - array
	@return {array} return unique values from array
*/
function getArrayUniqueValues(array) {
	var uniqueArray = [];
	for (var i = 0; i &lt; array.length; i++) {
	    if (uniqueArray.indexOf(array[i]) === -1) {
	        uniqueArray.push(array[i]);
	    }
	}

	return uniqueArray;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5bd7561e-2fb9-41d1-a8e3-fbeabaf8099a</id>
                <name>getEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398793452</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Returns the Encounter Identifer Value by UUID Episode.

	@param {String} encounterId - UUID Episode
	@return {String} return Encounter Identifer Value
*/
function getEncounterIdentifierValueByEncounterId(encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
	    // Define the SQL query to retrieve the value by ID
	    var getValueQuery = &quot;SELECT encounter_identifier_value FROM encounter_external_ids WHERE encounter_id = ?&quot;;
	
	    // Create a prepared statement
	    var pstmt = conn.prepareStatement(getValueQuery);
	    pstmt.setString(1, encounterId);
	
	    // Execute the query and retrieve the result
	    var rs = pstmt.executeQuery();
	
	    if (rs.next()) {
	        var encounterIdentifierValue = rs.getString(&quot;encounter_identifier_value&quot;);
	        res = encounterIdentifierValue;
	    } else {
	        logger.info(&quot;No value found for ID &quot; + encounterId);
	    }
	} catch (e) {
	    logger.error(&quot;Error retrieving value: &quot; + e);
	} finally {
	    // Close the resources
	    if (rs) rs.close();
	    if (pstmt) pstmt.close();
	    if (conn) conn.close();
	}

	return res;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>4814b63d-13ac-4097-86e2-22ca3c24eda4</id>
                <name>getFirstName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789359</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns first name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getFirstName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[0];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>a594fff0-deb4-4d2a-a11e-f39582b42120</id>
                <name>getIdentificador</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791988</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Extrai da listagem de identificadores o &quot;codigo&quot; associado a um pretendido &quot;sistCodificador&quot;

	@param {String} listaIds - listagem de identificadores onde procurar
	@param {String} sistCodificador - sistemaCodificador a ser procurado na listagem de identificadores
	@return {String} return codigo (ou null, caso não exista)
*/
function getIdentificador(listaIds, sistCodificador) {
	var codigo = null;	
	try{  		
	    	listaIds.find(function(elemento) {
	    		if (elemento.sistemaCodificador){
	    			try { // para o caso de algum dos identificadores estar mal definido não impedir que se extraia a informação pretendida
		        		if (elemento.sistemaCodificador.toLowerCase() == sistCodificador.toLowerCase()){
		          		codigo= elemento.codigo;
		          		return true;
		        		}
	    			} catch (err) {
		        		;
		        	}
	      	}
	    });
    	} catch (ex1){
    		codigo = null;
    	}
	return codigo;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f9529854-80ad-450b-ad8a-54a1b63ba9d1</id>
                <name>getLastName</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791292</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function returns last name of a string containing full name

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getLastName(fullName) {
	var names = fullName.split(&apos; &apos;);
	return names[(names.length -1) ];
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6ff6cc61-fa90-455a-b9b4-26f12a870f91</id>
                <name>getLocationExameEspecial</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792555</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Função cujo propósito passa por, dada informação sobre o hospital, o código de catálogo de exame especial e a especialidade, retornar qual a localização no pretendido hospital predestinada para
	a ocorrência de exames especiais dessa mesma especialidade

	@param {String} hospitalINTRefExt - INTRefExt do hospital (CMFL, HTEJO, ...)
	@param {String} catalogCode - código de catálogo do exame especial (10058, 20056, ...)
	@param {String} especialidade - especialidade associada ao exame especial (Cardiologia, Oftalmologia, ...)
	@return {String} return {&quot;servico&quot;: &quot;...&quot;, &quot;area&quot;: &quot;...&quot;, &quot;sala&quot;: &quot;...&quot; &quot;cama&quot;: &quot;...&quot;}
*/
function getLocationExameEspecial(hospitalINTRefExt, catalogCode, especialidade) {
	var error = false;
	var errorMsg = null;
	var resposta = new Object();

	var cama = null;
	var sala = null;
	var area = null;
	var servico = null;
	
	if ( !hospitalINTRefExt || !catalogCode || !especialidade ) {
		error = true;
		errorMsg = &quot;Um dos parametros da função é invalido&quot;;
	} else {
	
		var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
	
		/* var selectQuery = &quot;SELECT cama, sala, area FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE servico = &apos;&quot; + AAAAAAAAA + &quot;&apos; AND especialidade = &apos;&quot;+ especialidade + &quot;&apos; AND id =&quot;
						+ &quot;(SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where intRefExt = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) LIMIT 1) LIMIT 1;&quot;; */
	
		var selectIdLocalizacaoSQL = &quot;SELECT \&quot;idLocalizacao\&quot; FROM \&quot;examesEspeciais\&quot;.\&quot;LigacaoLocalizacaoExamesEspeciais\&quot; WHERE ativo = true AND \&quot;hospitalINTRefExt\&quot; = &apos;&quot; + hospitalINTRefExt + &quot;&apos; AND  \&quot;idExameEspecial\&quot; =&quot;
						+ &quot;(SELECT id FROM \&quot;examesEspeciais\&quot;.\&quot;CD_ExamesEspeciais\&quot; where \&quot;intRefExt\&quot; = &apos;&quot; + catalogCode + &quot;&apos; LIMIT 1) ;&quot;;
	
		var listIdLocalizacao= [];
		try {
			// Execute the SQL query
			result = dbConn.executeCachedQuery(selectIdLocalizacaoSQL); // return javax.sql.rowset.CachedRowSet
			while (result.next()) {
				listIdLocalizacao.push(result.getString(&quot;idLocalizacao&quot;));
			}
		} catch (e) {
			error = true;
			logger.info(&quot;e.toString() = &quot; + e.toString());
			errorMsg = e.toString();
		} finally {
		    // Close the database connection
		    dbConn.close();
		}
		logger.info(&quot;lsita ids localizacao = &quot; +JSON.stringify(listIdLocalizacao));
		

		if (listIdLocalizacao.length == 0){ // não existem idLocalizacao configurados para o exame
			error = true;
			errorMsg = &quot;Não existem idLocalizacao para o código de catálogo &quot; + catalogCode + &quot; e hospital &quot; + hospitalINTRefExt;
		} else {
			var dbConn = DatabaseConnectionFactory.createDatabaseConnection(&apos;org.postgresql.Driver&apos;, &apos;jdbc:postgresql://&apos; + $(&apos;DB_transactions_host&apos;) + &apos;:&apos; + $(&apos;DB_transactions_port&apos;) + &apos;/int_mirth_transaction&apos;, $(&apos;DB_transactions_user&apos;), $(&apos;DB_transactions_pass&apos;));
			if (listIdLocalizacao.length == 1) { //só existe 1 idLocalizacao, logo não interessa a especialidade porque a localizacao do exame especial é sempre no mesmo local
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id = &apos;&quot; + listIdLocalizacao[0] + &quot;&apos;;&quot;;
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}			
			} else { // existe mais do que uma localização, logo vai diferenceiar por especialidade
				ids = &quot;(&quot;;
				for (var i=0; i&lt; listIdLocalizacao.length; i++) {
				    ids += &quot;&apos;&quot; + listIdLocalizacao[i].toString() + &quot;&apos;,&quot;;
				}
				ids = ids.slice(0,-1) + &quot;)&quot;;
				var selectInfosSQL = &quot;SELECT cama, sala, area, servico FROM \&quot;examesEspeciais\&quot;.\&quot;LocalizacaoExamesEspeciais\&quot; WHERE id in &quot; + ids + &quot; and especialidade = &apos;&quot;+especialidade+ &quot;&apos;;&quot;;
				logger.info(selectInfosSQL);
				try {
					// Execute the SQL query
					result = dbConn.executeCachedQuery(selectInfosSQL); // return javax.sql.rowset.CachedRowSet
					while (result.next()) {
						cama = result.getString(&quot;cama&quot;);
						sala = result.getString(&quot;sala&quot;);
						area = result.getString(&quot;area&quot;);
						servico = result.getString(&quot;servico&quot;);
					}
				} catch (e) {
					error = true;
					logger.info(&quot;e.toString() = &quot; + e.toString());
					errorMsg = e.toString();
				} finally {
				    // Close the database connection
				    dbConn.close();
				}	
			}
		}
	}


	if (error == true  ) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro interno getLocationExameEspecial()&quot;;
	} else if ( cama == null &amp;&amp; sala == null &amp;&amp; area == null  &amp;&amp; servico == null) {
		resposta.statusCode = &quot;500&quot;;
		resposta.responseMessage = errorMsg ? errorMsg : &quot;Erro na query à LocalizacaoExamesEspeciais&quot;;
	}else {
		resposta.statusCode = &quot;200&quot;;
		var respObj = new Object();
		respObj.cama = cama;
		respObj.area = area;
		respObj.sala = sala;
		respObj.servico = servico;
		resposta.responseMessage = respObj;
	}
	return resposta;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>903737fd-9a14-45ea-b3cf-2af18ba88142</id>
                <name>getNumMecanograficoById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791627</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getNumMecanograficoById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.numMecanografico;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>6bdd892d-3953-4f68-af96-44ff89434b13</id>
                <name>getPerfilUtilizadorById</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789557</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Funcao usada no canal &quot;CONSUMOS_OUT&quot; dos agendamentos, para obter do array de utilizadores o utilizador por ID de alteracao ou criacao.

	@param {Int} id - Utilizador ID
	@return {String} return NumMecanografico do utilizador presente no array de utilizadores
*/
function getPerfilUtilizadorById(utilizadores, id) {
  for (var i = 0; i &lt; utilizadores.length; i++) {
    var utilizador = utilizadores[i];
    if (utilizador.id === id) {
      return utilizador.perfil;
    }
  }
  return null; // Return null if no matching id is found
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ee58620f-c785-44f2-a4f7-26a8808c4e16</id>
                <name>getPerformerAndDatesRequisicaoMcdts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398788016</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Object} accoesList - ...
	@param {Object} dataCriacaoRequisicao - ...
	@param {Object} utilizadoresList - ...
	@return {Object} return description

	(//R = obrigatório)
	--&gt; Formato esperado acoesList: [
          {
            &quot;utilizadorId&quot; : 12284, //R
            &quot;funcao&quot; : 1, //R
            &quot;data&quot; : &quot;2024-05-08T14:41:51.089035Z&quot; //R
          },
          {
            &quot;utilizadorId&quot; : 12284,
            &quot;funcao&quot; : 3,
            &quot;data&quot; : &quot;2024-05-08T14:27:58.349313Z&quot;
          }
        ]

     --&gt; Formato esperado utilizadoresList: [
	    {
	      &quot;id&quot; : 12284,
	      &quot;login&quot; : &quot;MDPIRES&quot;,
	      &quot;nome&quot; : &quot;Marcos Pires&quot;,
	      &quot;numMecanografico&quot; : &quot;263812278&quot;,
	      &quot;numOrdem&quot; : &quot;123&quot;,
	      &quot;numFuncionario&quot; : null,
	      &quot;perfil&quot; : 1,
	      &quot;intRefExt&quot; : null
	    }
	  ]
	
*/
function getPerformerAndDatesRequisicaoMcdts(accoesList,dataCriacaoRequisicao, utilizadoresList) {

	logger.info(&quot;accoesList - &quot; +JSON.stringify(accoesList));
	logger.info(&quot;dataCriacaoRequisicao - &quot; + JSON.stringify(dataCriacaoRequisicao));
	logger.info(&quot;utilizadoresList - &quot; + JSON.stringify(accoesList));
	returnObj = new Object();
	
	var Performer = Lists.list();
	var occurenceDateTime = null;
	var dataValidacao = null;
	var dataRelato = null;
	for (var j = 0; j &lt; getArrayOrXmlLength(accoesList); j++ ){
	
	      try {
			if (accoesList[j][&apos;funcao&apos;] == 1 /* Relato */){
				dataRelato = accoesList[j][&apos;data&apos;];
			} else if (accoesList[j][&apos;funcao&apos;] == 2 /* Validacao */){
				dataValidacao = accoesList[j][&apos;data&apos;];
			} else {
				occurenceDateTime = dataCriacaoRequisicao;
			}
	       } catch (error) {
	       	logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro nas datas - &quot; + error.toString()); 
	     }
	
		try {
			  Performer.add({
			    function: {
			        coding: [{
			          system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonFunction&quot;),
			          code: newStringOrUndefined( accoesList[j][&apos;funcao&apos;] == 3 /* Executante */ ? mapPerfil(getPerfilUtilizadorById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;])) : mapFuncao(accoesList[j][&apos;funcao&apos;]) )
			        }]
			      },
			    actor: {
			      reference: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? (&quot;Practitioner/&quot; + getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) ) : null),
			      identifier: {
			        use: newStringOrUndefined(&apos;official&apos;),
			        type: {
			          coding: [{
			            system: newStringOrUndefined($(&apos;FhirServer_CUFBUS_Namespace&apos;) + &quot;/fhir/CodeSystem/PersonIdentifierType&quot;),
			            code: newStringOrUndefined(&apos;4&apos;)
			          }],
			          text: newStringOrUndefined(&apos;N.\u00BA mecanogr\u00E1fico&apos;)
			        },
			        value: newStringOrUndefined(accoesList[j][&apos;utilizadorId&apos;] != null ? getNumMecanograficoById(utilizadoresList, accoesList[j][&apos;utilizadorId&apos;]) : null)
			      }
			    }
		  });
		} catch (error2) {
			logger.info(&quot;getPerformerAndDatesRequisicaoMcdts -&gt; erro no performer - &quot; + error2.toString()); 
		}
	}

	returnObj.performer = Performer;
	returnObj.occurenceDateTime = occurenceDateTime;
	returnObj.dataValidacao = dataValidacao;
	returnObj.dataRelato = dataRelato;

	return returnObj;
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8615c472-c47a-48aa-a6e7-45e487c4463f</id>
                <name>getRabbitMqHosts</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398791032</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Void}
	@return {HostsDto} return hosts
*/
function getRabbitMqHosts() {
	// Set RabbitMQ Hosts
	importPackage(com.mirth.rabbitmq.client.dto);
	hosts = [];
	addr = new HostsDto(); // Main Host
	addr.setHost($(&apos;RabbitMqHost&apos;));
	addr.setPort(parseInt($(&apos;RabbitMqPort&apos;)));
	hosts.push(addr);

	return hosts;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>f331cea8-c75e-40d4-83d9-a6779b688c81</id>
                <name>isJSON</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790116</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a string is a valid JSON

	@param {String} string to validate if is JSON
	@return {Boolean} return boolean
*/
function isJSON(str) {
  try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>27f41d50-5bd7-46da-9ad9-203181a92ba9</id>
                <name>isNumeric</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398789613</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to check if a value (string or number) is numeric

	@param {String} value to validate if is numeric
	@return {Boolean} return boolean
*/
function isNumeric(num) {
  if (typeof num == &quot;string&quot;) { 
    return !isNaN(num) &amp;&amp;
           !isNaN(parseFloat(num));
  } else if (typeof num == &quot;number&quot;) {
  	return true;
  } else {
  	return false;
  }
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>5c27a913-629d-4605-9e85-716a84e11410</id>
                <name>MappFrequencies</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790769</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	This function is used to create multiple VAR Segments according Initial Date and CD_PrescricaoFrequencias

	@param {String} freqUni - CD_PrescricaoFrequencias description code
	@param {String} dateInit - Date HL7 string: start prescription date
	@param {String} DateEnd - Date HL7 string: end prescription date
	@return {String} return VAR Segment
*/
function MappFrequencies(freqUni, dateStart, DateEnd) {

	startDate = &quot;20230227115700&quot;;
	hora = startDate.substring(10, 8);
	freqfactor = 8;
	freqUnit = &apos;Dias&apos;;
	
	if (freqUnit == &apos;Hora&apos;){ // x em x horas
	    // calc hours segments
	    if (startDate.length &gt; 0 &amp;&amp; freqfactor &gt; 1){
	        console.log(&quot;running ...&quot;);
	        for (i = 0; i &lt; (24 / freqfactor) ; i++){
	            if ( (parseInt(hora) + (freqfactor * i) - 24) &gt;= 0  ){
	                hora = parseInt(hora) + (freqfactor * i) - 24;
	                break;
	            }
	        }
	        
	        if ((24 / freqfactor) &gt;= 1){
	            for(i = 0; i &lt; (24 / freqfactor); i++){
	                console.log( (parseInt(hora) + (freqfactor * i)).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	            }
	        }else {
	            console.log( parseInt(hora).toString().padStart(2, &quot;0&quot;) + &quot;0000&quot; );
	        }   
	    }
	} else if (freqUnit == &apos;Dias&apos;){ // x em x dias
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Dias da Semanas&apos; || freqUnit == &apos;Por Dia&apos; || freqUnit == &apos;Refeições&apos; || freqUnit == &apos;Dia/Hora&apos;){ // têm de ser criados a cada dia
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;Única&apos;){ // Hora fixa^5
	    console.log( hora.padStart(2, &quot;0&quot;) + &quot;0000&quot;)
	}else if (freqUnit == &apos;SOS&apos;){
	    console.log( null )
	}else if (freqUnit == &apos;Turno Fixo&apos;) {
	    // tenho de pedir ao bruno para ter alguma informação relacionada com os turnos
	}else if (freqUnit == &apos;Contínuo&apos; || freqUnit == &apos;Sem horário&apos;){ // Sem hor\XE1\rio^0
	    console.log( null )
	}
	
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>e5cc4c3f-7233-42b0-8162-b3bec0ab5c94</id>
                <name>setEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398792857</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Setting the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not inserted)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if inserts or false if not
*/
function setEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	
	if (getEncounterIdentifierValueByEncounterId(encounterId) != null) {
		updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId);
	} else { // set/insert
		
		var res = null;
		// Define the PostgreSQL JDBC URL, username, and password
		var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
		var username = $(&apos;DB_transactions_user&apos;);
		var password = $(&apos;DB_transactions_pass&apos;);
		
		// Load the PostgreSQL JDBC driver
		java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
		
		// Establish a database connection
		var conn = java.sql.DriverManager.getConnection(url, username, password);
		
		try {
			// Define the SQL query to retrieve the value by ID
			// var insertQuery = &quot;INSERT INTO episod_ids_mapping (human_episod_id, uuid_episod) VALUES (?,?) ON CONFLICT (uuid_episod) DO NOTHING&quot;; // ?? trocar isto
			var insertQuery = &quot;INSERT INTO encounter_external_ids (encounter_identifier_value, encounter_id) VALUES (?,?)&quot;;
			
			// Create a prepared statement
			var pstmt = conn.prepareStatement(insertQuery);
			pstmt.setString(1, encounterIdentifierValue);
			pstmt.setString(2, encounterId);
			
			// Execute the query and retrieve the result
			var rowsInserted = pstmt.executeUpdate();
		
			if (rowsInserted &gt; 0) {
				   res = true;
			        //logger.info(&quot;New row inserted with value: &quot; + newValue);
			    } else {
			    	   res = false;
			        //logger.info(&quot;No rows inserted.&quot;);
			    }
			} catch (e) {
			    logger.error(&quot;Error inserting row: &quot; + e);
			    res = false;
			} finally {
			    // Close the resources
			    if (pstmt) pstmt.close();
			    if (conn) conn.close();
			}
		
	
		return res;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fdd919fc-4700-4a8f-aafe-cc2f4653f100</id>
                <name>Unescape HL7 Characters</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790479</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>function hexMappingPreProcessor(result) {
	var hexMapping = [
			[/\\x21\\/gi, &quot;!&quot;], [/\\x22\\/gi, &apos;&quot;&apos;], [/\\x23\\/gi, &quot;#&quot;], [/\\x24\\/gi, &quot;$&quot;], [/\\x25\\/gi, &quot;%&quot;], [/\\x26\\/gi, &quot;&amp;&quot;], [/\\x27\\/gi, &quot;&apos;&quot;], [/\\x28\\/gi, &quot;(&quot;], [/\\x29\\/gi, &quot;)&quot;],
			[/\\x2a\\/gi, &quot;*&quot;], [/\\x2b\\/gi, &quot;+&quot;], [/\\x2c\\/gi, &quot;,&quot;], [/\\x2d\\/gi, &quot;-&quot;], [/\\x2e\\/gi, &quot;.&quot;], [/\\x2f\\/gi, &quot;/&quot;], [/\\x30\\/gi, &quot;0&quot;], [/\\x31\\/gi, &quot;1&quot;], [/\\x32\\/gi, &quot;2&quot;],
			[/\\x33\\/gi, &quot;3&quot;], [/\\x34\\/gi, &quot;4&quot;], [/\\x35\\/gi, &quot;5&quot;], [/\\x36\\/gi, &quot;6&quot;], [/\\x37\\/gi, &quot;7&quot;], [/\\x38\\/gi, &quot;8&quot;], [/\\x39\\/gi, &quot;9&quot;], [/\\x3a\\/gi, &quot;:&quot;], [/\\x3b\\/gi, &quot;;&quot;],
			[/\\x3c\\/gi, &quot;&lt;&quot;], [/\\x3d\\/gi, &quot;=&quot;], [/\\x3e\\/gi, &quot;&gt;&quot;], [/\\x3f\\/gi, &quot;?&quot;], [/\\x40\\/gi, &quot;@&quot;], [/\\x41\\/gi, &quot;A&quot;], [/\\x42\\/gi, &quot;B&quot;], [/\\x43\\/gi, &quot;C&quot;], [/\\x44\\/gi, &quot;D&quot;],
			[/\\x45\\/gi, &quot;E&quot;], [/\\x46\\/gi, &quot;F&quot;], [/\\x47\\/gi, &quot;G&quot;], [/\\x48\\/gi, &quot;H&quot;], [/\\x49\\/gi, &quot;I&quot;], [/\\x4a\\/gi, &quot;J&quot;], [/\\x4b\\/gi, &quot;K&quot;], [/\\x4c\\/gi, &quot;L&quot;], [/\\x4d\\/gi, &quot;M&quot;],
			[/\\x4e\\/gi, &quot;N&quot;], [/\\x4f\\/gi, &quot;O&quot;], [/\\x50\\/gi, &quot;P&quot;], [/\\x51\\/gi, &quot;Q&quot;], [/\\x52\\/gi, &quot;R&quot;], [/\\x53\\/gi, &quot;S&quot;], [/\\x54\\/gi, &quot;T&quot;], [/\\x55\\/gi, &quot;U&quot;], [/\\x56\\/gi, &quot;V&quot;],
			[/\\x57\\/gi, &quot;W&quot;], [/\\x58\\/gi, &quot;X&quot;], [/\\x59\\/gi, &quot;Y&quot;], [/\\x5a\\/gi, &quot;Z&quot;], [/\\x5b\\/gi, &quot;[&quot;], [/\\x5c\\/gi, &quot;\\&quot;], [/\\x5d\\/gi, &quot;]&quot;], [/\\x5e\\/gi, &quot;^&quot;], [/\\x5f\\/gi, &quot;_&quot;],
			[/\\x60\\/gi, &quot;`&quot;], [/\\x61\\/gi, &quot;a&quot;], [/\\x62\\/gi, &quot;b&quot;], [/\\x63\\/gi, &quot;c&quot;], [/\\x64\\/gi, &quot;d&quot;], [/\\x65\\/gi, &quot;e&quot;], [/\\x66\\/gi, &quot;f&quot;], [/\\x67\\/gi, &quot;g&quot;], [/\\x68\\/gi, &quot;h&quot;],
			[/\\x69\\/gi, &quot;i&quot;], [/\\x6a\\/gi, &quot;j&quot;], [/\\x6b\\/gi, &quot;k&quot;], [/\\x6c\\/gi, &quot;l&quot;], [/\\x6d\\/gi, &quot;m&quot;], [/\\x6e\\/gi, &quot;n&quot;], [/\\x6f\\/gi, &quot;o&quot;], [/\\x70\\/gi, &quot;p&quot;], [/\\x71\\/gi, &quot;q&quot;],
			[/\\x72\\/gi, &quot;r&quot;], [/\\x73\\/gi, &quot;s&quot;], [/\\x74\\/gi, &quot;t&quot;], [/\\x75\\/gi, &quot;u&quot;], [/\\x76\\/gi, &quot;v&quot;], [/\\x77\\/gi, &quot;w&quot;], [/\\x78\\/gi, &quot;x&quot;], [/\\x79\\/gi, &quot;y&quot;], [/\\x7a\\/gi, &quot;z&quot;],
			[/\\x7b\\/gi, &quot;{&quot;], [/\\x7c\\/gi, &quot;|&quot;], [/\\x7d\\/gi, &quot;}&quot;], [/\\x7e\\/gi, &quot;~&quot;], [/\\xa1\\/gi, &quot;¡&quot;], [/\\xa2\\/gi, &quot;¢&quot;], [/\\xa3\\/gi, &quot;£&quot;], [/\\xa4\\/gi, &quot;¤&quot;], [/\\xa5\\/gi, &quot;¥&quot;],
			[/\\xa6\\/gi, &quot;¦&quot;], [/\\xa7\\/gi, &quot;§&quot;], [/\\xa8\\/gi, &quot;¨&quot;], [/\\xa9\\/gi, &quot;©&quot;], [/\\xaa\\/gi, &quot;ª&quot;], [/\\xab\\/gi, &quot;«&quot;], [/\\xac\\/gi, &quot;¬&quot;], [/\\xa0\\/gi, &quot; &quot;], [/\\xae\\/gi, &quot;®&quot;],
			[/\\xaf\\/gi, &quot;¯&quot;], [/\\xad\\/gi, &quot; &quot;], [/\\xb0\\/gi, &quot;°&quot;], [/\\xb1\\/gi, &quot;±&quot;], [/\\xb2\\/gi, &quot;²&quot;], [/\\xb3\\/gi, &quot;³&quot;], [/\\xb4\\/gi, &quot;´&quot;], [/\\xb5\\/gi, &quot;µ&quot;], [/\\xb6\\/gi, &quot;¶&quot;],
			[/\\xb7\\/gi, &quot;·&quot;], [/\\xb8\\/gi, &quot;¸&quot;], [/\\xb9\\/gi, &quot;¹&quot;], [/\\xba\\/gi, &quot;º&quot;], [/\\xbb\\/gi, &quot;»&quot;], [/\\xbc\\/gi, &quot;¼&quot;], [/\\xbd\\/gi, &quot;½&quot;], [/\\xbe\\/gi, &quot;¾&quot;], [/\\xbf\\/gi, &quot;¿&quot;],
			[/\\xc0\\/gi, &quot;À&quot;], [/\\xc1\\/gi, &quot;Á&quot;], [/\\xc2\\/gi, &quot;Â&quot;], [/\\xc3\\/gi, &quot;Ã&quot;], [/\\xc4\\/gi, &quot;Ä&quot;], [/\\xc5\\/gi, &quot;Å&quot;], [/\\xc6\\/gi, &quot;Æ&quot;], [/\\xc7\\/gi, &quot;Ç&quot;], [/\\xc8\\/gi, &quot;È&quot;],
			[/\\xc9\\/gi, &quot;É&quot;], [/\\xca\\/gi, &quot;Ê&quot;], [/\\xcb\\/gi, &quot;Ë&quot;], [/\\xcc\\/gi, &quot;Ì&quot;], [/\\xcd\\/gi, &quot;Í&quot;], [/\\xce\\/gi, &quot;Î&quot;], [/\\xcf\\/gi, &quot;Ï&quot;], [/\\xd0\\/gi, &quot;Ð&quot;], [/\\xd1\\/gi, &quot;Ñ&quot;],
			[/\\xd2\\/gi, &quot;Ò&quot;], [/\\xd3\\/gi, &quot;Ó&quot;], [/\\xd4\\/gi, &quot;Ô&quot;], [/\\xd5\\/gi, &quot;Õ&quot;], [/\\xd6\\/gi, &quot;Ö&quot;], [/\\xd7\\/gi, &quot;×&quot;], [/\\xd8\\/gi, &quot;Ø&quot;], [/\\xd9\\/gi, &quot;Ù&quot;], [/\\xda\\/gi, &quot;Ú&quot;],
			[/\\xdb\\/gi, &quot;Û&quot;], [/\\xdc\\/gi, &quot;Ü&quot;], [/\\xdd\\/gi, &quot;Ý&quot;], [/\\xde\\/gi, &quot;Þ&quot;], [/\\xdf\\/gi, &quot;ß&quot;], [/\\xe0\\/gi, &quot;à&quot;], [/\\xe1\\/gi, &quot;á&quot;], [/\\xe2\\/gi, &quot;â&quot;], [/\\xe3\\/gi, &quot;ã&quot;],
			[/\\xe4\\/gi, &quot;ä&quot;], [/\\xe5\\/gi, &quot;å&quot;], [/\\xe6\\/gi, &quot;æ&quot;], [/\\xe7\\/gi, &quot;ç&quot;], [/\\xe8\\/gi, &quot;è&quot;], [/\\xe9\\/gi, &quot;é&quot;], [/\\xea\\/gi, &quot;ê&quot;], [/\\xeb\\/gi, &quot;ë&quot;], [/\\xec\\/gi, &quot;ì&quot;],
			[/\\xed\\/gi, &quot;í&quot;], [/\\xee\\/gi, &quot;î&quot;], [/\\xef\\/gi, &quot;ï&quot;], [/\\xf0\\/gi, &quot;ð&quot;], [/\\xf1\\/gi, &quot;ñ&quot;], [/\\xf2\\/gi, &quot;ò&quot;], [/\\xf3\\/gi, &quot;ó&quot;], [/\\xf4\\/gi, &quot;ô&quot;], [/\\xf5\\/gi, &quot;õ&quot;],
			[/\\xf6\\/gi, &quot;ö&quot;], [/\\xf7\\/gi, &quot;÷&quot;], [/\\xf8\\/gi, &quot;ø&quot;], [/\\xf9\\/gi, &quot;ù&quot;], [/\\xfa\\/gi, &quot;ú&quot;], [/\\xfb\\/gi, &quot;û&quot;], [/\\xfc\\/gi, &quot;ü&quot;], [/\\xfd\\/gi, &quot;ý&quot;], [/\\xfe\\/gi, &quot;þ&quot;],
			[/\\xff\\/gi, &quot;ÿ&quot;], [/\\x91\\/gi, &quot;‘&quot;], [/\\x92\\/gi, &quot;’&quot;], [/\\x80\\/gi, &quot;€&quot;], [/\\x83\\/gi, &quot;ƒ&quot;], [/\\x85\\/gi, &quot;…&quot;], [/\\x86\\/gi, &quot;†&quot;], [/\\x87\\/gi, &quot;‡&quot;], [/\\x88\\/gi, &quot;ˆ&quot;],
			[/\\x89\\/gi, &quot;‰&quot;], [/\\x8a\\/gi, &quot;Š&quot;], [/\\x8b\\/gi, &quot;‹&quot;], [/\\x8c\\/gi, &quot;Œ&quot;], [/\\x8e\\/gi, &quot;Ž&quot;], [/\\x93\\/gi, &quot;“&quot;], [/\\x94\\/gi, &quot;”&quot;], [/\\x95\\/gi, &quot;•&quot;], [/\\x96\\/gi, &quot;–&quot;],
			[/\\x97\\/gi, &quot;—&quot;], [/\\x98\\/gi, &quot;˜&quot;], [/\\x99\\/gi, &quot;™&quot;], [/\\x9a\\/gi, &quot;š&quot;], [/\\x9b\\/gi, &quot;›&quot;], [/\\x9c\\/gi, &quot;œ&quot;], [/\\x9e\\/gi, &quot;ž&quot;], [/\\x9f\\/gi, &quot;Ÿ&quot;], [/\\x2079\\/gi, &quot;⁹&quot;],
			[/Ã¡/g, &quot;á&quot;], [/Ã³/g, &quot;ó&quot;], [/Âµ/g, &quot;µ&quot;], [/Ã£/g, &quot;ã&quot;], [/Ã§/g, &quot;ç&quot;], [/Ã©/g, &quot;é&quot;], [/Ãº/g, &quot;ú&quot;], [/Â³/g, &quot;³&quot;], [/\\.br\\/gi, &quot; &quot;], [/  +/g, &apos; &apos;], [/Âº/g, &quot;º&quot;], [/Ã&#x81;/g, &quot;Á&quot;],
			[/Ã¢/g, &quot;â&quot;], [/Ãµ/g, &quot;õ&quot;], [/Ã&#x87;Ã&#x83;/g, &quot;ÇÃ&quot;], [/Ã&#x8d;/g, &apos;Í&apos;], [/Ã&#x87;Ã&#x95;/g, &apos;ÇÕ&apos;], [/Ã&#x93;/g, &quot;Ó&quot;]
			];
	
	for(var i = 0; i &lt; hexMapping.length; i++){
		result = result.replace(hexMapping[i][0], hexMapping[i][1]);
	}

	var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
	for(var i = 0; i &lt; replaceList.length; i++){
		do{
			result = result.replace(replaceList[i][0], replaceList[i][1]);
		}while(result.indexOf(replaceList[i][0]) &gt; -1);
	}
	
	return result;
}



function encodeIsoLatin(result) {
	var hexMapping = [
			/* [&quot;\\x21\\&quot;, &quot;!&quot;], [&quot;\\x3f\\&quot;, &quot;?&quot;], [&quot;\\x2c\\&quot;, &quot;,&quot;], [&quot;\\x3a\\&quot;, &quot;:&quot;], [&quot;\\x2e\\&quot;, &quot;.&quot;], [&quot;\\xa0\\&quot;, &quot; &quot;], [&quot;\\xad\\&quot;, &quot; &quot;], [&quot;\\x2d\\&quot;, &quot;-&quot;], [&quot;\\x5b\\&quot;, &quot;[&quot;], [&quot;\\x5d\\&quot;, &quot;]&quot;], [&quot;\\x5c\\&quot;, &quot;\\&quot;]*/ 
			[&quot;\\x22\\&quot;, /&quot;/g], [&quot;\\x23\\&quot;, /#/g], [&quot;\\x24\\&quot;, /\$/g], [&quot;\\x25\\&quot;, /%/g], [&quot;\\x26\\&quot;, /&amp;/g], [&quot;\\x27\\&quot;, /&apos;/g],
			[&quot;\\x2a\\&quot;, /\*/g], [&quot;\\x2b\\&quot;, /\+/g], [&quot;\\x2f\\&quot;, /\//g], [&quot;\\x3b\\&quot;, /;/g],
			[&quot;\\x3c\\&quot;, /&lt;/g], [&quot;\\x3d\\&quot;, /=/g], [&quot;\\x3e\\&quot;, /&gt;/g], [&quot;\\x40\\&quot;, /@/g], 
			[&quot;\\x5e\\&quot;, /\^/g], [&quot;\\x5f\\&quot;, /_/g], [&quot;\\x60\\&quot;, /`/g], [&quot;\\x7b\\&quot;, /{/g], [&quot;\\x7c\\&quot;, /\|/g], [&quot;\\x7d\\&quot;, /}/g], 
			[&quot;\\x7e\\&quot;, /~/g], [&quot;\\xa1\\&quot;, /¡/g], [&quot;\\xa2\\&quot;, /¢/g], [&quot;\\xa3\\&quot;, /£/g], [&quot;\\xa4\\&quot;, /¤/g], [&quot;\\xa5\\&quot;, /¥/g],
			[&quot;\\xa6\\&quot;, /¦/g], [&quot;\\xa7\\&quot;, /§/g], [&quot;\\xa8\\&quot;, /¨/g], [&quot;\\xa9\\&quot;, /©/g], [&quot;\\xaa\\&quot;, /ª/g], [&quot;\\xab\\&quot;, /«/g], [&quot;\\xac\\&quot;, /¬/g], [&quot;\\xae\\&quot;, /®/g],
			[&quot;\\xaf\\&quot;, /¯/g], [&quot;\\xb0\\&quot;, /°/g], [&quot;\\xb1\\&quot;, /±/g], [&quot;\\xb2\\&quot;, /²/g], [&quot;\\xb3\\&quot;, /³/g], [&quot;\\xb4\\&quot;, /´/g], [&quot;\\xb5\\&quot;, /µ/g], [&quot;\\xb6\\&quot;, /¶/g],
			[&quot;\\xb7\\&quot;, /·/g], [&quot;\\xb8\\&quot;, /¸/g], [&quot;\\xb9\\&quot;, /¹/g], [&quot;\\xba\\&quot;, /º/g], [&quot;\\xbb\\&quot;, /»/g], [&quot;\\xbc\\&quot;, /¼/g], [&quot;\\xbd\\&quot;, /½/g], [&quot;\\xbe\\&quot;, /¾/g], [&quot;\\xbf\\&quot;, /¿/],
			[&quot;\\xc0\\&quot;, /À/g], [&quot;\\xc1\\&quot;, /Á/g], [&quot;\\xc2\\&quot;, /Â/g], [&quot;\\xc3\\&quot;, /Ã/g], [&quot;\\xc4\\&quot;, /Ä/g], [&quot;\\xc5\\&quot;, /Å/g], [&quot;\\xc6\\&quot;, /Æ/g], [&quot;\\xc7\\&quot;, /Ç/g], [&quot;\\xc8\\&quot;, /È/g],
			[&quot;\\xc9\\&quot;, /É/g], [&quot;\\xca\\&quot;, /Ê/g], [&quot;\\xcb\\&quot;, /Ë/g], [&quot;\\xcc\\&quot;, /Ì/g], [&quot;\\xcd\\&quot;, /Í/g], [&quot;\\xce\\&quot;, /Î/g], [&quot;\\xcf\\&quot;, /Ï/g], [&quot;\\xd0\\&quot;, /Ð/g], [&quot;\\xd1\\&quot;, /Ñ/g],
			[&quot;\\xd2\\&quot;, /Ò/g], [&quot;\\xd3\\&quot;, /Ó/g], [&quot;\\xd4\\&quot;, /Ô/g], [&quot;\\xd5\\&quot;, /Õ/g], [&quot;\\xd6\\&quot;, /Ö/g], [&quot;\\xd7\\&quot;, /×/g], [&quot;\\xd8\\&quot;, /Ø/g], [&quot;\\xd9\\&quot;, /Ù/g], [&quot;\\xda\\&quot;, /Ú/g],
			[&quot;\\xdb\\&quot;, /Û/g], [&quot;\\xdc\\&quot;, /Ü/g], [&quot;\\xdd\\&quot;, /Ý/g], [&quot;\\xde\\&quot;, /Þ/g], [&quot;\\xdf\\&quot;, /ß/g], [&quot;\\xe0\\&quot;, /à/g], [&quot;\\xe1\\&quot;, /á/g], [&quot;\\xe2\\&quot;, /â/g], [&quot;\\xe3\\&quot;, /ã/g],
			[&quot;\\xe4\\&quot;, /ä/g], [&quot;\\xe5\\&quot;, /å/g], [&quot;\\xe6\\&quot;, /æ/g], [&quot;\\xe7\\&quot;, /ç/g], [&quot;\\xe8\\&quot;, /è/g], [&quot;\\xe9\\&quot;, /é/g], [&quot;\\xea\\&quot;, /ê/g], [&quot;\\xeb\\&quot;, /ë/g], [&quot;\\xec\\&quot;, /ì/g],
			[&quot;\\xed\\&quot;, /í/g], [&quot;\\xee\\&quot;, /î/g], [&quot;\\xef\\&quot;, /ï/g], [&quot;\\xf0\\&quot;, /ð/g], [&quot;\\xf1\\&quot;, /ñ/g], [&quot;\\xf2\\&quot;, /ò/g], [&quot;\\xf3\\&quot;, /ó/g], [&quot;\\xf4\\&quot;, /ô/g], [&quot;\\xf5\\&quot;, /õ/g],
			[&quot;\\xf6\\&quot;, /ö/g], [&quot;\\xf7\\&quot;, /÷/g], [&quot;\\xf8\\&quot;, /ø/g], [&quot;\\xf9\\&quot;, /ù/g], [&quot;\\xfa\\&quot;, /ú/g], [&quot;\\xfb\\&quot;, /û/g], [&quot;\\xfc\\&quot;, /ü/g], [&quot;\\xfd\\&quot;, /ý/g], [&quot;\\xfe\\&quot;, /þ/g],
			[&quot;\\xff\\&quot;, /ÿ/g], [&quot;\\x91\\&quot;, /‘/g], [&quot;\\x92\\&quot;, /’/g], [&quot;\\x80\\&quot;, /€/g], [&quot;\\x83\\&quot;, /ƒ/g], [&quot;\\x85\\&quot;, /…/g], [&quot;\\x86\\&quot;, /†/g], [&quot;\\x87\\&quot;, /‡/g], [&quot;\\x88\\&quot;, /ˆ/g],
			[&quot;\\x89\\&quot;, /‰/g], [&quot;\\x8a\\&quot;, /Š/g], [&quot;\\x8b\\&quot;, /‹/g], [&quot;\\x8c\\&quot;, /Œ/g], [&quot;\\x8e\\&quot;, /Ž/g], [&quot;\\x93\\&quot;, /“/g], [&quot;\\x94\\&quot;, /”/g], [&quot;\\x95\\&quot;, /•/g], [&quot;\\x96\\&quot;, /–/g],
			[&quot;\\x97\\&quot;, /—/g], [&quot;\\x98\\&quot;, /˜/g], [&quot;\\x99\\&quot;, /™/g], [&quot;\\x9a\\&quot;, /š/g], [&quot;\\x9b\\&quot;, /›/g], [&quot;\\x9c\\&quot;, /œ/g], [&quot;\\x9e\\&quot;, /ž/g], [&quot;\\x9f\\&quot;, /Ÿ/g], [&quot;\\x2079\\&quot;, /⁹/g],
			[&quot;\\x0a\\&quot;, /\n/g], [&quot;\\x0d\\&quot;, /\r/g]
			];
	
	if (result != null){
		for(var i = 0; i &lt; hexMapping.length; i++){
			result = result.replace(hexMapping[i][1], hexMapping[i][0]);
		}		

		var replaceList = [
			[&quot;Ã­&quot;, &quot;í&quot;]
			];
		for(var i = 0; i &lt; replaceList.length; i++){
			do{
				result = result.replace(replaceList[i][1], replaceList[i][0]);
			}while(result.indexOf(replaceList[i][0]) &gt; -1);
		}
	}
	
	return result;
}


function hexMappingReservatedChars(result) {
	var pattern = [[/\\T\\/g, &quot;&amp;&quot; ], [/\\R\\/g, &apos;~&apos;], [/\\E\\/g, &apos;\\&apos;], [/\\F\\/g, &apos;|&apos;], [/\\S\\/g, &apos;^&apos;]];
	
	for(var i = 0; i &lt; pattern.length; i++){
		result = result.replace(pattern[i][0], pattern[i][1]);
	}
	
	return result;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>fde5f48b-6860-49be-a9ab-dfb0e4ba3b97</id>
                <name>updateEncounterIdentifierValueByEncounterId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1730398790008</time>
                  <timezone>Europe/Lisbon</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Updating the Encounter Identifier Value by Encounter Id (returns true: inserted; false: not updated)

	@param {String} encounterIdentifierValue - Encounter Identifier Value
	@param {String} encounterId - Encounter Id
	@return {Boolean} return true if updates or false if not
*/
function updateEncounterIdentifierValueByEncounterId(encounterIdentifierValue, encounterId){
	var res = null;
	// Define the PostgreSQL JDBC URL, username, and password
	var url = &quot;jdbc:postgresql://&quot; + $(&apos;DB_transactions_host&apos;) + &quot;:&quot; + $(&apos;DB_transactions_port&apos;) + &quot;/&quot; + $(&apos;DB_transactions_name&apos;);
	var username = $(&apos;DB_transactions_user&apos;);
	var password = $(&apos;DB_transactions_pass&apos;);
	
	// Load the PostgreSQL JDBC driver
	java.lang.Class.forName(&quot;org.postgresql.Driver&quot;);
	
	// Establish a database connection
	var conn = java.sql.DriverManager.getConnection(url, username, password);
	
	try {
		// Define the SQL query to retrieve the value by ID
		var insertQuery = &quot;UPDATE encounter_external_ids set encounter_identifier_value = ? where encounter_id = ?;&quot;; // ?? trocar
		
		// Create a prepared statement
		var pstmt = conn.prepareStatement(insertQuery);
		pstmt.setString(1, encounterIdentifierValue);
		pstmt.setString(2, encounterId);
		
		// Execute the query and retrieve the result
		var rowsUpdated = pstmt.executeUpdate();
	
		if (rowsUpdated &gt; 0) {
			   res = true;
		        //logger.info(&quot;New row inserted with value: &quot; + newValue);
		    } else {
		    	   res = false;
		        //logger.info(&quot;No rows inserted.&quot;);
		    }
		} catch (e) {
		    logger.error(&quot;Error inserting row: &quot; + e);
		    res = false;
		} finally {
		    // Close the resources
		    if (pstmt) pstmt.close();
		    if (conn) conn.close();
		}
	

	return res;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
  </channels>
</channelGroup>